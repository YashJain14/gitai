[
    {
      "function_name": "install_git_with_homebrew",
      "description": "Installs Git with Homebrew on Mac OS.",
      "parameters": [],
      "command": "brew install git"
    },
    {
      "function_name": "install_git_with_macports",
      "description": "Installs Git with MacPorts on Mac OS.",
      "parameters": [],
      "command": "sudo port selfupdate"
    },
    {
      "function_name": "install_git_on_linux",
      "description": "Installs Git on Linux.",
      "parameters": [],
      "command": "sudo apt-get install git"
    },
    {
      "function_name": "show_git_version",
      "description": "Shows the current version of Git installed.",
      "parameters": [],
      "command": "git --version"
    },
    {
      "function_name": "initialize_git_repository",
      "description": "Initializes a new Git repository in the current directory.",
      "parameters": [],
      "command": "git init"
    },
    {
      "function_name": "initialize_git_repository_in_directory",
      "description": "Creates a new Git repository in the specified directory.",
      "parameters": [
        {
          "param": "directory",
          "param_type": "str",
          "param_description": "The directory path where the new Git repository will be initialized."
        }
      ],
      "command": "git init <directory>"
    },
    {
      "function_name": "clone_repository",
      "description": "Clones a repository from a remote server to your local machine.",
      "parameters": [
        {
          "param": "repository_url",
          "param_type": "str",
          "param_description": "The URL of the repository to clone."
        }
      ],
      "command": "git clone <repository_url>"
    },
    {
      "function_name": "clone_specific_branch",
      "description": "Clones a specific branch from a repository.",
      "parameters": [
        {
          "param": "branch_name",
          "param_type": "str",
          "param_description": "The name of the branch to clone."
        },
        {
          "param": "repository_url",
          "param_type": "str",
          "param_description": "The URL of the repository to clone from."
        }
      ],
      "command": "git clone --branch <branch_name> <repository_url>"
    },
    {
      "function_name": "add_file_to_staging_area",
      "description": "Adds a specific file to the staging area.",
      "parameters": [
        {
          "param": "file",
          "param_type": "str",
          "param_description": "The path of the file to add to the staging area."
        }
      ],
      "command": "git add <file>"
    },
    {
      "function_name": "add_all_files_to_staging_area",
      "description": "Adds all modified and new files to the staging area.",
      "parameters": [],
      "command": "git add ."
    },
    {
      "function_name": "check_repository_status",
      "description": "Shows the current state of your repository, including tracked and untracked files, modified files, and branch information.",
      "parameters": [],
      "command": "git status"
    },
    {
      "function_name": "check_ignored_files",
      "description": "Displays ignored files in addition to the regular status output.",
      "parameters": [],
      "command": "git status --ignored"
    },
    {
      "function_name": "show_changes_in_working_directory",
      "description": "Shows the changes between the working directory and the staging area (index).",
      "parameters": [],
      "command": "git diff"
    },
    {
      "function_name": "show_changes_between_commits",
      "description": "Displays the differences between two commits.",
      "parameters": [
        {
          "param": "commit1",
          "param_type": "str",
          "param_description": "The ID or reference of the first commit."
        },
        {
          "param": "commit2",
          "param_type": "str",
          "param_description": "The ID or reference of the second commit."
        }
      ],
      "command": "git diff <commit1> <commit2>"
    },
    {
      "function_name": "show_changes_between_staging_and_last_commit",
      "description": "Displays the changes between the staging area (index) and the last commit.",
      "parameters": [],
      "command": "git diff --staged"
    },
    {
      "function_name": "show_changes_between_working_directory_and_last_commit",
      "description": "Displays the difference between the current directory and the last commit.",
      "parameters": [],
      "command": "git diff HEAD"
    },
    {
      "function_name": "create_commit",
      "description": "Creates a new commit with the changes in the staging area and opens the default text editor for adding a commit message.",
      "parameters": [],
      "command": "git commit"
    },
    {
      "function_name": "create_commit_with_message",
      "description": "Creates a new commit with the changes in the staging area and specifies the commit message inline.",
      "parameters": [
        {
          "param": "message",
          "param_type": "str",
          "param_description": "The commit message describing the changes."
        }
      ],
      "command": "git commit -m \"<message>\""
    },
    {
      "function_name": "commit_all_changes",
      "description": "Commits all modified and deleted files in the repository without explicitly using git add to stage the changes.",
      "parameters": [],
      "command": "git commit -a"
    },
    {
      "function_name": "add_note_to_object",
      "description": "Creates a new note and associates it with an object (commit, tag, etc.).",
      "parameters": [],
      "command": "git notes add"
    },
    {
      "function_name": "restore_file_to_last_commit_state",
      "description": "Restores the file in the working directory to its state in the last commit.",
      "parameters": [
        {
          "param": "file",
          "param_type": "str",
          "param_description": "The file to restore to the last commit state."
        }
      ],
      "command": "git restore <file>"
    },
    {
      "function_name": "reset_branch_to_commit",
      "description": "Moves the branch pointer to a specified commit, resetting the staging area and the working directory to match the specified commit.",
      "parameters": [
        {
          "param": "commit",
          "param_type": "str",
          "param_description": "The commit to reset the branch to."
        }
      ],
      "command": "git reset <commit>"
    },
    {
      "function_name": "reset_branch_soft",
      "description": "Moves the branch pointer to a specified commit, preserving the changes in the staging area and the working directory.",
      "parameters": [
        {
          "param": "commit",
          "param_type": "str",
          "param_description": "The commit to reset the branch soft to."
        }
      ],
      "command": "git reset --soft <commit>"
    },
    {
      "function_name": "reset_branch_hard",
      "description": "Moves the branch pointer to a specified commit, discarding all changes in the staging area and the working directory.",
      "parameters": [
        {
          "param": "commit",
          "param_type": "str",
          "param_description": "The commit to reset the branch hard to."
        }
      ],
      "command": "git reset --hard <commit>"
    },
    {
      "function_name": "remove_file_from_repository",
      "description": "Removes a file from both the working directory and the repository, staging the deletion.",
      "parameters": [
        {
          "param": "file",
          "param_type": "str",
          "param_description": "The file to remove from the repository."
        }
      ],
      "command": "git rm <file>"
    },
    {
      "function_name": "move_or_rename_file",
      "description": "Moves or renames a file or directory in your Git repository.",
      "parameters": [],
      "command": "git mv"
    },
    {
      "function_name": "commit_with_feature_message",
      "description": "Creates a new commit in a Git repository with a specific message to indicate a new feature commit.",
      "parameters": [
        {
          "param": "message",
          "param_type": "str",
          "param_description": "The message describing the new feature."
        }
      ],
      "command": "git commit -m \"feat: <message>\""
    },
    {
      "function_name": "commit_with_fix_message",
      "description": "Creates a new commit in a Git repository with a specific message to fix bugs in the codebase.",
      "parameters": [
        {
          "param": "message",
          "param_type": "str",
          "param_description": "The message describing the bug fix."
        }
      ],
      "command": "git commit -m \"fix: <message>\""
    },
    {
      "function_name": "commit_with_chore_message",
      "description": "Creates a new commit in a Git repository with a specific message to show routine tasks or maintenance.",
      "parameters": [
        {
          "param": "message",
          "param_type": "str",
          "param_description": "The message describing the chore."
        }
      ],
      "command": "git commit -m \"chore: <message>\""
    },
    {
      "function_name": "commit_with_refactor_message",
      "description": "Creates a new commit in a Git repository with a specific message to change the codebase and improve the structure.",
      "parameters": [
        {
          "param": "message",
          "param_type": "str",
          "param_description": "The message describing the refactor."
        }
      ],
      "command": "git commit -m \"refactor: <message>\""
    },
    {
      "function_name": "commit_with_docs_message",
      "description": "Creates a new commit in a Git repository with a specific message to change the documentation.",
      "parameters": [
        {
          "param": "message",
          "param_type": "str",
          "param_description": "The message describing the documentation change."
        }
      ],
      "command": "git commit -m \"docs: <message>\""
    },
    {
      "function_name": "commit_with_style_message",
      "description": "Creates a new commit in a Git repository with a specific message to change the styling and formatting of the codebase.",
      "parameters": [
        {
          "param": "message",
          "param_type": "str",
          "param_description": "The message describing the style change."
        }
      ],
      "command": "git commit -m \"style: <message>\""
    },
    {
      "function_name": "commit_with_test_message",
      "description": "Creates a new commit in a Git repository with a specific message to indicate test-related changes.",
      "parameters": [
        {
          "param": "message",
          "param_type": "str",
          "param_description": "The message describing the test change."
        }
      ],
      "command": "git commit -m \"test: <message>\""
    },
    {
      "function_name": "commit_with_performance_message",
      "description": "Creates a new commit in a Git repository with a specific message to indicate performance-related changes.",
      "parameters": [
        {
          "param": "message",
          "param_type": "str",
          "param_description": "The message describing the performance change."
        }
      ],
      "command": "git commit -m \"perf: <message>\""
    },
    {
      "function_name": "commit_with_ci_message",
      "description": "Creates a new commit in a Git repository with a specific message to indicate continuous integration (CI) system-related changes.",
      "parameters": [
        {
          "param": "message",
          "param_type": "str",
          "param_description": "The message describing the CI change."
        }
      ],
      "command": "git commit -m \"ci: <message>\""
    },
    {
      "function_name": "commit_with_build_message",
      "description": "Creates a new commit in a Git repository with a specific message to indicate changes related to the build process.",
      "parameters": [
        {
          "param": "message",
          "param_type": "str",
          "param_description": "The message describing the build change."
        }
      ],
      "command": "git commit -m \"build: <message>\""
    },
    {
      "function_name": "commit_with_revert_message",
      "description": "Creates a new commit in a Git repository with a specific message to indicate changes related to reverting a previous commit.",
      "parameters": [
        {
          "param": "message",
          "param_type": "str",
          "param_description": "The message describing the revert change."
        }
      ],
      "command": "git commit -m \"revert: <message>\""
    },
    {
      "function_name": "list_branches",
      "description": "Lists all branches in the repository.",
      "parameters": [],
      "command": "git branch"
    },
    {
      "function_name": "create_branch",
      "description": "Creates a new branch with the specified name.",
      "parameters": [
        {
          "param": "branch_name",
          "param_type": "str",
          "param_description": "The name of the new branch to create."
        }
      ],
      "command": "git branch <branch_name>"
    },
    {
      "function_name": "delete_branch",
      "description": "Deletes the specified branch.",
      "parameters": [
        {
          "param": "branch_name",
          "param_type": "str",
          "param_description": "The name of the branch to delete."
        }
      ],
      "command": "git branch -d <branch_name>"
    },
    {
      "function_name": "list_all_branches",
      "description": "Lists all local and remote branches in the repository.",
      "parameters": [],
      "command": "git branch -a"
    },
    {
      "function_name": "list_remote_branches",
      "description": "Lists all remote branches in the repository.",
      "parameters": [],
      "command": "git branch -r"
    },
    {
      "function_name": "switch_to_branch",
      "description": "Switches to the specified branch.",
      "parameters": [
        {
          "param": "branch_name",
          "param_type": "str",
          "param_description": "The name of the branch to switch to."
        }
      ],
      "command": "git checkout <branch_name>"
    },
    {
      "function_name": "create_and_switch_to_branch",
      "description": "Creates a new branch with the specified name and switches to it.",
      "parameters": [
        {
          "param": "new_branch_name",
          "param_type": "str",
          "param_description": "The name of the new branch to create and switch to."
        }
      ],
      "command": "git checkout -b <new_branch_name>"
    },
    {
      "function_name": "discard_changes_in_file",
      "description": "Discards changes made to the specified file and reverts it to the version in the last commit.",
      "parameters": [
        {
          "param": "file",
          "param_type": "str",
          "param_description": "The file to discard changes for."
        }
      ],
      "command": "git checkout -- <file>"
    },
    {
      "function_name": "merge_branch_into_current",
      "description": "Merges the specified branch into the current branch.",
      "parameters": [
        {
          "param": "branch_name",
          "param_type": "str",
          "param_description": "The name of the branch to merge into the current branch."
        }
      ],
      "command": "git merge <branch_name>"
    },
    {
      "function_name": "show_commit_history",
      "description": "Displays the commit history of the current branch.",
      "parameters": [],
      "command": "git log"
    },
    {
      "function_name": "show_branch_commit_history",
      "description": "Displays the commit history of the specified branch.",
      "parameters": [
        {
          "param": "branch_name",
          "param_type": "str",
          "param_description": "The name of the branch to show the commit history for."
        }
      ],
      "command": "git log <branch_name>"
    },
    {
      "function_name": "show_file_commit_history",
      "description": "Displays the commit history of a file, including its renames.",
      "parameters": [
        {
          "param": "file",
          "param_type": "str",
          "param_description": "The file to show the commit history for."
        }
      ],
      "command": "git log --follow <file>"
    },
    {
      "function_name": "show_commit_history_all_branches",
      "description": "Displays the commit history of all branches in the repository.",
      "parameters": [],
      "command": "git log --all"
    },
    {
      "function_name": "stash_changes",
      "description": "Stashes the changes in the working directory, allowing you to switch to a different branch or commit without committing the changes.",
      "parameters": [],
      "command": "git stash"
    },
    {
      "function_name": "list_stashes",
      "description": "Lists all stashes in the repository.",
      "parameters": [],
      "command": "git stash list"
    },
    {
      "function_name": "apply_latest_stash",
      "description": "Applies and removes the most recent stash from the stash list.",
      "parameters": [],
      "command": "git stash pop"
    },
    {
      "function_name": "drop_latest_stash",
      "description": "Removes the most recent stash from the stash list.",
      "parameters": [],
      "command": "git stash drop"
    },
    {
      "function_name": "list_tags",
      "description": "Lists all tags in the repository.",
      "parameters": [],
      "command": "git tag"
    },
    {
      "function_name": "create_lightweight_tag",
      "description": "Creates a lightweight tag at the current commit.",
      "parameters": [
        {
          "param": "tag_name",
          "param_type": "str",
          "param_description": "The name of the tag to create."
        }
      ],
      "command": "git tag <tag_name>"
    },
    {
      "function_name": "create_lightweight_tag_at_commit",
      "description": "Creates a lightweight tag at the specified commit.",
      "parameters": [
        {
          "param": "tag_name",
          "param_type": "str",
          "param_description": "The name of the tag to create."
        },
        {
          "param": "commit",
          "param_type": "str",
          "param_description": "The commit to tag."
        }
      ],
      "command": "git tag <tag_name> <commit>"
    },
    {
      "function_name": "create_annotated_tag",
      "description": "Creates an annotated tag at the current commit with a custom message.",
      "parameters": [
        {
          "param": "tag_name",
          "param_type": "str",
          "param_description": "The name of the tag to create."
        },
        {
          "param": "message",
          "param_type": "str",
          "param_description": "The message describing the tag."
        }
      ],
      "command": "git tag -a <tag_name> -m \"<message>\""
    },
    {
      "function_name": "fetch_changes_from_remote",
      "description": "Retrieves changes from a remote repository, including new branches and commits.",
      "parameters": [],
      "command": "git fetch"
    },
    {
      "function_name": "fetch_changes_from_specific_remote",
      "description": "Retrieves changes from the specified remote repository.",
      "parameters": [
        {
          "param": "remote",
          "param_type": "str",
          "param_description": "The name of the remote repository to fetch changes from."
        }
      ],
      "command": "git fetch <remote>"
    },
    {
      "function_name": "fetch_and_prune",
      "description": "Retrieves changes from a remote repository and removes any remote-tracking branches that no longer exist on the remote repository.",
      "parameters": [],
      "command": "git fetch --prune"
    },
    {
      "function_name": "pull_changes_from_remote",
      "description": "Fetches changes from the remote repository and merges them into the current branch.",
      "parameters": [],
      "command": "git pull"
    },
    {
      "function_name": "pull_changes_from_specific_remote",
      "description": "Fetches changes from the specified remote repository and merges them into the current branch.",
      "parameters": [
        {
          "param": "remote",
          "param_type": "str",
          "param_description": "The name of the remote repository to pull changes from."
        }
      ],
      "command": "git pull <remote>"
    },
    {
      "function_name": "pull_changes_with_rebase",
      "description": "Fetches changes from the remote repository and rebases the current branch onto the updated branch.",
      "parameters": [],
      "command": "git pull --rebase"
    },
    {
      "function_name": "push_commits_to_remote",
      "description": "Pushes local commits to the remote repository.",
      "parameters": [],
      "command": "git push"
    },
    {
      "function_name": "push_commits_to_specific_remote",
      "description": "Pushes local commits to the specified remote repository.",
      "parameters": [
        {
          "param": "remote",
          "param_type": "str",
          "param_description": "The name of the remote repository to push commits to."
        }
      ],
      "command": "git push <remote>"
    },
    {
      "function_name": "push_commits_to_branch_of_remote",
      "description": "Pushes local commits to the specified branch of the remote repository.",
      "parameters": [
        {
          "param": "remote",
          "param_type": "str",
          "param_description": "The name of the remote repository."
        },
        {
          "param": "branch",
          "param_type": "str",
          "param_description": "The name of the branch to push commits to."
        }
      ],
      "command": "git push <remote> <branch>"
    },
    {
      "function_name": "push_all_branches_to_remote",
      "description": "Pushes all branches to the remote repository.",
      "parameters": [],
      "command": "git push --all"
    },
    {
      "function_name": "list_remote_repositories",
      "description": "Lists all remote repositories.",
      "parameters": [],
      "command": "git remote"
    },
    {
      "function_name": "add_remote_repository",
      "description": "Adds a new remote repository with the specified name and URL.",
      "parameters": [
        {
          "param": "name",
          "param_type": "str",
          "param_description": "The name of the new remote repository."
        },
        {
          "param": "url",
          "param_type": "str",
          "param_description": "The URL of the new remote repository."
        }
      ],
      "command": "git remote add <name> <url>"
    },
    {
      "function_name": "show_commit_details",
      "description": "Shows the details of a specific commit, including its changes.",
      "parameters": [
        {
          "param": "commit",
          "param_type": "str",
          "param_description": "The ID or reference of the commit to show details for."
        }
      ],
      "command": "git show <commit>"
    },
    {
      "function_name": "revert_commit",
      "description": "Creates a new commit that undoes the changes introduced by the specified commit.",
      "parameters": [
        {
          "param": "commit",
          "param_type": "str",
          "param_description": "The commit to revert."
        }
      ],
      "command": "git revert <commit>"
    },
    {
      "function_name": "revert_commit_no_commit",
      "description": "Undoes the changes introduced by the specified commit, but does not create a new commit.",
      "parameters": [
        {
          "param": "commit",
          "param_type": "str",
          "param_description": "The commit to revert."
        }
      ],
      "command": "git revert --no-commit <commit>"
    },
    {
      "function_name": "rebase_branch",
      "description": "Reapplies commits on the current branch onto the tip of the specified branch.",
      "parameters": [
        {
          "param": "branch",
          "param_type": "str",
          "param_description": "The branch to rebase onto."
        }
      ],
      "command": "git rebase <branch>"
    }
  ]
  