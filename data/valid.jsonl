{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Go to a particular revision\nI cloned a Git repository of a certain project. Can I turn the files to the initial state and when I review the files go to revision 2, 3, 4 ... most recent? I'd like to have an overview of how the project was evolving."}, {"role": "assistant", "content": "Before executing this command, keep in mind that it will leave you in a detached head status.\nUse git checkout <sha1> to check out a particular commit.\nWhere <sha1> is the commit unique number (SHA-1 hash value) that you can obtain with git log.\nHere are some options after you are in the detached head status:\n\nCopy the files or make the changes that you need to a folder outside your Git folder, check out the branch where you need them git checkout <existingBranch> and replace files\nCreate a new local branch git checkout -b <new_branch_name> <sha1>\n\n\nNote: to \"undo\" (return from) the detached head state, simply use:\ngit checkout <branch> (where <branch> is e.g. master)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Do I need authentication as well as signing keys on Github?\n\nGithub allows users to add SSH keys in order to access the repositories but it doesn't do a great job of explaining what the difference is between an \"Authentication Key\" and a \"Signing Key\" Specific questions I would like to know are:\n\nDo I need both Types of keys in order to access the repository?\n\nIf I only add one key and that key is a \"Singing Key\" will that also allow me to simply check out the code?  in other words does a Signing Key also do authentication?\n\nIf I would like to do both Authentication and Signing, do those keys have to be different from one another or can I use the exact same key for both.\n\nIf those keys have to be different from one another, how do I configure Git on my server to send both keys, as I presume that would be necessary right?"}, {"role": "assistant", "content": "The difference between signing keys and authentication keys is that signing keys can be used to sign Git commits and authentication keys can be used to access repositories.  If you add a key as only one type, then it can be used only for that purpose, but the same key may be added for both.\nIf you just want to access repositories, then all you need is an authentication key.  If you want to use an SSH key to verify that your commits have not been modified or tampered with and that they did indeed come from you (and not someone who forged your name and email in commits), then you'd want a signing key (plus a recent version of Git).\nThe reason they're different sets is that they have different security models and so it makes sense to allow people to set different keys for different purposes if they so choose.  This is also in line with best practices for cryptographic key management."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Gitlab CI pipeline - continue to next stage only on a certain condition\n\nI am trying to build a Gitlab pipeline that is made up of 4 jobs. The stages I have are:\nstages:\n- compare\n- build\n- test\n- deploy\n\nThe compare stage is taking a dump from an API on another server, comparing it to the same dump from the last successful pipeline run (it's made available as an artifact) then comparing the two.\nIf there is any difference I would like the pipeline to move onto the next stage, if there is no difference then I would like it to exit gracefully. \nI have it working but rather than exiting gracefully if there are no differences it fails and the pipeline is marked as failed, here is how it looks.\n\nHere is the important code from my .gitlab-ci.yaml (with some identifying information removed )\nGet_inventory_dump:\n  stage: compare  \n  only:\n    - schedules\n  script: \n    - 'curl -k --output \"previous-inventory.json\" --header \"PRIVATE-TOKEN: $user_token\" \"https://url/to/get/artifact/from/last/successful/run\"'\n    - python3 auto_config_scripts/dump_device_inventory_api_to_json.py -p $pass -o /inventory.json -u https://url/for/inventory/dump -y\n    - /usr/bin/cmp previous-inventory.json inventory.json && echo \"No Change in inventory since last successful run\" && exit 1 || echo \"Inventory has changed since last run, continue\" && exit 0\n  artifacts:\n    when: on_success\n    expire_in: 4 weeks\n    paths:\n     - inventory.json\n\nGenerate_icinga_config:\n  stage: build\n  only:\n    - schedules\n  when: on_success\n  script: \n\nEverything is behaving as I would expect but I feel like there is a better way to do this. \nIs there a way, if the comparison is the same to simply skip the next stages of the pipeline but still have the pipeline completed as 'passed' rather than 'failed'?"}, {"role": "assistant", "content": "There are two solutions I can think of. Unfortunately, they either come slightly confusing UI behavior or you have to adapt all jobs.\nJob attributes like only or changes are only concerned with the state of or the files of the git repository (see https://docs.gitlab.com/ee/ci/yaml/) and therefore not of use here as the file is only created during CI and not part of the repository.\nSolution 1: You can allow_failure: true to the first job. This will mark the pipeline as successful despite the job failing and subsequent jobs will not be executed as the first job did not succeed. The drawback is that when you investigate the pipeline there will be an exclamation mark instead of a green check for this job.\nSolution 2: Instead of failing the first job when there are no changes the inventory.json file is removed. And all subsequent jobs directly terminate with exit code 0 when the file doesn't exist. Note that this only works because inventory.json is marked as an artifact."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Multi-user Github Pull Requests\n\nIs it possible to amend a pull request that someone else has started?\nAssume I maintain project X, and User A has sent me a pull request.  There's some things I want changed before merging and can quickly do them myself.  How can I do this simply and keep it all within one PR?\nIs this even possible?"}, {"role": "assistant", "content": "You can do it like this:\nIn your repo,\ngit checkout -b new-branch\n\nThen pull User A's commits into your new-branch:\ngit pull git://github.com/[User A]/[project-name].git\n\nAfter that, you can change it whatever you like in the new-branch. And when you test and satisfy with your changes, you can merge it into your master branch:\ngit checkout master\ngit merge new-branch\n\nOK, now you have your code with User A and your changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "BitBucket Git Error: did not send all necessary objects\nI am using bitbucket and git to revision a project I am currently working on. Today I tried to pull down the latest working copy of the project but was met with an error that I cant seem to find any solution to.\n$ git pull\nPassword for 'bitbucket.org':\nremote: Counting objects: 65, done.\nremote: Compressing objects: 100% (31/31) done.\nremote: Total 34 (delta 19), reused 0 (delta 0)\nUpacking objects: 100% (34/34), done.\nfatal: bad object 4324324....(etc object number)\nerror: https://bitbucket.org/myusername/myproject.git did not send all necessary objects\n\nI have searched for this error \"did not send all necessary objects\" but there doesn't seem to be any documentation regarding this issue can anyone help please?"}, {"role": "assistant", "content": "I had this issue, related to a branch. Following @fnagel's similar approach, I just deleted the following folder, and it fixed the issue:\n.git/refs/remotes/origin/<name of branch>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -P  --perl-regexp"}, {"role": "assistant", "content": "Use Perl-compatible regular expressions for patterns. Support for these types of regular expressions is an optional\ncompile-time dependency. If Git wasn\u2019t compiled with support for them\nproviding this option will cause it to die."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub: Permission denied (publickey). fatal: Could not read from remote repository\nI\u00b4m having trouble with GitHub. I\u00b4ve playing around with a remote repository of Git.\nWhen I now try to make any changes to the remote directory, i.e.\ngit remote show origin\n\nor\ngit push -u origin master\n\nI get this error\n\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n\n\nPlease make sure you have the correct access rights\nand the repository exists.\nUlrichs-MacBook-Pro:coredatatest ulrichheinelt$ git push -u origin master\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n\nI would be happy, when I could start again with a new (empty) remote directory. Or is there a way, to fix this error?\nThis are my first steps with GitHub, started yesterday...\nEdit 1\nmy settings at https://github.com/UlliH/CoreDataTest/settings\n...\nEdit 2\ntoo early happy :-(\nAfter setting the SSH and GPG keys, the errors are still the same. :-/\nEdit 3\nI think that's right so, but still the same..."}, {"role": "assistant", "content": "Generate SSH key using ssh-keygen -t rsa -b 4096 -C \"your email\".\nCopy the output of cat ~/.ssh/id_rsa.pub to your clipboard\nPaste the above-copied output to the form at https://github.com/settings/ssh/new\nThen go ahead to retry the operation that generated the initial fatal error.\n\nUpdate: If you are still facing \"ssh: connect to host github.com port 22: Connection timed out\", then follow the below steps.\nCheck the connection, mostly it will time out\n$ ssh -T [email\u00a0protected]\nssh: connect to host github.com port 22: Connection timed out\n\nCheck the same by providing optional param port\n$ ssh -T -p 443 [email\u00a0protected]\nHi <user_name>! You've successfully authenticated, but GitHub does not provide shell access.\n\nUpdate the SSH settings\n$ vim ~/.ssh/config\n# Add github in the know hosts\nHost github.com\n  Hostname ssh.github.com\n  Port 443\n\nCheck the connection, mostly it will connect this time\n$ ssh -T [email\u00a0protected]\nHi <user_name>! You've successfully authenticated, but GitHub does not\nprovide shell access."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Do I need Git to use Github in JetBrains IntelliJ IDEA?\nJetBrains IntelliJ IDEA has 2 plugins: Git and Github. Do I need to install Git from http://git-scm.com on my local windows machine in order to upload my files to GitHub through IntelliJ IDEA?"}, {"role": "assistant", "content": "I just came up against the same problem.\nIf you choose not to do the full PATH (environment variable) integration when install git (on Windows) you'll need to tell IntelliJ where to find git.cmd; you can do this in\nSettings > Project Settings > Version Control > VCSs > Git\n\nExample in my case it was portable git looks like this on windows\n\nC:\\Users\\user\\AppData\\Local\\GitHub\\PortableGit_d7effa1a4a322478cd29c826b52a0c118ad3db11\\cmd\\git.exe"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.procReceiveRefs"}, {"role": "assistant", "content": "This is a multi-valued variable that defines reference prefixes\nto match the commands in receive-pack .  Commands matching the\nprefixes will be executed by an external hook \"proc-receive\",\ninstead of the internal execute_commands function.  If this\nvariable is not defined, the \"proc-receive\" hook will never be\nused, and all commands will be executed by the internal execute_commands function. For example, if this variable is set to \"refs/for\", pushing to reference\nsuch as \"refs/for/master\" will not create or update a reference named\n\"refs/for/master\", but may create or update a pull request directly by\nrunning the hook \"proc-receive\". Optional modifiers can be provided in the beginning of the value to filter\ncommands for specific actions: create (a), modify (m), delete (d).\nA ! can be included in the modifiers to negate the reference prefix entry.\nE.g.: git config --system --add receive.procReceiveRefs ad:refs/heads\ngit config --system --add receive.procReceiveRefs !:refs/heads"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to skip the commit message step in \"git commit --amend\"? [duplicate]\nThis question already has answers here:\n                                \n                            \n\n\n\n\nHow to amend a commit without changing commit message (reusing the previous one)?\n\n                                (8 answers)\n                            \n\nClosed 4 years ago.\n\n\n\nI'm running a very rapid code-compile-test loop where I am amending changes to my commits far more often than not.\nFor example:\n# Make some changes\n$ git commit -m \"Added feature X\"\n# Compile, test\n# Fix bugs\n$ git commit -a --amend\n\nI usually want the same commit message after I fix my bugs. Is there a way to make git skip firing up my EDITOR and just use the original commit message?"}, {"role": "assistant", "content": "You can just add --no-edit to use the last message. This option existed since 2005 but only recently has been enabled for the --amend option.\nThe other way is to add -C HEAD to the commit command with amend option. This allows you to not just use the current commit's message but you can specify any other reference you like, so it's worth remembering it.\nThis is particularly useful when constructing a commit from various places in history and using one of those commit's messages. For example:\ngit checkout feature1^^ -- database/table1.sql\ngit checkout feature1^^^^ -- logger.py\ngit add -A && git commit -C feature1\n\nwhich would just use 2 commits from a feature1 and use the commit message from the last commit to feature1 - if that was a good description."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-symbolic-ref - Read, modify and delete symbolic refs"}, {"role": "assistant", "content": "NOTES In the past, .git/HEAD was a symbolic link pointing at refs/heads/master .  When we wanted to switch to another branch,\nwe did ln -sf refs/heads/newbranch .git/HEAD , and when we wanted\nto find out which branch we are on, we did readlink .git/HEAD .\nBut symbolic links are not entirely portable, so they are now\ndeprecated and symbolic refs (as described above) are used by\ndefault. git symbolic-ref will exit with status 0 if the contents of the\nsymbolic ref were printed correctly, with status 1 if the requested\nname is not a symbolic ref, or 128 if another error occurs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git refuses to reset/discard files\nI have a project with certain js files which I cannot update. I run OSX locally and my remote/staging server is Linux (CentOS).\nRight after cloning my project locally, i noticed I have all those files with git status modified. I never modified them, so I tried to discard changes or reset them, but they come up again. The change that is in the modification is deleting all lines and adding them again. \nI'm not sure why this happens or how to fix it so that my git status is clean as it needs to be.\nHere is a few lines from the git status:\n#   modified:   app/webroot/js/ckeditor/plugins/devtools/lang/el.js\n#   modified:   app/webroot/js/ckeditor/plugins/devtools/lang/fa.js\n#   modified:   app/webroot/js/ckeditor/plugins/devtools/lang/gu.js\n\nUPDATE 1: \nI have now managed to commit the above files, but the staging server is locked because it won't pull new edits:\nerror: Your local changes to the following files would be overwritten by merge:\n    app/webroot/js/ckeditor/_source/lang/ar.js\n    app/webroot/js/ckeditor/_source/lang/bg.js\n    app/webroot/js/ckeditor/_source/lang/bn.js\n    app/webroot/js/ckeditor/_source/lang/cs.js\n    ...\nAborting\n\nI can't commit/push because:\nUpdates were rejected because a pushed branch tip is behind its remote counterpart\n\nI tried:\ngit reset --hard\n\nand\ngit stash\ngit stash drop\n\nBut they don't work, nothing happens.\nUPDATE 2:\ngit diff gives me:\nThe file will have its original line endings in your working directory.\nwarning: CRLF will be replaced by LF in app/webroot/js/ckeditor/_source/lang/fa.js.\nThe file will have its original line endings in your working directory.\nwarning: CRLF will be replaced by LF in app/webroot/js/ckeditor/_source/lang/gu.js.\nThe file will have its original line endings in your working directory.\n..."}, {"role": "assistant", "content": "Normalize line endings\n\nThe change that is in the modification is deleting all lines and adding them again.\n\nThis is because the newlines are being changed between the committed files and the files on disk.\nGithub has a handy page detailing how to deal with this kind of problem, in brief (for linux/OSX), step one is to change your git config so it sorts out the line endings for you:\ngit config --global core.autocrlf input\n\nThen commit line-endings normalization:\ngit rm --cached -r .\n# Remove everything from the index.\n\ngit reset --hard\n# Write both the index and working directory from git's database.\n\ngit add .\n# Prepare to make a commit by staging all the files that will get normalized.\n# This is your chance to inspect which files were never normalized. You should\n# get lots of messages like: \"warning: CRLF will be replaced by LF in file.\"\n\ngit commit -m \"Normalize line endings\"\n# Commit\n\nAnd then, line endings should be handled correctly. See the help page on github for more information, or the relevant section of the git docs formatting and whitespace.\nResolving linux-machine conflicts\n\nthe staging server is locked because it won't pull new edits.\n\nThe error message reads \"Your local changes to the following files would be overwritten by merge:\", that means they contain local changes which should either be committed or discarded before continuing. Assuming normal usage for the staging server (it doesn't have any intentional changes) the local changes can be discarded. For example do the following:\n$ git fetch origin\n# Retrieve updates\n\n$ git reset --hard origin/master\n# Forcibly change the current branch to match origin/master\n\nThis will retrieve the repository history, without updating the working copy, and then update to exactly match the master branch in the repository. Note that the last command will discard all uncommitted changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Deleting remote master branch, refused due to being the current branch\nHow do I delete a remote master branch from GitHub/Bitbucket?\nI'm trying:\n# git push bb --delete master\nremote: bb/acl: user is allowed. accepted payload.[K\nremote: error: refusing to delete the current branch: refs/heads/master[K\nTo ssh://[email\u00a0protected]/user/reponame.git\n ! [remote rejected] master (deletion of the current branch prohibited)\nerror: failed to push some refs to 'ssh://[email\u00a0protected]/user/reponame.git' \n\nAlso I tried\ngit push bb :master\n\nBut all this does not work."}, {"role": "assistant", "content": "Note: for Bitbucket, you would change the default branch by accessing the settings of your repository, and changing the branch at the  \"Main branch\" combo box.\n\nOnce the main branch is no longer master, then you can push and remove master.\nMarsAndBack confirms in the comments this applies to GitHub as well."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Undo local changes interactive\nI often add some debug code while developing so I need to remove these changes later. \nCurrently, I check the git diff and remove the changes manually or just type git checkout -- myfilename if I would like to undo the entire file.\nI love the interactive patch function (git add -i). Is there a tool or a command in git which can undo changes interactive like git add -i?\nIn other words: I would like to interactively checkout files and hunks out of the index."}, {"role": "assistant", "content": "The command you are looking for is\n$git checkout -p\n\nThe git checkout Manual Page says:\n\n-p\n--patch\nInteractively select hunks in the difference between the  (or the index, if unspecified) and the working tree. The chosen hunks are then applied in reverse to the working tree (and if a  was specified, the index).\nThis means that you can use git checkout -p to selectively discard edits from your current working tree. See the \u201cInteractive Mode\u201d section of git-add(1) to learn how to operate the --patch mode.\n\n\nIf you want to restore staged changes interactively, use git reset --patch or git reset -p.\nFrom the docs:\n\ngit reset (--patch | -p) [] [--] [...]\nInteractively select hunks in the difference between the index and  (defaults to HEAD). The chosen hunks are applied in reverse to the index.\nThis means that git reset -p is the opposite of git add -p, i.e. you can use it to selectively reset hunks. See the \u201cInteractive Mode\u201d section of git-add(1) to learn how to operate the --patch mode.\n\nand about git add -p it says\n\n-p\nInteractively choose hunks of patch between the index and the work tree and add them to the index. This gives the user a chance to review the difference before adding modified contents to the index.\nThis effectively runs add --interactive, but bypasses the initial command menu and directly jumps to the patch subcommand. See \u201cInteractive mode\u201d for details.\n\nSo basically with git reset -p you can select what you reset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub - Pull changes from a template repository\n\nI have created a Template Repository in GitHub and then created some repositories based on the template. Since they were created, there have been updates to the template that I want to pull into those repositories.\nIs this possible?"}, {"role": "assistant", "content": "On the other repositories you have to add this template repository as a remote.\ngit remote add template [URL of the template repo]\n\nThen run git fetch to update the changes\ngit fetch --all\n\nThen is possible to merge another branch from the new remote to your current one.\ngit merge template/[branch to merge] --allow-unrelated-histories\n\nhttps://help.github.com/en/articles/adding-a-remote"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %Cred"}, {"role": "assistant", "content": "switch color to red"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --name-status"}, {"role": "assistant", "content": "Show only names and status of changed files. See the description\nof the --diff-filter option on what the status letters mean.\nJust like --name-only the file names are often encoded in UTF-8."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-tag - Create, list, delete or verify a tag object signed with GPG  -i  --ignore-case"}, {"role": "assistant", "content": "Sorting and filtering tags are case insensitive."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-filter-branch - Rewrite branches"}, {"role": "assistant", "content": "NAME git-filter-branch - Rewrite branches"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "IntelliJ IDEA with Git remember author\nI'm using IntelliJ with a Git project, and have setup my user.name and user.email properly. The problem is when committing using the IDE interface the author is not selected by default. I can click and I get a dropdown to select it, but sometimes I forget to do that, and it's a pain to ammend the commit each time I forget.\nIs there a way to set the author automatically on commit, since it's only one, and it would save me some headaches?"}, {"role": "assistant", "content": "IntelliJ IDEA doesn't pre-select author in the combobox which is a known cosmetic issue, however it should use the author defined in the git configuration by default.\nPlease double check that user.name and user.email is specified properly in the global git configuration.\nSome users mentioned a problem when using cygwin git, when IDEA probably cannot find the global git config. In this case it may help if you specify the user for the local project configuration:\ngit config --local user.name \"John Doe\"\ngit config --local user.email [email\u00a0protected]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Automatically Build NPM Module On Install From Github\n\nGiven that a project's lib/ dir shouldn't be checked into Git because the files it contains are derived files (from the build process). When installing a package from the project's github (during development for example) the lib/ dir will not exist, so if the package's package.json's main field points to (for example) lib/index.js, the package cannot be compiled when imported because these files do not exist within the repository and therefore within the package installed into node_modules. This means the package needs to built (just as it would be before release), only this time locally so that the lib directory (or whatever other files are generated during the build process) are added to the module's directory.\nAssuming there is a build script within the package.json file's scripts field, can the package be configured to run this automatically in the situation where it is installed from github only? If not, what is the the best approach to ensuring it is built when installed from github? \nThere are now prepublish, prepublishOnly and prepare lifecycle hooks, but none provide an answer to this problem because they don't allow any way to differentiate between the source of the install. In short, yes they allow you to build on install, but they don't allow you to build on install from github only. There is not only no reason to force a build when people install from npm, but more importantly, development dependencies will not be installed (for example babel which is critical to the build).\nI am aware of one strategy to deal with this problem:\n\nFork / branch the repo\nbuild locally\nremove the lib/ dir from .gitignore and check it in.\ninstall module from your fork/branch\nWhen you are ready for a PR / rebase add lib/ dir to .gitignore and remove dir from git.\n\nBut that is far from ideal. I guess this could be automated with a githook though. So every you push to master the project also builds and pushes to a separate branch.\nThere is a closed issue on NPM's Github with no resolution - just lots of people who want a solution. From this issue it is clear that using prepare is not the answer. \nMy usecase is that I am developing a module that is used in a number of other projects. I want to consume the latest version of the module without having to push out a release to NPM whenever I update the codebase - I would rather push out fewer releases when I am ready, but I still need to consume whatever the latest version of the lib is on Github. \nNote: I also reached out to NPM's support regarding this issue and I'll add their response if I receive one."}, {"role": "assistant", "content": "prepare is the correct way, but might seem broken\nIf you have a repository with source files but a \"build\" step is necessary to use it,\nprepare does exactly what you want in all cases (as of npm 4).\n\nprepare: Run both BEFORE the package is packed and published, on local npm install without any arguments, and when installing git dependencies.\n\nYou can even put your build dependencies into devDependencies and they will be installed before prepare is executed.\nHere is an example of a package of mine that uses this method.\n\nProblems with .gitignore - prepare will seem broken\nThere is one issue with this option that gets many people.\nWhen preparing a dependency, Npm and Yarn will keep only the files that are listed in the files section of package.json.\nOne might see that files defaults to all files being included and think they're done.\nWhat is easily missed is that:\n\n.npmignore mostly overrides the files directive and,\nif .npmignore does not exist, .gitignore is used instead.\n\nSo, if you have your built files listed in .gitignore, like a sane person, and don't do anything else, prepare will seem broken.\nIf you fix files to only include the built files or add an empty .npmignore, you're all set.\nMy recommendation is to set files (or, by inversion, .npmignore) such that the only files actually published are those needed by users of the published package. Imho, there is no need to include uncompiled sources in published packages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to find out \"The most popular repositories\" on Github? [closed]\n\nClosed. This question is seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. It does not meet Stack Overflow guidelines. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n We don\u2019t allow questions seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. You can edit the question so it can be answered with facts and citations.\n\n\nClosed 7 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nOnce upon a time, we can watch the most popular repositories (Most forked or Most watched) at this page (https://github.com/popular/watched) of Github. like this:\n\nBut now when you try to explore repos, you can only see the Top 25 trending repositories. like this: https://github.com/trending\nWhy Github change this, and\nis there any way to find out the list of the most popular repos?"}, {"role": "assistant", "content": "Ranking by stars or forks is not working. Each promoted or created by a famous company repository is popular at the beginning. Also it is possible to have a number of them which are in trend right now (publications, marketing, events). It doesn't mean that those repositories are useful/popular.\nThe gitmostwanted.com project (repo at github) analyses GH Archive data in order to highlight the most interesting repositories and exclude others. Just compare the results with mentioned resources."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %aI"}, {"role": "assistant", "content": "author date, strict ISO 8601 format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  Comparing branches"}, {"role": "assistant", "content": "$ git diff topic master (1) $ git diff topic..master (2) $ git diff topic...master (3) Changes between the tips of the topic and the master branches. Same as above. Changes that occurred on the master branch since when the topic\nbranch was started off it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %G?"}, {"role": "assistant", "content": "show \"G\" for a good (valid) signature,\n\"B\" for a bad signature,\n\"U\" for a good signature with unknown validity,\n\"X\" for a good signature that has expired,\n\"Y\" for a good signature made by an expired key,\n\"R\" for a good signature made by a revoked key,\n\"E\" if the signature cannot be checked (e.g. missing key)\nand \"N\" for no signature"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  Skip \"branches\" and \"tags\" of first level directories"}, {"role": "assistant", "content": "--ignore-paths=\"^[^/]+/(?:branches|tags)\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] <blob> <blob>"}, {"role": "assistant", "content": "This form is to view the differences between the raw\ncontents of two blob objects."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.suppressBlankEmpty"}, {"role": "assistant", "content": "A boolean to inhibit the standard behavior of printing a space\nbefore each empty output line. Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git: branches diverged; how to proceed?\nMy local tree has diverged from the master:\n$ git status\n# On branch master\n# Your branch and 'origin/master' have diverged,\n# and have 7 and 3 different commit(s) each, respectively.\n#\nnothing to commit (working directory clean)\n\nI tried git pull --rebase and failed:\n$ git pull --rebase\nFirst, rewinding head to replay your work on top of it...\nApplying: * ...\nUsing index info to reconstruct a base tree...\nFalling back to patching base and 3-way merge...\nAuto-merging ChangeLog\nCONFLICT (content): Merge conflict in ChangeLog\nFailed to merge in the changes.\nPatch failed at 0001 * ...\n\nSo I reverted with git rebase --abort and I am now at square 1.\nWhat I want is:\n\n\"Export\" my 7 patches into human readable diff files (a la hg export).\nMake my tree a carbon copy of the origin/master (a la hg strip).\nre-apply my 7 patches one-by-one by hand (a la hg import).\n\nI do understand that git rebase --continue does this.\nI did it and it did work (after a few manual merges and a git add).\nHowever, I want to be able to do that manually, \nso I am wondering what are the git commands corresponding to the hg commands above.\nThanks.\nPS. Please do not tell me that using a ChangeLog file with git is stupid.\nEven if it is, it is not up to me."}, {"role": "assistant", "content": "There are, of course, several ways you could do this manually. You'll still have the same conflicts because git is basically doing this for you under the hood. But if you want to do this manually, here are a couple of ways.\nFirst, export your commits as a series of patches. The easiest way to do this is using git format-patch:\ngit format-patch -M @{upstream}\n\nwill produce 7 patch files -- one for each of your commits. (Note that \"@{upstream}\" is literal -- it's a not so well known feature of git.) This is better than capturing the output of git diff because all of the commit information (author, date, message, etc.) are preserved.\nThen you could reset your repository to match the upstream:\ngit reset --hard @{upstream}\n\nThen you can re-apply your patches using git am -- either one at a time or all at once.\ngit am 0001-blah-blah.patch\ngit am 0002-blah-blah.patch\n...\n\nA second option would be to create a spare branch with your work on it:\ngit branch scrap\n\nThen reset your branch to the upstream:\ngit reset --hard @{upstream}\n\nThen cherry-pick the commits over:\ngit cherry-pick scrap~6\ngit cherry-pick scrap~5\ngit cherry-pick scrap~4\n...\n\nThen trash the scrap branch:\ngit branch -D scrap"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I modify a specific commit?\nI have the following commit history:\n\nHEAD\nHEAD~\nHEAD~2\nHEAD~3\n\ngit commit --amend modifies the current HEAD commit. But how do I modify HEAD~3?"}, {"role": "assistant", "content": "Use git rebase. For example, to modify commit bbc643cd, run:\ngit rebase --interactive bbc643cd~\n\nPlease note the tilde ~ at the end of the command, because you need to reapply commits on top of the previous commit of bbc643cd (i.e. bbc643cd~).\nIn the default editor, modify pick to edit in the line mentioning bbc643cd.\nSave the file and exit. git will interpret and automatically execute the commands in the file. You will find yourself in the previous situation in which you just had created commit bbc643cd.\nAt this point, bbc643cd is your last commit and you can easily amend it. Make your changes and then commit them with the command:\ngit commit --all --amend --no-edit\n\nAfter that, return back to the previous HEAD commit using:\ngit rebase --continue\n\nWARNING: Note that this will change the SHA-1 of that commit as well as all children -- in other words, this rewrites the history from that point forward. You can break repos doing this if you push using the command git push --force."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE_CURL"}, {"role": "assistant", "content": "Enables a curl full trace dump of all incoming and outgoing data,\nincluding descriptive information, of the git transport protocol.\nThis is similar to doing curl --trace-ascii on the command line.\nSee GIT_TRACE for available trace output options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I handle images in a Git repo?\n\nI have inherited a medium sized iOS project - ~30,000 lines of code - that has an insane number of image assets. Of course we use Git/Github to scm. Currently the images are included in the directory tree and thus gets ingested into the repo, bloating the heck out of it and generally making development a big headache. \nWe have 4 devs on the project, some virtual. It occurs to me to move the images to Dropbox, refer to them from the iOS project and keep things ship shape.\nDoes anyone have a comment on this idea? What do you do do deal with image/video/audio files in a Git scm setup?"}, {"role": "assistant", "content": "I'd be pretty nervous about that, actually; what if you want to update an image, then change your mind? Or what if you need to build a maintenance release with old images?\nIf this is really a problem -- and I've never seen this actually be a problem in practice, but I'll take your word for it -- why not just use one repo for the images, another for everything else? You can then just be lazy about syncing the image one."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Completely cancel a rebase\nI performed a rebase like this: \ngit rebase --onto master new_background_processing export_background_processing\n\nThat didn't do what I wanted it to, so I performed a reset: \ngit reset --hard HEAD@{1}\n\nI got my branch back to the state it was, but I received this message when I type git status: \n# You are currently rebasing branch 'export_background_processing' on 'e378641'.\n\nHow do I cancel that rebase completely? Not sure what that means per se."}, {"role": "assistant", "content": "Use git rebase --abort. From the official Linux kernel documentation for git rebase:\ngit rebase --continue | --skip | --abort | --edit-todo | --quit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Setting up sublimetext 3 as git commit text editor\nI'm having trouble setting up sublime as my git commit message editor.\nUsing:\ngit config --global core.editor \"subl\"\n\nError:\nerror: cannot run subl: No such file or directory\nerror: unable to start editor 'subl'\nPlease supply the message using either -m or -F option.\nsubl work perfectly otherwise."}, {"role": "assistant", "content": "For what it's worth, here's how I solved it: \n1) Run in Terminal: \nsudo ln -s /Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl\n\nThis adds a subl alias to /usr/local/bin/ pointing to Sublime Text 3 app\u2019s binary file. Now running subl in Terminal will launch Sublime Text 3 app. \n2) Run in Terminal: \ngit config --global core.editor \"subl -n -w\"\n\nThis adds editor = subl -n -w to the [core] section of the ~/.gitconfig file. Now running git commit in Terminal will launch Sublime Text 3 app (subl) in a new window (-n), and the command line will wait (-w) until the commit message is saved and closed. \nImage of final workflow added in response to clarifying question in comments below: \n\nOfficial Sublime Text 3 doc: http://www.sublimetext.com/docs/3/osx_command_line.html"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub Error - \"ssh: connect to host github.com port 22: Operation timed out fatal: Could not read from remote repository.\"\n\nI want to push a repo from my computer to GitHub. I set the remote origin\ngit remote add origin [email\u00a0protected]:alicht/tweetanuber.git\n\nand then after when I try pushing to GitHub\ngit push -u origin master\n\nI'm greeted with this error:\nssh: connect to host github.com port 22: Operation timed out\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n\nHow can I resolve this issue and push the repo on my local computer to GitHub?"}, {"role": "assistant", "content": "I have had this same problem the solution was edit ~/.ssh/config and put this lines:\nHost github.com\n  Hostname ssh.github.com\n  Port 443\n\nIf there is no file config in this folder, simply create one."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git rebase fatal: Needed a single revision\n\nI have a branch of a public repository and I am trying to update my branch with the current commits from the original repository:\n$ git fetch <remote>\nremote: Counting objects: 24, done.\nremote: Compressing objects: 100% (20/20), done.\nremote: Total 20 (delta 12), reused 0 (delta 0)\nUnpacking objects: 100% (20/20), done.\nFrom git://github.com/path_to/repo\n  9b70165..22127d0  master     -> $/master\n$ git rebase <remote>\nfatal: Needed a single revision\ninvalid upstream <remote>\n\nThe <remote> is in place of my remote name and is not actually my remote name. The documentation on this error seems to be a bit loose."}, {"role": "assistant", "content": "You need to provide the name of a branch (or other commit identifier), not the name of a remote to git rebase.\nE.g.:\ngit rebase origin/master\n\nnot:\ngit rebase origin\n\nNote, although origin should resolve to the the ref origin/HEAD when used as an argument where a commit reference is required, it seems that not every repository gains such a reference so it may not (and in your case doesn't) work. It pays to be explicit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "List all files changed in a pull request in Git/GitHub\nIs there a way (from the command line) to list the names of all files changed in a PR in Git/GitHub? This would be used to find what tests need to be run in a Travis CI build for that PR.\nThe CI build runs these commands before it calls our script:\ngit clone --depth=50 git://github.com/jekyll/jekyll.git jekyll/jekyll\ncd jekyll/jekyll\ngit fetch origin +refs/pull/2615/merge\ngit checkout -qf FETCH_HEAD"}, {"role": "assistant", "content": "In general, you can list the files changed between any two commits with\ngit diff --name-only <ref1> <ref2>\n\nHow to list only the names of files that changed between two commits\nThe problem here seems to be determining the 'merge base'. If all branches originate with master, then you could do:\ngit --no-pager diff --name-only FETCH_HEAD $(git merge-base FETCH_HEAD master)\n\nThis will show you the changes between the point at which the FETCH_HEAD was branched from master to the current FETCH_HEAD. I tested this locally, and the PR branches are cut from master I believe it should work."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-show-branch"}, {"role": "assistant", "content": "Show branches and their commits"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to undelete a file previously deleted in git's history?\nUsing Chris's answer on another question I could prepend a snapshot-history to my git repository. Since one of the files is not part of my history but only in the snapshots, the first original commit now also contains the deletion of this file. How can I undo that?\nAt first I thought this was the opposite of How do I remove sensitive files from git\u2019s history, but actually I don't want to insert a file into history but just remove the deletion from history."}, {"role": "assistant", "content": "git checkout <commit> <filename>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git http - securely remember credentials\nIs there a way to securely let git remember my credentials when connecting to remote repositories over HTTP(S)? \nI've tried the core.askpass approach detailed in git-config to let an external script supply my credentials. Although it works great the username and password is still stored in plain text in the small shell script."}, {"role": "assistant", "content": "git invokes cURL when running over HTTP.  You can store secure credentials by setting up a .netrc file in your user's home directory, and making it private to the user (0600 in Linux).\nThe contents of the file provide the username and password per remote domain.\nmachine myRemoteServer\nlogin myUserName\npassword s3cret\n\nSee https://stackoverflow.com/questions/3947530/git-push-fatal-failed/7177690#7177690  for full server side configuration, which can easily include calls to your ldap server."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Database on a personal github page\n\nIs it possible to have some data stored somewhere on your personal github page?\nFor example a button that triggers a counter. When you click on the button , counter increments by 1. When other user visits that page and clicks the button , counter gets incremented by 1 once again.\nSo it would be a sum of all click across all visitors that would be displayed on the page."}, {"role": "assistant", "content": "Github pages only allow for static content, so you'd have to use something like firebase in order to get a database."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  $GIT_DIR/COMMIT_EDITMSG"}, {"role": "assistant", "content": "This file contains the commit message of a commit in progress.\nIf git commit exits due to an error before creating a commit,\nany commit message that has been provided by the user (e.g., in\nan editor session) will be available in this file, but will be\noverwritten by the next invocation of git commit ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Browse and display files in a git repo without cloning\nIs there a way to browse and display files in a git repo without cloning it first? I can do those in svn using the commands:\n\nsvn ls /path/to/repo \nsvn cat /path/to/repo/file-in-repo\n\nI can supposedly use git show but doing:\n\ngit show /path/to/repo\ngit show HEAD:/path/to/repo\n\nresult to \n\nfatal: Not a git repository"}, {"role": "assistant", "content": "The command you want is git ls-remote which allows you to get some information about remote repositories, but you cant show history or list directories or anything of that level: essentially it only lets you see the remote objects at a very high-level (you can see the current HEADs and tags for example).\nThe only real way to do what you want (if I understand correctly) would be to use ssh to run a remote command and return the results, for example:\nssh me@otherhost \"cd repo && git log -n 10\"\n\nWhat you want would be lovely functionality if they could add it, but from what I read it's not very easy since getting history etc needs a lot of information to be local to git, and at that point you may as well have done a git fetch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.certNonceSlop"}, {"role": "assistant", "content": "When a git push --signed sends a push certificate with a\n\"nonce\" that was issued by a receive-pack serving the same\nrepository within this many seconds, export the \"nonce\"\nfound in the certificate to GIT_PUSH_CERT_NONCE to the\nhooks (instead of what the receive-pack asked the sending\nside to include).  This may allow writing checks in pre-receive and post-receive a bit easier.  Instead of\nchecking GIT_PUSH_CERT_NONCE_SLOP environment variable\nthat records by how many seconds the nonce is stale to\ndecide if they want to accept the certificate, they only\ncan check GIT_PUSH_CERT_NONCE_STATUS is OK ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  -s <strategy>  --strategy=<strategy>"}, {"role": "assistant", "content": "Use the given merge strategy, instead of the default ort .\nThis implies --merge . Because git rebase replays each commit from the working branch\non top of the <upstream> branch using the given strategy, using\nthe ours strategy simply empties all patches from the <branch> ,\nwhich makes little sense. See also INCOMPATIBLE OPTIONS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %<( <N> [,trunc|ltrunc|mtrunc])"}, {"role": "assistant", "content": "make the next placeholder take at\nleast N column widths, padding spaces on\nthe right if necessary.  Optionally\ntruncate (with ellipsis .. ) at the left (ltrunc) ..ft ,\nthe middle (mtrunc) mi..le , or the end\n(trunc) rig.. , if the output is longer than\nN columns.\nNote 1: that truncating\nonly works correctly with N >= 2.\nNote 2: spaces around the N and M (see below)\nvalues are optional.\nNote 3: Emojis and other wide characters\nwill take two display columns, which may\nover-run column boundaries.\nNote 4: decomposed character combining marks\nmay be misplaced at padding boundaries."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git commit date\nOther than parsing git log for the date string, is there a Git native way to report the date of a certain commit?"}, {"role": "assistant", "content": "The\nshow\ncommand may be what you want. Try\ngit show --no-patch --format=%ci <commit>\n\nOther formats for the date string are available as well. Check the manual page for\ndetails."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  -z"}, {"role": "assistant", "content": "When --numstat has been given, do not munge pathnames,\nbut use a NUL-terminated machine-readable format. Without this option, pathnames with \"unusual\" characters are quoted as\nexplained for the configuration variable core.quotePath (see git-config )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitFlow: merge to master first or after prod release?\nLearning GitFlow and I have some concerns that I don't see addressed in any of the docs/articles I've read about it.\nAt some point code on the develop branch needs to be deployed to a QA/staging environment and tested rigorously. So with GitFlow you cut a release branch off of develop, and then you deploy release to said staging environment.\nFirst, just wanted to clarify something real quick: the very first time a particular project/repo goes through this process, you'll actually be forking/creating this new release branch from develop, yes? And that all other times in the future, you're simply merging develop into release, yes?\nSo then QA tests the release branch on the staging env, all looks good, and we're ready to deploy to prod. Do you:\n\nDeploy to prod and then merge release into master? ; or\nMerge release to master and then deploy to prod?\n\nI ask because it seems like in the former case you would need to deploy the release branch to prod, then deploy to prod, and then merge to master. Which sounds OK, but often prod and non-prod environments are not identical and code that runs perfectly fine in staging chokes the second it fires up on prod servers. I know GitFlow supports the concepts of hotfix branches but they are reserved for minor fixes. In the case of a complicated fix that requires a rollback/backout release, we now have \"dirty code\" (code that breaks prod for some reason) merged into master.\nAnd in the latter case, it might take hours or even days (especially if you need to involve IT/Ops to do prod deploys) from the time you merge and put in the prod release request in, to the time the prod deploy actually occurs. And during this time you have a master branch that says \"features X, Y and Z are in prod\" but they are actually not.\nI'm wondering if GitFlow actually solves this somehow or what the known workarounds to either case are."}, {"role": "assistant", "content": "The project I work in is very chaotic, decisions change in a matter of minutes, so my strategy is to procrastinate as much as possible software configuration management decisions.\nParticularly, merging into master: we only merge to master after we deployed in production and we have a confirmation e-mail that smoke tests worked fine. This way we embrace chaos by managing the risk of decision changes, rollbacks in the deploy, technical problems or whichever issue may happen.\nAt the beginning we merged into master before going into production, but technical issues, rollbacks, management decisions at the very last minute... caused lots of problems to us, so we changed the strategy, and it's been working fine for the last 3 years.\nIf, eventually, after going to production some regression is found, that's a hotfix and must be handled like that :)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  stop"}, {"role": "assistant", "content": "The command will fail, stopping in the middle of the current am session. This is the default behavior."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Should I commit release key store for Android app to team repository?\nWe are developing android app in team. To create signed release apk you should set key store path, password, key alias and key password. If I want me and any my team member could create signed apk with same signature should I commit key store file to source control?"}, {"role": "assistant", "content": "You should not.\nRelease keystore is the most sensitive data.\nIn my team, there is only one people can sign the release package. (And may be one for backing up).\nAll sensitive info MUST be ignored and we make a reference to these info.\nIn my team, we config like that:\nOn Android Studio:\n/local.properties file:\nstoreFile=[path/to/keystore/file]\nkeyAlias=[alias's key]\nkeyPassword=[alias's password]\nstorePassword=[key's password]\n\n/app/build.gradle, config scope:\nsigningConfigs {\n  release {\n    Properties properties = new Properties()\n    properties.load(project.rootProject.file('local.properties').newDataInputStream())\n    storeFile file(properties.getProperty('storeFile'))\n    keyAlias properties.getProperty('keyAlias')\n    storePassword properties.getProperty('storePassword')\n    keyPassword properties.getProperty('keyPassword')\n  }\n}\n\nbuildTypes {\n  release {\n    minifyEnabled false\n    proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n    signingConfig signingConfigs.release\n  }\n  .\n  .\n  .\n}\n\nSee my complete demo config:\napply plugin: 'com.android.application'\n\nandroid {\n    compileSdkVersion 21\n    buildToolsVersion \"22.0.1\"\n\n    defaultConfig {\n        multiDexEnabled = true\n\n        applicationId \"com.appconus.demoapp\"\n        minSdkVersion 16\n        targetSdkVersion 21\n        multiDexEnabled = true\n        versionCode 18\n        versionName \"1.3\"\n    }\n\n    signingConfigs {\n        release {\n            Properties properties = new Properties()\n            properties.load(project.rootProject.file('local.properties').newDataInputStream())\n            storeFile file(properties.getProperty('storeFile'))\n            keyAlias properties.getProperty('keyAlias')\n            storePassword properties.getProperty('storePassword')\n            keyPassword properties.getProperty('keyPassword')\n        }\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n            signingConfig signingConfigs.release\n        }\n        debug {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n        applicationVariants.all { variant ->\n            appendVersionNameVersionCode(variant, defaultConfig)\n        }\n    }\n}\ndependencies {\n    compile 'com.google.android.gms:play-services:8.1.0'\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  -s  --no-patch"}, {"role": "assistant", "content": "Suppress all output from the diff machinery.  Useful for\ncommands like git show that show the patch by default to\nsquelch their output, or to cancel the effect of options like --patch , --stat earlier on the command line in an alias."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --inaccurate-eof"}, {"role": "assistant", "content": "Under certain circumstances, some versions of diff do not correctly\ndetect a missing new-line at the end of the file. As a result, patches\ncreated by such diff programs do not record incomplete lines\ncorrectly. This option adds support for applying such patches by\nworking around this bug."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to get the last commit ID of a remote repo using curl-like command?\nI want to get the last commit ID of the remote git repo.\nThe command git rev-parse HEAD works for a locally-cloned git repo, but I want to get it from the original GIT repo by a CURL command or so. \nEg: I want to get the last commit ID of the git URL https://git.appfactorypreview.wso2.com/history/apiapp.git/.\nHow?"}, {"role": "assistant", "content": "try this command\ngit log --format=\"%H\" -n 1"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %cl"}, {"role": "assistant", "content": "committer email local-part (the part before the @ sign)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Fastest way to download a GitHub repository\n\nI need to download the source code of the repository Spring data graph example into my box. It has public read-only access. Is there is an extremely fast way of downloading this code?\nI have no idea of working on GitHub/committing code and most tutorials out there on the web seems to assume that \"I would want to setup a project in GitHub\" and inundate me with 15-20 step processes. To me, if a source repository is available for the public, it should take less than 10 seconds to have that code in my filesystem.\nTutorials that provide me with 15-20 step processes:\n\nSetting up development environment on Ubuntu\nWin Setup on GIT\n\nI need something very very very simple. Just pull the source code, and I am more interested in seeing the source code and not learn GitHub.\nAre there any fast pointers/tutorials? (I have a GitHub account.)"}, {"role": "assistant", "content": "When you are on a project page, you can press the Download ZIP button which is located under the green <> Code drop down:\n\nThis allows you to download the most recent version of the code as a zip archive.\nIf you aren't seeing that button, it is likely because you aren't on the main project page. To get there, click on the left-most tab labeled <> Code."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-restore - Restore working tree files"}, {"role": "assistant", "content": "DESCRIPTION Restore specified paths in the working tree with some contents from a\nrestore source. If a path is tracked but does not exist in the restore\nsource, it will be removed to match the source. The command can also be used to restore the content in the index with --staged , or restore both the working tree and the index with --staged --worktree . By default, if --staged is given, the contents are restored from HEAD ,\notherwise from the index. Use --source to restore from a different commit. See \"Reset, restore and revert\" in git for the differences\nbetween the three commands. THIS COMMAND IS EXPERIMENTAL. THE BEHAVIOR MAY CHANGE."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  off, none"}, {"role": "assistant", "content": "Disable output of diffs for merge commits. Useful to override\nimplied value."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  git archive --format=tar.gz --prefix=git-1.4.0/ v1.4.0 >git-1.4.0.tar.gz"}, {"role": "assistant", "content": "Same as above, but using the builtin tar.gz handling."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository"}, {"role": "assistant", "content": "EXAMPLES When recording your own work, the contents of modified files in\nyour working tree are temporarily stored to a staging area\ncalled the \"index\" with git add .  A file can be\nreverted back, only in the index but not in the working tree,\nto that of the last commit with git restore --staged <file> ,\nwhich effectively reverts git add and prevents the changes to\nthis file from participating in the next commit.  After building\nthe state to be committed incrementally with these commands, git commit (without any pathname parameter) is used to record what\nhas been staged so far.  This is the most basic form of the\ncommand.  An example: $ edit hello.c\n$ git rm goodbye.c\n$ git add hello.c\n$ git commit Instead of staging files after each individual change, you can\ntell git commit to notice the changes to the files whose\ncontents are tracked in\nyour working tree and do corresponding git add and git rm for you.  That is, this example does the same as the earlier\nexample if there is no other change in your working tree: $ edit hello.c\n$ rm goodbye.c\n$ git commit -a The command git commit -a first looks at your working tree,\nnotices that you have modified hello.c and removed goodbye.c,\nand performs necessary git add and git rm for you. After staging changes to many files, you can alter the order the\nchanges are recorded in, by giving pathnames to git commit .\nWhen pathnames are given, the command makes a commit that\nonly records the changes made to the named paths: $ edit hello.c hello.h\n$ git add hello.c hello.h\n$ edit Makefile\n$ git commit Makefile This makes a commit that records the modification to Makefile .\nThe changes staged for hello.c and hello.h are not included\nin the resulting commit.  However, their changes are not lost\u2009\u2014\u2009they are still staged and merely held back.  After the above\nsequence, if you do: $ git commit this second commit would record the changes to hello.c and hello.h as expected. After a merge (initiated by git merge or git pull ) stops\nbecause of conflicts, cleanly merged\npaths are already staged to be committed for you, and paths that\nconflicted are left in unmerged state.  You would have to first\ncheck which paths are conflicting with git status and after fixing them manually in your working tree, you would\nstage the result as usual with git add : $ git status | grep unmerged\nunmerged: hello.c\n$ edit hello.c\n$ git add hello.c After resolving conflicts and staging the result, git ls-files -u would stop mentioning the conflicted path.  When you are done,\nrun git commit to finally record the merge: $ git commit As with the case to record your own changes, you can use -a option to save typing.  One difference is that during a merge\nresolution, you cannot use git commit with pathnames to\nalter the order the changes are committed, because the merge\nshould be recorded as a single commit.  In fact, the command\nrefuses to run when given pathnames (but see -i option)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "fatal: in unpopulated submodule\n\nI am quite new to github and I am trying to find a solution to a current problem that I am having. I will go through my process step by step:\nFirst I created a new folder named [project name]\nNext I used these commands:\n    cd [project name]\n    git clone [remote project from github url]\n\nSo far I have created a folder and cloned a project that my group is working on in github.\nNext, I went inside that folder and created an angular project with\n    ng new [angulartest]\n\nThis will create all the components of my angular test into the same folder that is the clone of the one from github.\nFinally, I pushed the new angular test on github with\n    git add [angulartest]\n    git commit\n    git push\n\nWhat happens is that it only pushes the folder [angulartest] but none of its contents (even though there are contents in it).  When I try to pull from its contents, I still just get an empty folder in return.\nWhen I try to enter that folder and add each element of the contents, using these steps:\n    cd [angulartest]\n    git add e2e, src, nodemodules, etc\n    git commit\n    git push\n\nIt gives me the following error (even when I try to add each element individually):\nfatal: in unpopulated submodule [angulartest]\nI was wondering if it was a problem with my git syntax, the angular project, or the way I tried to clone the project.  That way, I know which direction I want to be headed when looking for a solution."}, {"role": "assistant", "content": "It seems like, you may have removed the .git folder. In that case you can try \n git rm --cached angulartest -f"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  blob"}, {"role": "assistant", "content": "Convert raw file data into a blob, for future use in a commit command.  This command is optional and is not\nneeded to perform an import."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Insert a commit before the root commit in Git?\nI've asked before about how to squash the first two commits in a git repository.\nWhile the solutions are rather interesting and not really as mind-warping as some other things in git, they're still a bit of the proverbial bag of hurt if you need to repeat the procedure many times along the development of your project. \nSo, I'd rather go through pain only once, and then be able to forever use the standard interactive rebase. \nWhat I want to do, then, is to have an empty initial commit that exists solely for the purpose of being the first. No code, no nothing. Just taking up space so it can be the base for rebase.\nMy question then is, having an existing repository, how do I go about inserting a new, empty commit before the first one, and shifting everyone else forward?"}, {"role": "assistant", "content": "There are 2 steps to achieving this:\n\nCreate a new empty commit\nRewrite history to start from this empty commit\n\nWe\u2019ll put the new empty commit on a temporary branch newroot for convenience.\n1. Create a new empty commit\nThere is a number of ways you can do this.\nUsing just plumbing\nThe cleanest approach is to use Git\u2019s plumbing to just create a commit directly, which avoids touching the working copy or the index or which branch is checked out, etc.\n\nCreate a tree object for an empty directory:\ntree=`git hash-object -wt tree --stdin < /dev/null`\n\nWrap a commit around it:\ncommit=`git commit-tree -m 'root commit' $tree`\n\nCreate a reference to it:\ngit branch newroot $commit\n\n\nYou can of course rearrange the whole procedure into a one-liner if you know your shell well enough.\nWithout plumbing\nWith regular porcelain commands, you cannot create an empty commit without checking out the newroot branch and updating the index and working copy repeatedly, for no good reason. But some may find this easier to understand:\ngit checkout --orphan newroot\ngit rm -rf .\ngit clean -fd\ngit commit --allow-empty -m 'root commit'\n\nNote that on very old versions of Git that lack the --orphan switch to checkout, you have to replace the first line with this:\ngit symbolic-ref HEAD refs/heads/newroot\n\n2. Rewrite history to start from this empty commit\nYou have two options here: rebasing, or a clean history rewrite.\nRebasing\ngit rebase --onto newroot --root master\n\nThis has the virtue of simplicity. However, it will also update the committer name and date on every last commit on the branch.\nAlso, with some edge case histories, it may even fail due to merge conflicts \u2013 despite the fact that you are rebasing onto a commit that contains nothing.\nHistory rewrite\nThe cleaner approach is to rewrite the branch. Unlike with git rebase, you will need to look up which commit your branch starts from:\ngit replace <currentroot> --graft newroot\ngit filter-branch master\n\nThe rewriting happens in the second step, obviously; it\u2019s the first step that needs explanation. What git replace does is it tells Git that whenever it sees a reference to an object you want replaced, Git should instead look at the replacement of that object.\nWith the --graft switch, you are telling it something slightly different than normally. You are saying don\u2019t have a replacement object yet, but you want to replace the <currentroot> commit object with an exact copy of itself except the parent commit(s) of the replacement should be the one(s) that you listed (i.e. the newroot commit). Then git replace goes ahead and creates this commit for you, and then declares that commit as the replacement for your original commit.\nNow if you do a git log, you will see that things already look as you want them to: the branch starts from newroot.\nHowever, note that git replace does not actually modify history \u2013 nor does it propagate out of your repository. It merely adds a local redirect to your repository from one object to another. What this means is that nobody else sees the effect of this replacement \u2013 only you.\nThat\u2019s why the filter-branch step is necessary. With git replace you create an exact copy with adjusted parent commits for the root commit; git filter-branch then repeats this process for all the following commits as well. That is where history actually gets rewritten so that you can share it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --no-show-forced-updates"}, {"role": "assistant", "content": "By default, git checks if a branch is force-updated during\nfetch. Pass --no-show-forced-updates or set fetch.showForcedUpdates\nto false to skip this check for performance reasons. If used during git-pull the --ff-only option will still check for forced updates\nbefore attempting a fast-forward update. See git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --glob=<glob-pattern>"}, {"role": "assistant", "content": "Pretend as if all the refs matching shell glob <glob-pattern> are listed on the command line as <commit> . Leading refs/ ,\nis automatically prepended if missing. If pattern lacks ? , * ,\nor [ , /* at the end is implied."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Which files should I tell my VCS to ignore when using Sphinx for documentation? [closed]\nClosed. This question is opinion-based. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it can be answered with facts and citations by editing this post.\n\n\nClosed 6 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI want to start using Sphinx to document my project. I told Sphinx to use separate source and build directories during sphinx-quickstart. Now my directory layout is the following:\nMyProject/\n    myproject/\n        __init__.py\n        mymodule.py\n    docs/\n        source/\n            .static/\n            .templates/\n            conf.py\n            index.rst\n        build/\n        Makefile\n\nWhich files should be excluded from a VCS repository for a Sphinx project (i.e., since I use Git, what should I add to my .gitignore file)? For example, should I ignore the docs/build/ directory so that changes in the HTML pages generated from Sphinx aren't tracked?"}, {"role": "assistant", "content": "If you take a look at the contents of Makefile you'll see something as follows:\nBUILDDIR      = build\n\n...\n\nclean:\n    -rm -rf $(BUILDDIR)/*\n\nThis means that make clean just removes the build directory so, with regard to version control, ignoring the contents of the build directory should be enough as you already suspected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rebase.abbreviateCommands"}, {"role": "assistant", "content": "If set to true, git rebase will use abbreviated command names in the\ntodo list resulting in something like this: p deadbee The oneline of the commit\n\tp fa1afe1 The oneline of the next commit\n\t... instead of: pick deadbee The oneline of the commit\n\tpick fa1afe1 The oneline of the next commit\n\t... Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Are Git forks actually Git clones?\n\nI keep hearing people say they're forking code in Git. Git \"fork\" sounds suspiciously like Git \"clone\" plus some (meaningless) psychological willingness to forgo future merges.  There is no fork command in Git, right?\nGitHub makes forks a little more real by stapling correspondence onto it. That is, you press the fork button and later, when you press the pull request button, the system is smart enough to email the owner. Hence, it's a little bit of a dance around repository ownership and permissions.\nYes/No? Any angst over GitHub extending Git in this direction? Or any rumors of Git absorbing the functionality?"}, {"role": "assistant", "content": "Fork, in the GitHub context, doesn't extend Git. \nIt only allows clone on the server side.\nWhen you clone a GitHub repository on your local workstation, you cannot contribute back to the upstream repository unless you are explicitly declared as \"contributor\". That's because your clone is a separate instance of that project. If you want to contribute to the project, you can use forking to do it, in the following way:\n\nclone that GitHub repository on your GitHub account (that is the \"fork\" part, a clone on the server side)\ncontribute commits to that GitHub repository (it is in your own GitHub account, so you have every right to push to it)\nsignal any interesting contribution back to the original GitHub repository (that is the \"pull request\" part by way of the changes you made on your own GitHub repository)\n\nCheck also \"Collaborative GitHub Workflow\".\nIf you want to keep a link with the original repository (also called upstream), you need to add a remote referring that original repository. \nSee \"What is the difference between origin and upstream on GitHub?\"\n\nAnd with Git 2.20 (Q4 2018) and more, fetching from fork is more efficient, with delta islands."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  match=<pattern>"}, {"role": "assistant", "content": "Only consider tags matching the given glob(7) pattern,\nexcluding the \"refs/tags/\" prefix; see the corresponding option\nin git-describe for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "giteveryday - A useful minimum set of commands for Everyday Git  Use a tarball as a starting point for a new repository."}, {"role": "assistant", "content": "$ tar zxf frotz.tar.gz\n$ cd frotz\n$ git init\n$ git add . (1) $ git commit -m \"import of frotz source tree.\"\n$ git tag v2.43 (2) add everything under the current directory. make a lightweight, unannotated tag."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git SVN error: a Git process crashed in the repository earlier\nI was just trying to commit changes to the Git master. From what I have read, it seems that the idea is to delete the lock file. The message says:\n\nmake sure no other Git processes are running and remove the file manually\n\nPerhaps someone knows, which file to remove and how to remove?"}, {"role": "assistant", "content": "The file in question is likely .git/index.lock and it should be safe to just remove it if you have no other git processes running.  Make sure a git-svn command isn't hanging.\nPS  My usual approach to fixing git-svn problems is to make a fresh pull of the repository.  Time consuming, but you can do it in parallel with trying to fix the problem. Have a little race between you and git. Of course, this only works if you didn't have unpushed commits."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Find merge commit which includes a specific commit\nImagine the following history:\n       c---e---g--- feature\n      /         \\\n-a---b---d---f---h--- master\n\nHow can I find when commit \"c\" has been merged into master (ie, find merge commit \"h\") ?"}, {"role": "assistant", "content": "Add this to your ~/.gitconfig:\n[alias]\n    find-merge = \"!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'\"\n    show-merge = \"!sh -c 'merge=$(git find-merge $0 $1) && [ -n \\\"$merge\\\" ] && git show $merge'\"\n\nThen you can use the aliases like this:\n# current branch\ngit find-merge <SHA-1>\n# specify master\ngit find-merge <SHA-1> master\n\nTo see the merge commit's message and other details, use git show-merge with the same arguments.\n(Based on Gauthier's answer. Thanks to Rosen Matev and javabrett for correcting a problem with sort.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  -u[<mode>]  --untracked-files[=<mode>]"}, {"role": "assistant", "content": "Show untracked files. The mode parameter is optional (defaults to all ), and is used to\nspecify the handling of untracked files; when -u is not used, the\ndefault is normal , i.e. show untracked files and directories. The possible options are: no - Show no untracked files normal - Shows untracked files and directories all - Also shows individual files in untracked directories. All usual spellings for Boolean value true are taken as normal and false as no .\nThe default can be changed using the status.showUntrackedFiles\nconfiguration variable documented in git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  global"}, {"role": "assistant", "content": "$XDG_CONFIG_HOME/git/config ~/.gitconfig"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-credential"}, {"role": "assistant", "content": "Retrieve and store user credentials"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git: symlink/reference to a file in an external repository\nIs it possible in git to have a \"link\" to a particular file in a git repo? Like what git submodules do for folders but my question is about a particular file, not a full directory:\nmy-project/\n    class1.java\n    class2.java\n    logback.xml (link to a particular file, say https://github.com/theHilikus/JRoboCom/blob/master/jrobocom-core/src/main/resources/logback.xml)\n\nSo as can be seen, in this case it doesn't make sense to have a whole submodule folder, it is just one file.\nI'm ok with the link being locked to a particular commit but it would be better if it's moving as it changes in its own project's lifecycle\nAs a note, this has nothing to do with file-system's symbolic links; I'm talking about a reference to a file in another project, repo, branch, or anything. it's ok if the content of the file is a duplicate and not a file-system symlink"}, {"role": "assistant", "content": "Git has features that you can use to achieve what you need. It supports file system symlinks and it supports submodules. Submodules is already a standard way to handle references to other repositories. You can use them in conjunction with a way to reference files locally. That can be handled directly using relative symbolic links or indirectly using a script that copies over files from the submodule to where you need them.\nYou should have one submodule per external git tree and you should treat the submodules with care, as they are not only links to external repositories but also to their specific commits. The following to solutions will show you how to use individual files from an external repostiory but still maintain all the advantages of submodules.\nAn alternative way is to fetch the files directly but then you will lose the advantage of submodules entirely or you will have to build the features yourself. As I already stated, submodules are the standard way to handle this sort of task and you should use it unless you have special needs like to avoid downloading other files at all cost.\nUsing a submodule and a symlink\nOnce you have a submodule ready, you can just add filesystem symlinks pointing into the submodule directory structure.\nRun this in a shell in your project directory:\n$ git submodule add https://github.com/theHilikus/JRoboCom\n$ ln -s JRoboCom/jrobocom-core/src/main/resources/logback.xml\n$ git add .gitmodules logback.xml\n$ git commit -m \"add a symbolic link to logback.xml with the respective submodule\"\n\nNow you have a symlink:\nlogback.xml -> JRoboCom/jrobocom-core/src/main/resources/logback.xml\n\nUsing a submodule and a script\nAs an alternative, you can use custom scripts that copy over ordinary files from your submodules. In very special cases you could handle the external repositories from the script without submodules but I would normally not recommend it.\nCreate a file bootstrap.sh containing:\n#!/bin/sh\ngit submodule init\ngit submodule update\n\ncp JRoboCom/jrobocom-core/src/main/resources/logback.xml .\n\nRun this in a shell in your project directory:\n$ git submodule add https://github.com/theHilikus/JRoboCom\n$ git add .gitmodules bootstrap.sh\n$ git commit -m \"add a script to fetch logback.xml from the respective submodule\"\n\nNote that we are not adding the logback.xml file to Git, as it will be fetched from the submodule.\nInstruct users of the repository to first run the script above. It will prepare their repositories for using submodules, will fetch the submodule data and will copy the file to its location. Sometimes there's already some sort of bootstrap script in the project.\nUsing a script to fetch a single file via git protocol\nFound another solution for Git >= 1.7.9.5 using git archive.\nCreate a file bootstrap.sh containing:\n#!/bin/sh\ngit archive --remote=https://github.com/theHilikus/JRoboCom master:JRoboCom/jrobocom-core/src/main/resources logback.xml | tar -x\n\nRun this in a shell in your project directory:\n$ git add bootstrap.sh\n$ git commit -m \"add a script to fetch logback.xml directly from the remote project\"\n\nUsing a script to fetch a single file via HTTP\nIf the repository hosting service also serves the individual files via HTTP, you can simply use curl or wget to download them.\nCreate a file bootstrap.sh containing:\n#!/bin/sh\ncurl -O https://raw.githubusercontent.com/theHilikus/JRoboCom/master/jrobocom-core/src/main/resources/logback.xml\n\nRun this in a shell in your project directory:\n$ git add bootstrap.sh\n$ git commit -m \"add a script to fetch logback.xml directly from github\"\n\nNotes on scripts fetching single files\nYou could also store the references in files with a specific extention (like *.url) or maintain the list of references in one file (like .references in your project directory) and build a more comprehensive script that goes through all the references and downloads the respective files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git, filter-branch on all branches\nI'm using the following sources to expunge some large files and directories from my repository:\nhttp://dound.com/2009/04/git-forever-remove-files-or-folders-from-history/\nWhy is my git repository so big?\ngit filter-branch only seems to work on the current branch - is there a way to apply it to all branches at once?"}, {"role": "assistant", "content": "The solution is simple:\ngit filter-branch [options] -- --all\nNote the four dashes (two sets of double dashes with a space in between) in -- --all.\nIf you look at the docs for git-filter-branch, it says this:\ngit filter-branch [--env-filter <command>] [--tree-filter <command>]\n    [--index-filter <command>] [--parent-filter <command>]\n    [--msg-filter <command>] [--commit-filter <command>]\n    [--tag-name-filter <command>] [--subdirectory-filter <directory>]\n    [--prune-empty]\n    [--original <namespace>] [-d <directory>] [-f | --force]\n    [--] [<rev-list options>\u2026]\n\nReading on, the beginning of the docs say: \"Lets you rewrite git revision history by rewriting the branches mentioned in the <rev-list options>, applying custom filters on each revision.\"\nSo checking the docs for rev-list gives:\n\n< rev-list options >\u2026 Arguments for git rev-list. All positive refs\n  included by these options are rewritten. You may also specify options\n  such as --all, but you must use -- to separate them from the git\n  filter-branch options.\n\nAnd the docs for git-rev-list say:\n--all\nPretend as if all the refs in refs/ are listed on the command line as <commit>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to retry pipeline (not individual jobs) in GitLab via the UI?\n\nBasically I am looking for the retry button for the pipeline triggered, but all I see is a retry button for the individuals jobs of that pipeline. I don't want to have to push a commit just to retry a pipeline.\nReference screenshot"}, {"role": "assistant", "content": "You can retry the latest push on the pipeline by going to:\n\nCI/CD -> Pipelines -> Run Pipeline -> Select the branch to run.\n\nOtherwise, as you've mentioned, you'd have to manually press the retry button for each individual job for the pipeline (for a pipeline that isn't the latest)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "cannot push into git repository\nThis is what I have done so far and I will say this procedure worked on Ubuntu 9.10 which perhaps had a different version of git.\nserver: mkdir ~/git\n\nlocal: scp -r /../project [email\u00a0protected]:~/git/\nserver: cd git\n        cd project\n        git init \n        git add .\n        git commit -a -m \"initial\"\n\nlocal: git clone [email\u00a0protected]:/../git/project /home/name/project\n   cd project\n   capify .  (from the ruby gem capistrano)\n   git add .\n   git commit -a -m \"capified\"\n   git push\n\nWhen I try to push this out I get this error message:\n   remote: error: refusing to update checked out branch: refs/heads/master\n   remote: error: By default, updating the current branch in a non-bare repository\n   remote: error: is denied, because it will make the index and work tree inconsistent\n   remote: error: with what you pushed, and will require 'git reset --hard' to match\n   remote: error: the work tree to HEAD.\n   remote: error: \n   remote: error: You can set 'receive.denyCurrentBranch' configuration variable to\n   remote: error: 'ignore' or 'warn' in the remote repository to allow pushing into\n   remote: error: its current branch; however, this is not recommended unless you\n   remote: error: arranged to update its work tree to match what you pushed in some\n   remote: error: other way.\n   remote: error: \n   remote: error: To squelch this message and still keep the default behaviour, set\n   remote: error: 'receive.denyCurrentBranch' configuration variable to 'refuse'.\n   To ...\n   ! [remote rejected] master -> master (branch is currently checked out)\n   error: failed to push some refs to"}, {"role": "assistant", "content": "At server side, do this:\ngit config receive.denyCurrentBranch ignore\n\nThen you can push at local."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "List all GitHub repos for an organization - INCLUDING those in teams\n\nHere's my query to the GitHub API\ncurl -i -u {user} https://api.github.com/orgs/{org}/repos?type=all\n\nBut this does not list all repos for this organization that I have access to. Specifically, it does not list repos in the organization that are part of a team that I am a member of.\nIf I were to query\ncurl -i -u {user} https://api.github.com/teams/{teamid}/repos\n\nI would see the missing repos. If I were to navigate to github.com, I would see both private organization repos and my team repos next to each other on the same page. Is there a way to get all of these repos in the same API query?"}, {"role": "assistant", "content": "You can use the below command\ngh repo list {organization-name}\n\nbefore this login with below command\ngh auth login\n\ngithub.com/cli/cli"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --binary"}, {"role": "assistant", "content": "In addition to --full-index , output a binary diff that\ncan be applied with git-apply .\nImplies --patch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git on the server(windows server 2012) [closed]\n\nClosed. This question does not meet Stack Overflow guidelines. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n Questions asking us to recommend or find a book, tool, software library, tutorial or other off-site resource are off-topic for Stack Overflow as they tend to attract opinionated answers and spam. Instead, describe the problem and what has been done so far to solve it.\n\n\nClosed 9 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nWe want to install Git in our dedicated server to mange our code version and code revision. Our dedicated server has Windows server 2012. We thought about GitLab, but it is not supported in windows. Suggest me which one should I use, there is Gitprep for windows."}, {"role": "assistant", "content": "You could use Bonobo Git Server, it is designed to run on Windows in IIS."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  plain"}, {"role": "assistant", "content": "Show words as [-removed-] and {+added+} .  Makes no\nattempts to escape the delimiters if they appear in the input,\nso the output may be ambiguous."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  --all  --branches"}, {"role": "assistant", "content": "Push all branches (i.e. refs under refs/heads/ ); cannot be\nused with other <refspec>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.allowPackReuse"}, {"role": "assistant", "content": "When true or \"single\", and when reachability bitmaps are\nenabled, pack-objects will try to send parts of the bitmapped\npackfile verbatim. When \"multi\", and when a multi-pack\nreachability bitmap is available, pack-objects will try to send\nparts of all packs in the MIDX. If only a single pack bitmap is available, and pack.allowPackReuse is set to \"multi\", reuse parts of just the bitmapped packfile. This\ncan reduce memory and CPU usage to serve fetches, but might result in\nsending a slightly larger pack. Defaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --merge"}, {"role": "assistant", "content": "Show commits touching conflicted paths in the range HEAD...<other> ,\nwhere <other> is the first existing pseudoref in MERGE_HEAD , CHERRY_PICK_HEAD , REVERT_HEAD or REBASE_HEAD . Only works\nwhen the index has unmerged entries. This option can be used to show\nrelevant commits when resolving conflicts from a 3-way merge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Cherry-Picking few commits from another branch\nI have a scenario where I don't want to cherry-pick a specific commit but a range of git commits from remote.\nI can do force pull with hard option but that will get all the commits including latest changes from remote.\nPlease suggest how can I pick range of commits from remote.\n\nFor instance, this is what I am trying:\ngit checkout -b newbranch 62ecb3\n\ngit rebase --onto master 76cada, 56qwqw, 46erer"}, {"role": "assistant", "content": "Let's say the history is A-B-C-D-E-F-G, and you'd like to cherry-pick C-D-E-F.\ngit cherry-pick B..F\n\nor\ngit cherry-pick C^..F\n\nor\ngit cherry-pick C D E F"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitLab issuing temporary IP bans - 403 forbidden\n\nMy GitLab instance setup will occasionally put in place an IP ban on our own IP address, resulting in all our users in the office getting 403 / Forbidden on any web page or git request.\nThe ban is being put in place as a result of repeated errors authenticating, which is a separate problem altogether, but I would like to prevent our own IP address from being IP banned. It lasts for about one hour.\nIn the nginx logs, nothing unusual pops up in the gitlab_access.log or gitlab_error.log files. The server is still running, and external IP addresses are unaffected while the ban is in place.\nI would like to be able to whitelist our own IP address, or to be able to disable the ban once it occurs (restarting gitlab doesn't remove the ban). If neither of these are possible, then just finding the setting to tweak the ban duration down from one hour would be OK too."}, {"role": "assistant", "content": "We are running Gitlab EE and for us this issue was caused by a combination of using git lfs inside a build on a Gitlab CI runner, and having installed the rack-attack gem on the Gitlab server.\nBackground\nIn order to work around an issue with git-lfs 1.2.1 (where it insisted on requiring username and password despite cloning a public repository), the build contained this line:\ngit clone https://fakeuser:[email\u00a0protected]/group/repo.git\n\nOn build, this resulted in every LFS request from the runner triggering a login attempt with fakeuser, which obviously failed every time. However, since no login was actually required by the server, the client could continue downloading the files using LFS, and the build passed.\nIssue\nThe IP banning started when the package rack-attack was installed. By default, after 10 failed login attempts, rack-attack bans the origin IP for one hour. This resulted in all runners being completely blocked from Gitlab (even visiting the web page from the runner would return 403 Forbidden).\nWorkaround (insecure)\nA short-term workaround, if the servers (Gitlab runners in our case) are trusted, is to add the servers' IPs to a whitelist in the rack-attack configuration. Adjusting the ban time, or allowing more failed attempts, is also possible.\nExample configuration in /etc/gitlab/gitlab.rb:\ngitlab_rails['rack_attack_git_basic_auth'] = {\n  'enabled' => true,\n  'ip_whitelist' => [\"192.168.123.123\", \"192.168.123.124\"],\n  'maxretry' => 10,\n  'findtime' => 60,\n  'bantime' => 600\n}\n\nIn this example, we are whitelisting the servers 192.168.123.123 and 192.168.123.124, and adjusting down the ban time from one hour to 10 minutes (600 seconds). maxretry = 10 allows a user to get the password wrong 10 times before ban, and findtime = 60 means that the failed attempts counter resets after 60 seconds.\nThen, you should reconfigure gitlab before changes take effect: sudo gitlab-ctl reconfigure\nMore details, and for the YAML version of the config example, see gitlab.yml.example.\nNOTE: whitelisting servers is insecure, as it fully disables blocking/throttling on the whitelisted IPs.\nSolution\nThe solution to this problem should be to stop the failing login attempts, or possibly just reduce the ban time, as whitelisting leaves Gitlab vulnerable to password brute-force attacks from all whitelisted servers."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  status.renames"}, {"role": "assistant", "content": "Whether and how Git detects renames in git-status and git-commit .  If set to \"false\", rename detection is\ndisabled. If set to \"true\", basic rename detection is enabled.\nIf set to \"copies\" or \"copy\", Git will detect copies, as well.\nDefaults to the value of diff.renames."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Pagination in Gitlab API only returns 100 per_page max\n\nI am currently using GitLab API to return all projects within a group. The question I have is, how do I return all projects if there are over 100 projects in the group?\nThe curl command I'm using is curl --header \"PRIVATE-TOKEN: **********\" http://gitlab.example.com/api/v4/groups/myGroup/projects?per_page=100&page=1\nI understand that the default page=1 and the max per_page=100 so what do I do if there are over 100 projects? If I set page=2, it just returns all the projects after the first 100."}, {"role": "assistant", "content": "Check the response for the X-Total-Pages header. As long as page is smaller than total pages, you have to call the api again and increment the page variable.\nhttps://docs.gitlab.com/ee/api/rest/index.html#pagination-link-header"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  done"}, {"role": "assistant", "content": "Marks the end of the stream. This command is optional\nunless the done feature was requested using the --done command-line option or feature done command."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I delete a commit from a branch?\nHow do I delete a commit from my branch history? Should I use git reset --hard HEAD?"}, {"role": "assistant", "content": "Careful: git reset --hard WILL DELETE YOUR WORKING DIRECTORY CHANGES.\nBe sure to stash any local changes you want to keep before running this command.\nAssuming you are sitting on that commit, then this command will wack it...\ngit reset --hard HEAD~1\n\nThe HEAD~1 means the commit before head.\nOr, you could look at the output of git log, find the commit id of the commit you want to back up to, and then do this:\ngit reset --hard <sha1-commit-id>\n\n\nIf you already pushed it, you will need to do a force push to get rid of it...\ngit push origin HEAD --force\n\nHowever, if others may have pulled it, then you would be better off starting a new branch.  Because when they pull, it will just merge it into their work, and you will get it pushed back up again.\nIf you already pushed, it may be better to use git revert, to create a \"mirror image\" commit that will undo the changes.  However, both commits will be in the log.\n\nFYI: git reset --hard HEAD is great if you want to get rid of WORK IN PROGRESS.It will reset you back to the most recent commit, and erase all the changes in your working tree and index.\ngit stash does the same except you can restore it later if you need, versus permanently delete with reset hard mode. Check your stashes by using git stash list and git stash show 'stash@123'\n\nLastly, if you need to find a commit that you \"deleted\", it is typically present in git reflog unless you have garbage collected your repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Use of apostrophe (single-quote) in a Git commit message via command line [duplicate]\nThis question already has answers here:\n                                \n                            \n\n\n\n\nHow to escape single quotes within single quoted strings\n\n                                (25 answers)\n                            \n\nClosed 11 years ago.\n\n\n\nI am trying to take this one step further. How could this work in a standard Bash shell?\ngit commit -m 'cracked enigma's code'\n\nCould this simply be done with backslash-escaping like the following?\ngit commit -m 'cracked enigma\\'s code'\n\nFurther, how could double-quotes be used? Also by backslash-escaping? Would that be the best way? Are there any good alternative ways?\ngit commit -m 'cracked the \"real\" enigma's code'"}, {"role": "assistant", "content": "Use double quotes:\ngit commit -m \"cracked enigma's code\"\n\nOr, if your message contains other special characters, use double quotes or backslash only for the single quote:\ngit commit -m 'cracked $enigma'\"'\"'s code'\ngit commit -m 'cracked $enigma'\\''s code'"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --no-recurse-submodules"}, {"role": "assistant", "content": "Disable recursive fetching of submodules (this has the same effect as\nusing the --recurse-submodules=no option)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --[no-]base[=<commit>]"}, {"role": "assistant", "content": "Record the base tree information to identify the state the\npatch series applies to.  See the BASE TREE INFORMATION section\nbelow for details. If <commit> is \"auto\", a base commit is\nautomatically chosen. The --no-base option overrides a format.useAutoBase configuration."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  Set"}, {"role": "assistant", "content": "Notice all types of potential whitespace errors known to Git.\nThe tab width is taken from the value of the core.whitespace configuration variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-restore - Restore working tree files  --pathspec-file-nul"}, {"role": "assistant", "content": "Only meaningful with --pathspec-from-file . Pathspec elements are\nseparated with NUL character and all other characters are taken\nliterally (including newlines and quotes)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: Installing Git in PATH with GitHub client for Windows\n\nHow do I install Git in my PATH when using the GitHub client for Windows?\nI'm running into errors because apparently Git is not installed in PATH. For example, using Atom, trying to install the Linter plugin gives this error:\nnpm ERR! not found: git\nnpm ERR! \nnpm ERR! Failed using git.\nnpm ERR! This is most likely not a problem with npm itself.\nnpm ERR! Please check if you have git installed and in your PATH.\n\nDoes GitHub for Windows install Git when it installs? (It must, otherwise how does it use Git?) I don't want to double-install it... so how do I just add the Git that's already there to PATH?"}, {"role": "assistant", "content": "GitHub for Windows does indeed install its own version of Git, but it doesn't add it to the PATH variable, which is easy enough to do. Here's instructions on how to do it:\n\nGet the Git URL\nWe need to get the url of the Git \\cmd directory your computer. Git is located here: \nC:\\Users\\<user>\\AppData\\Local\\GitHub\\PortableGit_<guid>\\cmd\\git.exe\n\nSo on your computer, replace <user> with your user and find out what the <guid> is for your computer. (The guid may change each time GitHub updates PortableGit, but they're working on a solution to that.) \nCopy it and paste it into a command prompt (right-click > paste to paste in the terminal) to verify that it works. You should see the Git help response that lists common Git commands. If you see The system cannot find the path specified. Then the URL isn\u2019t right. Once you have it right, create the link to the directory using this format: \n;C:\\Users\\<user>\\AppData\\Local\\GitHub\\PortableGit_<guid>\\cmd\n\n(Note: \\cmd at the end, not \\cmd\\git.exe anymore!)\nOn my system, it\u2019s this, yours will be different:\n;C:\\Users\\brenton\\AppData\\Local\\GitHub\\PortableGit_7eaa494e16ae7b397b2422033as45d8ff6ac2010\\cmd\n\nEdit the PATH Variable\nNavigate to the Environmental Variables Editor (instructions) and find the Path variable in the \u201cSystem Variables\u201d section. Click Edit\u2026 and paste the URL of Git to the end of that string. Save! It might be easier to pull this into Notepad to do the edit, just make sure you put one semicolon before you paste in the URL. If it doesn't work it\u2019s probably because this path got messed up either with a space in there somewhere (should be no spaces around the semicolon) or a semicolon at the end (semicolons should only separate URLs, no semicolon at beginning or end of string). \n\nIf it worked, you should be able to close & reopen a terminal and type git and it will give you that same git help file. Then installing the Linter should work. (Atom > File > Settings > Packages > Linter)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git: checkout files from another branch into current branch (don't switch HEAD to the other branch)\nI want to load a different version of the files that exist in another branch into my current branch.\ngit help checkout says:\nDESCRIPTION\n   Updates files in the working tree to match the version in the index or\n   the specified tree. If no paths are given, git checkout will also\n   update HEAD to set the specified branch as the current branch.\n\nIs there a way to checkout all those files, but not update HEAD?"}, {"role": "assistant", "content": "checkout by providing the current path, .:\ngit checkout other-branch-name -- .\nThis operation is similar to switching HEAD to another branch without checking out files, but just from the \"other direction\".\nAs @\uae40\ubbfc\uc900 mentions, this overwrites any uncommitted changes. Remember to either stash or commit them somewhere first if needed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.recentObjectsHook"}, {"role": "assistant", "content": "When considering whether or not to remove an object (either when\ngenerating a cruft pack or storing unreachable objects as\nloose), use the shell to execute the specified command(s).\nInterpret their output as object IDs which Git will consider as\n\"recent\", regardless of their age. By treating their mtimes as\n\"now\", any objects (and their descendants) mentioned in the\noutput will be kept regardless of their true age. Output must contain exactly one hex object ID per line, and nothing\nelse. Objects which cannot be found in the repository are ignored.\nMultiple hooks are supported, but all must exit successfully, else the\noperation (either generating a cruft pack or unpacking unreachable\nobjects) will be halted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "See \"real\" commit date / time in github (hour/day)\nIs there a way to see the date of a commit in github, with day/hour precision? Older commits appear in a \"human readable\" format, such as \"2 years ago\" instead of showing the actual date.\n\nIf it's not possible to see the actual date on github, is there a easier workaround than git clone?"}, {"role": "assistant", "content": "Hover your mouse over the 2 years ago and you'll get the timestamp."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  -N  --intent-to-add"}, {"role": "assistant", "content": "Record only the fact that the path will be added later. An entry\nfor the path is placed in the index with no content. This is\nuseful for, among other things, showing the unstaged content of\nsuch files with git diff and committing them with git commit\n-a ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.indentHeuristic"}, {"role": "assistant", "content": "Set this option to false to disable the default heuristics\nthat shift diff hunk boundaries to make patches easier to read."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I see all the issues I'm watching on Github?\n\nGithub has a great feature where you can \"watch\" an issue. This is handy for getting notifications about progress on that issue.\nHowever, sometimes you want to find the status of an issue you know you've flagged to watch, but can't remember what it was. This is particularly interesting, imho, for projects that are not your own projects. E.g. watching a bug in a library that your project uses but you don't contribute to frequently.\nWhat I tried: Note that this is different from watching a repo. I tried searching github help (for \"watch issue\" and \"subscribe issue\" with no luck. I read the Unsubscribing from Conversations with some hope, but it didn't quite apply. While looking at the issues for the repository that I (think! I) subscribed to, I tried the various search criteria dropdowns with no luck. Last but not least, I read how to subscribe here at SO in case it mentioned how to see the subscribed list.\nTo those who might flag this as not being about programming, I can only ask for a better place to put this? As Github is a commonly used programming tool, I view this as highly relevant."}, {"role": "assistant", "content": "You can see all the GitHub issues you are currently subscribed to at https://github.com/notifications/subscriptions\nYou can navigate to this page from any page by clicking the notification/bell icon on the top right and then selecting \"Manage notifications\" > \"Subscriptions\" from the left menu panel."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  histogram"}, {"role": "assistant", "content": "This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I get git to default to ssh and not https for new repositories\nThese days when I create a new repository on GitHub on the setup page I get:\ngit remote add origin https://github.com/nikhilbhardwaj/abc.git\ngit push -u origin master\n\nAnd whenever I have to push a commit I need to enter my GitHub username and password.\nI can manually change that to \n[email\u00a0protected]:nikhilbhardwaj/abc.git\n\nin the .git/config. I find this quite irritating - is there some way I can configure git to use SSH by default?"}, {"role": "assistant", "content": "Set up a repository's origin branch to be SSH\nThe GitHub repository setup page is just a suggested list of commands (and GitHub now suggests using the HTTPS protocol). Unless you have administrative access to GitHub's site, I don't know of any way to change their suggested commands.\nIf you'd rather use the SSH protocol, simply add a remote branch like so (i.e. use this command in place of GitHub's suggested command). To modify an existing branch, see the next section.\n$ git remote add origin [email\u00a0protected]:nikhilbhardwaj/abc.git\n\n\nModify a pre-existing repository\nAs you already know,  to switch a pre-existing repository to use SSH instead of HTTPS, you can change the remote url within your .git/config file.\n[remote \"origin\"]\n    fetch = +refs/heads/*:refs/remotes/origin/*\n    -url = https://github.com/nikhilbhardwaj/abc.git\n    +url = [email\u00a0protected]:nikhilbhardwaj/abc.git\n\nA shortcut is to use the set-url command:\n$ git remote set-url origin [email\u00a0protected]:nikhilbhardwaj/abc.git\n\n\nMore information about the SSH-HTTPS switch\n\n\"Why is Git always asking for my password?\" - GitHub help page.\nGitHub's switch to Smart HTTP - relevant StackOverflow question\nCredential Caching for Wrist-Friendly Git Usage - GitHub blog post about HTTPS, and how to avoid re-entering your password"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --[no-]chain-reply-to"}, {"role": "assistant", "content": "If this is set, each email will be sent as a reply to the previous\nemail sent.  If disabled with \"--no-chain-reply-to\", all emails after\nthe first will be sent as replies to the first email sent.  When using\nthis, it is recommended that the first file given be an overview of the\nentire patch series. Disabled by default, but the sendemail.chainReplyTo configuration variable can be used to enable it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --summary"}, {"role": "assistant", "content": "Output a condensed summary of extended header information\nsuch as creations, renames and mode changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "RPC failed; HTTP 400 curl 22 The requested URL returned error: 400 Bad Request\n\nI am trying to push my code from an old repository to a new repository as my old repository seems to be currupted somehow\ngetting following error:\nCounting objects: 19815, done.\nCompressing objects: 100% (5264/5264), done.\nWriting objects: 100% (19815/19815), 44.91 MiB | 134.87 MiB/s, done.\nTotal 19815 (delta 14641), reused 19405 (delta 14283)\nerror: RPC failed; HTTP 400 curl 22 The requested URL returned error: 400 Bad Request\nfatal: The remote end hung up unexpectedly\nfatal: The remote end hung up unexpectedly\nEverything up-to-date\n\nI tried git config http.postBuffer 524288000 but it did not help I even tried to do git push --force origin and git push --all but am receiving same error"}, {"role": "assistant", "content": "I faced a similar issue on my Arch Linux machine. Apparently my issue was an HTTP buffer issue.\nI got it to work by using\ngit config http.postBuffer 524288000\n\nfollowed by\ngit pull && git push\n\nThis did the trick for me and I can push to my repositories. However I wonder if there is a better way of implementing this rather than running an extra command."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git merge reports \"Already up-to-date\" though there is a difference\nI have a git repository with 2 branches: master and test.\nThere are differences between master and test branches.\nBoth branches have all changes committed.\nIf I do:\n\ngit checkout master\ngit diff test\n\nA screen full of changes appears showing the differences. I want to merge the changes in the test branch and so do:\ngit merge test\nBut get the message \"Already up-to-date\"\nHowever, examining files under each different branch clearly shows differences.\nWhat's the problem here and how do I resolve it?"}, {"role": "assistant", "content": "The message \u201cAlready up-to-date\u201d means that all the changes from the branch you\u2019re trying to merge have already been merged to the branch you\u2019re currently on. More specifically it means that the branch you\u2019re trying to merge is a parent of your current branch. Congratulations, that\u2019s the easiest merge you\u2019ll ever do. :)\nUse gitk to take a look at your repository. The label for the \u201ctest\u201d branch should be somewhere below your \u201cmaster\u201d branch label.\nYour branch is up-to-date with respect to its parent. According to merge there are no new changes in the parent since the last merge.  That does not mean the branches are the same, because you can have plenty of changes in your working branch and it sounds like you do.  \nEdit 10/12/2019: \nPer Charles Drake in the comment to this answer, one solution to remediate the problem is:\ngit checkout master\ngit reset --hard test\n\nThis brings it back to the 'test' level. \nThen do:\ngit push --force origin master\n\nin order to force changes back to the central repo."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Viewing a Deleted File in Git\nI've deleted a file with Git and then committed, so the file is no longer in my working copy. I want to look at the contents of that file, but not actually restore it. How can I do this?"}, {"role": "assistant", "content": "git show HEAD^:path/to/file\n\nYou can use an explicit commit identifier or HEAD~n to see older versions or if there has been more than one commit since you deleted it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --cc"}, {"role": "assistant", "content": "Produce dense combined diff output for merge commits.\nShortcut for --diff-merges=dense-combined -p ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I interactively unstage a particular hunk in git?\nIn git, if I have a couple of hunks from the same file staged in my index, how can I interactively unstage one of them?\nIs there any alternative to unstaging the entire file, and then re-staging the hunks I want to keep, or manually undoing the changes to the working copy, and then interactively adding those undone changes?"}, {"role": "assistant", "content": "Try git reset --patch filename; this should do the opposite of git add --patch, according to the documentation. The short form -p also works for both commands."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_NO_LAZY_FETCH"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true tells Git\nnot to lazily fetch missing objects from the promisor remote\non demand."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git Checkout Latest Tag\nI'm writing a shell script and I'm looking to checkout the latest version of repo. Specifically I want to break this process apart into multiple steps.\n\nI want to save the repositories latest tag into a variable \nPrint out Checking out version: XX\nCheckout the latest tag\n\nI've seen similar questions but I don't see how to save the name of the tag into a variable (probably because I'm a noob with shell scripts)."}, {"role": "assistant", "content": "# Get new tags from remote\ngit fetch --tags\n\n# Get latest tag name\nlatestTag=$(git describe --tags \"$(git rev-list --tags --max-count=1)\")\n\n# Checkout latest tag\ngit checkout $latestTag"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --shortstat"}, {"role": "assistant", "content": "Output only the last line of the --stat format containing total\nnumber of modified files, as well as number of added and deleted\nlines."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-cvsserver"}, {"role": "assistant", "content": "A CVS server emulator for Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  allow-indentation-change"}, {"role": "assistant", "content": "Initially ignore any whitespace in the move detection, then\ngroup the moved code blocks only into a block if the change in\nwhitespace is the same per line. This is incompatible with the\nother modes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can you get the number of lines of code from a GitHub repository?\n\nIn a GitHub repository you can see \u201clanguage statistics\u201d, which displays the percentage of the project that\u2019s written in a language. It doesn\u2019t, however, display how many lines of code the project consists of. Often, I want to quickly get an impression of the scale and complexity of a project, and the count of lines of code can give a good first impression. 500 lines of code implies a relatively simple project, 100,000 lines of code implies a very large/complicated project.\nSo, is it possible to get the lines of code written in the various languages from a GitHub repository, preferably without cloning it?\n\nThe question \u201cCount number of lines in a git repository\u201d asks how to count the lines of code in a local Git repository, but:\n\nYou have to clone the project, which could be massive. Cloning a project like Wine, for example, takes ages.\nYou would count lines in files that wouldn\u2019t necessarily be code, like i13n files.\nIf you count just (for example) Ruby files, you\u2019d potentially miss massive amount of code in other languages, like JavaScript. You\u2019d have to know beforehand which languages the project uses. You\u2019d also have to repeat the count for every language the project uses.\n\nAll in all, this is potentially far too time-intensive for \u201cquickly checking the scale of a project\u201d."}, {"role": "assistant", "content": "You can run something like\n\ngit ls-files | xargs wc -l\n\nWhich will give you the total count!\n\nYou can also add more instructions. Like just looking at the JavaScript files.\ngit ls-files | grep '\\.js' | xargs wc -l"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Show diff between commits\nI am using Git on Ubuntu\u00a010.04 (Lucid Lynx).\nI have made some commits to my master.\nHowever, I want to get the difference between these commits. All of them are on my master branch.\nFor example:\ncommit dj374\nmade changes\n\ncommit y4746\nmade changes\n\ncommit k73ud\nmade changes\n\nI want to get the difference between k73ud and dj374. However, when I did the following I couldn't see the changes I made in k73ud.\ngit diff k73ud..dj374 > master.patch"}, {"role": "assistant", "content": "Try\ngit diff k73ud^..dj374\n\nto make sure to include all changes of k73ud in the resulting diff.\ngit diff compares two endpoints (instead of a commit range).\nSince the OP wants to see the changes introduced by k73ud, they need to differentiate between the first parent commit of k73ud: k73ud^ (or k73ud^1 or k73ud~).\nThat way, the diff results will include changes since k73ud parent (meaning including changes from k73ud itself), instead of changes introduced since k73ud (up to dj374).\nAlso you can try:\ngit diff oldCommit..newCommit\ngit diff k73ud..dj374 \n\nand (1 space, not more):\ngit diff oldCommit newCommit\ngit diff k73ud dj374\n\nAnd if you need to get only files names (e.g. to copy hotfix them manually):\ngit diff k73ud dj374 --name-only\n\nAnd you can get changes applied to another branch:\ngit diff k73ud dj374 > my.patch\ngit apply my.patch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Find a Pull Request on GitHub where a commit was originally created\n\nPull Requests are great for understanding the larger thinking around a change or set of changes made to a repo. Reading pull requests are a great way to quickly \"grok\" a project as, instead of small atomic changes to the source, you get larger groupings of logical changes. Analogous to organizing the lines in your code into related \"stanzas\" to make it easier to read.\nI find myself looking at a file or a commit, and I wonder if there is a way to backtrack the commit to the Pull Request that originally created it. That Pull Request would have been merged eventually, but not necessary with a merge-commit."}, {"role": "assistant", "content": "You can just go to GitHub and enter the SHA into the search bar, make sure you select the \"Issues\" link on the left.\nUPDATED 13 July 2017\nVia the GitHub UI there is a now a really easy way to do this. If you are looking at a commit in the list of commits in a branch in the UI, click on the link to the commit itself. If there is a PR for that commit and it wasn't added directly to the branch, a link to the PR listing the PR number and the branch it went into will be directly under the commit message at the top of the page.\n\n\n\nIf you have the commit SHA and nothing else and don't want to go digging around for it, just add /commit/[commit SHA] to the repo url, and you will see the commit page, with the PR link if it exists.\nFor example, if the SHA is 52797a7a3b087231e4e391e11ea861569205aaf4 and the repo is https://github.com/glimmerjs/glimmer-vm , then go to https://github.com/glimmerjs/glimmer-vm/commit/52797a7a3b087231e4e391e11ea861569205aaf4"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub Error Message - Permission denied (publickey)\n\nAnybody seen this error and know what to do?\nI'm using the terminal, I'm in the root, the GitHub repository exists and I don't know what to do now.\n> git push -u origin master\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists."}, {"role": "assistant", "content": "GitHub isn't able to authenticate you.  So, either you aren't setup with an SSH key, because you haven't set one up on your machine, or your key isn't associated with your GitHub account.\nYou can also use the HTTPS URL instead of the SSH/git URL to avoid having to deal with SSH keys.  This is GitHub's recommended method.\nFurther, GitHub has a help page specifically for that error message, and explains in more detail everything you could check.\nTo solve it:\n\nYou should have a public key in your home directory, thus print the content of your public key, in Linux distro run for example cat ~/.ssh/id_rsa.pub (if the prior doesn't work, check the keys inside ~/.ssh/ with .pub extension)\n\nAdd the content of such a public key to your Github account: click your profile photo -> Settings-> SSH and GPG keys -> New SSH key or Add SSH key"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  --directory"}, {"role": "assistant", "content": "If a whole directory is classified as \"other\", show just its\nname (with a trailing slash) and not its whole contents.\nHas no effect without -o/--others."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to pull NPM dependency from private GitLab Git repo during GitLab CI build\n\nI have a job in my .gitlab-ci.yml file which does an npm install like so:\ntest:\n  image: node:10\n  script:\n    - npm install\n    - npm test\n\nThe problem is that I'm referencing a private GitLab repo in my package.json:\n\"dependencies\": {\n  \"internal-dep\": \"git+https://gitlab.com/Company/internal-dep.git\",\n  ...\n\nThe npm install command works locally, since I'm already authed against GitLab, but fails on GitLab CI. How do I get internal-dep to resolve successfully on GitLab CI?"}, {"role": "assistant", "content": "There are two approaches I've found that allow Git to auth successfully against GitLab during the npm install step (which uses Git under the hood to access this dependency).\nFirst approach, as shown in this .gitlab-ci.yml job:\ntest:\n  image: node:10\n  script:\n    - echo -e \"machine gitlab.com\\nlogin gitlab-ci-token\\npassword ${CI_JOB_TOKEN}\" > ~/.netrc\n    - npm install\n    - npm test\n\nSecond approach, which also seems to work:\ntest:\n  image: node:10\n  script:\n    - git config --global url.\"https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/\".insteadOf https://gitlab.com/\n    - npm install\n    - npm test"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  imap.tunnel"}, {"role": "assistant", "content": "Command used to set up a tunnel to the IMAP server through which\ncommands will be piped instead of using a direct network connection\nto the server. Required when imap.host is not set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  -f  --force"}, {"role": "assistant", "content": "This option is only valid for add, deinit and update commands.\nWhen running add, allow adding an otherwise ignored submodule path.\nWhen running deinit the submodule working trees will be removed even\nif they contain local changes.\nWhen running update (only effective with the checkout procedure),\nthrow away local changes in submodules when switching to a\ndifferent commit; and always run a checkout operation in the\nsubmodule, even if the commit listed in the index of the\ncontaining repository matches the commit checked out in the\nsubmodule."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I amend a commit made with VSCode to GitHub repo?\n\nI learn Git and Using VSCode and just learn the commit \"amend\" command and now trying it on origin (GitHub).\nI can't find any way to do this. Do I need some external tool to do that I don't see any \"push amend\" from the Git menu in VSCode"}, {"role": "assistant", "content": "You can go to Commit -> choose Commit All(Amend) or Commit Staged(Amend). Take a look at the picture."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  rfc2822"}, {"role": "assistant", "content": "This is the standard date format as described by RFC 2822. An example value is \u201cTue Feb 6 11:22:18 2007 -0500\u201d.  The Git\nparser is accurate, but a little on the lenient side.  It is the\nsame parser used by git am when applying patches\nreceived from email. Some malformed strings may be accepted as valid dates.  In some of\nthese cases Git will still be able to obtain the correct date from\nthe malformed string.  There are also some types of malformed\nstrings which Git will parse wrong, and yet consider valid.\nSeriously malformed strings will be rejected. Unlike the raw format above, the time zone/UTC offset information\ncontained in an RFC 2822 date string is used to adjust the date\nvalue to UTC prior to storage.  Therefore it is important that\nthis information be as accurate as possible. If the source material uses RFC 2822 style dates,\nthe frontend should let fast-import handle the parsing and conversion\n(rather than attempting to do it itself) as the Git parser has\nbeen well tested in the wild. Frontends should prefer the raw format if the source material\nalready uses UNIX-epoch format, can be coaxed to give dates in that\nformat, or its format is easily convertible to it, as there is no\nambiguity in parsing."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-diff-index"}, {"role": "assistant", "content": "Compare a tree to the working tree or index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-format-patch"}, {"role": "assistant", "content": "Prepare patches for e-mail submission"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  --full"}, {"role": "assistant", "content": "Check not just objects in GIT_OBJECT_DIRECTORY\n($GIT_DIR/objects), but also the ones found in alternate\nobject pools listed in GIT_ALTERNATE_OBJECT_DIRECTORIES\nor $GIT_DIR/objects/info/alternates,\nand in packed Git archives found in $GIT_DIR/objects/pack\nand corresponding pack subdirectories in alternate\nobject pools.  This is now default; you can turn it off\nwith --no-full."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git rebase using sourcetree\nI think I am confused on how to use SourceTree GUI to do git rebase. I have two branches \"master\" and \"dev\". As seen, the two branch diverged. I want to do a rebase on \"dev\" branch, using command line, this would be:\ngit checkout dev\ngit rebase master\n\n\nI would have expected to right click \"dev\", and choose \"Rebase current changes onto dev\". I assume current changes means \"new commits on master\". But picking this option seems have no effect whatsoever. What would be the correct steps?"}, {"role": "assistant", "content": "But picking this option seems have no effect whatsoever. \n\nYes, because current changes are the one of the current branches, which is dev.\nRebasing dev on top of dev means an no-op.\ngit checkout dev\ngit rebase master\n\nThat means: current branch is dev: to be rebased on top of master.\nSo in SourceTree, you need to right-click on master (while dev is checked out), and select:\nRebase current changes onto master\n\nHowe adds in the comments:\n\nCurrent Naming of \"rebase current changes onto [branch]\" is misleading.   Check out this improvement discussion SRCTREE-1578.\nAfter finding myself baffled attempting to bring a feature branch up to date with development and failing, I've come to realize that the left-pane context menu item labeled \u201crebase current changes onto $somebranch\u201d actually does the opposite of what its name suggests:\n  it rebases the current branch to the state of $somebranch;\n  In other words it rebases $somebranch onto (or into) the current branch, not the other way around. (Right?)\nThe preposition \u201conto\u201d in the current text is misleading; it implies that the object of the sentence ($somebranch in my example) will receive the changes.\n  In fact, it is the opposite that will occur.\n  The absence of the current branch's name adds to the confusion.\nA re-wording that improves the sentence structure and includes the name of the affected branch would afford a huge win for clarity.\n  For example:\nrebase $currentbranch to head of $somebranch\nrebase $somebranch onto $currentbranch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules"}, {"role": "assistant", "content": "SYNOPSIS git submodule [--quiet] [--cached] git submodule [--quiet] add [<options>] [--] <repository> [<path>] git submodule [--quiet] status [--cached] [--recursive] [--] [<path>\u2026\u200b] git submodule [--quiet] init [--] [<path>\u2026\u200b] git submodule [--quiet] deinit [-f|--force] (--all|[--] <path>\u2026\u200b) git submodule [--quiet] update [<options>] [--] [<path>\u2026\u200b] git submodule [--quiet] set-branch [<options>] [--] <path> git submodule [--quiet] set-url [--] <path> <newurl> git submodule [--quiet] summary [<options>] [--] [<path>\u2026\u200b] git submodule [--quiet] foreach [--recursive] <command> git submodule [--quiet] sync [--recursive] [--] [<path>\u2026\u200b] git submodule [--quiet] absorbgitdirs [--] [<path>\u2026\u200b]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-credential"}, {"role": "assistant", "content": "Retrieve and store user credentials"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: How to move back and forth between commits\nI have a newbie question about Git:\nI need to move back and forth in a history of a branch.\nThat means, I need to get all the files to the state they were in in some old revision, and then I need to get back to the latest state in the repository. I don't need to commit.\nWith SVN, it would be\nsvn up -r800\n\nto get to revision 800, and \nsvn up\n\nto get in sync with the repository.\nI know the hash of the commit I want to get back to, so I tried\ngit reset <hash>\n\nwhich seems to get me there. But then I tried\ngit pull\n\nbut that complains about conflicts.\nSo what's the proper way to move through the history of the branch?\nI'm thinking in terms of SVN, so don't hezitate to point me to some nice tutorial. Note that I've already checked http://git.or.cz/course/svn.html and http://www.youtube.com/watch?v=8dhZ9BXQgc4 .\nThanks, Ondra."}, {"role": "assistant", "content": "I'm a former svn user too and now use git for all my projects.\nWhen using git, you should change your way of thinking from the client-server architecture that's used in svn. In svn, every change needs a connection with the server. Using git, your repo is in the working directory. You don't need a connection for every repo action.\nOnly use git push and git pull to synchronise with the repo. Think of it as using rsync or any backup solution to make two places have exactly the same content. Just like when you connect external backup hard disk, then make the content in it same with the content in your main. That's the usage of git pull and git push.\nIf you just want to go back and forth in the history, do it using git checkout. See the revision id using git log. If you're using Linux, use gitk to see the revision tree. In Windows, tortoise git can display it using revision graph.\nTo get back to latest revision, use git checkout master. Before doing any command, always make yourself do git status. This command will display anything you need to know about current repo condition, and what action you need to do to make it right. Before doing git pull and git push, it's better to make sure that the git status result shows working directory clean.\nIf you need to revert a file to its previous revision, you can do it with git merge. Before doing it to a file, test it first with git diff. Ex: git diff rev1:rev2 filename. It will print out any differences between two revisions. Changes in rev1 will be replaced by the changes in rev2. So to do revert, rev2 will be the older than rev1. After you are satisfied with the diff result, do it with git merge, just replace diff with merge and all other parameters stay the same.\nI hope this helps you. The main key is to see that your working dir is your repo. Understanding this will help you use git to it's full capability. Good luck."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-reflog"}, {"role": "assistant", "content": "Manage reflog information"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github : I am missing \"Settings\" menu on the landing page of my repo\n\nThe \"Settings\" menu is supposed to be the last menu, just after the \"Graphs\" menu.\nNot having the \"Settings\" menu interferes with my ability to set Webhooks.\nAnd yes, this is my repo - I own it.\n landing page of my test-repo-travis repo"}, {"role": "assistant", "content": "I was having the same issue today. Eventually, I figured that I do not have enough permissions to access the repo settings because in my case the repo belongs to an 'organization' and even though I have read/write access to it, I am not the admin."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to configure git bash command line completion?\nE.g. on a fresh ubuntu machine, I've just run sudo apt-get git, and there's no completion when typing e.g. git check[tab].\nI didn't find anything on http://git-scm.com/docs, but IIRC completion is included in the git package these days and I just need the right entry in my bashrc."}, {"role": "assistant", "content": "On Linux\nOn most distributions, git completion script is installed into /etc/bash_completion.d/ (or /usr/share/bash-completion/completions/git) when you install git, no need to go to github. You just need to use it - add this line to your .bashrc:\nsource /etc/bash_completion.d/git\n# or\nsource /usr/share/bash-completion/completions/git\n\nIn some versions of Ubuntu, git autocomplete may be broken by default, reinstalling by running this command should fix it:\nsudo apt-get install git-core bash-completion\n\nOn Mac\nYou can install git completion using Homebrew or MacPorts.\nHomebrew\nif $BASH_VERSION > 4: brew install bash-completion@2 (updated version)\nPay special care which version of bash you have as MacOS default ships with 3.2.57(1)-release.\nadd to .bash_profile:\n  [[ -r \"/usr/local/etc/profile.d/bash_completion.sh\" ]] && . \"/usr/local/etc/profile.d/bash_completion.sh\"\n\nFor older versions of bash: brew install bash-completion\nadd to .bash_profile:\n[ -f /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion\n\nMacPorts\nsudo port install git +bash_completion\nthen add this to your .bash_profile:\nif [ -f /usr/share/bash-completion/bash_completion ]; then\n    . /usr/share/bash-completion/bash_completion\nfi\n\nmore info in this guide: Install Bash git completion\nNote that in all cases you need to create a new shell (open a new terminal tab/window) for changes to take effect."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Jenkins Git plugin detached HEAD\nI am new to Git and also to Jenkins. My problem is that I can't get the Jenkins Maven release plugin to work.\nWhen I build a common Maven build with Jenkins, it works well, but when I try to perform a release with the Maven release plugin, I get the following stack trace:\norg.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-release-plugin:2.3.2:prepare (default-cli) on project parent: An error is occurred in the checkin process: Exception while executing SCM command.\n    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:217)\n    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)\n    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)\n    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)\n    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)\n    at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)\n    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)\n    at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)\n    at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)\n    at org.jvnet.hudson.maven3.launcher.Maven3Launcher.main(Maven3Launcher.java:79)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.codehaus.plexus.classworlds.launcher.Launcher.launchStandard(Launcher.java:329)\n    at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:239)\n    at org.jvnet.hudson.maven3.agent.Maven3Main.launch(Maven3Main.java:158)\n    at hudson.maven.Maven3Builder.call(Maven3Builder.java:98)\n    at hudson.maven.Maven3Builder.call(Maven3Builder.java:64)\n    at hudson.remoting.UserRequest.perform(UserRequest.java:118)\n    at hudson.remoting.UserRequest.perform(UserRequest.java:48)\n    at hudson.remoting.Request$2.run(Request.java:326)\n    at hudson.remoting.InterceptingExecutorService$1.call(InterceptingExecutorService.java:72)\n    at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)\n    at java.util.concurrent.FutureTask.run(FutureTask.java:138)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\n    at java.lang.Thread.run(Thread.java:662)\nCaused by: org.apache.maven.plugin.MojoExecutionException: An error is occurred in the checkin process: Exception while executing SCM command.\n    at org.apache.maven.plugins.release.PrepareReleaseMojo.prepareRelease(PrepareReleaseMojo.java:295)\n    at org.apache.maven.plugins.release.PrepareReleaseMojo.execute(PrepareReleaseMojo.java:247)\n    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)\n    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)\n    ... 27 more\nCaused by: org.apache.maven.shared.release.ReleaseExecutionException: An error is occurred in the checkin process: Exception while executing SCM command.\n    at org.apache.maven.shared.release.phase.AbstractScmCommitPhase.checkin(AbstractScmCommitPhase.java:160)\n    at org.apache.maven.shared.release.phase.AbstractScmCommitPhase.performCheckins(AbstractScmCommitPhase.java:145)\n    at org.apache.maven.shared.release.phase.ScmCommitPreparationPhase.runLogic(ScmCommitPreparationPhase.java:76)\n    at org.apache.maven.shared.release.phase.AbstractScmCommitPhase.execute(AbstractScmCommitPhase.java:78)\n    at org.apache.maven.shared.release.DefaultReleaseManager.prepare(DefaultReleaseManager.java:234)\n    at org.apache.maven.shared.release.DefaultReleaseManager.prepare(DefaultReleaseManager.java:169)\n    at org.apache.maven.shared.release.DefaultReleaseManager.prepare(DefaultReleaseManager.java:146)\n    at org.apache.maven.shared.release.DefaultReleaseManager.prepare(DefaultReleaseManager.java:107)\n    at org.apache.maven.plugins.release.PrepareReleaseMojo.prepareRelease(PrepareReleaseMojo.java:291)\n    ... 30 more\nCaused by: org.apache.maven.scm.ScmException: Exception while executing SCM command.\n    at org.apache.maven.scm.command.AbstractCommand.execute(AbstractCommand.java:63)\n    at org.apache.maven.scm.provider.git.AbstractGitScmProvider.executeCommand(AbstractGitScmProvider.java:291)\n    at org.apache.maven.scm.provider.git.AbstractGitScmProvider.checkin(AbstractGitScmProvider.java:217)\n    at org.apache.maven.scm.provider.AbstractScmProvider.checkIn(AbstractScmProvider.java:410)\n    at org.apache.maven.shared.release.phase.AbstractScmCommitPhase.checkin(AbstractScmCommitPhase.java:156)\n    ... 38 more\nCaused by: org.apache.maven.scm.ScmException: Detecting the current branch failed: fatal: ref HEAD is not a symbolic ref\n    at org.apache.maven.scm.provider.git.gitexe.command.branch.GitBranchCommand.getCurrentBranch(GitBranchCommand.java:147)\n    at org.apache.maven.scm.provider.git.gitexe.command.checkin.GitCheckInCommand.createPushCommandLine(GitCheckInCommand.java:192)\n    at org.apache.maven.scm.provider.git.gitexe.command.checkin.GitCheckInCommand.executeCheckInCommand(GitCheckInCommand.java:132)\n    at org.apache.maven.scm.command.checkin.AbstractCheckInCommand.executeCommand(AbstractCheckInCommand.java:54)\n    at org.apache.maven.scm.command.AbstractCommand.execute(AbstractCommand.java:59)\n    ... 42 more\nchannel stopped\nFinished: FAILURE\n\nThe failing command and error message are:\n[INFO] Executing: /bin/sh -c cd\n/var/lib/jenkins/workspace/test_maven/parent && git symbolic-ref HEAD\n[INFO]  Working directory:\n/var/lib/jenkins/workspace/test_maven/parent  mojoFailed\norg.apache.maven.plugins:maven-release-plugin:2.3.2(default-cli)\nprojectFailed ch.apkern.achilles:parent:1.0-SNAPSHOT  sessionEnded\n\nI have figured out that the Jenkins Git plugin creates a detached HEAD ref \"(no branch)\" which causes the problem, I think. But I have absolutely no idea why this ref is created or how I can solve this problem.\nI would be grateful for any help."}, {"role": "assistant", "content": "The Checkout/merge to local branch (optional) field is gone in the current (2.2.1) version of the Git plugin.\nIt has moved to Additional Behaviours \u2192 Check out to specific local branch:\n\nSetting that value to master got me a checked out branch instead of a detached head."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitlab-ci docker-in-docker access to insecure registry\n\nWhen configuring a gitlab-ci for building docker images and pushing them to my gitlab's insecure registry, I encountered several errors.  My gitlab-ci.yaml is laid out below:\nstages:\n  - build\n  - deploy\n\nvariables:\n  GIT_SUBMODULE_STRATEGY: recursive\n  CONTAINER_IMAGE: XXX:$CI_COMMIT_REF_NAME\n\n# The insecure-registry flag \nservices:\n  - docker:dind\n\nbuild_container:\n  image: docker:latest\n  stage: build\n  before_script:\n    - echo \"$CI_REGISTRY_PASSWORD\" | docker login -u \"$CI_REGISTRY_USER\" \"$CI_REGISTRY\" --password-stdin\n\n  script:\n    - docker build --pull -t $CONTAINER_IMAGE .\n    - docker push $CONTAINER_IMAGE\n\nThe first error was:\n  $ docker login -u gitlab-ci-token -p $CI_JOB_TOKEN myregistry.gitlab.com\n  WARNING! Using --password via the CLI is insecure. Use --password-stdin.\n  Warning: failed to get default registry endpoint from daemon (Cannot connect \n  to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon \n  running?). Using system default: https://index.docker.io/v1/\n  Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the \n  docker daemon running?\n\nThis was resolved by updating the login command to \necho \"$CI_REGISTRY_PASSWORD\" | docker login -u \"$CI_REGISTRY_USER\" myregistry.gitlab.com --password-stdin\n\nUnfortunately after updating, I encountered another error:\n$ echo \"$CI_REGISTRY_PASSWORD\" | docker login -u \"$CI_REGISTRY_USER\" myregistry.gitlab.com --password-stdin\nError response from daemon: Get https://myregistry.gitlab.com/v2/: dial tcp XX.XX.XXX.XXX:443: getsockopt: connection refused\n\nHow Can I resolve this?"}, {"role": "assistant", "content": "Like any other docker installation, it is necessary to instruct the docker daemon to allow connections to insecure registries.  In order to do this in the context of the docker-in-docker service, one must pass this configuration to the service.  This can be done by updating your gitlab-ci.yaml to specify the service as:\nservices:\n  - name: docker:dind\n    command: [\"--insecure-registry=myregistry.gitlab.com\"]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --color[=<when>]"}, {"role": "assistant", "content": "Show colored diff. --color (i.e. without =<when> ) is the same as --color=always . <when> can be one of always , never , or auto ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --show-pulls"}, {"role": "assistant", "content": "In addition to the commits shown in the default history, show\neach merge commit that is not TREESAME to its first parent but\nis TREESAME to a later parent. When a merge commit is included by --show-pulls , the merge is\ntreated as if it \"pulled\" the change from another branch. When using --show-pulls on this example (and no other options) the resulting\ngraph is: I---X---R---N Here, the merge commits R and N are included because they pulled\nthe commits X and R into the base branch, respectively. These\nmerges are the reason the commits A and B do not appear in the\ndefault history. When --show-pulls is paired with --simplify-merges , the\ngraph includes all of the necessary information: .-A---M--.   N\n\t /     /    \\ /\n\tI     B      R\n\t \\   /      /\n\t  \\ /      /\n\t   `---X--' Notice that since M is reachable from R , the edge from N to M was simplified away. However, N still appears in the history as an\nimportant commit because it \"pulled\" the change R into the main\nbranch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-indent-heuristic"}, {"role": "assistant", "content": "Disable the indent heuristic."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  merge"}, {"role": "assistant", "content": "As a verb: To bring the contents of another branch (possibly from an external repository ) into the current branch.  In the\ncase where the merged-in branch is from a different repository,\nthis is done by first fetching the remote branch\nand then merging the result into the current branch.  This\ncombination of fetch and merge operations is called a pull .  Merging is performed by an automatic process\nthat identifies changes made since the branches diverged, and\nthen applies all those changes together.  In cases where changes\nconflict, manual intervention may be required to complete the\nmerge. As a noun: unless it is a fast-forward , a\nsuccessful merge results in the creation of a new commit representing the result of the merge, and having as parents the tips of the merged branches .\nThis commit is referred to as a \"merge commit\", or sometimes just a\n\"merge\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mv - Move or rename a file, a directory, or a symlink"}, {"role": "assistant", "content": "SUBMODULES Moving a submodule using a gitfile (which means they were cloned\nwith a Git version 1.7.8 or newer) will update the gitfile and\ncore.worktree setting to make the submodule work in the new location.\nIt also will attempt to update the submodule.<name>.path setting in\nthe gitmodules file and stage that file (unless -n is used)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  index.recordEndOfIndexEntries"}, {"role": "assistant", "content": "Specifies whether the index file should include an \"End Of Index\nEntry\" section. This reduces index load time on multiprocessor\nmachines but produces a message \"ignoring EOIE extension\" when\nreading the index using Git versions before 2.20. Defaults to true if index.threads has been explicitly enabled, false otherwise."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: How to pull a single file from a server repository in Git?\nI am working on a site with a server running Git. I am using Git for deployment (not GitHub). This was set up prior to my involvement using a hook method, and I referred to this question and entered the commands below, but it didn't work.\nHow do I pull a single file from the server? For instance, if I wanted to update my local file index.php? git pull index.php?"}, {"role": "assistant", "content": "Short Answer\nIt is possible to do (in the deployed repository):\ngit fetch --all\n// git fetch will download all the recent changes, but it will not put it in your current checked out code (working area).\n\nFollowed by:\ngit checkout origin/master -- path/to/file\n// git checkout <local repo name (default is origin)>/<branch name> -- path/to/file will checkout the particular file from the downloaded changes (origin/master).\n\nFull Example\n$ cd /project/directory\n\n$ git branch\n* develop\n\ncheck the remote name\n$ git remote -v\norigin [email\u00a0protected]:abc/123.git\n\nConfirmed it's origin and\nI am on branch develop and need a file from branch main\nFile i need is src/scss/main.scss\ngit fetch --all\n\ngit checkout origin/main -- src/scss/main.scss"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git diff with combined --word-diff [duplicate]\nThis question already has answers here:\n                                \n                            \n\n\n\n\nHighlight changed lines and changed bytes in each changed line\n\n                                (14 answers)\n                            \n\nClosed 9 years ago.\n\n\n\nGiven a file with a single word changed, a \"normal\" git diff looks like this:\n\nWhereas a git diff --word-diff=color looks like this:\n\nIs it possible to combine the two to get separate lines with the changed words highlighted? Something like this:\n\nIt might be trivial, but I couldn't figure it out."}, {"role": "assistant", "content": "The links in the comments shows ways to use extensions and 3rd party to do it.\nThere is a simple way by adding colors in your git config file. for example\n[color \"diff\"]\n    meta = yellow bold\n    frag = magenta bold\n    old = red\n    new = magenta green\n\nOf course you can set any supported color to your needs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  trace2.envVars"}, {"role": "assistant", "content": "A comma-separated list of \"important\" environment variables that should\nbe recorded in the trace2 output.  For example, GIT_HTTP_USER_AGENT,GIT_CONFIG would cause the trace2 output to\ncontain events listing the overrides for HTTP user agent and the\nlocation of the Git configuration file (assuming any are set).  May be\noverridden by the GIT_TRACE2_ENV_VARS environment variable.  Unset by\ndefault."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to do a pull request in GitHub with only the latest commit in the master branch of my forked repository\n\nI forked a repository on github. I made some changes and did a pull request.\nNow I made some other changes and want to do a new pull request, but on the preview screen before doing the pull request it shows the old commits too (the ones that were already accepted).\nHow do I select only the latest commit in the master branch of my forked repository so that I can do a pull request with only that commit?"}, {"role": "assistant", "content": "This answer from a coworker fixed my problem:\ngit checkout -b NEW_BRANCH_NAME LAST_COMMIT_NAME_BEFORE_THE_ONE_WANTED\ngit cherry-pick COMMIT_NAME_WANTED\ngit push origin NEW_BRANCH_NAME\n\nThen on GitHub you can do a pull request for the new branch you created.\nUPDATE\nI asked and answered this question when I first started working with git. Now that I know more about it, I'd like to expand this answer.\nWhen working with a fork you probably want to keep it updated with respect to the original repo. So these would be the steps I would follow today:\ngit remote add upstream GIT_URL_OF_THE_ORIGINAL_REPO\n\nNow you have a reference called upstream which points to that repo. By default you should also have another one called origin which would point to your fork in this case. upstream and origin is just how people usually name these references, but you can use whatever name you want.\nNow you need to get the latest changes:\ngit fetch upstream\n\nThen if you want to update your fork with changes from upstream you'd do this:\ngit checkout master //checkout your master branch\ngit merge upstream/master //merge changes from the master branch in upstream into the branch you checked out (master)\ngit push origin master //if you want to push your updated master to your remote fork\n\nNow, to answer the original question, what I would do today if I wanted to submit a new PR, would be:\ngit fetch upstream //get the latest changes from the original repo\ngit checkout -b my_new_feature upstream/master //create a new branch, starting from the master in the original repo\ngit cherry-pick WHATEVER_COMMIT_I_WANT //select the commit I want and add it to this new branch\ngit push origin my_new_feature //push a new branch to my fork\n\nThen I would request a new PR for the my_new_feature branch.\nYou can replace git cherry-pick WHATEVER_COMMIT_I_WANT with just modifying/adding a file and then doing git add FILENAME, git commit -m \"Fixing some stuff\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path"}, {"role": "assistant", "content": "DEFINING MACRO ATTRIBUTES Custom macro attributes can be defined only in top-level gitattributes\nfiles ( $GIT_DIR/info/attributes , the .gitattributes file at the\ntop level of the working tree, or the global or system-wide\ngitattributes files), not in .gitattributes files in working tree\nsubdirectories.  The built-in macro attribute \"binary\" is equivalent\nto: [attr]binary -diff -merge -text"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gittutorial - A tutorial introduction to Git"}, {"role": "assistant", "content": "Viewing project history At any point you can view the history of your changes using $ git log If you also want to see complete diffs at each step, use $ git log -p Often the overview of the change is useful to get a feel of\neach step $ git log --stat --summary"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do git grafts and replace differ? (Are grafts now deprecated?)\nThere are very few Q&A's on git grafts versus replace. The search [git] +grafts +replace only found two that felt relevant of the 5. what-are-git-info-grafts-for and git-what-is-a-graftcommit-or-a-graft-id. There is also a note on git.wiki.kernel.org:GraftPoint\nAre grafts now completely overtaken by the replace and filter-branch, or do they still needed for some special corner cases (and backward compatibility) ?\nIn general, how do they differ (e.g. which are transported between repos), and how are they generically the same? \nI've seen that Linus doesn't appear to care about grafts at present in the discussion on commit generation numbers (of the max parents back to any root variety) \"Grafts are already unreliable.\"\nEDIT: more info found.\nA search of www.kernel.org/pub/software/scm/git/docs for graft only found 3 results: \n\ngit-filter-branch(1), \nv1.5.4.7/git-filter-branch(1),\nv1.5.0.7/git-svn(1).\n\nA slightly broader search found RelNotes/1.6.5.txt which contains:\n\n\nrefs/replace/ hierarchy is designed to be usable as a replacement\n  of the \"grafts\" mechanism, with the added advantage that it can be\n  transferred across repositories.\n\n\nUnfortunately, the gitrepository-layout(5) isn't yet up to date with the refs/replace/ repository layout info (and notes), nor any deprecation note of info/grafts.\nThis gets closer to supporting what I was thinking but I'd welcome any confirmation or clarification."}, {"role": "assistant", "content": "In the same discussion about Commit Generation Number that you mention, Jakub Nar\u0119bski does confirm that grafts are more aproblem than a solution:\n\ngrafts are so horrible hack that I would be not against turning off generation numbers if they are used.\n  In the case of replace objects you need both non-replaced and replaced\n  DAG generation numbers.\n  [...] Grafts are non-transferable, and if you use them to cull rather than add\n  history they are unsafe against garbage collection... I think.\n\n(publishing has always been taken care of with git filter-branch, as illustrated by this 2008 thread on grafts workflow.)\nThe difference between grafts and git replace is best illustrated by this SO question \"Setting git parent pointer to a different parent\", and the comments of (Jakub's again) answer.\nIt does include the reference to Git1.6.5\n\n\nFrom what I understand (from GraftPoints), git replace has superseded git grafts (assuming you have git 1.6.5 or later)\n\n(Jakub:)  \n\nif you want to rewrite history then grafts + git-filter-branch (or interactive rebase, or fast-export + e.g. reposurgeon) is the way to do it.  \nIf you want/need to preserve history, then git-replace is far superior to graft"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --follow"}, {"role": "assistant", "content": "Continue listing the history of a file beyond renames\n(works only for a single file)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git init: fatal: could not set 'core.filemode' to 'false'\n\nUsing Team City to check out from a Git Repo. (Gitlabs if it matters)\nStart with Empty build directory.  Get this error:\nfatal: could not set 'core.filemode' to 'false'\n(Running on a Windows machine, if that matters)\nThe user that Team City is running on was changed to an Admin just in case.\nThe .Git directory is not a valid Repo when this command exits.\nWiping the entire 'work' directory doesn't help.\nIt randomly comes and goes... \nAND this: \ngit config --global --replace-all core.fileMode false\nDoes nothing useful - with or without the --replace-all, and run as admin, or another user (if you change 'false' to 'true' you get the same error, if you change it to 'falseCD' it changes the error to that being an invalid value - so clearly, it is changing it.\nAnyone got any ideas?"}, {"role": "assistant", "content": "In my case using \"sudo\" worked for me. For example: \nasif@asif-vm:/mnt/prog/protobuf_tut$ git clone https://github.com/protocolbuffers/protobuf.git\nCloning into 'protobuf'...\nerror: chmod on /mnt/prog/protobuf_tut/protobuf/.git/config.lock failed: Operation not permitted\nfatal: could not set 'core.filemode' to 'false'\n\nAfter doing a \"sudo\" I could get it working:\nasif@asif-vm:/mnt/prog/protobuf_tut$ sudo git clone https://github.com/protocolbuffers/protobuf.git\nCloning into 'protobuf'...\nremote: Enumerating objects: 5, done.\nremote: Counting objects: 100% (5/5), done.\nremote: Compressing objects: 100% (5/5), done.\nremote: Total 66782 (delta 0), reused 0 (delta 0), pack-reused 66777\nReceiving objects: 100% (66782/66782), 55.83 MiB | 2.04 MiB/s, done.\nResolving deltas: 100% (45472/45472), done.\nChecking out files: 100% (2221/2221), done."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I prevent an automerge using Git?\nI am trying to merge a local branch into the master branch without having Git to do an automerge. I would like to \u201chand pick\u201d what I would like to be merged into master.\nWhen I use Git\u2019s difftool command, I am able to diff and select what I want to be added into the master branch. But then when I do a merge, I will lose what I selected prior because Git will do an automerge. I can commit the changes into master prior to the merge, but doing so seems unnatural.\nAnd Git\u2019s mergetool is only available when there are conflicts from a merge. But if Git does an automerge then usually there aren\u2019t conflicts, so I am unable to run the mergetool command.\nUpdate:\nI am starting to think what I am trying to accomplish is bad practice or it\u2019s just not possible. That is, to merge a topic branch and only have it merge what I need from diffing. And in an addition, to have this reflected in history. At any rate, the question I posted surfaced when experimenting with Git."}, {"role": "assistant", "content": "You are trying to bypass Git from getting involved in the merge process and to hand-pick each line of each modified file to be merged. This not the same as git cherry-pick. Neither will git merge --no-commit, etc. help. You will need to do:\n$ git checkout master\n$ git difftool -t kdiff3 local-branch HEAD\n\nIn the KDiff3 window, the left hand side (A) is your local-branch and the right hand side (B) is your current branch (master).  \nSelect Merge | Merge Current File from the menu (or press the colorful diamond shaped icon with the same title).  \nYou will then be shown a diff and conflicts (if any) for each file. And you will have the ability to pick left or right side (A or B), or both, and/or manually tweak the merged file.\nOn another note, something is telling me you have some bigger issues with your workflow."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  -l  --list"}, {"role": "assistant", "content": "Show all available formats."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  --abort"}, {"role": "assistant", "content": "Cancel the operation and return to the pre-sequence state."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I delete (or merge) a local Git branch that I'm currently on?\nI'm pretty new to using git, and I use it to contribute to the AOKP Android ROM. I've successfully created a few branches, modified the code, and uploaded the commits that have gotten merged on the remote end. But in my local repository, those branches are still showing up (even though they show up as having no changes). The problem is that when I created those branches, I did so right from the subfolder that needed to be modified, so I don't have any \"higher\" branches to go to. And because of that, I can't delete those branches -- git tels me error: Cannot delete the branch 'MyMods' which you are currently on.\nSo what can I do to get rid of those branches?"}, {"role": "assistant", "content": "Checkout a different branch first, before deleting it:\ngit checkout master\ngit branch -d MyMods\n\nAlso, branches have nothing to do with folders. Git always tracks the whole repository at once, with all its folders and files. A branch is nothing else than a pointer to a single commit, or snapshot, in the history of the repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  MERGE_HEAD"}, {"role": "assistant", "content": "records the commit(s) which you are merging into your branch when you\nrun git merge ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --allow-binary-replacement  --binary"}, {"role": "assistant", "content": "Historically we did not allow binary patch application\nwithout an explicit permission from the user, and this\nflag was the way to do so.  Currently, we always allow binary\npatch application, so this is a no-op."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --timeout=<n>"}, {"role": "assistant", "content": "Timeout (in seconds) for specific client sub-requests. This includes\nthe time it takes for the server to process the sub-request and the\ntime spent waiting for the next client\u2019s request."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to fix bower ECMDERR\n\nI'm using \"yeoman\" and \"bower\" on windows 7 but got the following error when I create the app\nyo webapp\n\nThe error is \nbower not-cached    git://github.com/jlong/sass-bootstrap.git#~3.0.0\nbower resolve       git://github.com/jlong/sass-bootstrap.git#~3.0.0\nbower not-cached    git://github.com/Modernizr/Modernizr.git#~2.6.2\nbower resolve       git://github.com/Modernizr/Modernizr.git#~2.6.2\nbower not-cached    git://github.com/jquery/jquery.git#~1.10.2\nbower resolve       git://github.com/jquery/jquery.git#~1.10.2\nbower ECMDERR       Failed to execute \"git ls-remote --tags --heads git://github\n.com/jquery/jquery.git\", exit code of #128\n\nAdditional error details:\nfatal: unable to connect to github.com:\ngithub.com[0: 192.30.252.130]: errno=No error\n\nThe version of the yeoman, bower and node\nc:\\yo-test>bower -v\n1.2.8\n\nc:\\yo-test>yo -version\n1.1.2\n\nc:\\yo-test>node -v\nv0.10.15\n\nAny suggestion is much appreciated."}, {"role": "assistant", "content": "In case you might encounter the same issue...It turns out my machine behind firewall, that won't able to access git://github.com/jquery/jquery.git\nLink: Unable to Connect to GitHub.com For Cloning\nThe solution without changing the firewall:  \ngit config --global url.\"https://\".insteadOf git://\n\nCredit to @bnguyen82 from Unable to Connect to GitHub.com For Cloning and @Sindre Sorhus from Bower install using only https?"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git for Windows - The Program can't start because libiconv2.dll is missing\nWhen I attempt to run certain commands (like git push, for example) from a git Bash on Windows 7 (64bit) I get the error:\nThe program can't start because libiconv2.dll is missing from your computer\n\nI have searched exhaustively for a solution to this.\nThe most I can find is an issue thread at the google code site (Issue 419) and a few other blogs here and there. As far as I can tell none of the suggestions offered in the posts will actually solve my issue.\nI have tried re-installing. I have tried adding $GIT/bin to the PATH.\nI can verify that the dll is in the $GIT/bin directory...but still I cannot push to remote.\nI have a working install of msysgit on another Windows 7 box, and I installed the same way in both situations... so needless to say I am quite confused.\nAny help on this would be most appreciated.\nThanks,"}, {"role": "assistant", "content": "Work around from this thread: http://groups.google.com/forum/#!topic/msysgit/twrVn_EbNI4 \n\ncd into your git install directory\ncopy mingw\\bin\\libiconv-2.dll libexec\\git-core\n(or copy bin\\libiconv-2.dll libexec\\git-core if your installation has no mingw folder)\n\nIn the linked thread Drew asks for assistance, so if you think you can help fix it you might want to reply in that Google Groups thread.\nError happens with these builds:\n\nmsysgit-fullinstall-1.7.4  OR 1.7.6 (and 1.7.7)\nmsysgit-netinstall-1.7.4 OR 1.7.6 (and 1.7.7)\nGit For Windows 1.7.6 (but not 1.7.4)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why did my Git repo enter a detached HEAD state?\nI ended up with a detached head today, the same problem as described in: git push says everything up-to-date even though I have local changes\nAs far as I know I didn't do anything out of the ordinary, just commits and pushes from my local repo.  \nSo how did I end up with a detached HEAD?"}, {"role": "assistant", "content": "Any checkout of a commit that is not the name of one of your branches will get you a detached HEAD. A SHA1 which represents the tip of a branch still gives a detached HEAD. Only a checkout of a local branch name avoids that mode.\nSee committing with a detached HEAD\n\nWhen HEAD is detached, commits work like normal, except no named branch gets updated. (You can think of this as an anonymous branch.)\n\n\nFor example, if you checkout a \"remote branch\" without tracking it first, you can end up with a detached HEAD.\nSee git: switch branch without detaching head\nMeaning: git checkout origin/main (or origin/master in the old days) would result in:\nNote: switching to 'origin/main'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by switching back to a branch.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -c with the switch command. Example:\n\n  git switch -c <new-branch-name>\n\nOr undo this operation with:\n\n  git switch -\n\nTurn off this advice by setting config variable advice.detachedHead to false\n\nHEAD is now at a1b2c3d My commit message\n\nThat is why you should not use git checkout anymore, but the new git switch command.\nWith git switch, the same attempt to \"checkout\" (switch to) a remote branch would fail immediately:\ngit switch origin/main\nfatal: a branch is expected, got remote branch 'origin/main'\n\n\nTo add more on git switch:\nWith Git 2.23 (August 2019), you don't have to use the confusing git checkout command anymore.\ngit switch can also checkout a branch, and get a detach HEAD, except:\n\nit has an explicit --detach option\n\n\nTo check out commit HEAD~3 for temporary inspection or experiment without creating a new branch:\ngit switch --detach HEAD~3\nHEAD is now at 9fc9555312 Merge branch 'cc/shared-index-permbits'\n\n\n\nit cannot detached by mistake a remote tracking branch\n\nSee:\nC:\\Users\\vonc\\arepo>git checkout origin/master\nNote: switching to 'origin/master'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by switching back to a branch.\n\nVs. using the new git switch command:\nC:\\Users\\vonc\\arepo>git switch origin/master\nfatal: a branch is expected, got remote branch 'origin/master'\n\nIf you wanted to create a new local branch tracking a remote branch:\ngit switch <branch> \n\n\nIf <branch> is not found but there does exist a tracking branch in exactly one remote (call it <remote>) with a matching name, treat as equivalent to\ngit switch -c <branch> --track <remote>/<branch>\n\n\nNo more mistake!\nNo more unwanted detached HEAD!\nAnd if you git switch <tag> instead of git switch --detach <tag>, Git 2.36 will help you to remember the missing --detach option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "how to include git commit-number into a c++ executable?\ni use git as a version tracker for my c++ project. \nsometimes i need to repeat a calculation and i would like to know which version of the program i used.\nwhat would be a good way to put a # of the commit into the main executable? in other words. i'd like the program to tell me the # of the current commit in an introductory message as i run the program.\none way i can think of is to make the c++ program lunch \"git log\" from shell and extract the commit # but i'm not sure how to do it during make.\n(I use linux)"}, {"role": "assistant", "content": "Probably the easiest way to do this would be to add to your makefile a rule to generate a .c file with the current git commit ID:\ngitversion.c: .git/HEAD .git/index\n    echo \"const char *gitversion = \\\"$(shell git rev-parse HEAD)\\\";\" > $@\n\nNow simply add gitversion.c to your build process as normal. Make sure to remove it on make clean, and add it to .gitignore so it's not added to the git repository accidentally. Add an extern const char *gitversion; to a header somewhere, and you can access it like that."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  exclude"}, {"role": "assistant", "content": "After a path matches any non-exclude pathspec, it will be run\nthrough all exclude pathspecs (magic signature: ! or its\nsynonym ^ ). If it matches, the path is ignored.  When there\nis no non-exclude pathspec, the exclusion is applied to the\nresult set as if invoked without any pathspec."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - skipping specific commits when merging\nI've been using Git for about a year now and think it's fantastic, but I've just started on a second version of the project and started a new branch for it. I'm struggling a little with the best way to handle things going forward.\nI have two branches called say master10 (for v1) and master20 (for v2). I've been making bug fixes in v1 on branch master10, and developing new stuff of master20. Whenever I make a bug fix I merge it into v2 by checking out master20 and doing git merge master10. So far so good.\nNow however, I've made a change in v1 that I don't want in v2, but I want to continue merging other bug fixes. How do I tell Git to skip that particular commit (or a range of commits), but that going forward I still want to merge other bug fixes.\nI thought git rebase might be what I need but read the doc and my head nearly exploded.\nI think what I want is something like a \"git sync\" command that tells git that two branches are now in-sync and in future only merge the commits from this sync-point on.\nAny help appreciated."}, {"role": "assistant", "content": "If you want to merge most but not all of the commits on branch \"maint\" to \"master\", for instance, you can do this. It requires some work---- as mentioned above, the usual use case is to merge everything from a branch--- but sometimes it happens that you made a change to a release version that shouldn't be integrated back (maybe that code's been superceded in master already), so how do you represent that? Here goes...\nSo let's suppose maint has had 5 changes applied, and one of those (maint~3) is not to be merged back into master, although all the others should be. You do this in three stages: actually merge everything before that one, tell git to mark maint~3 as merged even when it isn't, and then merge the rest. The magic is:\nbash <master>$ git merge maint~4\nbash <master>$ git merge -s ours maint~3\nbash <master>$ git merge maint\n\nThe first command merges everything before your troublesome maint commit onto master. The default merge log message will explain you're merging \"branch 'maint' (early part)\".\nThe second command merges the troublesome maint~3 commit, but the \"-s ours\" option tells git to use a special \"merge strategy\" which, in fact, works by simply keeping the tree you are merging into and ignoring the commit(s) you are merging completely. But it does still make a new merge commit with HEAD and maint~3 as the parents, so the revision graph now says that maint~3 is merged. So in fact you probably want to use the -m option to git merge as well, to explain that that maint~3 commit is actually being ignored!\nThe final command simply merges the rest of maint (maint~2..maint) into master so that you're all synced up again."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  SCM"}, {"role": "assistant", "content": "Source code management (tool)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  interactive.diffFilter"}, {"role": "assistant", "content": "When an interactive command (such as git add --patch ) shows\na colorized diff, git will pipe the diff through the shell\ncommand defined by this configuration variable. The command may\nmark up the diff further for human consumption, provided that it\nretains a one-to-one correspondence with the lines in the\noriginal diff. Defaults to disabled (no filtering)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Change from master to a new default branch git\nHere is a scenerio:\nWe have a default branch master and we work off from this, creating branches and pushing up etc...\nWe have now created a develop branch off master and set this as a default development branch.\nWhat I would like to know is, how do I now know if my git pull command is requesting changes from the default branch via the command line? or point to this new default branch?\nWhat I have done:\n\nSince creating a new default branch git pull into master from origin/master\n\nAlso, any new branch, will it be from master or develop?\nAs you can see\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nnothing to commit, working tree clean\nPS C:\\Users\\dir\\Documents\\GitHub\\repo> git log\ncommit 867cxx\n\nfd956f73dc91d0022b (HEAD -> master, origin/master, origin/develop, origin/HEAD)\n\nupdate:\nthis change of default branch occurred after cloning the repo."}, {"role": "assistant", "content": "With git 2.28 you can set a global config with this command\ngit config --global init.defaultBranch {branchName}\nReplace {branchName} with the default branch name\nand now whenever you create a new git repo, the default branch will be this.\nMore details in my video here: https://www.youtube.com/watch?v=YccHk6QlRss"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "fatal: Not a git repository (or any of the parent directories): .git [duplicate]\nThis question already has answers here:\n                                \n                            \n\n\n\n\nfatal: Not a git repository (or any of the parent directories): .git\n\n                                (9 answers)\n                            \n\n\nReceiving \"fatal: Not a git repository\" when attempting to remote add a Git repo\n\n                                (39 answers)\n                            \n\nClosed 10 years ago.\n\n\n\nWhen I tried to push an existing repository on github.com, and it when I entered the command the website prompted me to put into the terminal, I got this error message                 fatal: \nNot a git repository (or any of the parent directories): .git\n\nIf anyone could help me with this, then that would be great, thanks."}, {"role": "assistant", "content": "The command has to be entered in the directory of the repository. The error is complaining that your current directory isn't a git repo\n\nAre you in the right directory? Does typing ls show the right files?\nHave you initialized the repository yet? Typed git init? (git-init documentation)\n\nEither of those would cause your error."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Reference an issue from a commit message in gitlab\n\nIs it possible to make a reference to an issue in Gitlab from a commit message?\nI haven't found anything on the web."}, {"role": "assistant", "content": "There should be a way to reference a GitLab issue from a commit message, simply with #xx (id of the issue).\nConsider \"Default closing pattern value \"\n\nFor example the following commit message:\nAwesome commit message\n\nFix #20, Fixes #21 and Closes group/otherproject#22.\nThis commit is also related to #17 and fixes #18, #19\nand https://gitlab.example.com/group/otherproject/issues/23.\n\nwill close #18, #19, #20, and #21 in the project this commit is pushed to, as well as #22 and #23 in group/otherproject.\n#17 won't be closed as it does not match the pattern.\nIt works with multi-line commit messages as well as one-liners when used with git commit -m.\n\nSee also \"Tutorial: It's all connected in GitLab\"\n\nAdd references in issue or merge request descriptions or in comments.\nThis will update the issue with info about anything related.\n\nTo reference an issue: #123\nTo reference a MR: !123\nTo reference a snippet $123\n\n\n\npierreb adds in the comments:\n\nAlthough this is not specifically asked in the original question, it may be worth adding that one can also cross-reference a previous commit in a new commit message in Gitlab.\nYou do it by copying the hash from the commit message you want to reference and simply pasting it in the new commit message.\nSomething along these lines:\nThis is related with commit 7as7b101\n\n\nYou can see (much) more in:\n\n\"gitlab-ce issue 13345 'ability to reference a commit'\"\n\"Tutorial: It's all connected in GitLab\".\n\nandrybak adds in the comments:\n\n\n\"You do it by copying the hash from the commit message you want to reference and simply pasting it in the new commit message.\"\n\nThere is also a special, more human-readable format:\ngit log -1 --format=reference\n\n<abbrev-hash> (<title-line>, <short-author-date>)\n\nSee git log PRETTY FORMATS\n\n\nThis format is used to refer to another commit in a commit message and is the same as --pretty='format:%C(auto)%h (%s, %ad)'.\nBy default, the date is formatted with --date=short unless another --date option is explicitly specified.\nAs with any format: with format placeholders, its output is not affected by other options like --decorate and --walk-reflogs.\n\n\nFr0zenFyr adds in the comments:\n\nSimilarly, even a closed issue can be referenced like Related to #78 and #93."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to un-submodule a Git submodule?\nWhat are the best practices for un-submoduling a Git submodule, bringing all the code back into the core repository?"}, {"role": "assistant", "content": "If all you want is to put your submodule code into the main repository, you just need to remove the submodule and re-add the files into the main repo:\ngit rm --cached submodule_path  # delete reference to submodule HEAD (no trailing slash)\ngit rm .gitmodules              # if you have more than one submodules,\n                                # you need to edit this file instead of deleting!\nrm -rf submodule_path/.git      # make sure you have backup!!\ngit add --force submodule_path  # will add files instead of commit reference\n                                # --force adds files ignored by .gitignore\ngit commit -m \"remove submodule\"\n\nIf you also want to preserve the history of the submodule, you can do a small trick: \u201cmerge\u201d the submodule into the main repository, so that the result will be the same as it was before, except that the submodule files are now in the main repository.\nIn the main module you will need to do the following:\n# Create a 'marker' at the submodule commit being used\ncd submodule_path\ngit switch --create \"submodule_merge_marker\"\ngit push --set-upstream origin submodule_merge_marker\n\n# Fetch the submodule commits into the main repository\ngit remote add submodule_origin git://url/to/submodule/origin\ngit fetch submodule_origin\n\n# Start a fake merge (won't change any files, won't commit anything)\ngit merge -s ours --no-commit submodule_origin/submodule_merge_marker\n\n# Do the same as in the first solution\ngit rm --cached submodule_path  # delete reference to submodule HEAD\ngit rm .gitmodules              # if you have more than one submodules,\n                                # you need to edit this file instead of deleting!\nrm -rf submodule_path/.git      # make sure you have backup!!\ngit add --force submodule_path  # will add files instead of commit reference\n                                # --force adds files ignored by .gitignore\n\n# Commit and cleanup\ngit commit -m \"remove submodule\"\ngit remote rm submodule_origin\n\nThe resulting repository will look a bit weird: there will be more than one initial commit. But it won\u2019t cause any problems for Git.\nA big advantage of this second solution is that you can still run git blame or git log on the files which were originally in submodules. In fact, what happens here is just a renaming of many files inside one repository, and Git should automatically detect this. If you still have problems with git log, try some options (e.g., --follow, -M, -C) which do better rename and copy detection."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why does git pull hang?\nWhen I do a git pull, from the git bash, the terminal usually runs the pull, updates my local, and then hangs. I'm not sure if it's waiting for me to do something, but I usually exit out of this with CTRL-C. After that, I get that an index.lock is preventing me from doing other things to which I have to delete it. Am I misunderstanding how git pull works?"}, {"role": "assistant", "content": "You may need to remove unnecessary git objects such as dangling commits & blobs:\ngit fsck && git gc --prune=now\n\n\ngit-fsck : Verifies the connectivity and validity of the objects in the database\ngit-gc : Cleanup unnecessary files and optimize the local repository\n\nYou can refer here about dangling commits & blobs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "NuGet and distributed version control (DVCS)\nI wonder if it is possible to use nuget to only store references to the required packages in version control (only the package.config and ignore the packages folder).\nIs there a way to tell nuget to (re)download all the referenced packages in the various package.config files? Or something similar which could be put into a build script.\nUpdate:\nSeems that I'm not the only one who requested this feature: See this work item (thanks to PHeiberg for the hint)\nUpdate 2:\nNuGet now has this feature builtin. See Using NuGet without committing packages to source control for details. All left is to add the packages directory to .gitignore or some equivalent of your VCS (/packages/ will do the trick if you have it in the root of your repository and are using git)."}, {"role": "assistant", "content": "I just found out about NuGetPowerTools: https://github.com/davidfowl/NuGetPowerTools\nAlso see: http://blog.davidebbo.com/2011/08/easy-way-to-set-up-nuget-to-restore.html\nUpdate: NuGet 1.6 now supports Package Restore: http://docs.nuget.org/docs/release-notes/nuget-1.6"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I email someone a git repository?\nI have tried:\ngit archive HEAD --format=zip > archive.zip\n\n:and then I email archive.zip and at the other end they unzip archive.zip into a folder. But when they try any git commands they find out that this does not produce a valid git repository"}, {"role": "assistant", "content": "You could use git bundle and email one single file\nSee \"backing up project which uses git\"\n\nA git bundle is just one file which can be very easily created and again imported as it can be treated like another remote.\n\nOnce received, you can clone it or fetch from that file.\nAs mentioned in \"Backup of github repo\", you will probably want for the first email to make your bundle with all branches:\n$ git bundle create /tmp/foo-all --all\n\nAs Andreas mentions in the comments, Scott Chacon recently (March 2010) wrote a \"cute\" article on this topic in the ProGit book:\nGit's Little Bundle of Joy"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Adding Git credentials on Windows\n\nI am on a Windows 10 system and am trying to add my credentials to Git in Git Bash. I cannot find a way to store my password.\nI checked GitHub's documentation, which said just to enter the line git config --global credential.helper wincred, but that didn't seem to make sense, as there's not prompt to enter a password. I checked Git's documentation, which said to use command git credential-store --file ~/git.store store and fill in all prompts. The bash emulator wasn't able to read the credentials. \nFinally, I tried to add my password like I added my email, via git config --global user.password \"5ecre7\" but after running a sample git clone on a repository I made it responded that I didn't have the access rights. Is there a way to fix this?"}, {"role": "assistant", "content": "Ideally, you should enter:\ngit config --global credential.helper manager-core\n\n# Since Git 2.39+\ngit config --global credential.helper manager\n\nThis is from the Microsoft multi-platform credential manager GCM.\n(After Git 2.38.1, is called manager (no longer \"manager-core\"))\nThen your password (or rather a token is used nowadays) would be stored in the Windows Credential Manager.\nSee more at \"Unable to change git account\".\nOn the first push, a popup will appear asking for your credentials (username/password) for the target server (for instance github.com)\nIf not, that might means your credentials were already stored.\nIf they are incorrect, a simple printf \"protocol=https\\nhost=github.com\\nusername=xxx\"| git-credential-manager-core erase will remove them (on Windows, Linux or Mac)\n\nWith Git 2.29 (Q4 2020), the parser in the receiving end of the credential protocol is loosen to allow credential helper to terminate lines with CRLF line ending, as well as LF line ending.\nSee commit 356c473 (03 Oct 2020) by Nikita Leonov (nyckyta).\n(Merged by Junio C Hamano -- gitster -- in commit 542b3c2, 05 Oct 2020)\n\ncredential: treat CR/LF as line endings in the credential protocol\nSigned-off-by: Nikita Leonov\nSigned-off-by: Johannes Schindelin\n\n\nThis fix makes using Git credentials more friendly to Windows users: it allows a credential helper to communicate using CR/LF line endings (\"DOS line endings\" commonly found on Windows) instead of LF-only line endings (\"Unix line endings\").\nNote that this changes the behavior a bit: if a credential helper produces, say, a password with a trailing Carriage Return character, that will now be culled even when the rest of the lines end only in Line Feed characters, indicating that the Carriage Return was not meant to be part of the line ending.\nIn practice, it seems very unlikely that something like this happens. Passwords usually need to consist of non-control characters, URLs need to have special characters URL-encoded, and user names, well, are names.\nHowever, it does help on Windows, where CR/LF line endings are common: as unrecognized commands are simply ignored by the credential machinery, even a command like quit\\r (which is clearly intended to abort) would simply be ignored (silently) by Git.\nSo let's change the credential machinery to accept both CR/LF and LF line endings.\nWhile we do this for the credential helper protocol, we do not adjust git credential-cache--daemon(man) (which won't work on Windows, anyway, because it requires Unix sockets) nor git credential-store(man) (which writes the file ~/.git-credentials which we consider an implementation detail that should be opaque to the user, read: we do expect users not to edit this file manually)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  Start development from a known tag"}, {"role": "assistant", "content": "$ git clone git://git.kernel.org/pub/scm/.../linux-2.6 my2.6\n$ cd my2.6\n$ git branch my2.6.14 v2.6.14 (1) $ git switch my2.6.14 This step and the next one could be combined into a single step with\n\"checkout -b my2.6.14 v2.6.14\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Defining parallel sequences of jobs in GitLab CI\n\nIn my gitlab-ci.yml file, I have defined 3 stages, and the 2nd and 3rd stages have 3 jobs each, resulting in the following structure:\n\nThe 1st and 2nd stage works as I intended, however, for the 3rd stage what I'd actually like to have is something like this (the image is a mockup of course), i.e. \"parallel sequences\" of jobs if you will:\n\nThat is, I want \"deploy-b\" to start if \"build-b\" is done, and not waiting for the other build tasks to complete.\nIs that possible with GitLab pipelines? (Apart from the obvious solution of defining just 2 stages, the second being \"Build-and-Deploy\", where I just \"merge\" the script steps of the current build-* and deploy-* jobs.)"}, {"role": "assistant", "content": "This feature was added in the new GitLab release (v12.2)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Homebrew update fail: \"Please, commit your changes or stash them before you can merge\"\nI am running:\nbrew update\n\nAnd I get an error:\nerror: Your local changes to the following files would be overwritten by merge:\n    samtools.rb\nPlease, commit your changes or stash them before you can merge.\nAborting\n\nIt turns out this is a well known error. In fact, it's mentioned on the Homebrew wiki:\nAfter running brew update, you receive a git error warning about untracked files or local changes that would be overwritten by a checkout or merge, followed by a list of files inside your Homebrew installation.\n\nThis is caused by an old bug in in the update code that has long since been fixed. However, the nature of the bug requires that you do the following:\n\ncd $(brew --repository)\ngit reset --hard FETCH_HEAD\n\nIf brew doctor still complains about uncommitted modifications, also run this command:\n\ncd $(brew --repository)/Library\ngit clean -fd\n\nI followed those instructions and am still seeing the same error. What is wrong?"}, {"role": "assistant", "content": "I was able to resolve the issue myself.\nWhat tipped me off is running \"git status\" did not show that file.\nInstead of using the common solution:\ncd $(brew --repository)\ngit reset --hard FETCH_HEAD\n\nI had to do:\ncd [directory of the file in question]\ngit reset --hard FETCH_HEAD\n\nThat resolved the problem."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to upload an attachment to GitHub wiki? [closed]\n\nClosed. This question is off-topic. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it's on-topic for Stack Overflow.\n\n\nClosed 12 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI know how to reference it from wikis but where in GitHub site do I upload the attachment? Thanks a lot!"}, {"role": "assistant", "content": "As of Feburary 14th, 2022 GitHub allows uploading images to Wiki pages by dragging files into the web editor.\nCaveat: Files will be uploaded to their githubusercontent bucket, not added to the git repository for the wiki.\n\nOriginal post:\nJust to answer it shortly: You can't. You have to upload your images somewhere else (like in a repository or on an image hoster) and link it\nBut I agree with @jstephenson"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-describe - Give an object a human readable name based on an available ref  --tags"}, {"role": "assistant", "content": "Instead of using only the annotated tags, use any tag\nfound in refs/tags namespace.  This option enables matching\na lightweight (non-annotated) tag."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: name and email address configuration\nOnce in a while I get the message shown below from Git. My questions regarding this are:\n\nWhy does this happen?\nHow can I prevent this from happening again?\nHow does this affect my commits or any other Git actions I may take?\n\nI realize similar questions have been posted to Stack\u00a0Overflow, but I don't believe they address this message in particular.\n\nYour name and email address were configured automatically based\non your username and hostname. Please check that they are accurate.\nYou can suppress this message by setting them explicitly:\ngit config --global user.name \"Your Name\"\ngit config --global user.email [email\u00a0protected]\n\nAfter doing this, you may fix the identity used for this commit with:\ngit commit --amend --reset-author"}, {"role": "assistant", "content": "Git simply detects you don't have the following section in your config files:\n[user]\n    name = <your name>\n    email = <your mail>\n\n\n<project_path>/.git/config for the project specific config file.\n~/.gitconfig the global config file\n\nWhen you do:\ngit config --global user.name \"Your Name\"\ngit config --global user.email [email\u00a0protected]\n\nGit writes that information into the configuration file (--global means in the global config file).\nTo have a the correct Author section in a commit like the following example commit:\ncommit 79eeaa9f22321580a0e5bee6e237331691cd3b68\nAuthor: Sandro Munda <[email\u00a0protected]>\nDate:   Thu Jun 8 10:40:05 2012 +0200\n\n    My first commit\n\nYou need to reset the commit information with the command:\ngit commit --amend --reset-author"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  signature:grade"}, {"role": "assistant", "content": "Show \"G\" for a good (valid) signature, \"B\" for a bad\nsignature, \"U\" for a good signature with unknown validity, \"X\"\nfor a good signature that has expired, \"Y\" for a good\nsignature made by an expired key, \"R\" for a good signature\nmade by a revoked key, \"E\" if the signature cannot be\nchecked (e.g. missing key) and \"N\" for no signature."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to find a deleted file in the project commit history?\n\nOnce upon a time, there was a file in my project that I would now like to be able to get.\nThe problem is: I have no idea of when have I deleted it and on which path it was.\nHow can I locate the commits of this file when it existed?"}, {"role": "assistant", "content": "If you do not know the exact path you may use\ngit log --all --full-history -- \"**/thefile.*\"\n\nIf you know the path the file was at, you can do this:\ngit log --all --full-history -- <path-to-file>\n\nThis should show a list of commits in all branches which touched that file. Then, you can find the version of the file you want, and display it with...\ngit show <SHA> -- <path-to-file>\n\nOr restore it into your working copy with:\ngit checkout <SHA>^ -- <path-to-file>\nNote the caret symbol (^), which gets the checkout prior to the one identified, because at the moment of <SHA> commit the file is deleted, we need to look at the previous commit to get the deleted file's contents"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git: list new files only\nWhen I do a git status I get a list of files prefixed with new file: . How can I get only this list? I want to process this files in a simple loop in a little shell script."}, {"role": "assistant", "content": "The commands below no longer give the expected results, I may originally also have made some mistakes. Please double-check your output and the options you are using. Nevertheless: The basic tenet of using diff-filter should still hold true.\nDon't use grep to parse git output. Git almost certainly has the things you are looking for built-in (except if you are going for really advanced stuff).\nYou can use git diff to show the changes. --name-only shows only the filenames. --diff-filter=A lists only the added files.\nIf you want to see new files you have already added to the index use --cached, otherwise omit it. To see both diff to HEAD.\nThe commands look like this:\ngit diff --name-only --diff-filter=A --cached # All new files in the index  \ngit diff --name-only --diff-filter=A          # All files that are not staged  \ngit diff --name-only --diff-filter=A HEAD     # All new files not yet committed"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Undoing a git bisect mistake\nI'm doing a non-automated git bisect via command line. All is going well until I accidentally hit return on the wrong line in my command history, and rather than running the test, I run 'git bisect good' (or bad). Oops - I don't yet know if this commit should be marked good or bad, yet that's what I've done. \nCan I undo the 'git bisect good' command, or make git forget the result of it, and go back and run the test for that commit?"}, {"role": "assistant", "content": "From the git-bisect documentation:\n\nBisect log and bisect replay\nAfter having marked revisions as good or bad, issue the following command to show what has been done so far:\n$ git bisect log\n\nIf you discover that you made a mistake in specifying the status of a revision, you can save the output of this command to a file, edit it to remove the incorrect entries, and then issue the following commands to return to a corrected state:\n$ git bisect reset\n$ git bisect replay that-file"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  default"}, {"role": "assistant", "content": "Same as strip if the message is to be edited.\nOtherwise whitespace ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Change email address in Git\nI have a project hosted in Git stash (now rebranded as Bitbucket Server). It is built using Jenkins.\nNow I made a typo while installing my Git locally.\nLike @ab.example instead of @abc.example\nAfter every build, Jenkins sends email notifications and it picks up my incorrect email address from Git commit and tries to send it.\nEven after I have changed the email address in my local Git, I still see Jenkins sending the emails to the old incorrect address.\nHow can I fix this?"}, {"role": "assistant", "content": "Locally set email-address (separately for each repository)\n\nOpen Git Bash.\n\nChange the current working directory to the local repository in which you want to set your Git config email.\n\nSet your email address with the following command:\n\n\ngit config user.email \"[email\u00a0protected]\"\n\n\nConfirm that you have set your email address correctly with the following command.\n\ngit config user.email\n\nGlobally set email-address (only used when nothing is set locally)\n\nOpen Git Bash.\n\nSet your email address with the following command:\n\n\ngit config --global user.email \"[email\u00a0protected]\"\n\n\nConfirm that you have set your email address:\n\ngit config --global user.email\n\nOr using environment variables\n\n[email\u00a0protected]\n[email\u00a0protected]\n\nPD: Info from GitHub official guide"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rebase.autoStash"}, {"role": "assistant", "content": "When set to true, automatically create a temporary stash entry\nbefore the operation begins, and apply it after the operation\nends.  This means that you can run rebase on a dirty worktree.\nHowever, use with care: the final stash application after a\nsuccessful rebase might result in non-trivial conflicts.\nThis option can be overridden by the --no-autostash and --autostash options of git-rebase .\nDefaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.<driver>.xfuncname"}, {"role": "assistant", "content": "The regular expression that the diff driver should use to\nrecognize the hunk header.  A built-in pattern may also be used.\nSee gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gittutorial-2"}, {"role": "assistant", "content": "A tutorial introduction to Git: part two"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --decorate-refs=<pattern>  --decorate-refs-exclude=<pattern>"}, {"role": "assistant", "content": "For each candidate reference, do not use it for decoration if it\nmatches any patterns given to --decorate-refs-exclude or if it\ndoesn\u2019t match any of the patterns given to --decorate-refs . The log.excludeDecoration config option allows excluding refs from\nthe decorations, but an explicit --decorate-refs pattern will\noverride a match in log.excludeDecoration . If none of these options or config settings are given, then references are\nused as decoration if they match HEAD , refs/heads/ , refs/remotes/ , refs/stash/ , or refs/tags/ ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  receive.denyCurrentBranch"}, {"role": "assistant", "content": "If set to true or \"refuse\", git-receive-pack will deny a ref update\nto the currently checked out branch of a non-bare repository.\nSuch a push is potentially dangerous because it brings the HEAD\nout of sync with the index and working tree. If set to \"warn\",\nprint a warning of such a push to stderr, but allow the push to\nproceed. If set to false or \"ignore\", allow such pushes with no\nmessage. Defaults to \"refuse\". Another option is \"updateInstead\" which will update the working\ntree if pushing into the current branch.  This option is\nintended for synchronizing working directories when one side is not easily\naccessible via interactive ssh (e.g. a live web site, hence the requirement\nthat the working directory be clean). This mode also comes in handy when\ndeveloping inside a VM to test and fix code on different Operating Systems. By default, \"updateInstead\" will refuse the push if the working tree or\nthe index have any difference from the HEAD, but the push-to-checkout hook can be used to customize this.  See githooks ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git merge recursive theirs, how does it work?\nI'm having a bit of a problem. We have our own CMS which is using git for collaboration and versioning and stuff.\nNow I have two git repositories A and B, A which is a project and B which is the CMS itself. Now i want to get B into A, but when i do this i get alot of merge-conflicts and the solution for the conflicts is always to use the stuff from B. \nNow what I think i need is\ngit merge <branch> -s recursive theirs <commit>\n\nbecause I want to merge and when there is a merge conflict it should be forced to use the solution from B. But i can't get it to work. It always keeps telling me fatal: 'theirs' does not point to a commit.\nThe recursive theirs I found here.\nDoes anyone know what I do wrong?"}, {"role": "assistant", "content": "You must use this form to pass merge strategy options:\ngit merge -s recursive -Xtheirs # short options\ngit merge --strategy recursive --strategy-option theirs # long options\n\nAlso make sure your version supports -Xtheirs, that's a quite recent feature(?)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Trying to understand what Travis CI does and when it should be used\nI am very new to Git and I am planning to contribute to some open-source project on GitHub after discovering a small error in it. Upon forking it and fixing the error, I purposed a pull request and I noticed this showing up:  \n\nFailed \u2014 The Travis CI build failed\n\nLooking into the details I discovered it was caused by Could not find .travis.yml, which made perfect sense since I had not signed in to Travis Cl with and add .travis.yml to the repository.\nThis is my first time hearing about Travis and what that is known as continuous integration. And it sounds pretty cool so in order to learn more about it, I looked it up on Wikipedia.\n\nTravis CI is a hosted, distributed continuous integration service\n  used to build and test projects hosted at GitHub. Travis CI automatically detects when a commit has been made and pushed to a GitHub repository that is using Travis CI, and each time this happens, it will try to build the project and run tests. This includes commits to all branches, not just to the master branch.\n\nMy current understanding of Travis CI is that what it does is automatically pushing the project upon git commit -am \"..\" and I don't quite understand some part of it.\n\nBy building the project and run tests, what tests is it going to run? And how is it going to \"build\" the project? (like compiling it to binary?)\nIt states that \"This includes commits to all branches\" - but what if I don't want to commit to all branches?\nIs it alright if I don't use Travis Cl at all? Under what circumstances is it best to use it (or it must be used)?"}, {"role": "assistant", "content": "The simplest way to explain Travis CI is that it runs your program's tests every time you commit to GitHub (this can be configured in many ways, and you can always disable builds on some branches). The point of this is that you can often discover very quickly if your commit broke something, and fix it before it becomes a problem. I would recommend running Travis CI on every GitHub repo that you have unit tests in and is using a programming language supported by Travis CI. Since setting up Travis CI is very easy, I don't normally see a good reason not to use it, unless you don't care if you have passing tests in your program or not. Feel free to leave a comment if you have any more questions. You can read more about Travis CI here."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Create a GitHub webhook for when a pull request is accepted & merged to master\nI have a webhook that currently fires on push to any branch. This triggers the webhook far too frequently. Ideally, the webhook would only fire when a pull request is merged into master. I don't see that as an option, though:\n\nIs there a way to get additional webhook options or to customize the webhook somehow?"}, {"role": "assistant", "content": "So, you can't customize the conditions of the trigger, but as LeGec mentions you can customize your code to only trigger when the Pull Request is merged.\nTo do that, make sure your script responds to the PullRequestEvent. The conditions to test are:\n\n\"action\" is \"closed\"\n\"merged\" (inside of \"pull_request\") is true\n\nThis way your script can ignore all the pings it receives when any other activity occurs on the Pull Request (including closing without merging)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Switch between user identities in one Git on one computer [duplicate]\nThis question already has answers here:\n                                \n                            \n\n\n\n\nCan I specify multiple users for myself in .gitconfig?\n\n                                (25 answers)\n                            \n\nClosed 10 years ago.\n\n\n\nI have ONE repository on GitHub, let's call it Repo-1.\nI want to first access that repository as a default Git user.\nLet's call that user User-1.\nI created SSH keypair, everything fine, works nice.\n\nI made ANOTHER repository on GitHub, let's call it Repo-2.\nI didn't make any changes in local Git, on my laptop. No configurational changes, nothing.\nNow - I want to clone from Repo-1 as the User-2 (but from the same laptop).\nFirst of all: is this at all possible to do?\nCan local Git on one single laptop switch between \"user accounts\" and present itself as User-2? And then, from THAT identity, clone from Repo-1, make some change, and then push to Repo-1?\nIf possible, how do I do that?"}, {"role": "assistant", "content": "You have your global .gitconfig where you already configured your SSH Keys/User Information. The global .gitconfig is overridden by a local gitconfig - the file \"config\" in your .git folder (if it does not exist you might have to create it).\nFor example you can copy the .gitconfig file into the .git folder (and rename it to \"config\") and just change the lines you want to change (probably github.user and github.token) or you create a new file with just the two lines in it.\nIf you prefer the command line \"git config\" you can avoid all the file moving stuff by omitting the \"--global\" option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout-index - Copy files from the index to the working tree  -u  --index"}, {"role": "assistant", "content": "update stat information for the checked out entries in\nthe index file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Getting rid of '... does not point to a valid object' for an old git branch\n\nI have a fork of a Git repo and my clone appears to have an issue with an old, no longer existant, branch. I keep seeing this message:\nerror: refs/heads/t_1140 does not point to a valid object!\nI don't have any other messages and the repo works fine. There's no operation that stops me from working on other branches, pushing changes, pulling...etc.\nI've looked around and there's less than clear instructions on how to get around this issue. I've tried to execute git fsck --full but I see no errors. Just a load on dangling ... messages.\nI've also checked my .git/config and there's no references to this branch and have also checked .git/refs/heads and there's no reference to t_1140\nAny idea how to get rid of this error?\np.s I've tried to clone my repo again and it seems like the error is my Github repo too. So, the only thing I can think of right now is to ditch my repo and fork again."}, {"role": "assistant", "content": "This will clean out any missing refs:\ngit for-each-ref --format=\"%(refname)\" | while read ref; do\n    git show-ref --quiet --verify $ref 2>/dev/null || git update-ref -d $ref\ndone"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Unable to push nuGet packages to GitLab with dotnet CLI due to Unauthorized error\n\nGitLab now supports nuget public and private feed repository.\nI've got a public project (e.g: https://gitlab.com/sunnyatticsoftware/sasw-test-support)\nI create an access token for my user with api and write_repository (e.g: AAABBBCCCDDD)\nI create a group variable in my CI/CD: SASW_API_ACCESS_TOKEN: AAABBBCCCDDD. All normal.\nThen I create the multi stage CI/CD script to build, pack and publish.\nWhen attempting to publish the nuGet package with the following:\ndotnet nuget push **/*.nupkg --source https://gitlab.com/api/v4/projects/17141695/packages/nuget/index.json --api-key AAABBBCCCDDD --skip-duplicate\nI get the error:\ninfo : Pushing Sasw.TestSupport.2.0.2.nupkg to 'https://gitlab.com/api/v4/projects/17141695/packages/nuget'...\ninfo :   PUT https://gitlab.com/api/v4/projects/17141695/packages/nuget/\ninfo :   Unauthorized https://gitlab.com/api/v4/projects/17141695/packages/nuget/ 397ms\nerror: Response status code does not indicate success: 401 (Unauthorized).\nERROR: Job failed: exit code 1\n\nThe documentation doesn't mention anything special, but I notice that when using the (legacy?) nuget CLI it passes a username. Dotnet CLI, however, doesn't support username, just API KEY.\nAny idea why this is not working?\nThis is my CI/CD script:\nvariables:\n  GITLAB_RUNNER_DOTNET_CORE: mcr.microsoft.com/dotnet/core/sdk:3.1\n  NUGET_REPOSITORY: https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/nuget/index.json\n  NUGET_API_KEY: $SASW_API_ACCESS_TOKEN\n  NUGET_FOLDER_NAME: nupkgs\n  NUGET_VERSION_SUFFIX: $SASW_PRERELEASE_SUFFIX\n\nstages:\n  - build\n  - pack\n  - release\n  \n#Docker image\nimage: $GITLAB_RUNNER_DOTNET_CORE\n\n#Jobs\nci:\n  stage: build\n  script:\n    - dotnet restore --no-cache --force\n    - dotnet build --configuration Release --no-restore\n    #- dotnet vstest test/*UnitTests/bin/Release/**/*UnitTests.dll\n    #- dotnet vstest test/*IntegrationTests/bin/Release/**/*IntegrationTests.dll\n    \npack-prerelease:\n  stage: pack\n  script:\n    - dotnet pack *.sln --configuration Release --output $NUGET_FOLDER_NAME --version-suffix $NUGET_VERSION_SUFFIX --include-symbols -p:SymbolPackageFormat=snupkg\n  artifacts:\n    paths:\n    - $NUGET_FOLDER_NAME\n    expire_in: 1 week\n  except:\n    - master\n\npack-release:\n  stage: pack\n  script:\n    - dotnet pack *.sln --configuration Release --output $NUGET_FOLDER_NAME\n  artifacts:\n    paths:\n    - $NUGET_FOLDER_NAME\n    expire_in: 1 week\n  only:\n    - master\n\npublish-nuget:\n  stage: release\n  script:\n    - dotnet nuget push **/*.nupkg --source $NUGET_REPOSITORY --api-key $NUGET_API_KEY --skip-duplicate\n\nPS: The project is public, so in case it's needed have a look at: https://gitlab.com/sunnyatticsoftware/sasw-test-support/-/jobs/451080235\n\nUPDATE 1: Further verbosity from my local linux console\n$ dotnet nuget -v Debug push **/*.nupkg --source https://gitlab.com/api/v4/projects/17141695/packages/nuget/index.json --api-key cBwt5_hidden_ --skip-duplicate\ntrace: NuGet Command Line Version: 5.4.0.2\ninfo : Pushing Sasw.TestSupport.2.0.2.nupkg to 'https://gitlab.com/api/v4/projects/17141695/packages/nuget'...\ninfo :   PUT https://gitlab.com/api/v4/projects/17141695/packages/nuget/\ninfo :   Unauthorized https://gitlab.com/api/v4/projects/17141695/packages/nuget/ 1159ms\nerror: Response status code does not indicate success: 401 (Unauthorized).\ntrace: System.AggregateException: One or more errors occurred. (Response status code does not indicate success: 401 (Unauthorized).)\ntrace:  ---> System.Net.Http.HttpRequestException: Response status code does not indicate success: 401 (Unauthorized).\ntrace:    at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()\ntrace:    at NuGet.Protocol.Core.Types.PackageUpdateResource.EnsureSuccessStatusCode(HttpResponseMessage response, Nullable`1 codeNotToThrow, ILogger logger)\ntrace:    at NuGet.Protocol.Core.Types.PackageUpdateResource.<>c__DisplayClass23_0.<PushPackageToServer>b__0(HttpResponseMessage response)\ntrace:    at NuGet.Protocol.HttpSource.ProcessResponseAsync[T](HttpSourceRequest request, Func`2 processAsync, SourceCacheContext cacheContext, ILogger log, CancellationToken token)\ntrace:    at NuGet.Protocol.Core.Types.PackageUpdateResource.PushPackageToServer(String source, String apiKey, String pathToPackage, Int64 packageSize, Boolean noServiceEndpoint, Boolean skipDuplicate, TimeSpan requestTimeout, ILogger logger, CancellationToken token)\ntrace:    at NuGet.Protocol.Core.Types.PackageUpdateResource.PushPackageCore(String source, String apiKey, String packageToPush, Boolean noServiceEndpoint, Boolean skipDuplicate, TimeSpan requestTimeout, ILogger log, CancellationToken token)\ntrace:    at NuGet.Protocol.Core.Types.PackageUpdateResource.PushPackage(String packagePath, String source, String apiKey, Boolean noServiceEndpoint, Boolean skipDuplicate, TimeSpan requestTimeout, ILogger log, CancellationToken token, Boolean isSnupkgPush)\ntrace:    at NuGet.Protocol.Core.Types.PackageUpdateResource.Push(String packagePath, String symbolSource, Int32 timeoutInSecond, Boolean disableBuffering, Func`2 getApiKey, Func`2 getSymbolApiKey, Boolean noServiceEndpoint, Boolean skipDuplicate, SymbolPackageUpdateResourceV3 symbolPackageUpdateResource, ILogger log)\ntrace:    at NuGet.Commands.PushRunner.Run(ISettings settings, IPackageSourceProvider sourceProvider, String packagePath, String source, String apiKey, String symbolSource, String symbolApiKey, Int32 timeoutSeconds, Boolean disableBuffering, Boolean noSymbols, Boolean noServiceEndpoint, Boolean skipDuplicate, ILogger logger)\ntrace:    at NuGet.CommandLine.XPlat.PushCommand.<>c__DisplayClass0_1.<<Register>b__1>d.MoveNext()\ntrace:    --- End of inner exception stack trace ---\ntrace:    at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\ntrace:    at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)\ntrace:    at System.Threading.Tasks.Task`1.get_Result()\ntrace:    at Microsoft.Extensions.CommandLineUtils.CommandLineApplication.<>c__DisplayClass56_0.<OnExecute>b__0()\ntrace:    at Microsoft.Extensions.CommandLineUtils.CommandLineApplication.Execute(String[] args)\ntrace:    at NuGet.CommandLine.XPlat.Program.MainInternal(String[] args, CommandOutputLogger log)\n\n\nUPDATE 2: Alexey's answer is the proper one and up to date as per April 2021. GitLab has improved Nuget support in the last year and now it's possible to easily push packages to the repo package registry and have readacces on Nuget feed at project level or group level using deploy tokens."}, {"role": "assistant", "content": "Pushing NuGet packages built from the current repository is quite easy, following the documentation. You do not need a NuGet.config file to push packages, as the credentials can be specified for the dotnet push command. You also don't need to keep the credentials in the CI file, as the CI variables contain all the necessary temporary credentials to push packages to the project package registry.\nThis is a fragment from my working .gitlab-ci.yml file, which I literally copy-pasted from the docs. All the necessary information comes from CI variables, so this snippet is totally reusable.\nnuget:\n  stage: deploy\n  image: mcr.microsoft.com/dotnet/sdk:5.0-buster-slim\n  script:\n    - dotnet pack -c Release -o $PWD/nuget\n    - dotnet nuget add source \"$CI_SERVER_URL/api/v4/projects/$CI_PROJECT_ID/packages/nuget/index.json\" --name gitlab --username gitlab-ci-token --password $CI_JOB_TOKEN --store-password-in-clear-text\n    - dotnet nuget push \"$PWD/nuget/*.nupkg\" --source gitlab\n  only:\n    - master\n    - tags\n\nConcerning the question about installing the package, you would, indeed, need a token. But it is not your personal access token. All you need really to let people install and restore from your feed is the repository deploy token. It doesn't have to be defined on the project level if you have multiple projects in a group, which contains several projects that have NuGet packages published. You can also create a deploy token for the whole group. The deploy token you create for this purpose only needs to have the read_package_registry permissions and it doesn't give any other rights to the users who get this token.\nAfter creating a deploy token, the token name is used as the username, and the token itself is the password. You put both of those to the NuGet.config file, where you have your project or group feed listed.\nFor example:\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n    <packageSources>\n        <clear />\n        <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\n        <add key=\"myfeed\" value=\"https://gitlab.mydomain.dev/api/v4/groups/19/-/packages/nuget/index.json\" />\n    </packageSources>\n    <packageSourceCredentials>\n        <myfeed>\n            <add key=\"Username\" value=\"gitlab+deploy-token-14\" />\n            <add key=\"ClearTextPassword\" value=\"thetokenvalue\" />\n        </myfeed>\n    </packageSourceCredentials>\n</configuration>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to merge remote changes at GitHub?\nI'm getting following error, whn trying first Github push:\n[rejected] master -> master (non-fast forward)\nerror: failed to push some refs to '[email\u00a0protected]:me/me.git'\nTo prevent you from losing history, non-fast-forward updates were rejected\nMerge the remote changes before pushing again.  See the 'non-fast forward'\nsection of 'git push --help' for details.\n\nhow can I fix this and merge remote changes?"}, {"role": "assistant", "content": "See the 'non-fast forward' section of 'git push --help' for details.\n\nYou can perform \"git pull\", resolve potential conflicts, and \"git push\" the result. A \"git pull\" will create a merge commit C between commits A and B.\nAlternatively, you can rebase your change between X and B on top of A, with \"git pull --rebase\", and push the result back. The rebase will create a new commit D that builds the change between X and B on top of A."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to hide .env file from Github\nI'm using dotenv for my rails project to store API keys. I have the dotenv gem in my gemfile, created a .env in the root of my app and have my API keys listed in there. However, when I push up to github, I notice that the .env file is still there. Am I missing a step? How can I hide the .env file from being uploaded to github. \nThank you!"}, {"role": "assistant", "content": "Create a file called .gitignore in the root directory of your project (it's possible one is already there) and add .env on its own line in the file.\nAlso, if you have already added it to your repository, then you will have to add the file to .gitignore as stated above and then clear Git's cache.  You can find information on that in the following answer on StackOverflow."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to version build artifacts using GitHub Actions?\n\nMy use case is I want to have a unique version number for artifacts per each build/run. With current tools like CircleCI, Travis, etc. there is a build number available which is basically a counter that always goes up. So, I can create version strings like 0.1.0-27. This counter is increased each time even for the same commit.\nHow can I do something similar with GitHub Actions? Github actions only offer GITHUB_SHA and GITHUB_REF."}, {"role": "assistant", "content": "GitHub Actions now has a unique number and ID for a run/build in the github context.\n\ngithub.run_id : A unique number for each workflow run within a repository. This number does not change if you re-run the workflow run.\ngithub.run_number : A unique number for each run of a particular workflow in a repository. This number begins at 1 for the workflow's first run, and increments with each new run. This number does not change if you re-run the workflow run.\ngithub.run_attempt : A unique number for each attempt of a particular workflow run in a repository. This number begins at 1 for the workflow run's first attempt, and increments with each re-run.\n\nref: https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context\nYou can reference them in workflows like this:\n- name: Output Run ID\n  run: echo ${{ github.run_id }}\n- name: Output Run Number\n  run: echo ${{ github.run_number }}\n- name: Output Run Attempt\n  run: echo ${{ github.run_attempt }}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How does git detect that a file has been modified?\nHow does git detect a file modification so fast?\nDoes it hash every file in the repo and compare SHA1s?  This would take a lot of time, wouldn't it?\nOr does it compare atime, ctime or mtime?"}, {"role": "assistant", "content": "Git tries hard to get convinced from the lstat() value alone that the worktree matches the index, because falling back on file contents is very expensive.\nDocumentation/technical/racy-git.txt describes what stat fields are used, and how some race conditions due to low mtime granularity are avoided. This article has some more detail.\nstat values aren't tamper-proof, see futimens(3). Git may be fooled into missing a change to a file; that does not compromise the integrity of content-hashing."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --show-pulls"}, {"role": "assistant", "content": "Include all commits from the default mode, but also any merge\ncommits that are not TREESAME to the first parent but are\nTREESAME to a later parent. This mode is helpful for showing\nthe merge commits that \"first introduced\" a change to a branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-index-pack"}, {"role": "assistant", "content": "Build pack index file for an existing packed archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_TRACE"}, {"role": "assistant", "content": "Enables general trace messages, e.g. alias expansion, built-in\ncommand execution and external command execution. If this variable is set to \"1\", \"2\" or \"true\" (comparison\nis case insensitive), trace messages will be printed to\nstderr. If the variable is set to an integer value greater than 2\nand lower than 10 (strictly) then Git will interpret this\nvalue as an open file descriptor and will try to write the\ntrace messages into this file descriptor. Alternatively, if the variable is set to an absolute path\n(starting with a / character), Git will interpret this\nas a file path and will try to append the trace messages\nto it. Unsetting the variable, or setting it to empty, \"0\" or\n\"false\" (case insensitive) disables trace messages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Cocoapods setup stuck on pod setup command on terminal\nMacBook-Pro:~ skbc$ pod setup --verbose\n/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/universal-darwin13/rbconfig.rb:212: warning: Insecure world writable dir /usr/local/bin in PATH, mode 040777\n\nSetting up CocoaPods master repo\n\nCloning spec repo `master` from `https://github.com/CocoaPods/Specs.git` (branch `master`)\n  $ /usr/bin/git clone 'https://github.com/CocoaPods/Specs.git' master\n  Cloning into 'master'...\n\nHave gone through resources provided by Cocoapods website, SO and few video tutorials. Nothing happening even after waiting for a couple of hours, however still trying to figure out what may be the problem is?\nI would very much appreciate your comments and suggestions."}, {"role": "assistant", "content": "It is not stuck. I thought the same until I went to the \"Activity Monitor\" of the system and checked the \"Network\" tab.\nThen you will see that something is being downloaded. A process called git-remote-http is in charge of this.\n\nJust wait! It happened the same for me :)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to create a new branch from a tag?\nI'd like to create a new master branch from an existing tag. Say I have a tag v1.0. How to create a new branch from this tag?"}, {"role": "assistant", "content": "Wow, that was easier than I thought:\ngit checkout -b newbranch v1.0\n\n\nIf running the above command you get an error\n\nwarning: refname 'v1.0' is ambiguous. \nfatal: ambiguous object name: 'v1.0'\n\nthis is because you also have a branch with name v1.0. In this case specify tags/ prefix:\ngit checkout -b newbranch tags/v1.0"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "fatal: Could not open file .git/rebase-merge/done for reading: No such file or directory\n\nI was going to do a rebase to delete my last commit but I didn't want to finish so I exited. (I realize this probably was not the best way to go about it, but it's done) I guess I did it wrong because I am getting the error: fatal: Could not open file .git/rebase-merge/done for reading: No such file or directory every time I run git status. How do I get rid of this error so I can continue making commits? Can I just delete the file? If I can delete it, how would I do that?"}, {"role": "assistant", "content": "Before you try the following, make sure you stash or commit any uncommitted changes first, or you will lose them irrevocably.\nThen try to do a git rebase --abort."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  renormalize"}, {"role": "assistant", "content": "This runs a virtual check-out and check-in of all three stages\nof a file when resolving a three-way merge.  This option is\nmeant to be used when merging branches with different clean\nfilters or end-of-line normalization rules.  See \"Merging\nbranches with differing checkin/checkout attributes\" in gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --glob-pathspecs"}, {"role": "assistant", "content": "Add \"glob\" magic to all pathspec. This is equivalent to setting\nthe GIT_GLOB_PATHSPECS environment variable to 1 . Disabling\nglobbing on individual pathspecs can be done using pathspec\nmagic \":(literal)\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  --break"}, {"role": "assistant", "content": "Print an empty line between matches from different files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  -n  --numbered"}, {"role": "assistant", "content": "Sort output according to the number of commits per author instead\nof author alphabetic order."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "merge one local branch into another local branch\nI have multiple branches which are branched off the master (each in a separate subdirectory).\n\nnewdevBranch: new development, not yet completely finished\nhotFixBranch: hotfix for a problem, but still under test\nmessAroundBranch: mess around branch, which I will not restore\n\nBefore testing of the hotfix is finished I would like to have the code already available in newdevBranch, so I can continue developing with the fix in place.\n(But since my experience with git is not that much I first started to play around with merge in a messAroundBranch, especially created to mess around in, before I mess up either newdevBranch or hotFixBranch)\nIn my messAroundBranch I first tried the following:\ngit merge feature/newdevBranch\n\nbut this gave the following error:\nfatal: 'feature/newdevBranch' does not point to a commit\n\nI next did a commit -a in my newdevBranch and tried again, but it keeps giving the same error.\nWhat am I doing wrong? What should I do to merge the code from - in this case - newdevBranch with messAroundBranch?"}, {"role": "assistant", "content": "newdevBranch: new development, not yet completely finished\nhotFixBranch: hotfix for a problem, but still under test\nmessAroundBranch: mess around branch, which I will not restore\nFirst, checkout to your messAroundBranch:\ngit checkout messAroundBranch\n\nThen merge the newdevBranch into messAroundBranch:\ngit merge newdevBranch\n\nAnd if you want the updated commits of newdevBranch on hotFixBranch, you are probably looking for git rebase\ngit checkout hotFixBranch\ngit rebase newdevBranch\n\nThis will update your hotFixBranch with the latest updates of newDevBranch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Pipes in a Git alias?\nI work on feature branches that have annoying big names, so I often end up grepping my current branch name when I need to push up to the feature branch from my local feature branch, like so:\ngit branch | grep '*' | sed 's/* //' | xargs git push origin\n\nThis works fine. I want to make this an alias, so I did this in ~/.gitconfig:\n[alias]\n   pushcur = branch | grep '*' | sed 's/* //' | xargs git push origin\n\nNow, when I run git pushcur, I get the following error:\nusage: git branch [options] [-r | -a] [--merged | --no-merged]\n\nLeading me to believe that the alias is not properly parsing the pipes. Is there something else I should do to achieve the desired alias?"}, {"role": "assistant", "content": "I don't think you can, but you can prefix it with an ! to treat the command as a new shell command\n[alias]\n    pushcur = ! git branch | grep '*' \u2026"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Switching branches without touching the working tree?\nI am currently on a debug branch, and would like to switch to the master branch, without modifying the working tree (leave it the way it is in the debug branch), so I can commit some of the changes into the master branch.\nIs there a way to do this?"}, {"role": "assistant", "content": "You can do the following:\ngit checkout --detach\ngit reset --soft master\ngit checkout master\n\n\nExplanation:\nIf you are on the debug branch and would do git reset --soft master you would leave your working tree and index untouched and move to the commit master points to. The problem is, debug will be reset to this commit too. So your commits on debug are \"lost\" (well, not really, but they are not directly accessible anymore) and you are still on the debug branch.\nTo prevent git reset from moving debug but still setting your HEAD to the master commit, you first do git checkout --detach to point HEAD directly to your current commit (see man git-checkout, section \"DETACHED HEAD\"). Then you can do the reset without touching the debugbranch.\nNow HEAD is pointing directly to the commit master points to, i.e. it is still detached. You can simply git checkout master to attach to master and are now ready to commit on the master branch.\nNote that git checkout (by default and when no path is passed) only updates files that have been changed between the \"source\" and \"target\" commit and local modifications to the files in the working tree are kept. As both commits are the same in this case, no files in the working directory are touched."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --word-diff[=<mode>]"}, {"role": "assistant", "content": "Show a word diff, using the <mode> to delimit changed words.\nBy default, words are delimited by whitespace; see --word-diff-regex below.  The <mode> defaults to plain , and\nmust be one of: color Highlight changed words using only colors.  Implies --color . plain Show words as [-removed-] and {+added+} .  Makes no\nattempts to escape the delimiters if they appear in the input,\nso the output may be ambiguous. porcelain Use a special line-based format intended for script\nconsumption.  Added/removed/unchanged runs are printed in the\nusual unified diff format, starting with a + / - /` `\ncharacter at the beginning of the line and extending to the\nend of the line.  Newlines in the input are represented by a\ntilde ~ on a line of its own. none Disable word diff again. Note that despite the name of the first mode, color is used to\nhighlight the changed parts in all modes if enabled."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Python / pip, how do I install a specific version of a git repository from github (what is the correct url)?\n\nI want to install Django 1.7 via pip. It is currently a development version, so not in pips repositories. \nSo I have installed packages from github before using:\npip install git+[url here]\n\nNow looking at github, I get the clone url on the django page:\nhttps://github.com/django/django.git\n\nBut this mentions nothing of the branch. How do I specify that I want version 1.7? \nIs it somewhere obvious on the github page?"}, {"role": "assistant", "content": "Specify the branch, commit hash, or tag name after an @ at the end of the url:\npip install git+https://github.com/django/[email\u00a0protected]\n\nThis will install the version tagged with 1.7b3.\nReference: https://pip.pypa.io/en/latest/cli/pip_install/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - Your branch is ahead of 'origin/master' by 1 commit\nI am newbie in git and I am working on git.  \nI added some files in git :  \ngit add <file1>\ngit add <file2>\n\nthen I wanted to push that for review, but mistakenly I did\ngit commit\n\nso the files which I have changed don't go for reviews.\nNow if I enter the command :\ngit status\n\nit says \n# On branch master\n# Your branch is ahead of 'origin/master' by 1 commit.\n#\nnothing to commit (working directory clean)\n\nI want to revert that commit and I want to push those files for review rather than commit.\nCan anyone let me know how I can do that?"}, {"role": "assistant", "content": "You cannot push anything that hasn't been committed yet. The order of operations is:\n\nMake your change.\ngit add - this stages your changes for committing\ngit commit - this commits your staged changes locally\ngit push - this pushes your committed changes to a remote\n\nIf you push without committing, nothing gets pushed. If you commit without adding, nothing gets committed. If you add without committing, nothing at all happens, git merely remembers that the changes you added should be considered for the following commit.\nThe message you're seeing (your branch is ahead by 1 commit) means that your local repository has one commit that hasn't been pushed yet.\nIn other words: add and commit are local operations, push, pull and fetch are operations that interact with a remote.\nSince there seems to be an official source control workflow in place where you work, you should ask internally how this should be handled."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --update-refs  --no-update-refs"}, {"role": "assistant", "content": "Automatically force-update any branches that point to commits that\nare being rebased. Any branches that are checked out in a worktree\nare not updated in this way. If the configuration variable rebase.updateRefs is set, then this option\ncan be used to override and disable this setting. See also INCOMPATIBLE OPTIONS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  resolve"}, {"role": "assistant", "content": "This can only resolve two heads (i.e. the current branch\nand another branch you pulled from) using a 3-way merge\nalgorithm.  It tries to carefully detect criss-cross\nmerge ambiguities.  It does not handle renames."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitfaq - Frequently asked questions about using Git  How do I know if I want to do a fetch or a pull?"}, {"role": "assistant", "content": "A fetch stores a copy of the latest changes from the remote\nrepository, without modifying the working tree or current branch.\nYou can then at your leisure inspect, merge, rebase on top of, or\nignore the upstream changes.  A pull consists of a fetch followed\nimmediately by either a merge or rebase.  See git-pull ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-count-objects - Count unpacked number of objects and their disk consumption  -H  --human-readable"}, {"role": "assistant", "content": "Print sizes in human readable format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to copy commits from one Git repo to another?\n\nLast week I created a Github repo and forgot to select a license for the repo. Now there are already 3 large commits.\nI have asked the 3 contributors if it is ok if I delete the repo and then create it again with the same name and this time selecting the license when creating the repo, and they were fine with that.\nQuestion\nIs there a way I can get the commits into the new repo (this time the first commit is the LICENSE file) and still keep the commit meta info?"}, {"role": "assistant", "content": "Is there a way I have get the commits into new repo (this time the first commit is the LICENSE file) and still keep the commit meta info?\n\nYes, by adding a remote and cherry-picking the commits on top of your first commit.\n# add the old repo as a remote repository \ngit remote add oldrepo https://github.com/path/to/oldrepo\n\n# get the old repo commits\ngit remote update\n\n# examine the whole tree\ngit log --all --oneline --graph --decorate\n\n# copy (cherry-pick) the commits from the old repo into your new local one\ngit cherry-pick sha-of-commit-one\ngit cherry-pick sha-of-commit-two\ngit cherry-pick sha-of-commit-three\n\n# check your local repo is correct\ngit log\n\n# send your new tree (repo state) to github\ngit push origin master\n\n# remove the now-unneeded reference to oldrepo\ngit remote remove oldrepo\n\n\nThe rest of this answer is if you still want to add the LICENSE to your previous repo.\nYes. You can place your LICENSE commit as the first commit by rebasing.\nRebasing is gits way of rearranging commit order while keeping all the commit authors and commit dates intact.\nWhen working on a shared repo, it's generally discouraged unless your entire team is git-fluent. For those that aren't, they can just clone a fresh copy of the repository.\nHere's how you get your LICENSE commit as the first commit.\n1. Update and rebase your local copy\nCheck out your project and place the LICENSE file in a commit ON TOP of your current 3 commit stack.\n#create LICENSE file, edit, add content, save\ngit add LICENSE\ngit commit -m 'Initial commit'\n\nThen do an interactive rebase on the master branch to REARRANGE the commits.\ngit rebase -i --root\n\nIt will open an editor.  Move the bottom line (your \"Initial commit\" commit, the most recent commit) to the top of the file. Then save and quit the editor.\nAs soon as you exit the editor, git will write the commits in the order you just specified.\nYou now have your local copy of the repository updated. do:\ngit log\n\nto verify.\n2. Force push your new repo state to github\nNow that your copy is updated, you have to force push it to github.\ngit push -f origin master\n\nThis will tell github to move the master branch to its new location.\nYou should only force push in rare occasions like this where everybody working with it is aware of the pending change, else it will confuse your collaborators.\n3. Synchronize collaborators to github\nLastly, all the collaborators will have to synchronize to this repository.\nFirst they must have clean repositories as the following command can be destructive if there are unsaved changes.\n# make sure there are no unsaved changes\ngit status \n\n# pull the latest version from github\ngit fetch  \n\n# move their master branch pointer to the one you published to github.\ngit reset --hard origin/master\n\nThat's it.  Everybody should be in sync now."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit-tree - Create a new commit object"}, {"role": "assistant", "content": "Discussion Git is to some extent character encoding agnostic. The contents of the blob objects are uninterpreted sequences\nof bytes.  There is no encoding translation at the core\nlevel. Path names are encoded in UTF-8 normalization form C. This\napplies to tree objects, the index file, ref names, as well as\npath names in command line arguments, environment variables\nand config files ( .git/config (see git-config ), gitignore , gitattributes and gitmodules ). Note that Git at the core level treats path names simply as\nsequences of non-NUL bytes, there are no path name encoding\nconversions (except on Mac and Windows). Therefore, using\nnon-ASCII path names will mostly work even on platforms and file\nsystems that use legacy extended ASCII encodings. However,\nrepositories created on such systems will not work properly on\nUTF-8-based systems (e.g. Linux, Mac, Windows) and vice versa.\nAdditionally, many Git-based tools simply assume path names to\nbe UTF-8 and will fail to display other encodings correctly. Commit log messages are typically encoded in UTF-8, but other\nextended ASCII encodings are also supported. This includes\nISO-8859-x, CP125x and many others, but not UTF-16/32,\nEBCDIC and CJK multi-byte encodings (GBK, Shift-JIS, Big5,\nEUC-x, CP9xx etc.). Although we encourage that the commit log messages are encoded\nin UTF-8, both the core and Git Porcelain are designed not to\nforce UTF-8 on projects.  If all participants of a particular\nproject find it more convenient to use legacy encodings, Git\ndoes not forbid it.  However, there are a few things to keep in\nmind. git commit and git commit-tree issue\na warning if the commit log message given to it does not look\nlike a valid UTF-8 string, unless you explicitly say your\nproject uses a legacy encoding.  The way to say this is to\nhave i18n.commitEncoding in .git/config file, like this: [i18n]\n\tcommitEncoding = ISO-8859-1 Commit objects created with the above setting record the value\nof i18n.commitEncoding in their encoding header.  This is to\nhelp other people who look at them later.  Lack of this header\nimplies that the commit log message is encoded in UTF-8. git log , git show , git blame and friends look at the encoding header of a commit object, and try to re-code the\nlog message into UTF-8 unless otherwise specified.  You can\nspecify the desired output encoding with i18n.logOutputEncoding in .git/config file, like this: [i18n]\n\tlogOutputEncoding = ISO-8859-1 If you do not have this configuration variable, the value of i18n.commitEncoding is used instead. Note that we deliberately chose not to re-code the commit log\nmessage when a commit is made to force UTF-8 at the commit\nobject level, because re-coding to UTF-8 is not necessarily a\nreversible operation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --cherry-pick"}, {"role": "assistant", "content": "Omit any commit that introduces the same change as\nanother commit on the \u201cother side\u201d when the set of\ncommits are limited with symmetric difference. For example, if you have two branches, A and B , a usual way\nto list all commits on only one side of them is with --left-right (see the example below in the description of\nthe --left-right option). However, it shows the commits that were\ncherry-picked from the other branch (for example, \u201c3rd on b\u201d may be\ncherry-picked from branch A). With this option, such pairs of commits are\nexcluded from the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git Pull vs Git Rebase\nI'm a noob in Git, and trying to learn the difference between git pull vs git rebase. Can someone provide an example when to use which option since I feel that both serve the same purpose."}, {"role": "assistant", "content": "git pull and git rebase are not interchangeable, but they are closely connected.\ngit pull fetches the latest changes of the current branch from a remote and applies those changes to your local copy of the branch. Generally this is done by merging, i.e. the local changes are merged into the remote changes. So git pull is similar to git fetch & git merge.\nRebasing is an alternative to merging. Instead of creating a new commit that combines the two branches, it moves the commits of one of the branches on top of the other. \nYou can pull using rebase instead of merge (git pull --rebase). The local changes you made will be rebased on top of the remote changes, instead of being merged with the remote changes.\nAtlassian has some excellent documentation on merging vs. rebasing."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-count-objects - Count unpacked number of objects and their disk consumption  -v  --verbose"}, {"role": "assistant", "content": "Provide more detailed reports: count: the number of loose objects size: disk space consumed by loose objects, in KiB (unless -H is specified) in-pack: the number of in-pack objects size-pack: disk space consumed by the packs, in KiB (unless -H is specified) prune-packable: the number of loose objects that are also present in\nthe packs. These objects could be pruned using git prune-packed . garbage: the number of files in the object database that are neither valid loose\nobjects nor valid packs size-garbage: disk space consumed by garbage files, in KiB (unless -H is\nspecified) alternate: absolute path of alternate object databases; may appear\nmultiple times, one line per path. Note that if the path contains\nnon-printable characters, it may be surrounded by double-quotes and\ncontain C-style backslashed escape sequences."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do you attach a new pull request to an existing issue on github?\nI'm not sure, but I have a vague memory of creating a github pull request with \"Issue 4\" or something in the title, and it automatically attached itself to Issue 4 in the project that I was submitting it to. I tried it again recently and it didn't work -- it just created a brand new issue instead. I don't see any options like \"Attach to issue\" on the new pull request page, nor \"Open a new pull request for this issue\" on the issue page. Is there any way to do this, to help project owners keep their Issues page clean and avoid duplication?\nEdit: To clarify, I know that creating a pull request always creates a new issue. I would like to instead attach the pull request to an existing issue."}, {"role": "assistant", "content": "Adding a pull request to an existing upstream issue is easy assuming you forked using the normal github means. \nSimply reference the issue in your commit message using any of the supported keywords:\n\nclose\ncloses\nclosed\nfix\nfixes\nfixed\nresolve\nresolves\nresolved\n\nFor example: \"this commit fixes #116\"\nThe text referencing the issue does not need to appear in the subject line of your commit.\nPush your commit to your github repo and the pull request will be automatically appended to the issue. \nNote: While it is not required, it is strongly recommended that you commit anything that will be part of a pull request to a separate branch specific to that issue, because future commits on that branch will be appended to the pull request (automatically by github). So, if you didn't make a separate branch, left it on master, and then kept developing, then all your unrelated commits to master would get appended to your pull request."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git mergetool with Meld on Windows\nIn Linux, my favorite merge tool is Meld, and I've had no problems using or configuring it to work with Git.  However, in Windows it has been a different story.\nFirst, I installed Meld from a bundle I found here: https://code.google.com/p/meld-installer/\nThen, I configured my .gitconfig like so to support Meld as the default mergetool\n[merge]                                                      \n    tool = meld                                                                         \n\n[mergetool \"meld\"]                                           \n    path = C:\\\\Program Files (x86)\\\\Meld\\\\meld\\\\meld.exe\n    keepBackup = false                                   \n    trustExitCode = false\n\nSo, when I have a conflict, I do git difftool and Meld does in fact open.  However, the paths to the files that Git writes to pass to the diff tool is incorrect.  For example, even though Git generates the BASE, LOCAL, and REMOTE files in the repository directory (the location I called git mergetool from), Meld tries to open each of those files in the directory of the executable.  \nInstead of opening C:\\repo\\roses.txt.LOCAL.2760.txt, Meld tries to open C:\\Program Files (x86)\\Meld\\meld\\roses.txt.LOCAL.2760.txt.\nHas anyone ran into this before or know how to configure Git / Meld to work correctly in Windows?"}, {"role": "assistant", "content": "Why do you not use git bash for Windows?\nAfter install meld simply:\ngit config --global merge.tool meld\ngit config --global mergetool.meld.path \"C:\\Program Files (x86)\\Meld\\Meld.exe\" <- path to meld here\n\nThats all!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git push failed with error: \u201cGitLab: Author not member of team\u201d\n\ngit push failed with the following message:\nremote: GitLab: Author '`[email\u00a0protected]`' is not a member of team\n\nMy #git config user.name and #git config user.email are set as:\n#git config user.name\nSam Logan \n\n#git config user.email\n[email\u00a0protected]\n\nMy hostname is logath-T460.\nI am not sure why git push uses my localhostname with the Author.  Any clue how to resolve this issue?"}, {"role": "assistant", "content": "It's not git push that's using your username + hostname, it's git commit.\nBy default, if you did not set user.name and user.email BEFORE making a commit, git will get it from your computer name and hostname. It would also have shown you a warning like this:\nCommitter: user1234 <[email\u00a0protected]>\nYour name and email address were configured automatically based\non your username and hostname. Please check that they are accurate.\nYou can suppress this message by setting them explicitly:\n\n    git config --global user.name \"Your Name\"\n    git config --global user.email [email\u00a0protected]\n\nAfter doing this, you may fix the identity used for this commit with:\n\n    git commit --amend --reset-author\n\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 file1.txt\n\nWhen you do git push, it would just use whatever was set as the commit author and push it to the remote repo.\nWhat I think happened, is that you already committed BEFORE you set the correct user.name and user.email settings. So those commits you're trying to push already has that invalid user details \"[email\u00a0protected]\" saved as the commit author.\nWhat you need to do then is to update the author of the previous commits.\nFirst, make sure to properly set the user.name and user.email config (--global or --local to the repo), otherwise known as your Git identity.\ngit config --global user.name \"yourname\"\ngit config --global user.email \"[email\u00a0protected]\"\n\nSet it now to the correct identity that matches the user account of your Gitlab repo.\nThen use --reset-author on those commits.\n\nTo modify the author of only the most recent commit:\ngit commit --amend --reset-author --no-edit\n\n\nTo modify the author of multiple past commits:\n(reference: How to amend several commits in Git to change author)\ngit rebase -i HEAD~N -x \"git commit --amend --reset-author --no-edit\"\n\nwhere N is the number of previous commits you need to update. The rebase -i will show a command line editor to show you the changes, and --reset-author will use your current user.* settings. Just save and quit to apply to changes.\n\nAfter that, git push should now work."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why did git set us on (no branch)?\nThis morning we pulled from our repo, and git put us on (no branch).\nI don't understand this, why did this happen? And how to get out of it without losing our changes?"}, {"role": "assistant", "content": "\"Not currently on any branch\" means you have a detached head, i.e. your HEAD pointer is directly referencing a commit instead of symbolically pointing at the name of a branch.\nYou can get into this situation by checking out a commit by SHA1, or when you\u2019re in the middle of a rebase, or when a merge fails. It\u2019s hard to say what you may have done to get into this situation by accident.\nIt\u2019s said that you may lose your changes when you switch from a detached HEAD to some branch, but the reflog will always keep track of where your HEAD moved. In fact, Git 1.7.5 will warn you when switching from a detached HEAD will lose commits. The only time you can really lose work is when you have uncommitted changes, which you may want to commit or stash.\nA simple way to see what happened is git reflog or git log -g --decorate for a more verbose listing. The --decorate option will label every SHA1 with the names of all the branches that point at it. If the SHA1 of your current HEAD is exactly the same as master, then you don\u2019t have to do anything but git checkout master to get back on track. Otherwise, see if the SHA1 is pointed to by some other branch. If not, you may wish to create a branch to hang on to it.\nAnother good command is git branch -av, which will similarly list all branches and what they point to, so you can see what your (no branch) is really supposed to be."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  progress"}, {"role": "assistant", "content": "Causes fast-import to echo the entire line to its own\nstandard output.  This command is optional and is not needed\nto perform an import."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %D"}, {"role": "assistant", "content": "ref names without the \" (\", \")\" wrapping."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Creating an official github mirror\n\nHow do I create a github mirror for an external git repository, such that it appears as \"real mirror\", e.g., as in https://github.com/mirrors?\nSo far, I set up a mirror using:\ncd /path/to/bare/repository\ngit remote add --mirror github [email\u00a0protected]:user/repo.git\n\nand configure the post receive hook to do a git push --quiet github. This way, however, github does not recognize the mirror.\nAny ideas how to do it the github way, such that \"Mirrorred from\" appears underneath the repostiory name?"}, {"role": "assistant", "content": "Based on communicating with GitHub's support team, I found that GitHub currently offers no direct mechanism for a user to mirror repositories in this fashion.\nHowever, one can ask GitHub to install this service for repositories which are part of an organization. GitHub then configures an existing repository as such a mirror and pulls from it in an interval that is a function of the number of overall mirrors they have. \nEDIT: as Stuart points out, GitHub no longer accepts requests for mirroring arbitrary repositories. The only remaining option is the solution I posted in my question, i.e., creating a post-receive hook to automatically push to your GitHub repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge-one-file"}, {"role": "assistant", "content": "The standard helper program to use with git-merge-index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to only update specific git submodules?\nSo, updating all my submodules is done by running\ngit submodule foreach 'git pull origin master'\n\nHow do I update a specific submodule, located in say bundle/syntastic, without updating any other submodules?"}, {"role": "assistant", "content": "I end up there by searching how to update specific submodule only, which means for me, updating a submodule to the ref pointed by its super-repo.\nWhich is not the question nor the answer but only the title.\nSo in a hope of helping some others like me the answer to the question title is : \ngit submodule update <specific path to submodule>\n\nwhich will put this submodule in the state of the ref commited in the super-repo."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to set an (environment) variable in the build script in Gitlab CI?\n\nI have a dummy build script in the Gitlab CI:\npwd\nci_app_path=$(pwd)\necho \"INFO: current directory: $ci_app_path\"\n\nand I get this output when the system start the build process:\npwd\n/home/kai/gitlab-runners/gitlab-ci-runner/tmp/builds/project-1\n\nci_app_path=$(pwd)\n\necho \"INFO: current directory: $ci_app_path\"\nINFO: current directory:\n\nso the variable was not set (or was set only for that line: as I know each line executed separately)\nI heard about push/pop mechanism to reach the functionality I desired, but could not find any details, how to implement that. \nUpdate:\nas I thought, each line is going executed separately. So the variable scope is only one line, where it is defined:\nscript:\npwd\nci_app_path=$(pwd) && echo \"INFO: current directory: $ci_app_path\"\n\noutput:\npwd\n/home/devuser/gitlab-runners/gitlab-ci-runner/tmp/builds/project-1\n\nci_app_path=$(pwd) && echo \"INFO: current directory: $ci_app_path\"\nINFO: current directory: /home/kai/gitlab-runners/gitlab-ci-runner/tmp/builds/project-1\n\nI don't think that writing the whole script as a one-liner is a good idea/practice.\nHow to get the variables set while executing the build script?\nP.S.\nactually I wonder why the whole build script must contain no empty lines?, otherwise it returns:\nNo such file or directory\n\nand a build fails on this place"}, {"role": "assistant", "content": "Gitlab CI just plays shell commands so do what you do in *sh:\nexport ci_app_path=$(pwd)\necho \"INFO: current directory: $ci_app_path\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I install from a git subdirectory with pip?\nI have a git repository with many folders, one of them being a python module installable with pip, like this:\nrepo.git/\nrepo.git/folder1/\nrepo.git/folder2/\nrepo.git/mymodule/\nrepo.git/mymodule/__init__.py\nrepo.git/mymodule/setup.py\nrepo.git/mymodule/...\n\nRight now I have to do the following to install:\ngit clone http://server/repo.git\ncd repo\npip install mymodule\ncd ..\nrm -rf repo\n\nIs it possible to install the module directly with pip without explicitly cloning ?\nI tried:\npip install git+https://server/repo.git/mymodule/\npip install git+https://server/repo.git:mymodule/\n\nBut I get:\nIOError: [Errno 2] No such file or directory: '/tmp/pip-88tlLm-build/setup.py'"}, {"role": "assistant", "content": "There is a pull request regarding this feature, and it seems to have been merged to develop branch a month ago. The syntax is the following:\npip install -e \"git+https://git.repo/some_repo.git#egg=$NAME_OF_PACKAGE&subdirectory=$SUBDIR_IN_REPO\" # install a python package from a repo subdirectory\n\nWe probably have to wait for a while until it gets merged to master and is distributed.\nUPDATE: This is now available and documented at https://pip.pypa.io/en/stable/cli/pip_install/#vcs-support as follows:\n\nFor projects where setup.py is not in the root of project,\n\"subdirectory\" component is used. Value of \"subdirectory\" component\nshould be a path starting from root of the project to where setup.py\nis located.\nSo if your repository layout is:\n- pkg_dir/\n  - setup.py  # setup.py for package ``pkg``\n  - some_module.py\n- other_dir/\n  - some_file\n- some_other_file\n\nYou'll need to use\npip install -e \"vcs+protocol://repo_url/#egg=pkg&subdirectory=pkg_dir\"\n\n\nNote: Make sure to surround it with quotes otherwise subdirectory won't work."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %al"}, {"role": "assistant", "content": "author email local-part (the part before the @ sign)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub changes repository to the wrong language\nI know this isn't a huge deal, but I like my GitHub to be linguistically diversified. I wrote a project in Swift and when I commit it says it's in Objective-C.\nI think it might be because the Parse frameworks are written in Objective-C and it detects that, but is there a way to change the display language on the main repository page?"}, {"role": "assistant", "content": "I found the simplest thing was to create a file called .gitattributes in the root folder of my repository, and give it these contents:\n* linguist-vendored\n*.js linguist-vendored=false\n\nThis example tells GitHub/Linguist to ignore all files, and then just look at .js files.  My project, https://github.com/aim12340/jQuery-Before-Ready, was listed as HTML because the HTML example files were bigger than the JavaScript files.  This file fixes it for me and now it's listed as JavaScript."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Converting git repository to shallow?\nHow can I convert an already cloned git repository to a shallow repository?\nThe git repository is downloaded through a script outside of my control so I cannot do a shallow clone.\nThe reason for doing this is to save disk space. (Yes, I'm really short on disk space so even though a shallow repository doesn't save much, it is needed.)\nI already tried \ngit repack -a -d -f -depth=1\n\nBut that actually made the repository larger."}, {"role": "assistant", "content": "First, you may need to remove tags (as they prevent GC of tagged commits), like:\ngit tag -d $(git tag -l)\n\nThen, this worked for me:\ngit pull --depth 1\ngit gc --prune=all\n\nWhich still leaves the reflog laying around, which like the tags references additional commits that can use up space.  Note that I would not erase the reflog unless severely needed: it contains local change history used for recovery from mistakes.\nThere are additional commands on how to erase the reflog in the comments below, and a link to a similar question with a longer answer.\nIf you still have a lot of space used, ensure you removed the tags, which you should try first before removing the reflog."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Should I be adding the Django migration files in the .gitignore file?\nShould I be adding the Django migration files in the .gitignore file? \nI've recently been getting a lot of git issues due to migration conflicts and was wondering if I should be marking migration files as ignore. \nIf so, how would I go about adding all of the migrations that I have in my apps, and adding them to the .gitignore file?"}, {"role": "assistant", "content": "Quoting from the Django migrations documentation:\n\nThe migration files for each app live in a \u201cmigrations\u201d directory inside of that app, and are designed to be committed to, and distributed as part of, its codebase. You should be making them once on your development machine and then running the same migrations on your colleagues\u2019 machines, your staging machines, and eventually your production machines.\n\nIf you follow this process, you shouldn't be getting any merge conflicts in the migration files.\nWhen merging version control branches, you still may encounter a situation where you have multiple migrations based on the same parent migration, e.g. if two different developers introduced a migration concurrently. One way of resolving this situation is to introduce a merge_migration. Often this can be done automatically with the command\n./manage.py makemigrations --merge\n\nwhich will introduce a new migration that depends on all current head migrations. Of course this only works when there is no conflict between the head migrations, in which case you will have to resolve the problem manually.\n\nGiven that some people here suggested that you shouldn't commit your migrations to version control, I'd like to expand on the reasons why you actually should do so.\nFirst, you need a record of the migrations applied to your production systems. If you deploy changes to production and want to migrate the database, you need a description of the current state. You can create a separate backup of the migrations applied to each production database, but this seems unnecessarily cumbersome.\nSecond, migrations often contain custom, handwritten code. It's not always possible to automatically generate them with ./manage.py makemigrations.\nThird, migrations should be included in code review. They are significant changes to your production system, and there are lots of things that can go wrong with them.\nSo in short, if you care about your production data, please check your migrations into version control."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -A<filename>  --authors-file=<filename>"}, {"role": "assistant", "content": "Syntax is compatible with the file used by git cvsimport but\nan empty email address can be supplied with <> : loginname = Joe User <user@example.com> If this option is specified and git svn encounters an SVN\ncommitter name that does not exist in the authors-file, git svn will abort operation. The user will then have to add the\nappropriate entry.  Re-running the previous git svn command\nafter the authors-file is modified should continue operation. config key: svn.authorsfile"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a way to configure git repository to reject 'git push --force'?\nI was wondering is there a way to prevent 'git push --force' on a repository (only on master branch)?\nAssume I have remote git repository and do:\n\n'git push' to 'master'. It works.\n'git push --force' to 'branch-1'. It works.\n'git push --force' to 'master'. It is rejected.\n\nIs it even possible?"}, {"role": "assistant", "content": "Setting the configuration variables:\nreceive.denyNonFastForwards\nreceive.denyDeletes\n\nwill prevent any 'forced' pushes from working across all branches.\nIf you want finer pre-branch control then you will have to use a 'hook' on the remote repository, probably the 'update' hook.\nThere is a sample update hook called 'update-paranoid' that probably does what you need (and more) in the git distribution in the 'contrib' folder.\ngitweb link"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -R"}, {"role": "assistant", "content": "Swap two inputs; that is, show differences from index or\non-disk file to tree contents."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  detached HEAD"}, {"role": "assistant", "content": "Normally the HEAD stores the name of a branch , and commands that operate on the\nhistory HEAD represents operate on the history leading to the\ntip of the branch the HEAD points at.  However, Git also\nallows you to check out an arbitrary commit that isn\u2019t necessarily the tip of any\nparticular branch.  The HEAD in such a state is called\n\"detached\". Note that commands that operate on the history of the current branch\n(e.g. git commit to build a new history on top of it) still work\nwhile the HEAD is detached. They update the HEAD to point at the tip\nof the updated history without affecting any branch.  Commands that\nupdate or inquire information about the current branch (e.g. git\nbranch --set-upstream-to that sets what remote-tracking branch the\ncurrent branch integrates with) obviously do not work, as there is no\n(real) current branch to ask about in this state."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Atlassian \"logo\" after pushing to bitbucket\nThis question's answers are a community effort. Edit existing answers to improve this post. It is not currently accepting new answers or interactions.\n                                \n                            \n\n\n\n\n\n\nHaving pushed to bitbucket I got this \"image\". What is this?"}, {"role": "assistant", "content": "Locked. Comments on this answer have been disabled, but it is still accepting other interactions. Learn more.\n                                \n                            \n\n\n\n\n\n\nWhen you push to a Git server, it can send arbitrary text back that is displayed on your terminal. This is frequently used for error messages, information on the server you are pushing to, or the like.\nIn this case, it is the Atlassian Logo, as Atlassian are the owners of Bitbucket, colored using ANSI escape sequences as a rainbow, likely to celebrate today's Supreme Court's decision to strike down laws against gay marriage in the US. It is also being applied each year, on or around the anniversary of this decision.\n\nMany sites around the internet have switched to rainbow colored version of their logo for similar reasons, including StackOverflow. Of course, as a US decision, this is probably going to be puzzling to some of those outside of the US.\nYou can disable these kind of messages on Bitbucket by going to your account settings and unchecking the \u201cEnable console messages\u201d setting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --since=<date>  --after=<date>"}, {"role": "assistant", "content": "Show commits more recent than a specific date."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to apply a git patch from one repository to another?\nI have two repositories, one is the main repo for a library, and the other is a project using that library.\nIf I make a fix to the in the subservient project, I'd like an easy way to apply that patch back upstream.\nThe file's location is different in each repository.\n\nMain repo: www.playdar.org/static/playdar.js\nProject: playlick.com/lib/playdar.js\n\nI tried using git format-patch -- lib/playdar.js on the playlick project, and then git am on the main playdar repo, but the differing file locations in the patch file raised an error.\nIs there an easy way to apply the patch from a given commit on a given file to another arbitrary file elsewhere?\nFor bonus points, what if the file you want to apply the patch to isn't in a git repository?"}, {"role": "assistant", "content": "If manually editing the patch file is out of the question or infeasible, this can be done with standard options (available in git apply, git format-patch and GNU patch).\n\n-p<n> removes n leading directories from the paths in the patch.\nAfter processing -p, --directory=<root> prepends root to each of the paths in the patch before applying.\n\nExample\nSo, for your example, to take a patch that was originally on static/playdar.js and apply it to lib/playdar.js, you would run:\n$ cat patch_file | git am     \\ \n          -p1                 \\ # remove 1 leading directory ('static/')\n         --directory='lib/'     # prepend 'lib/'"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Switch to another branch without changing the workspace files\nI cloned a git repository from GitHub, made some changes and some commits; I made quite a lot and all are quite dirty, so they're not suitable for a pull request. Now I created the branch cleanchanges from origin/master, so it's clean, and I want to commit my changes there as one commit with a nice commit comment.\nWhen I am on the local master, I want to switch to my cleanchanges but without changing the files. And then I'm able to commit.\nHow can I switch branches without changing files?\nI want to make it clear: I have all the changes committed in the local master. There are no uncommitted changes."}, {"role": "assistant", "content": "Edit: I just noticed that you said you had already created some commits. In that case, use git merge --squash to make a single commit:\ngit checkout cleanchanges\ngit merge --squash master\ngit commit -m \"nice commit comment for all my changes\"\n\n\n(Edit: The following answer applies if you have uncommitted changes.)\nJust switch branches with git checkout cleanchanges. If the branches refer to the same ref, then all your uncommitted changes will be preserved in your working directory when you switch.\nThe only time you would have a conflict is if some file in the repository is different between origin/master and cleanchanges. If you just created the branch, then no problem.\nAs always, if you're at all concerned about losing work, make a backup copy first. Git is designed to not throw away work without asking you first."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --ancestry-path[=<commit>]"}, {"role": "assistant", "content": "When given a range of commits to display (e.g. commit1..commit2 or commit2 ^commit1 ), only display commits in that range\nthat are ancestors of <commit>, descendants of <commit>, or\n<commit> itself.  If no commit is specified, use commit1 (the\nexcluded part of the range) as <commit>.  Can be passed multiple\ntimes; if so, a commit is included if it is any of the commits\ngiven or if it is an ancestor or descendant of one of them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Use token to push some code to GitHub - \"Support for password authentication was removed\" [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nMessage \"Support for password authentication was removed.\"\n\n                                (51 answers)\n                            \n\nClosed 2 years ago.\n\n\n\nError message when using git push:\n\nSupport for password authentication was removed on August 13, 2021. Please use a personal access token instead.\nremote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.\nfatal: unable to access 'https://github.com/codingTheWorld777/react-mini-projects.git/': The requested URL returned error: 403\"***\n\nI cannot use my token to access GitHub, so how can I push code to GitHub?"}, {"role": "assistant", "content": "GitHub announced their intent to require the use of token-based authentication for all authenticated Git operations. They will no longer accept account passwords when authenticating Git operations on GitHub.com:\nGenerate token:\n\nGo to your GitHub account token settings\nGenerate a token\n\nOn Mac:\n\nGo to keychain Access\nPress the Login tab and all items\nClick GitHub key\nChange the password to the recent generated token\n\n\nOn Windows:\n\nGo to Control Panel \u2192 User Accounts \u2192 Credential Manager\n\nEdit the Generic Credential of GitHub\n\nPaste the token instead of the password"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Hide hidden(dot) files in github atom editor\n\nI am very new to Github Atom editor. It always shows hidden files such as .git, .sass in the side pane.\nHow to hide hidden files(dot files) in atom editor's side pane."}, {"role": "assistant", "content": "Edit > Preferences > Packages\nIn the field below \"Installed Packages\" type: \"Tree View\". This package has a few settings you can toggle, \"Hide Ignored Names\" is what you're looking for.\nIt's a really buried setting, not sure why.\nYou can also add it to your config:\n'tree-view':\n    'hideIgnoredNames': true"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bisect - Use binary search to find the commit that introduced a bug  --no-checkout"}, {"role": "assistant", "content": "Do not checkout the new working tree at each iteration of the bisection\nprocess. Instead just update the reference named BISECT_HEAD to make\nit point to the commit that should be tested. This option may be useful when the test you would perform in each step\ndoes not require a checked out tree. If the repository is bare, --no-checkout is assumed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -l  --local"}, {"role": "assistant", "content": "When the repository to clone from is on a local machine,\nthis flag bypasses the normal \"Git aware\" transport\nmechanism and clones the repository by making a copy of HEAD and everything under objects and refs directories.\nThe files under .git/objects/ directory are hardlinked\nto save space when possible. If the repository is specified as a local path (e.g., /path/to/repo ),\nthis is the default, and --local is essentially a no-op.  If the\nrepository is specified as a URL, then this flag is ignored (and we\nnever use the local optimizations).  Specifying --no-local will\noverride the default when /path/to/repo is given, using the regular\nGit transport instead. If the repository\u2019s $GIT_DIR/objects has symbolic links or is a\nsymbolic link, the clone will fail. This is a security measure to\nprevent the unintentional copying of files by dereferencing the symbolic\nlinks. NOTE : this operation can race with concurrent modification to the\nsource repository, similar to running cp -r src dst while modifying src ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  notes.rewriteMode"}, {"role": "assistant", "content": "When copying notes during a rewrite (see the\n\"notes.rewrite.<command>\" option), determines what to do if\nthe target commit already has a note.  Must be one of overwrite , concatenate , cat_sort_uniq , or ignore .\nDefaults to concatenate . This setting can be overridden with the GIT_NOTES_REWRITE_MODE environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to Connect Visual Studio 2012 with git (github)?\nMicrosoft launched Visual studio 2012 which can be integrated with Git (and github), I'm using the following reference linking visual studio 2012 with git, but i'm not getting any option to commit my code. Do i need to install/use Github for windows? Or is it possible to integrate with github directly from visual studio?"}, {"role": "assistant", "content": "First of all, install Visual Studio 2012 Update 3 and the Visual Studio Tools for Git to enable Git support in 2012. And you must ensure that Git for Windows is installed (Visual Studio will prompt you to install it if you haven't done so).\nIf you're using Visual Studio 2013 or later, Git support is built in and doesn't require any plugin installation.\nThen, under Source Control, ensure that you have the \"Microsoft Git Provider\" enabled:\n\nOpen the Team Explorer tab. When you click the connect button in the toolbar (looks like a power plug), make sure your repository is listed under Local Git Repositories, or use the clone option to clone a repository to your system.\n\nWhen you click clone you can enter an existing GitHub repository location, use the \"HTTPS\" location of your repository. Visual Studio doesn't support SSH. You can use the location picker on your GtiHub repository page to get the right clone url.\n\n\nThen finally, on the Unsynced Commits tab you can click Sync to synchronize your local repository with the remote, this will ask for your GitHub credentials.\n\nIf you want to create a new repository from scratch, I have not the slightest idea of how to do that from the UI, but after creating an empty repository on GitHub, you should be able to add a new remote from the commandline. Visual Studio will then pick up that remote and allow you to push into it.\nSee the following steps on github to initialize an empty repository and setup the link between your local repository and github. Once you've done that, the repository should show up in Visual Studio as well (if it doesn't, add it using the add option on the connect page of Team Explorer)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Using the same deploy key for multiple github projects\n\nGithub does not allow the same ssh deploy key to be used for more than one project, which would be very useful in some cases (e.g. CI server dealing with project with private sub-modules). I've seen various threads that seem to say that this limitation is there for 'security reasons', but I'm yet to see a convincing explanation about exactly what risk that would raise.\nNote that the fact that Github doesn't allow Account Level keys to be reused makes sense (two users shouldn't share keys). It is only the restriction on Deploy Keys that I'm questioning.\nAnd to be clear, I'm not looking for workarounds (create a dummy user, use multiple keys, ...), but only for a plausible explanation for this limitation on Deploy Keys.\nRelated threads:\n\nOne showing a workaround\nOne discussing the issue but not really going anywhere"}, {"role": "assistant", "content": "Unfortunately, this is a scenario where github just misinterprets the distinction between a key pair and an account or project.\nSince a key pair is used for authentication and authorization, it is effectively an identity. Github accounts are another identity. Connecting github accounts to key pairs effecticely establishes a 1:N mapping between github account based identities and key pair identities.\nConversely, github enforces a 1:N mapping of projects to key pair based identities. The real world analogue is that there is a door granting access to the project that can be unlocked by many different people. But once any of them gets a key to the door, they cannot get any other keys for any other doors, ever again.\nIt makes sense not to re-use keys often from the perspective of containing breaches if a key gets compromised. But that's just a good administration policy. It doesn't make much sense to prevent a key from being used more than once on principle. That there are some keys for some doors that are never re-used, well, again that's down to policy.\n\nA slightly more complex view is to illustrate key pairs as roles. You can possess many key pairs, and therefore inhabit many roles. The private key authenticates you for the role.\nGithub's deploy key mapping to projects states that a role can never encompass more than one task. That's rarely realistic.\nNone of which changes what github allows, of course."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  cumulative"}, {"role": "assistant", "content": "Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git merge after fetch - how, exactly?\nI've read from various sources that it's usually a better idea to fetch then merge rather than simply pull as it allows for finer control.  That said, I've yet to find actually how to do it.  Case in point:\nThere was a small change made to some of the code in one of my GitHub repository's master branch.  I was able to fetch it, but I don't know how to actually merge the differences in with my local master branch.  git branch lists all of the local branches I have, but nothing indicating anything to merge to.\nSo, is it just something like git merge master or git merge origin/master?  What am I missing?"}, {"role": "assistant", "content": "git merge origin/master should work.  Since master is usually a tracking branch, you could also do git pull from that branch and it will do a fetch & merge for you.\nIf you have local changes on your master that aren't reflected on origin, you might want git rebase origin/master to make sure your commits are 'on top'."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --numstat"}, {"role": "assistant", "content": "Similar to --stat , but shows the number of added and\ndeleted lines in decimal notation and the pathname without\nabbreviation, to make it more machine friendly.  For\nbinary files, outputs two - instead of saying 0 0 .  Turns off \"apply\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.packedRefsTimeout"}, {"role": "assistant", "content": "The length of time, in milliseconds, to retry when trying to\nlock the packed-refs file. Value 0 means not to retry at\nall; -1 means to try indefinitely. Default is 1000 (i.e.,\nretry for 1 second)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -R"}, {"role": "assistant", "content": "Swap two inputs; that is, show differences from index or\non-disk file to tree contents."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Diff syntax highlighting in Github Markdown\n\nI'm writing documents that should explain code in C# using Markdown.\nI use the ```csharp to get csharp highlighting.\nI sometimes want to highlight something specific in the code using bold or anything.\nI know about <pre> etc... but it takes away my csharp highlighting.\nBest case scenario - some way to highlight code in the ```csharp section.\nNext best thing - I can write the code as diff - using + and - to highlight stuff, but how do I tell Github to highlight diff syntax with the red and green backcolor?\nIs there a way to use both diff and csharp syntax highlighting?"}, {"role": "assistant", "content": "Github's markdown supports diff when formatting code. For example:\n```diff\npublic class Hello1\n{\n   public static void Main()\n   {\n-      System.Console.WriteLine(\"Hello, World!\");\n+      System.Console.WriteLine(\"Rock all night long!\");\n   }\n}\n```\n\nOutput:\n\nand it should give you the Diff looks you are looking for, highlighting in red what has been removed and in green what has been added."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git push existing repo to a new and different remote repo server?\n\nSay I have a repository on git.fedorahosted.org and I want to clone this into my account at github to have my own playground aside from the more \"official\" repo on fedorahosted.\nWhat would be the steps to initially copy that over?\nWithin github there is this nice \"fork\" button, but I can't use this for obvious reasons.\nAnd how would I track changes in the fedorahosted repo into the github one?"}, {"role": "assistant", "content": "Create a new repo at github.\nClone the repo from fedorahosted to your local machine.\ngit remote rename origin upstream\ngit remote add origin URL_TO_GITHUB_REPO\ngit push origin master\n\nNow you can work with it just like any other github repo. To pull in patches from upstream, simply run git pull upstream master && git push origin master.\nGitHub has recently renamed its master branch to main so (depending on whether your branch is called master or main) in step 5 you might have to use git push origin main and for pulling patches from upstream git pull upstream main && git push origin main, otherwise you will receive an error message."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Do Git tags only apply to the current branch?\nI'm currently working with a repository that has multiple branches.\nWhen I create a tag, does that tag refer to the then-current branch?\nIn other words: Whenever I create a tag, do I need to switch to the desired branch and tag inside that branch so that the tag refers to that branch at that point in time?"}, {"role": "assistant", "content": "CharlesB's answer and helmbert's answer are both helpful, but it took me a while to understand them.\nHere's another way of putting it:\n\nA tag is a pointer to a commit, and commits exist independently of branches.\n\n\nIt is important to understand that tags have no direct relationship with branches - they only ever identify a commit.\n\n\nThat commit can be pointed to from any number of branches - i.e., it can be part of the history of any number of branches - including none.\n\nTherefore, running git show <tag> to see a tag's details contains no reference to any branches, only the ID of the commit that the tag points to.\n\n\n(Commit IDs (a.k.a. object names or SHA-1 IDs) are 40-character strings composed of hex. digits that are hashes over the contents of a commit; e.g.: 6f6b5997506d48fc6267b0b60c3f0261b6afe7a2)\n\n\n\n\nBranches come into play only indirectly:\n\n\nAt the time of creating a tag, by implying the commit that the tag will point to:\n\n\nNot specifying a target for a tag defaults to the current branch's most recent commit (a.k.a. HEAD); e.g.:\n\n\ngit tag v0.1.0            # tags HEAD of *current* branch\n\nSpecifying a branch name as the tag target defaults to that branch's most recent commit; e.g.:\n\n\ngit tag v0.1.0  develop   # tags HEAD of 'develop' branch\n\n(As others have noted, you can also specify a commit ID explicitly as the tag's target.)\n\nWhen using git describe to describe the current branch:\n\ngit describe [--tags]  describes the current branch in terms of the commits since the most recent [possibly lightweight] tag in this branch's history.\nThus, the tag referenced by git describe may NOT reflect the most recently created tag overall."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Prevent local changes getting pushed in Git\nI have cloned a repository and the master branch in my repo is tracking origin/master. I created a work branch and changed some config files specific to my dev machine to make the app work.\nMy normal workflow will be to switch to master branch, merge changes made in work branch and push those changes upstream. The problem is that i don't want my specific chnages to get pushed. When i merge my work branch into master those changes are merged also. \nThe only solution I've found so far is not to commit those changes in work but that's not a satisfactory solution."}, {"role": "assistant", "content": "If you want to prevent committing (therefore also pushing) these local config files, you could use git update-index --assume-unchanged. Files marked with this flag will be assumed to never change (until you reset the flag with --no-assume-unchanged)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-get-tar-commit-id"}, {"role": "assistant", "content": "Extract commit ID from an archive created using git-archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "difference between git merge origin/master and git pull\nI'm working on a local branch \"BDD-local\" and would like to get the changes from other developers. \nThe other developers are using their own branch and once they are happy with the unit tests, they push the changes to remote repo (origin/master).\nI was going through several posts here and getting conflicting information.\nFew people talk about using:\ngit fetch origin\ngit merge origin/master\n\nSome others think, 'git pull' should get the changes.\nOne of our developers asked to use 'git merge origin/master' without the 'git fetch'\nDoes anyone know which of these options is better. I tried 'git pull' on my local branch but it didn't seem to work. But if I do 'git pull' on local master it works fine (however I want it to work for the local branch)"}, {"role": "assistant", "content": "git pull is the same as git fetch + git merge\nThe command\ngit pull <remote> <branch>\n\nis really just the same as\ngit fetch <remote>\ngit merge <remote>/<branch>\n\nSo there is no practical difference between\ngit pull origin master\n\nand \ngit fetch origin\ngit merge origin/master\n\nDocumentation\nAs stated in the official Linux Kernel git pull documentation:\n\nIn its default mode, git pull is shorthand for git fetch followed by git merge FETCH_HEAD.\nMore precisely, git pull runs git fetch with the given parameters and calls git merge to merge the retrieved branch heads into the current branch.\n\nRecommended Reading\n\nPro Git \u00a7 2.5 Git Basics - Working with Remotes - Fetching and Pulling from Your Remotes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to install a pod from a specific branch?\nI'm trying add add a pod by cocoapods, and I am using swift 3, while the pod(SQlite.swift).\nI am trying to use doesn't have a master of the latest swift version, however there is a branch for swift 3. \nSo how should I set my podfile to download the specific branch? Is it possible?\nHere is my podfile:\nplatform :ios, '10.0'\n\ntarget 'RedShirt' do\n  use_frameworks!\n\n  # Pods for RedShirt\n   pod 'SQLite.swift', :git => 'https://github.com/stephencelis/SQLite.swift.git'\nend\n\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    target.build_configurations.each do |config|\n      config.build_settings['SWIFT_VERSION'] = '3.0'\n    end\n  end\nend"}, {"role": "assistant", "content": "The podfile guide mentions the following syntax:\n\nTo use a different branch of the repo:\n\npod 'Alamofire', :git => 'https://github.com/Alamofire/Alamofire.git', :branch => 'dev'\n                                                                             ^^^\n                                                                   (the space is important)\n\nSo in your case, that would be:\npod 'SQLite.swift', :git => 'https://github.com/stephencelis/SQLite.swift.git', :branch => 'swift3-mariotaku'"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I remove all files in my git repo and update/push from my local git repo?\n\nIs it possible to remove all files in a repository and update it with only the files I have in my local machine? The reason is that, there are certain files that is not necessary in my github and so I want to remove those files. Instead of removing the files one by one, I wanted to see if its possible to just remove all files in my git repo and update/push with only the files in my local machine. Hope its clear. Thanks."}, {"role": "assistant", "content": "You could do it like this:\ncd /tmp\ngit clone /your/local/rep  # make a temp copy\ncd rep\ngit rm -r *                # delete everything\ncp -r /your/local/rep/* .  # get only the files you want\ngit add *                  # add them again\ngit status                 # everything but those copied will be removed\ngit commit -a -m 'deleting stuff'\ncd /your/local/rep\ngit pull /tmp/rep          # now everything else has been removed\n\nThere's probably a oneliner for that\u2026"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git Ignore everything in a directory except subfolders\nThis is my folder structure:\ndata/\n    .gitignore\n    uploads/\n        .gitignore\n\nI would like to commit the folders but not the files inside them.\nSo I add a .gitignore files in every folder with the following content:\n# Ignore everything in this directory\n*\n# Except this file\n!.gitignore\n\nThe problem is that * matches also on directories so git tracks only data/.gitignore"}, {"role": "assistant", "content": "Please don't misuse .gitignore files. Better stick to default ways to go on this, so later developers can quickly get into your project.\n\nAdd an empty .gitkeep file in the folders that you want to commit without the files\nExclude the folders, but not the .gitkeep from your main .gitignore file.\nfolder/*\n!folder/.gitkeep\n\n\nThis ignores all files in a folder, but not the .gitkeep file. Now the folder will be commited with only the .gitkeep file as content."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.windowMemory"}, {"role": "assistant", "content": "The maximum size of memory that is consumed by each thread\nin git-pack-objects for pack window memory when\nno limit is given on the command line.  The value can be\nsuffixed with \"k\", \"m\", or \"g\".  When left unconfigured (or\nset explicitly to 0), there will be no limit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --relative[=<path>]  --no-relative"}, {"role": "assistant", "content": "When run from a subdirectory of the project, it can be\ntold to exclude changes outside the directory and show\npathnames relative to it with this option.  When you are\nnot in a subdirectory (e.g. in a bare repository), you\ncan name which subdirectory to make the output relative\nto by giving a <path> as an argument. --no-relative can be used to countermand both diff.relative config\noption and previous --relative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  signature:signer"}, {"role": "assistant", "content": "The signer of the GPG signature of a commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github: Can I see the number of downloads for a repo?\n\nIn Github, is there a way I can see the number of downloads for a repo?"}, {"role": "assistant", "content": "Update 2019:\nUstin's answer points to:\n\nAPI /repos/:owner/:repo/traffic/clones, to get the total number of clones and breakdown per day or week, but: only for the last 14 days.\nAPI /repos/:owner/:repo/releases/:release_id for getting downloads number of your assets (files attached to the release), field download_count mentioned below, but, as commented, only for the most recent 30 releases..\n\n\nUpdate 2017\nYou still can use the GitHub API to get the download count for your releases (which is not exactly what was asked)\nSee \"Get a single release\", the download_count field.\nThere is no longer a traffic screen mentioning the number of repo clones.\nInstead, you have to rely on third-party services like:\n\nGitItBack (at www.netguru.co/gititback), but even that does not include the number of clones.\n\ngithubstats0, mentioned below by Aveek Saha.\n\nwww.somsubhra.com/github-release-stats (web archive), mentioned below.\nFor instance, here is the number for the latest git for Windows release\n\n\n\n\nUpdate August 2014\nGitHub also proposes the number of clones for repo in its Traffic Graph:\nSee \"Clone Graphs\"\n\n\nUpdate October 2013\nAs mentioned below by andyberry88, and as I detailed last July, GitHub now proposes releases (see its API), which has a download_count field.\nMichele Milidoni, in his (upvoted) answer, does use that field in his python script.\n(very small extract)\nc.setopt(c.URL, 'https://api.github.com/repos/' + full_name + '/releases')\nfor p in myobj:\n    if \"assets\" in p:\n        for asset in p['assets']:\n            print (asset['name'] + \": \" + str(asset['download_count']) +\n                   \" downloads\")\n\n\nOriginal answer (December 2010)\nI am not sure you can see that information (if it is recorded at all), because I don't see it in the GitHub Repository API:\n$ curl http://github.com/api/v2/yaml/repos/show/schacon/grit\n---\nrepository:\n  :name: grit\n  :owner: schacon\n  :source: mojombo/grit # The original repo at top of the pyramid\n  :parent: defunkt/grit # This repo's direct parent\n  :description: Grit is a Ruby library for extracting information from a\n  git repository in an object oriented manner - this fork tries to\n  intergrate as much pure-ruby functionality as possible\n  :forks: 4\n  :watchers: 67\n  :private: false\n  :url: http://github.com/schacon/grit\n  :fork: true\n  :homepage: http://grit.rubyforge.org/\n  :has_wiki: true\n  :has_issues: false\n  :has_downloads: true\n\nYou can only see if it has downloads or not.\n\nAdam Jagosz reports in the comments:\n\nI got it to work with\n curl -H \"Accept: application/vnd.github.v3+json\"   https://api.github.com/repos/:user/:repo/releases\n\nA couple of things that I had wrong:\n\nI needed an actual Github release (not just git tag, even though Github does display those under releases, ugh).\nAnd the release needs an asset file other than the zipped source that is added automatically in order to get the download count."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --exit-code"}, {"role": "assistant", "content": "Make the program exit with codes similar to diff(1).\nThat is, it exits with 1 if there were differences and\n0 means no differences."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gittutorial - A tutorial introduction to Git"}, {"role": "assistant", "content": "Exploring history Git history is represented as a series of interrelated commits.  We\nhave already seen that the git log command can list those commits.\nNote that first line of each git log entry also gives a name for the\ncommit: $ git log\ncommit c82a22c39cbc32576f64f5c6b3f24b99ea8149c7\nAuthor: Junio C Hamano <junkio@cox.net>\nDate:   Tue May 16 17:18:22 2006 -0700\n\n    merge-base: Clarify the comments on post processing. We can give this name to git show to see the details about this\ncommit. $ git show c82a22c39cbc32576f64f5c6b3f24b99ea8149c7 But there are other ways to refer to commits.  You can use any initial\npart of the name that is long enough to uniquely identify the commit: $ git show c82a22c39c\t# the first few characters of the name are\n\t\t\t# usually enough\n$ git show HEAD\t\t# the tip of the current branch\n$ git show experimental\t# the tip of the \"experimental\" branch Every commit usually has one \"parent\" commit\nwhich points to the previous state of the project: $ git show HEAD^  # to see the parent of HEAD\n$ git show HEAD^^ # to see the grandparent of HEAD\n$ git show HEAD~4 # to see the great-great grandparent of HEAD Note that merge commits may have more than one parent: $ git show HEAD^1 # show the first parent of HEAD (same as HEAD^)\n$ git show HEAD^2 # show the second parent of HEAD You can also give commits names of your own; after running $ git tag v2.5 1b2e1d63ff you can refer to 1b2e1d63ff by the name v2.5 .  If you intend to\nshare this name with other people (for example, to identify a release\nversion), you should create a \"tag\" object, and perhaps sign it; see git-tag for details. Any Git command that needs to know a commit can take any of these\nnames.  For example: $ git diff v2.5 HEAD\t # compare the current HEAD to v2.5\n$ git branch stable v2.5 # start a new branch named \"stable\" based\n\t\t\t # at v2.5\n$ git reset --hard HEAD^ # reset your current branch and working\n\t\t\t # directory to its state at HEAD^ Be careful with that last command: in addition to losing any changes\nin the working directory, it will also remove all later commits from\nthis branch.  If this branch is the only branch containing those\ncommits, they will be lost.  Also, don\u2019t use git reset on a\npublicly-visible branch that other developers pull from, as it will\nforce needless merges on other developers to clean up the history.\nIf you need to undo changes that you have pushed, use git revert instead. The git grep command can search for strings in any version of your\nproject, so $ git grep \"hello\" v2.5 searches for all occurrences of \"hello\" in v2.5 . If you leave out the commit name, git grep will search any of the\nfiles it manages in your current directory.  So $ git grep \"hello\" is a quick way to search just the files that are tracked by Git. Many Git commands also take sets of commits, which can be specified\nin a number of ways.  Here are some examples with git log : $ git log v2.5..v2.6            # commits between v2.5 and v2.6\n$ git log v2.5..                # commits since v2.5\n$ git log --since=\"2 weeks ago\" # commits from the last 2 weeks\n$ git log v2.5.. Makefile       # commits since v2.5 which modify\n\t\t\t\t# Makefile You can also give git log a \"range\" of commits where the first is not\nnecessarily an ancestor of the second; for example, if the tips of\nthe branches stable and master diverged from a common\ncommit some time ago, then $ git log stable..master will list commits made in the master branch but not in the\nstable branch, while $ git log master..stable will show the list of commits made on the stable branch but not\nthe master branch. The git log command has a weakness: it must present commits in a\nlist.  When the history has lines of development that diverged and\nthen merged back together, the order in which git log presents\nthose commits is meaningless. Most projects with multiple contributors (such as the Linux kernel,\nor Git itself) have frequent merges, and gitk does a better job of\nvisualizing their history.  For example, $ gitk --since=\"2 weeks ago\" drivers/ allows you to browse any commits from the last 2 weeks of commits\nthat modified files under the drivers directory.  (Note: you can\nadjust gitk\u2019s fonts by holding down the control key while pressing\n\"-\" or \"+\".) Finally, most commands that take filenames will optionally allow you\nto precede any filename by a commit, to specify a particular version\nof the file: $ git diff v2.5:Makefile HEAD:Makefile.in You can also use git show to see any such file: $ git show v2.5:Makefile"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-server-info - Update auxiliary info file to help dumb servers"}, {"role": "assistant", "content": "SYNOPSIS git update-server-info [-f | --force]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  objectsize"}, {"role": "assistant", "content": "The size, in bytes, of the object (the same as cat-file -s reports)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  text"}, {"role": "assistant", "content": "Usual 3-way file level merge for text files.  Conflicted\nregions are marked with conflict markers <<<<<<< , ======= and >>>>>>> .  The version from your branch\nappears before the ======= marker, and the version\nfrom the merged branch appears after the ======= marker."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub pages only showing ReadMe file?\n\nI'm trying to host my webpages into Github pages but for some reason it seems to only show my Readme file.\nGitHub repo: https://github.com/InquisitiveDev2016/InquisitiveDev2016.github.io\nWebsite: \nhttps://inquisitivedev2016.github.io/"}, {"role": "assistant", "content": "GitHub Pages is doing what it is designed to do: hosting the contents of that repository.\nThe root of the question asker's repository only contained a single file (README.md). So there isn't an easy way to navigate to the other pages, e.g. repo/website/webpage.html.\nConsider moving your web content into the root of your repository and renaming your default page to index.md or index.html, depending what type of file it is. (By convention the default page of most websites is called index.html, and this is what GitHub Pages will show by default if it exists.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to apply unmerged upstream pull requests from other forks into my fork?\nA project on GitHub that I have a fork of has a new pull requests that I want to pull into my fork that the author has not pulled in yet.\nIs there a simple way to apply pull request from other forks into my fork? Is there something else here that I am missing?"}, {"role": "assistant", "content": "Update: Via Webpage\nYou can also do this via the github webpage.\nI assume, you should have already a fork (MyFork) of the common repo (BaseRepo) which has the pending pull request from a fork (OtherFork) you are interested in.\n\nNavigate to the fork (OtherFork) which has initiated the pull request which you like to get into your fork (MyFork)\nGo to the pull requests page of OtherFork\nClick new pull request\nThe pending pull request(s) should be offered. Remember to select proper OtherFork branch too. Select on the left side as the base fork your fork (MyFork) (IMPORTANT).\nNow the option of View pull request should change to Create pull request. Click this.\n\nNow you should have a pending pull request in your fork (MyFork), which you can simply accept."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Web access HTML file in my Gitlab repo\n\nI want to use Gitlab to manage web-application development. Is it possible to access the html file I have created in my Gitlab repo from the browser? \nCurrently there are ssh/http url for access to the repo like:\nssh: [email\u00a0protected]:balbal/web-app.git   \nhttp: (ht tps://something.some.ca:balbal/web-app.git)\n\nWhen I access https from a browser it will just jump into the git repo manage UI (like show you all the commits, branches and detail files)\nWhat I want is web access to a particular html file I have created in my repo (like if there is a index.html file in a folder called 'www' in my repo). I want some URL that I can type into the browser and which will show me the index.html content. \nIs it possible for me to set up an web access to these html files?"}, {"role": "assistant", "content": "As of now, Gitlab does not support this functionality. There's a feature request for this: http://feedback.gitlab.com/forums/176466-general/suggestions/5599145-preview-render-static-html-pages-pushed-to-repos\nCurrently, if you query Gitlab for the raw html file, it sets certain HTTP headers to make it render as text/plain instead:\n$ curl -I http://my-gitlab/user/project/raw/dev/doc/_book/index.html\nHTTP/1.1 200 OK\nServer: nginx\nDate: Mon, 20 Apr 2015 13:17:48 GMT\nContent-Type: text/plain; charset=utf-8\nConnection: keep-alive\nStatus: 200 OK\nX-Frame-Options: DENY\nX-XSS-Protection: 1; mode=block\nX-Content-Type-Options: nosniff\nX-UA-Compatible: IE=edge\nContent-Disposition: inline; filename=\"index.html\"\nContent-Transfer-Encoding: binary\nCache-Control: private\nETag: \"b81191c550c47eae1ab4adf72dfd0c92\"\nSet-Cookie: request_method=HEAD; path=/\nX-Request-Id: 04ae0499-2fdf-4f89-82ab-8392a8d6a076\nX-Runtime: 0.019857"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gpg.program"}, {"role": "assistant", "content": "Use this custom program instead of \" gpg \" found on $PATH when\nmaking or verifying a PGP signature. The program must support the\nsame command-line interface as GPG, namely, to verify a detached\nsignature, \" gpg --verify $signature - <$file \" is run, and the\nprogram is expected to signal a good signature by exiting with\ncode 0.  To generate an ASCII-armored detached signature, the\nstandard input of \" gpg -bsau $key \" is fed with the contents to be\nsigned, and the program is expected to send the result to its\nstandard output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git: change styling (whitespace) without changing ownership/blame?\nWe have a massive, ancient codebase that needs a lot of cleanup. We have always had coding standards and everyone has always tried to follow them, but they were not enforced so over time a lot of violations have creeped in. Many of them are just whitespace issues, like using tabs instead of spaces, or spaces where there shouldn't be any, or missing spaces where they should be. We are going to start actively enforcing our coding standards to make sure more violations don't creep in, but it's difficult to enforce them in an automated way on only the changes, so it would be nice to clean up these old files.\nThere are tools that can automate fixing these issues, however if I do that then blame is going to show me as the owner of those lines, when in reality I may never have even seen them. I know there is a setting to make blame ignore whitespace changes, but I can't make everyone use blame the same way, including other visual tools and things like gitstats. In an ideal world there would be some way to rewrite history to look like the violations were never introduced, without covering up who introduced the actual code, but I can't find anything like that."}, {"role": "assistant", "content": "If you are trying to get a Root Cause issue using blame, don't forget use the -w flag to ignore all the white-spaces or indentation changes. So you'll get the last real change to the code, instead just an indentation, or removing trailing spaces.\ngit blame -w app/to/file.rb\n\nor you can just use, git slap command..\ngit config alias.slap \"blame -w\";\ngit slap app/path/to/file.rb\n\nhaving same results :D"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git reset --hard origin/master failing\nTrying to discard changes on server, and make it exactly the same as origin/master:\ngit fetch --all\ngit reset --hard origin/master\n\nI've done this before on same repo without problems, but this time it fails with the following:\nfatal: Could not reset index file to revision 'origin/master'\n\nHave tried the following:\n\nremove index and reset as suggested here:\nrm .git/index\ngit reset\n\nalso suggested here that some process could have a lock on .git\\index. That killing process and then executing git reset could fix it, but not sure how to check if something has a lock on file remotely. Also seems that removing index file and reset would have had same effect.\n\nLoosing my mind. Would really appreciate any help."}, {"role": "assistant", "content": "Had the same issue, which quite crazy cause reset --hard should always work, but it seems the working tree had a lot of differences to my target branch.\nI had no time to dig this down, but found this by accident:\n\nRun git gc to do some garbage collection. It will remove unnecessary files and optimize the local repository (more info about git gc can be found here).\n\nSimply reset and finally reset --hard to desired branch.\n$ git gc\n\n$ git reset\n\n$ git reset --hard <target_branch>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  Easy case: The changes are literally the same."}, {"role": "assistant", "content": "This happens if the subsystem rebase was a simple rebase and\nhad no conflicts."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub - How to revert changes to previous state\n\nI am using GitHub as my remote repository.\nI have already pushed 5 commits to the server and want to revert back to the state before the those commits.\nIf the commit hash is 3425661dba2aadccdbab, how do I revert the entire local/remote back to that commit? I tried \n$ reset --hard 3425661dba2aadccdbab\n\nbut that only resetted my working head to that branch and requires me to do a git pull again. I tried checkout, but this caused me to land in a \"detached head\" branch."}, {"role": "assistant", "content": "You basically have two options to revert changes:\n\ncreate a new commit which applies reverse changes. This is the preferred option as it doesn't changes history on a public repository\nRemove the commits and force push them.\n\nThe first option can be achieved by using git revert\n\ngit-revert - Revert some existing commits\nGiven one or more existing commits, revert the changes that the related patches introduce, and record some new commits that record them.\n\nAn example would be git revert -n HEAD~5..HEAD. This command creates 5 new commits, each of which undoes one of the last 5 commits of the currently checked out branch.\nThe second option would be to actually remove the commits. Note that this changes history in the repository. So anyone who has already pull the changes will probably be rather surprised and things can get messy quickly. That said, you can do\ngit reset --hard HEAD~5\ngit push --force\n\nThe first command will wipe any uncommitted changes in your current working copy. and reset your local repository to the state of the current HEAD - 5 commits. The second command will force-push to the default remote (i.e. GitHub) There, any changes diverging from your current local repository are overwritten.\nA note of warning again: If you don't really know what you are doing, don't use this option as it can lead to data loss for you or others if not done right. Use the first option instead as it will transparently remove changes but without the nasty side-effects of history-rewriting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git author Unknown\n\nmy author name in all my commits is coming up as unknown https://github.com/freeenergy/Teacher-Login-Validation-Module\ndid this\n$ git config --global user.name \"Firstname Lastname\"Sets the name of the user for all git instances on the system\n$ git config --global user.email \"[email\u00a0protected]\"\n\nbut still the author/committer name shows [unknown]\nnot knowing what I was doing I experimented with  setting $ GIT_AUTHOR_NAME=\"my name\" and it changed my name to my username [freeenergy] (I.E. my issue was fixed.)  But when I switched back to my other computer the issue was the same.\nmy config file now looks like this but is still committing as [unknown]\n[core]\n    repositoryformatversion = 0\n    filemode = false\n    bare = false\n    logallrefupdates = true\n    symlinks = false\n    ignorecase = true\n    hideDotFiles = dotGitOnly\n[remote \"origin\"]\n    url = [email\u00a0protected]:freeenergy/my-project.git\n    fetch = +refs/heads/*:refs/remotes/origin/*\n[user]\n    name = my name\n    email = myEmail.com"}, {"role": "assistant", "content": "Even better than running git config, you can edit your ~/.gitconfig file directly.  Look and see if there's a section for [user] with the relevant information.  For example, my ~/.gitconfig has this...\n[user]\n    name = Bob Gilmore\n    email = [email\u00a0protected]\n\n(There's no space in front of the [user], and single tabs in front of the name and email labels)\nIf it doesn't have those set properly, just go ahead and edit the .gitconfig file by hand."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --prefix=<prefix>"}, {"role": "assistant", "content": "This allows one to specify a prefix which is prepended\nto the names of remotes if trunk/branches/tags are\nspecified.  The prefix does not automatically include a\ntrailing slash, so be sure you include one in the\nargument if that is what you want.  If --branches/-b is\nspecified, the prefix must include a trailing slash.\nSetting a prefix (with a trailing slash) is strongly\nencouraged in any case, as your SVN-tracking refs will\nthen be located at \"refs/remotes/$prefix/ \", which is\ncompatible with Git\u2019s own remote-tracking ref layout\n(refs/remotes/$remote/ ). Setting a prefix is also useful\nif you wish to track multiple projects that share a common\nrepository.\nBy default, the prefix is set to origin/ . Note Before Git v2.0, the default prefix was \"\" (no prefix). This\nmeant that SVN-tracking refs were put at \"refs/remotes/*\", which is\nincompatible with how Git\u2019s own remote-tracking refs are organized.\nIf you still want the old default, you can get it by passing --prefix \"\" on the command line ( --prefix=\"\" may not work if\nyour Perl\u2019s Getopt::Long is < v2.37)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git tab completion not working in zsh on mac\nNo matter what I try and do I can't seem to make git tab/auto completion work in my zsh shell. I've downloaded the bash-completion script and the zsh-completion one and followed the instructions, but I can't make it work. \nI've reinstalled oh-my-zsh but that didn't seem to help or make any difference. \nCan anyone who's got it working describe to me their setup so I can try an emulate it to get it working for me?\nTo be specific, what I've done so far is:\n\nSwitched to using zsh as my default shell\nInstalled oh-my-zsh\nDownloaded https://github.com/git/git/blob/master/contrib/completion/git-completion.bash and saved it in ~/.completion/git/git-completion.sh\nDownloaded https://github.com/git/git/blob/master/contrib/completion/git-completion.zsh and saved that in ~/.zsh/_git\nAdded zstyle ':completion:*:*:git:*' script ~/.completion/git/git-completion.sh\n\nNo luck."}, {"role": "assistant", "content": "TL;DR one-liner\necho 'autoload -Uz compinit && compinit' >> ~/.zshrc && . ~/.zshrc\n\nthis will enable completion in .zshrc and apply the setting to your current terminal session.\nExplanation:\nActually, ZSH does know how to do git completion out of the box, but you need to turn on the completion feature itself (which from the steps you described I guess you haven't done)\nAdding this to your .zshrc should be enough:\nautoload -Uz compinit && compinit\n\nAfter you put the line .zshrc file, don't forget to restart the shell for ZSH to pick up the new config (alternatively, you can execute the line in your current session, that'll enable autocompletion for that one session)\nthe zsh compinit: insecure directories warning\nThanks to @FranMorzoa for suggesting to use compinit -u to skip the security checks for completion scripts\nWhile this will get rid of the warning/confirmation, the warning is there for a reason and it shouldn't happen normally.\nIt is a sign that something is wrong with ownership of the completion scripts, and it can (and should) be fixed with one of these:\n\nbrew.sh version:\nchmod -R go-w \"$(brew --prefix)/share\"\n\nanother one, will probably work for non-brew zsh, credits to pvinis on GitHub:\ncompaudit | xargs chmod g-w\n\n\nMore info\n\nhttps://git-scm.com/book/en/v2/Appendix-A:-Git-in-Other-Environments-Git-in-Zsh\nhttps://docs.brew.sh/Shell-Completion#configuring-completions-in-zsh\n\nPS Another answer here suggests installing the hub tool instead: although the tool is handy, it's merely a 3rd party (github community) wrapper around git. Hence, it has nothing to do with the topic of \"Git completion in ZSH\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  <tree-ish>"}, {"role": "assistant", "content": "Tree to checkout from (when paths are given). If not specified,\nthe index will be used. As a special case, you may use \"A...B\" as a shortcut for the\nmerge base of A and B if there is exactly one merge base. You can\nleave out at most one of A and B , in which case it defaults to HEAD ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together"}, {"role": "assistant", "content": "MERGING TAG When merging an annotated (and possibly signed) tag, Git always\ncreates a merge commit even if a fast-forward merge is possible, and\nthe commit message template is prepared with the tag message.\nAdditionally, if the tag is signed, the signature check is reported\nas a comment in the message template. See also git-tag . When you want to just integrate with the work leading to the commit\nthat happens to be tagged, e.g. synchronizing with an upstream\nrelease point, you may not want to make an unnecessary merge commit. In such a case, you can \"unwrap\" the tag yourself before feeding it\nto git merge , or pass --ff-only when you do not have any work on\nyour own. e.g. git fetch origin\ngit merge v1.2.3^0\ngit merge --ff-only v1.2.3"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.<tool>.path"}, {"role": "assistant", "content": "Override the path for the given tool.  This is useful in case\nyour tool is not in the PATH."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Send a pull request on GitHub for only latest commit\n\nI forked a project on github and am successfully making changes to my local master and pushing to origin on github. I want to send a pull request, but only want to include the last commit.  The pull request UI on github.com shows the last 9 commits and I don't know how to filter that down.\nI was trying to understand if I should create a new local branch, check that out and somehow reset or rebase to upstream?  Then apply my last commit from my master by id to the new local branch and use that for the pull request?\nI'm trying to get the concepts right and figure out the right command lines to do what I need."}, {"role": "assistant", "content": "You need to basically create a new branch & cherry-pick the commits you want to add to it.\n\nNote: you might need these before the checkout/cherry-pick commands\ngit remote add upstream <git repository>\ngit remote update\n\ngit checkout -b <new-branch-name> upstream/master\n\ngit cherry-pick <SHA hash of commit>\n\ngit push origin <new-branch-name>\n\nAfterwards, you will see <new-branch-name> branch on github, switch to it and can submit the pull request with the changes you want."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Differences between git branches using Visual Studio\nI'm trying to understand how to compare branches or commits using VS 2015.\nUsing other Git programs, I can easily compare versions, but I can't see how it's done in VS.\nCan anyone help?"}, {"role": "assistant", "content": "To compare a specific object (solution, project, source file,...) in Microsoft Visual Studio (using MVS2015):\n\nLocate the object in the Solution Explorer, and bring up the context menu (right-click): select \"View History...\". This brings up the History window for this object, with all the commits where the object changed (from any branch).\nMulti-select the two commits that you want to compare (left-click on the first one, Ctrl-left-click on the second one).\nNow bring up the context menu on either of the selected commits (right_click): select \"Compare...\". This brings up the Diff window for the object in the respective commits (with the differences highlighted in red -lines removed from first commit- or green -lines added in second commit). You can use the scroll bar in the Diff window, or the \"Previous Difference\" and \"Next Difference\" button in the ribbon to go between the differences of the object.\n\nI am not sure that there is a way to compare ALL the items in two different commits (I just invoke GitKraken -free for non-commercial purposes- or any other GUI for git on my local repo). Gitkraken is amazingly simple though: select any two commits, and all the differences between those commits are available at your fingertips."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to amend several commits in Git to change author\nI have made a series of commits in Git and I realise now that I forgot to set my user name and user email properties correctly (new machine).  I have not yet pushed these commits to my repository, so how can I correct these commits before I do so (only the 3 latest commits on the master branch)?\nI have been looking at git reset and git commit -C <id> --reset-author, but I don't think I'm on the right track."}, {"role": "assistant", "content": "Warning: now deprecated in favor of filter-repo.\nRebase/amend seems inefficient, when you have the power of filter-branch at your fingertips:\ngit filter-branch --env-filter 'if [ \"$GIT_AUTHOR_EMAIL\" = \"incorrect@email\" ]; then\n     GIT_AUTHOR_EMAIL=correct@email;\n     GIT_AUTHOR_NAME=\"Correct Name\";\n     GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL;\n     GIT_COMMITTER_NAME=\"$GIT_AUTHOR_NAME\"; fi' -- --all\n\n(split across lines for clarity, but not necessary)\nBe sure to inspect the result when you're done, to make sure that you didn't change anything you didn't mean to!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  --batch-check  --batch-check=<format>"}, {"role": "assistant", "content": "Print object information for each object provided on stdin. May not be\ncombined with any other options or arguments except --textconv , --filters or --use-mailmap . When used with --textconv or --filters , the input lines must\nspecify the path, separated by whitespace. See the section BATCH OUTPUT below for details. When used with --use-mailmap , for commit and tag objects, the\nprinted object information shows the size of the object as if the\nidentities recorded in it were replaced by the mailmap mechanism."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  combined, c"}, {"role": "assistant", "content": "Show differences from each of the parents to the merge\nresult simultaneously instead of showing pairwise diff between\na parent and the result one at a time. Furthermore, it lists\nonly files which were modified from all parents."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git clone hangs forever on github\nWhen I follow point 5 (Test everything out) in the github guide, the ssh command also hangs forever. According to the guide, I should be presented with a message that \"Github does not provide shell access\". Below is my output from ssh -vT [email\u00a0protected]\ndebug1: Authentication succeeded (publickey).\nAuthenticated to github.com ([207.97.227.239]:22).\ndebug1: channel 0: new [client-session]\ndebug1: Requesting [email\u00a0protected]\ndebug1: Entering interactive session.\ndebug1: Sending environment.\ndebug1: Sending env LC_MESSAGES = en_US.UTF-8\ndebug1: Sending env LC_COLLATE = en_US.UTF-8\ndebug1: Sending env LANG = da_DK.UTF-8\ndebug1: Sending env LC_CTYPE = en_US.UTF-8"}, {"role": "assistant", "content": "In my case port 22 was being blocked by a firewall, cloning via https may not work if you have 2-factor authentication enabled. Instead edit your .ssh config to use another port. In your terminal:\nnano ~/.ssh/config\n\nthen add this:\nHost github.com\n  Hostname ssh.github.com\n  Port 443"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git push hangs when pushing to Github?\nGit push hangs everytime I try to push to github. I am using Cygwin and Windows 7. Git functions fine locally tracking branches, providing status, setting global user.name and user.email and allowing commits. \nI'm still new and learning.\nI enter git push , git push origin master or git push -u origin master and I get nothing but a blank line requiring me to ctl-c to get the prompt back. \nssh-keygen -t rsa -C \"[email\u00a0protected]\" asks me for a file name and hangs\ngit push heroku master hangs\n$ git status returns On branch master nothing to commit, working directory clean\n$ git pull returns Already up to date\n$ git remote -v returns:\nheroku  [email\u00a0protected]:myherokusite.git (fetch)\n\nheroku  [email\u00a0protected]:myherokusite.git (push) origin  \n\nhttps://github.com/gitusername/appname.git (fetch) origin  \n\nhttps://github.com/gitusername/appname.git (push)\n\nor the correct ssh remote settings are returned when trying this with ssh\n\nUpdated: Using the SSH url [email\u00a0protected]:gitusername/gitrepo.git also hangs\ngit remote set-url origin https://github.com/gitusername/appname.git is correct\nUpdated: I can see the git processes running in Windows Task Manager while it hangs.\nI've tried:\nUsing different internet connection locations\nswitching between https and ssh and it hangs\nUninstalled git. Reinstalled from: https://code.google.com/p/msysgit/downloads/list \nUninstalled git. Installed Cygwin's git\nUninstalled git. Installed Github for Windows GUI app and it I WAS able to push. But this app has limited functionality, forces me out of my Cygwin window into another app which then forces me into a Windows command prompt for complete functionality which I thought I had escaped by using Cygwin. \nSpent many, many hours trying to resolve this, it worked faultlessly before, thanks.\nUPDATE 4/2014: I rebuilt my entire machine Win 7, Cygwin etc and all is now working fine"}, {"role": "assistant", "content": "Restart your ssh agent!\nkillall ssh-agent; eval `ssh-agent`"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git pull error \"The requested URL returned error: 503 while accessing\"\nI've been facing problems accessing my git repository lately.  It worked perfectly fine earlier but now I cannot run any command on CLI. I can however, access the corresponding Web Page, Could someone help me how to resolve this issue?"}, {"role": "assistant", "content": "Had the same error while using SourceTree connected to BitBucket repository.\nWhen navigating to repository url on bitbucket.org the warning message appeared:\n\nThis repository is in read-only mode. You caught us doing some quick maintenance.\n\nAfter around 2 hours repository was accessible again.\nYou can check status and uptime of bitbucket here:\nhttp://status.bitbucket.org/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitremote-helpers"}, {"role": "assistant", "content": "Helper programs to interact with remote repositories"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  plain"}, {"role": "assistant", "content": "Any line that is added in one location and was removed\nin another location will be colored with color.diff.newMoved .\nSimilarly color.diff.oldMoved will be used for removed lines\nthat are added somewhere else in the diff. This mode picks up any\nmoved line, but it is not very useful in a review to determine\nif a block of code was moved without permutation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --all-match"}, {"role": "assistant", "content": "Limit the commits output to ones that match all given --grep ,\ninstead of ones that match at least one."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-citool"}, {"role": "assistant", "content": "Graphical alternative to git-commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Create empty branch on GitHub\nI want to create a new GitHub branch, called release.\nThis branch needs to be empty! However, there is an existing branch with x commits and I don't want to have its commit history.\nThe only method I found is to create a local --orphan branch."}, {"role": "assistant", "content": "November 2021 Update: As of git version 2.27, you can now use the following command to create an empty branch with no history:\ngit switch --orphan <new branch>\n\nUnlike git checkout --orphan <new branch>, this branch won't have any files from your current branch (save for those which git doesn't track).\nThis should be the preferred way to create empty branches with no prior history.\nOnce you actually have commits on this branch, it can be pushed to github via git push -u origin <branch name>:\ngit switch --orphan <new branch>\ngit commit --allow-empty -m \"Initial commit on orphan branch\"\ngit push -u origin <new branch>\n\n\nOriginal answer:\nWhat's wrong with the --orphan option? If you want a branch that is empty and have no history, this is the way to go...\ngit checkout --orphan empty-branch\n\nThen you can remove all the files you'll have in the staging area (so that they don't get committed):\ngit rm -rf .\n\nAt this point you have an empty branch, on your machine.\nBefore you can push to GitHub (or any other Git repository), you will need at least one commit, even if it does not have any content on it (i.e. empty commit), as you cannot push an empty branch\ngit commit --allow-empty -m \"root commit\"\n\nFinally, push it to the remote, and crack open a beer\ngit push origin empty-branch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together"}, {"role": "assistant", "content": "NAME git-merge - Join two or more development histories together"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  push.autoSetupRemote"}, {"role": "assistant", "content": "If set to \"true\" assume --set-upstream on default push when no\nupstream tracking exists for the current branch; this option\ntakes effect with push.default options simple , upstream ,\nand current . It is useful if by default you want new branches\nto be pushed to the default remote (like the behavior of push.default=current ) and you also want the upstream tracking\nto be set. Workflows most likely to benefit from this option are simple central workflows where all branches are expected to\nhave the same name on the remote."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  <describeOutput> , e.g. v1.7.4.2-679-g3bee7fb"}, {"role": "assistant", "content": "Output from git describe ; i.e. a closest tag, optionally\nfollowed by a dash and a number of commits, followed by a dash, a g , and an abbreviated object name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to reference the initial commit?\nI've got a script that needs to reference the initial commit in a repository.   git has the special reference HEAD, but doesn't have the corresponding TAIL.  I cannot find anything in git help rev-parse that would seem to help me.\nHere's what I'd like to do:\ngit show TAIL\n\nHere's one option I have:\ngit show `git log --reverse | if read a commit ; then echo $commit ; fi`\n\nThat's pretty hacky and depends on the output of git log not changing.\nRight now I just tag the initial commit and use that as my refspec.  However, I'd like to release a general tool, so that's not a great option."}, {"role": "assistant", "content": "Do not use git-log for scripting: use either git-rev-list, or git-log with specified custom format (--format=*<sth>* option).\nThere is additional problem with your question: there can exist more than one such TAIL root commit (parentless commit) in a repository (even if we discount disconnected branches, such as 'html', 'man' and 'todo' in git.git repository). This is usually result of joining separate projects in one, or using subtree merge of separately developed subproject. \nFor example git repository has 6 root commits: git-gui, gitk (subtree-merged), gitweb (merged in, no longer developed separately), git mail tools (merged very early in project history), and p4-fast-export (perhaps accidental). That is not counting roots of 'html and 'man' branches, \"convenience\" branches which contains pre-generated documentation, and 'todo' branch with TODO list and scripts.\n\nIf you have git 1.7.4.2 or newer, you can use the --max-parents option:\n$ git rev-list --max-parents=0 HEAD\n\nOtherwise, you can get list of all parentless (root) commits accessible from current branch using:\n$ git rev-list --parents HEAD | egrep \"^[a-f0-9]{40}$\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --ignore-blank-lines"}, {"role": "assistant", "content": "Ignore changes whose lines are all blank."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --single-worktree"}, {"role": "assistant", "content": "By default, all working trees will be examined by the\nfollowing options when there are more than one (see git-worktree ): --all , --reflog and --indexed-objects .\nThis option forces them to examine the current working tree\nonly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --diff-algorithm={patience|minimal|histogram|myers}"}, {"role": "assistant", "content": "Choose a diff algorithm. The variants are as follows: default , myers The basic greedy diff algorithm. Currently, this is the default. minimal Spend extra time to make sure the smallest possible diff is\nproduced. patience Use \"patience diff\" algorithm when generating patches. histogram This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\". For instance, if you configured the diff.algorithm variable to a\nnon-default value and want to use the default one, then you\nhave to use --diff-algorithm=default option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to revert multiple commits as part of a single commit\nThis is not a major problem, just something I want to know whether or not is possible.\nLet's say we have two commits, abcd123 and wxyz789, that occur at non-adjacent, separate places, far back in a repo's history.  Now let's say we want to revert them.  Doing\ngit revert abcd123 wxyz789\n\nwould result in two separate commits, one reverting abcd123 and the other reverting wxyz789.\nThis is all fine and well, but what if the mistakes we want to fix in the two commits are logically linked, and for the purposes of self-documentation we'd like to make one single commit containing one single \"I broke something so now I'm reverting files x, y and z\" comment?  Is there a git command that does this?\n(I am of course aware that it is possible to create a commit where I just manually fix all the changes and then push.  This is painful for all the obbious reasons.)"}, {"role": "assistant", "content": "You can do:\ngit revert abcd123\ngit revert --no-commit wxyz789\ngit commit --amend\n\n... and then write an appropriate commit message describing the combined effect of reverting both commits."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Undo a particular commit in Git that's been pushed to remote repos\nWhat is the simplest way to undo a particular commit that is:\n\nnot in the head or HEAD\nHas been pushed to the remote.\n\nBecause if it is not the latest commit, \ngit reset HEAD\n\ndoesn't work. And because it has been pushed to a remote,\ngit rebase -i\n\nand\ngit rebase --onto\n\nwill cause some problem in the remotes. \nMore so, I don't want to modify the history really. If there was bad code, it was there in the history and can be seen. I just want it out in the working copy, and I don't mind a reverse merge commit.\nIn other words, what is the Git equivalent of the following svn commands:\nsvn merge -r 303:295 http://svn.example.com/repos/calc/trunk\n\nwhich removes all changes from 295 to 302 by reverse merging all changes in those revisions, as a new commit.\nsvn merge -c -302 ^/trunk\n\nwhich undoes the 302 commit, of course by adding another commit that reverse merges the changes from that respective commit.\nI thought it should be a fairly simple operation in Git and a fairly common use case. What else is the point of atomic commits? \nWe have staging stashing and all to ensure the commits are perfectly atomic, shouldn't you be able to undo one or more of those atomic commits easily?"}, {"role": "assistant", "content": "Identify the hash of the commit, using git log, then use git revert <commit> to create a new commit that removes these changes.  In a way, git revert is the converse of git cherry-pick -- the latter applies the patch to a branch that's missing it, the former removes it from a branch that has it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --color-moved-ws=<modes>"}, {"role": "assistant", "content": "This configures how whitespace is ignored when performing the\nmove detection for --color-moved .\nIt can be set by the diff.colorMovedWS configuration setting.\nThese modes can be given as a comma separated list: no Do not ignore whitespace when performing move detection. ignore-space-at-eol Ignore changes in whitespace at EOL. ignore-space-change Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent. ignore-all-space Ignore whitespace when comparing lines. This ignores differences\neven if one line has whitespace where the other line has none. allow-indentation-change Initially ignore any whitespace in the move detection, then\ngroup the moved code blocks only into a block if the change in\nwhitespace is the same per line. This is incompatible with the\nother modes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  --import-marks-if-exists=<file>"}, {"role": "assistant", "content": "Like --import-marks but instead of erroring out, silently\nskips the file if it does not exist."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git authentication fails after enabling 2FA\nI just enabled 2FA (I can't think of any other changes I made) and git asked for my username and password. I provided both, but they were \"wrong\". I tried many of the solutions here: Git push requires username and password but that didn't work. In particular, when switching from https to ssh, the ssh key gives \nPermission denied (publickey).\nfatal: Could not read from remote repository.\n$ git push\nwarning: push.default is unset; its implicit value is changing in\nGit 2.0 from 'matching' to 'simple'. To squelch this message\nand maintain the current behavior after the default changes, use:\n\n  git config --global push.default matching\n\nTo squelch this message and adopt the new behavior now, use:\n\n  git config --global push.default simple\n\nSee 'git help config' and search for 'push.default' for further information.\n(the 'simple' mode was introduced in Git 1.7.11. Use the similar mode\n'current' instead of 'simple' if you sometimes use older versions of Git)\n\nUsername for 'https://github.com': **********\nPassword for 'https://[email\u00a0protected]': \nremote: Invalid username or password.\nfatal: Authentication failed for 'https://github.com/mlbileschi/scala.git/'\n\nAny tips?"}, {"role": "assistant", "content": "You need to generate an access token. You can create one by going to your settings page.\n\nUse this access token as your password in the command line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I find and restore a deleted file in a Git repository?\nSay I'm in a Git repository. I delete a file and commit that change. I continue working and make some more commits. Then, I discover that I need to restore that file after deleting it.\nI know I can checkout a file using git checkout <commit> -- filename.txt, but I don't know when that file was deleted.\n\nHow do I find the commit that deleted a given filename?\nHow do I restore that file back into my working copy?"}, {"role": "assistant", "content": "Find the last commit that affected the given path. As the file isn't in the HEAD commit, that previous commit must have deleted it.\ngit rev-list -n 1 HEAD -- <file_path>\n\nThen checkout the version at the commit before, using the caret (^) symbol:\ngit checkout <deleting_commit>^ -- <file_path>\n\nOr in one command, if $file is the file in question.\ngit checkout $(git rev-list -n 1 HEAD -- \"$file\")^ -- \"$file\"\n\n\nIf you are using zsh and have the EXTENDED_GLOB option enabled, the caret symbol won't work. You can use ~1 instead.\ngit checkout $(git rev-list -n 1 HEAD -- \"$file\")~1 -- \"$file\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Gitlab integration with SonarQube\n\nI am pretty new to Development community and specifically to DevOps practices , as a part of project we are trying to integrate SonarQube with Gitlab , did some R& D on SonarQube and Git CI ( Continuous Integration ) and look like plugin is released for Github and SonarQube whereas not for Gitlab. \nHow realistic is it to configure GitLab with SonarQube for inspecting code quality for every pull request and what will be the best practice to integrate these two piece.\nThanks"}, {"role": "assistant", "content": "you don't really need a plugin.\nmake something like this in your .gitlab-ci.yml\nstages: \n- build \nbuild_master:\n  image: maven\n  stage: build\n  artifacts:\n    paths:\n    - target/*.jar\n  script:\n  - mvn package sonar:sonar -Dsonar.host.url=https://sonar.yourdomain.tld/ \n  only:\n  - master\n\nand every master push will be tested!\n(this is for a Java project...)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <type>"}, {"role": "assistant", "content": "Indicates that an object type is required.\nCurrently one of: blob , tree , commit , or tag ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to checkout a remote branch in Git?\nSomeone pushed a \"new feature\" branch to the shared repo:\ngit push -u new_feature_branch\n\nNow, I would like to create a copy of this branch on my local machine in order to test the new feature.\nWhat would be the easiest way to do this? (Do I need to fetch / pull before checkout?)"}, {"role": "assistant", "content": "I generally find it unnecessary to use git fetch. git pull is sufficient. git pull will synchronize your repository with the remote. The new_feature_branch will then be available.\ngit checkout new_feature_branch will notice the branch in origin and create a new local tracking branch for you and switch to that branch.\ngit pull\ngit checkout new_feature_branch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I use git bisect?\nI have read some articles saying that git bisect is awesome. However, I can't understand why it's awesome.\n\nHow do I use it?\nIs it just like svn blame?"}, {"role": "assistant", "content": "The idea behind git bisect is to perform a binary search in the history to find a particular regression. Imagine that you have the following development history:\n... --- 0 --- 1 --- 2 --- 3 --- 4* --- 5 --- current\n\nYou know that your program is not working properly at the current revision, and that it was working at the revision 0. So the regression was likely introduced in one of the commits 1, 2, 3, 4, 5, current.\nYou could try to check out each commit, build it, check if the regression is present or not. If there are a large number of commits, this can take a long time. This is a linear search. We can do better by doing a binary search. This is what the git bisect command does. At each step it tries to reduce the number of revisions that are potentially bad by half.\nYou'll use the command like this:\n$ git stash save\n$ git bisect start\n$ git bisect bad\n$ git bisect good 0\nBisecting: 2 revisions left to test after this (roughly 2 steps)\n[< ... sha ... >] 3\n\nAfter this command, git will checkout a commit. In our case, it'll be commit 3. You need to build your program, and check whether or not the regression is present. You'll also need to tell git the status of this revision with either git bisect bad if the regression is present, or git bisect good if it is not.\nLet's suppose that the regression was introduced in commit 4. Then the regression is not present in this revision, and we tell it to git.\n$ make\n$ make test\n... ... ...\n$ git bisect good\nBisecting: 0 revisions left to test after this (roughly 1 step)\n[< ... sha ... >] 5\n\nIt will then checkout another commit. Either 4 or 5 (as there are only two commits). Let's suppose it picked 5. After a build we test the program and see that the regression is present. We then tell it to git:\n$ make\n$ make test\n... ... ...\n$ git bisect bad\nBisecting: 0 revisions left to test after this (roughly 0 steps)\n[< ... sha ... >] 4\n\nWe test the last revision, 4. And since it is the one that introduced the regression, we tell it to git:\n$ make\n$ make test\n... ... ...\n$ git bisect bad\n< ... sha ... > is the first bad commit\n< ... commit message ... >\n\nIn this simple situation, we only had to test 3 versions (3, 4, 5) instead of 4 (1, 2, 3, 4). This is a small win, but this is because our history is so small. If the search range is of N commits, we should expect to test 1 + log2 N commits with git bisect instead of roughly N / 2 commits with a linear search.\nOnce you've found the commit that introduced the regression, you can study it to find the issue. Once this is done, you use git bisect reset to put everything back on the original state before using git bisect command."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Do you ignore a git submodule in your .gitignore or commit it to your repo?\nI've added a submodule to my project in project_dir/vendor/submodule_one now each time I run git status I get modified: vendor/submodule_one (new commits).\nMy question is whats the best way to deal with this? Do I add the vendor/submodule_one-folder to my .gitignore as my main project shouldn't need to know about the specifics of my submodule?\nOr when I'm changing and commiting changes to my submodule do I need to make commits in my main project also?\nJust getting started with submodules and couldn't seem to find much info beyond setting them up."}, {"role": "assistant", "content": "No, you don't need to add your submodule to your .gitignore: what the parent will see from your submodule is a gitlink (a special entry, mode 160000).\nThat means: any change directly made in a submodule needs to be followed by a commit in the parent directory.\nThat way, the parent directory will record the right commit for the state of the submodule: That commit is the \"gitlink\" mentioned above;\nYou can read more about that policy in \"git submodule update (true nature of submodules)\".\nThe main idea behind submodules is a component-based approach, where you reference other repos at specific commits. But if you change anything in those submodules, you need to update those references in the parent repo as well.\n\nNote that with Git 2.13 (Q2 2017), while not ignoring the gitlink, you can still ignore the submodule with:\ngit config submodule.<name>.active false\n\nSee more at \"Ignore new commits for git submodule\".\n\nNote: with Git 2.15.x/2.16 (Q1 2018), ignoring a submodule is more precise.\n\"git status --ignored --untracked\" did not stop at a working tree of a separate project that is embedded in an ignored directory and listed files in that other project, instead of just showing the directory itself as ignored.\nSee commit fadb482 (25 Oct 2017) by Johannes Schindelin (dscho).\n(Merged by Junio C Hamano -- gitster -- in commit da7996a, 06 Nov 2017) \n\nstatus: do not get confused by submodules in excluded directories\nWe meticulously pass the exclude flag to the treat_directory() function so that we can indicate that files in it are excluded rather than untracked when recursing.\nBut we did not yet treat submodules the same way.\nBecause of that, git status --ignored --untracked with a submodule\n  submodule in a gitignored tracked/ would show the submodule in the\n  \"Untracked files\" section, e.g.\n\nOn branch master\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    tracked/submodule/\n\nIgnored files:\n  (use \"git add -f <file>...\" to include in what will be committed)\n\n    tracked/submodule/initial.t\n\n\nInstead, we would want it to show the submodule in the \"Ignored files\"\n  section:\n\nOn branch master\nIgnored files:\n  (use \"git add -f <file>...\" to include in what will be committed)\n\n    tracked/submodule/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a way to compare two diffs or patches?\nIs there a way to test if two diffs or patches are equivalent?\nLet's say you have the following git commit history, where features F and G are cleanly rebaseable to E:\n     G\n    /\nA--B--C--D--E\n \\\n  F\n\nDue to limitations in our current deployment process, we have the following, somewhat related graph (it's not version controlled)\n              G'\n             /\n------------E'\n             \\\n              F'\n\nF' and G' will ultimately be applied to the head E', in some to be determined order, so it would end up like\n------------E'--G'--F'\n\nIs there a way to test that the diff from E' to G' is the same as the patch produced by the git commit of G from B?\nI fully realize that in an ideal world, revision control would solve this, and we're getting there, but that's not where we are currently.\nYou could essentially play both patches on separate checkouts and compare the outputs, but that seems kind of clunky. And comparing the diffs themselves, I'm assuming, wouldn't work because line numbers could change. Even if G' and F' were rebased to E', the patch for F' would ultimately be applied to G', making the diff context of the patch different."}, {"role": "assistant", "content": "diff <(git show COMMIT1SHA) <(git show COMMIT2SHA)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a way to restore Github and Bitbucket 2FA without recovery codes or backup phone number?\n\nMy android device broke and I lost access to Github and Bitbucket 2 factor authentication codes.\nUnfortunately I didn't save the recovery codes or set up a backup phone number to receive codes by SMS, and I'm not signed in to Github and Bitbucket on any computer.\nIs there another way to gain access to my Github and Bitbucket account?"}, {"role": "assistant", "content": "Luckily for me, there is a way to do this if you assigned a SSH key to your account.\nWhat you need to do is to run this command on the computer where you have the SSH key:\nssh -T [email\u00a0protected] verify\n\nAnd send the output to Github support. With that output they are able to disable your 2fa and allowing you to login just with your password.\nThe output should look like this:\nPlease provide the following verification token to GitHub Support.\n002de4e72d08f47b0b828bab0224dxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxf6174ce54ab0040aa7075626c69635f6b6579ce008cacf9\n\nIf you are reading this it's probably too late for that advice but don't be stupid like I was. Save the recovery codes or set up a phone number!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git status - is there a way to show changes only in a specific directory?\nI would like to see a list of files modified since the last commit, as git status shows, but I care only about files located in a single directory. Is there a way to do this? I tried git status <directory>, but it seems this does something completely different (lists all changed files, as they would be if I wrote git add <directory> first). \nThe documentation for git-status doesn't tell much, apart from the fact that it accepts the same options that git-commit does (but git-commit's purpose isn't to show lists of changed files)."}, {"role": "assistant", "content": "From within the directory:\ngit status .\n\n\nYou can use any path really, use this syntax:\ngit status <directoryPath>\n\nFor instance for directory with path \"my/cool/path/here\"\ngit status my/cool/path/here"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Running filter-branch over a range of commits\ngit filter-branch --env-filter '\nexport GIT_AUTHOR_EMAIL=\"[email\u00a0protected]\"\nexport GIT_AUTHOR_NAME=\"foo\"' -- commita..commitb\n\nResults in Which ref do you want to rewrite?\nSo it seems that filter-branch doesn't allow you to use range notation use a range between two arbitrary refs.\nWhat is the most straight forward way of running a filter over a range of consecutive commits (somewhere within the history of a branch) if this approach isn't possible."}, {"role": "assistant", "content": "You cannot apply the filter-branch in the middle of the history, as said by @kan. You must apply from your known commit to the end of the history\ngit filter-branch --env-filter '...' SHA1..HEAD\n\nFilter-branch can check for the commit author or other information, to chose to change or not the commit, so there are ways to accomplish what you want, see https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History, look for \"Changing Email Addresses Globally\"\nRemember: if you have pushed the commits to a public repository you should not user filter-branch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  notes.mergeStrategy"}, {"role": "assistant", "content": "Which merge strategy to choose by default when resolving notes\nconflicts.  Must be one of manual , ours , theirs , union , or cat_sort_uniq .  Defaults to manual .  See the \"NOTES MERGE STRATEGIES\"\nsection of git-notes for more information on each strategy. This setting can be overridden by passing the --strategy option to git-notes ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I configure Git to trust certificates from the Windows Certificate Store?\nCurrently I have the following entry in my .gitconfig in my user directory.\n...\n[http]\n    sslCAInfo=C:\\\\Users\\\\julian.lettner\\\\.ssh\\\\git-test.pem\n...\n\nThis sets the certificate to use when interacting with the git server (required by my company's git server).\nBut now I cannot clone other repositories (for example a public repository on GitHub), because the client always uses the configured certificate which gets rejected by other servers.\nHow can I circumvent this certification issue? Can I configure Git to use the Windows Certificate Store to authenticate?"}, {"role": "assistant", "content": "Beginning with Git for Windows 2.14, you can now configure Git to use SChannel, the built-in Windows networking layer.  This means that it will use the Windows certificate storage mechanism and you do not need to explicitly configure the curl CA storage mechanism.\nFrom the Git for Windows 2.14 release notes:\n\nIt is now possible to switch between Secure Channel and OpenSSL for Git's HTTPS transport by setting the http.sslBackend config variable to \"openssl\" or \"schannel\"; This is now also the method used by the installer (rather than copying libcurl-4.dll files around).\n\nYou can choose the new SChannel mechanism during the installation of Git for Windows 2.14.  You can also update an existing installation to use SChannel by running:\ngit config --global http.sslBackend schannel\n\nOnce you have configured this, Git will use the Windows certificate store and should not require (and, in fact, should ignore) the http.sslCAInfo configuration setting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --dd"}, {"role": "assistant", "content": "Produce diff with respect to first parent for both merge and\nregular commits.\nShortcut for --diff-merges=first-parent -p ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  subtree[=<path>]"}, {"role": "assistant", "content": "This option is a more advanced form of subtree strategy, where\nthe strategy makes a guess on how two trees must be shifted to\nmatch with each other when merging.  Instead, the specified path\nis prefixed (or stripped from the beginning) to make the shape of\ntwo trees to match."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-push"}, {"role": "assistant", "content": "Update remote refs along with associated objects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Latest Update brings Github error on pull, push, or sync\n\nIn Visual Studio 2019, we have been using the GitHub extension successfully since before release.  Now, all of the sudden, when we push, pull, or sync, we receive the following in the Output window:\nWarning: 'C:\\ProgramData/Git/config' has a dubious owner: '(unknown)'.\nFor security reasons, it is therefore ignored.\nTo fix this, please transfer ownership to an admininstrator."}, {"role": "assistant", "content": "You should check if 'C:\\ProgramData/Git/config' actually exists. If it doesn't you can just create it and paste the following into the file:\n[core]\n    symlinks = false\n    autocrlf = true\n    fscache = true\n[color]\n    diff = auto\n    status = auto\n    branch = auto\n    interactive = true\n[help]\n    format = html\n[rebase]\n    autosquash = true\n\nThis worked for me."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Repack of Git repository fails\nI have a git repository residing on a server with limited memory. \nWhen I try to clone an existing repository from the server I get the following error\nhemi@ubuntu:$ git clone ssh://[email\u00a0protected]/home/hemi/repos/articles\nInitialized empty Git repository in /home/hemi/Skrivebord/articles/.git/\n[email\u00a0protected]'s password: \nremote: Counting objects: 666, done.\nremote: warning: suboptimal pack - out of memory\nremote: fatal: Out of memory, malloc failed\nerror: git upload-pack: git-pack-objects died with error.\nfatal: git upload-pack: aborting due to possible repository corruption on the remote side.\nremote: aborting due to possible repository corruption on the remote side.\nfatal: early EOF\nfatal: index-pack failed\nhemi@ubuntu:$ \n\nTo handle this error I have tried to repack the original repository (according to this forum post). But instead of repacking the repository it describes how to use the \"git pack-objects\" command.\nhemi@servername:~/repos/articles$ git repack -a -d --window-memory 10m --max-pack-size 100m\nusage: git pack-objects [{ -q | --progress | --all-progress }]\n        [--all-progress-implied]\n        [--max-pack-size=N] [--local] [--incremental]\n        [--window=N] [--window-memory=N] [--depth=N]\n        [--no-reuse-delta] [--no-reuse-object] [--delta-base-offset]\n        [--threads=N] [--non-empty] [--revs [--unpacked | --all]*]\n        [--reflog] [--stdout | base-name] [--include-tag]\n        [--keep-unreachable | --unpack-unreachable \n        [<ref-list | <object-list]\n\nGit 1.6.5.7 is installed on the server."}, {"role": "assistant", "content": "Your solution has got you a working copy locally and remotely, but will cause problems again when the remote repository decides to repack itself again.  Fortunately, you can set config options that will reduce the amount of memory needed for repacking in both repositories -- these essentially make the command line parameters that you added into the default options when repacking.  So, you should log in to the remote, change into the repository and do:\ngit config pack.windowMemory 10m\ngit config pack.packSizeLimit 20m\n\nYou may want to do the same on your local repository.  (Incidentally I guess that either your repository is very large or these are machines with little memory - these values seem very low to me.)\nFor what it's worth, when getting malloc failures on repacking very large repositories in the past, I've also changed the values of core.packedgitwindowsize, core.packedgitlimit, core.deltacachesize, pack.deltacachesize, pack.window and pack.threads but it sounds as if you don't need any further options :)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "View a file in a different Git branch without changing branches\nIs it possible to open a file in a git branch without checking out that branch? How?\nEssentially I want to be able to open a file in my github pages branch without switching branches all the time. I don't want to modify it, just want to view it."}, {"role": "assistant", "content": "This should work:\ngit show branch:file\n\nWhere branch can be any ref (branch, tag, HEAD, ...) and file is the full path of the file. To export it you could use\ngit show branch:file > exported_file\n\nYou should also look at VonC's answers to some related questions:\n\nHow to retrieve a single file from specific revision in Git?\nHow to get just one file from another branch\n\nUPDATE 2015-01-19:\nNowadays you can use relative paths with git show a1b35:./file.txt."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git error, need to remove large file\n\nI am getting this error when I try to push to git and I have no idea how to fix it.\nCounting objects: 1239, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (1062/1062), done.\nWriting objects: 100% (1239/1239), 26.49 MiB | 679.00 KiB/s, done.\nTotal 1239 (delta 128), reused 0 (delta 0)\nremote: warning: File log/development.log is 98.59 MB; this is larger than GitHub's recommended maximum file size of 50.00 MB\nremote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.\nremote: error: Trace: efd2d13efa4a231e3216dad097ec25d6\nremote: error: See http://git.io/iEPt8g for more information.\nremote: error: File log/development.log is 108.86 MB; this exceeds GitHub's file size limit of 100.00 MB\nremote: error: File log/development.log is 108.74 MB; this exceeds GitHub's file size limit of 100.00 MB\nremote: error: File log/development.log is 108.56 MB; this exceeds GitHub's file size limit of 100.00 MB\nremote: error: File log/development.log is 106.58 MB; this exceeds GitHub's file size limit of 100.00 MB\nremote: error: File log/development.log is 103.70 MB; this exceeds GitHub's file size limit of 100.00 MB\nTo [email\u00a0protected]:myUsername/myRepo.git\n! [remote rejected] master -> master (pre-receive hook declined)\nerror: failed to push some refs to '[email\u00a0protected]:myUsername/myRepo.git'\n\nI'm guessing I need to remove the large file from the commit, but how do I do that?"}, {"role": "assistant", "content": "To remove large files, GitHub suggests:\n$ git rm --cached giant_file\n# Stage our giant file for removal, but leave it on disk\n\ngit commit --amend -CHEAD\n# Amend the previous commit with your change\n# Simply making a new commit won't work, as you need\n# to remove the file from the unpushed history as well\n\ngit push\n# Push our rewritten, smaller commit\n\nOr if you want more general information on how to work with large files on GitHub.\nAnd next time add /log in your .gitignore"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  branch.autoSetupMerge"}, {"role": "assistant", "content": "Tells git branch , git switch and git checkout to set up new branches\nso that git-pull will appropriately merge from the\nstarting point branch. Note that even if this option is not set,\nthis behavior can be chosen per-branch using the --track and --no-track options. The valid settings are: false \u2014\u2009no\nautomatic setup is done; true \u2014\u2009automatic setup is done when the\nstarting point is a remote-tracking branch; always \u2014\u2009automatic setup is done when the starting point is either a\nlocal branch or remote-tracking branch; inherit \u2014\u2009if the starting point\nhas a tracking configuration, it is copied to the new\nbranch; simple \u2014\u2009automatic setup is done only when the starting point\nis a remote-tracking branch and the new branch has the same name as the\nremote branch. This option defaults to true."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitrepository-layout"}, {"role": "assistant", "content": "Git Repository Layout"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git revert <hash> not allowed due to a merge but no -m option was given\n\nI am trying to revert to a certain 'hash' number in git, by using the 'revert' command.\nI am using the following command:\ngit revert c14609d74eec3ccebafc73fa875ec58445471765\n\nBut, I am getting the following returned:\n\nerror: Commit c14609d74eec3ccebafc73fa875ec58445471765 is a merge but no -m option was given.\nfatal: revert failed\n\nWhat is happening & what should be done to resolve this?\n\nI want to revert back to this certain commit (c14609d74eec3ccebafc73fa875ec58445471765) that I see when running git log."}, {"role": "assistant", "content": "You are trying to revert a merge commit, and git doesn't know which parent to revert to. The -m allows us to choose which parent to choose. See the merge commit and note down which parent you want to go to. The parent information can be seen in git log, for example:\n\ncommit d02ee0f2179def10277f30c71c5d6f59ded3c595\nMerge: dd3a24c 2462a52\n\nand run:\ngit revert <hash> -m 1\n\nwhere 1 indicates parent number 1 (dd3a24c).\nIf you are trying to revert to that commit, do:\ngit reset --hard <hash>\n\nUnderstand the difference between git revert and git reset from the docs and decide which one you want. git revert is the safer option, but doesn't really do what you want. It just reverts the changes of a (set of) commit. git reset makes you move to a particular commit in history, and will rewrite your history."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to merge specific files from Git branches\nI have 2 git branches:\n\nbranch1\nbranch2\n\nI want to merge all the history (multiple commits) of file.py in branch2 into file.py in branch1 and only that file.\nIn essence I just want to work on the file.py in branch1 but want to take advantage of the merge command.\nWhat is the best way to do this?"}, {"role": "assistant", "content": "When content is in file.py from branch2 that is no longer applies to branch1, it requires picking some changes and leaving others. For full control do an interactive merge using the --patch switch:\n$ git checkout --patch branch2 file.py\n\nThe interactive mode section in the man page for git-add(1) explains the keys that are to be used:\ny - stage this hunk\nn - do not stage this hunk\nq - quit; do not stage this hunk nor any of the remaining ones\na - stage this hunk and all later hunks in the file\nd - do not stage this hunk nor any of the later hunks in the file\ng - select a hunk to go to\n/ - search for a hunk matching the given regex\nj - leave this hunk undecided, see next undecided hunk\nJ - leave this hunk undecided, see next hunk\nk - leave this hunk undecided, see previous undecided hunk\nK - leave this hunk undecided, see previous hunk\ns - split the current hunk into smaller hunks\ne - manually edit the current hunk\n? - print help\n\nThe split command is particularly useful."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to cancel a local git commit?\nMy issue is I have changed a file e.g.: README, added a new line 'this for my testing line' and saved the file, then I issued the following commands:\ngit status\n\n# On branch master\n# Changed but not updated:\n#   (use \"git add <file>...\" to update what will be committed)\n#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n#\n#   modified:   README\n#\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n\ngit add README\n\ngit commit -a -m 'To add new line to readme'\n\nI didn't push the code to GitHub. Now I want to cancel this commit.\nFor this, I used\ngit reset --hard HEAD~1\n\nBut I lost the newly added line 'this for my testing line' from the README file.\nThis should not happen. I need the content to be there. Is there a way to retain the content and cancel my local commit?"}, {"role": "assistant", "content": "Just use git reset without the --hard flag:\ngit reset HEAD~1\n\nPS: On Unix based systems you can use HEAD^ which is equal to HEAD~1. On Windows HEAD^ will not work because ^ signals a line continuation. So your command prompt will just ask you More?."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Append the script on one stage .gitlab-ci.yml\n\nHow to append the script section in one stage in the .gitlab-ci.yml file?\ne.g in this example\nstages:\n  - stage1_name\n\n.a:\n  script:\n    - echo \"String 1\"\n\n.b:\n  script:\n    - echo \"String 2\"\n\n\nstage1_name:\n  stage: stage1_name\n  extends: .a\n  extends: .b\n  script:\n    - echo \"String 3\"\n\nhow to get as output:\nString 1\nString 2\nString 3\n\ninstead of: \nString 3"}, {"role": "assistant", "content": "Gitlab 13.9 introduced a !reference-tag which makes this possible;\n.setup:\n  script:\n    - echo creating environment\n\ntest:\n  script:\n    - !reference [.setup, script]\n    - echo running my own command"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-diff-merges"}, {"role": "assistant", "content": "Synonym for --diff-merges=off ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %cn"}, {"role": "assistant", "content": "committer name"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --[no-]mailmap  --[no-]use-mailmap"}, {"role": "assistant", "content": "Use mailmap file to map author and committer names and email\naddresses to canonical real names and email addresses. See git-shortlog ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-am"}, {"role": "assistant", "content": "Apply a series of patches from a mailbox"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to pass variables from .gitlab.ci.yml to Dockerfile\n\nHow can I pass one variables value from .gitlab-ci.yml to Dockerfile?\ne.g.\nThe .gitlab-ci.yml contains:\nvariables:\n  var1: ex_variable_1\n  var2: ex_variable_1\n\nstages:\n  - build\n\nbuild:\n  stage: build\n  script:\n    - sudo docker build . -t ${CI_PROJECT_PATH_SLUG}\n                          --build-arg var1\n                          --build-arg var2\n    - sudo docker run -dit --name ${CI_PROJECT_PATH_SLUG} --cap-add=NET_ADMIN ${CI_PROJECT_PATH_SLUG}:latest\n\nThe Dockefile contains:\nFROM centos:6.9\n\nENV var1 ${var1}\nENV var2 ${var2}\n\nRUN echo \"Print var1 $var1\"\nRUN echo \"Print var2 $var2\n\nSo what I want is to pass var1 and var2 from .gitlab-ci.yml to Dockerfile."}, {"role": "assistant", "content": "To pass environment variables from .gitlab-ci.yml to an image or container:\n\nat build time (if the variable is used by the Dockerfile):\n\nuse the docker build --build-arg option: docker build --build-arg var1=\"$var1\"\n\nand change your Dockerfile like this:\n  FROM centos:6.9\n  ARG var1\n  ARG var2\n\n  RUN echo \"Print var1 $var1\"\n  RUN echo \"Print var2 $var2\"\n\n  # The following is optional \u2212 only useful if you want to\n  # keep the environment variables at runtime (docker run)\n  ENV var1=${var1}\n  ENV var2=${var2}\n\nNote: the ARG instruction can also take a default value:\n  ARG var1=\"default value if var1 was not passed using --build-arg\"\n\n\n\n\nat runtime (if the variable is used by the container, i.e., by the ENTRYPOINT / CMD-specified program):\n\nuse the docker run -e CLI option: docker run -e var1=\"$var1\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches  -t  --track [direct|inherit]"}, {"role": "assistant", "content": "When creating a new branch, set up \"upstream\" configuration. -c is implied. See --track in git-branch for\ndetails. If no -c option is given, the name of the new branch will be derived\nfrom the remote-tracking branch, by looking at the local part of the\nrefspec configured for the corresponding remote, and then stripping\nthe initial part up to the \"*\".  This would tell us to use hack as\nthe local branch when branching off of origin/hack (or remotes/origin/hack , or even refs/remotes/origin/hack ).  If the\ngiven name has no slash, or the above guessing results in an empty\nname, the guessing is aborted.  You can explicitly give a name with -c in such a case."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-stash"}, {"role": "assistant", "content": "Stash the changes in a dirty working directory away"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git repository broken after computer died\nMy computer went dead and now one of my git repositories is broken. When I try to checkout master it tells me:\nwarning: ignoring broken ref refs/heads/master.\nerror: Your local changes to the following files would be overwritten by checkout:\n        com.vainolo.jdraw2d.releng.p2/pom.xml\nPlease, commit your changes or stash them before you can switch branches.\nAborting\n\nWhen I execute git stash I get:\nfatal: bad revision 'HEAD'\nfatal: bad revision 'HEAD'\nfatal: Needed a single revision\nYou do not have the initial commit yet\n\nSo... what can I do?\nUpdate\nOutput of git reflog:\nfatal: bad default revision 'HEAD'\n\nNot very promising... Output of git fsck:\nerror: Invalid HEAD\nChecking object directories: 100% (256/256), done.\nerror: unable to unpack 59551f96b4e87a1c14293c19eb548ce6fa1f196f header\nerror: inflateEnd: stream consistency error (no message)\nfatal: loose object 59551f96b4e87a1c14293c19eb548ce6fa1f196f (stored in .git/objects/59/551f96b4e87a1c14293c19eb548ce6fa1f196f) is corrupt"}, {"role": "assistant", "content": "I managed to recover through:\nrm .git/refs/remotes/origin/HEAD\ngit fetch --all"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Always use the pager for git diff\nI'm using less as my Git pager.\nIf the git diff output is readable on one page, my Git prints the output to the screen.\nSometimes I'm too fast with typing Ctrl + D (half page down), which kills my terminal. Is there an option to enable the pager for git diff, even if the output is very small?\nThis doesn't work:\n\ngit -p diff\ngit --paginate diff\ngit settings: pager.diff = true"}, {"role": "assistant", "content": "This is controlled by the -F (--quit-if-one-screen) option to less.\nGit uses the options FRSX for/of less by default, if none are specified by the $LESS or $GIT_PAGER environment variables. To change it, specify the core.pager option and set it to RSX:\ngit config --global core.pager 'less -+F'\n\n\nOlder versions of Git used to recommend the following in their documentation:\ngit config --global core.pager 'less -+$LESS -RSX'"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What does \"upload-pack: not our ref\" mean, when fetching git refs via --tags?\nIn one of my projects, the Travis builds are failing before any of my build-system or code can be reached, as soon as my build-script attempts to fetch all of the Git tags with git fetch --tags:\n`` git fetch --tags --verbose\nPOST git-upload-pack (350 bytes)\nPOST git-upload-pack (788 bytes)\nPOST git-upload-pack (797 bytes)\nFrom https://github.com/ELLIOTTCABLE/bs-sedlex\n = [up to date]      fix-ci        -> origin/fix-ci\n * [new tag]         sedlex-1.99.2 -> sedlex-1.99.2\n * [new tag]         v1.99.3       -> v1.99.3\n...\n * [new tag]         v20.0.0-pre.2 -> v20.0.0-pre.2\nFetching submodule ppx-sedlex\nPOST git-upload-pack (122 bytes)\nFrom https://github.com/ELLIOTTCABLE/ppx-sedlex\n = [up to date]      develop       -> origin/develop\n = [up to date]      master        -> origin/master\n...\n = [up to date]      v20.0.0-pre.2 -> v20.0.0-pre.2\nPOST git-upload-pack (4 bytes)\nPOST git-upload-pack (69 bytes)\nPOST git-upload-pack (586 bytes)\nfatal: remote error: upload-pack: not our ref 0f509703fcd43ff4324d721a39220153bab49d4a\n\nThis is especially confusing, as neither the main repo bs-sedlex, nor the git-submodule ppx-sedlex, have any commit starting like 0f5097...; I have no idea where that SHA is coming from. This failure is occurring only on the Linux workers, and I can't figure out why \u2014 git fetch --tags on that same repo works on the macOS Travis-workers, on my macOS machine, and on an Ubuntu Vagrant box I spun-up to debug this.\nWhat does the \"fatal: remote error: upload-pack: not our ref\" error signify; and how can I work around it? I'm not even sure where to begin debugging this error, as it only occurs specifically on Travis workers.\n(It's unlikely to be helpful, but here's the error in context, and the repository in question.)\nEdit 1: Here's some additional interesting output, from adding GIT_TRACE=2:\nFetching submodule ppx-sedlex\n23:55:28.125076 git.c:439               trace: built-in: git fetch --no-prune --no-prune-tags --tags -v --recurse-submodules-default on-demand --submodule-prefix ppx-sedlex/\n23:55:28.125914 run-command.c:663       trace: run_command: git-remote-https origin https://github.com/ELLIOTTCABLE/ppx-sedlex.git\n23:55:28.429609 run-command.c:663       trace: run_command: git rev-list --objects --stdin --not --all --quiet --alternate-refs\n23:55:28.432485 run-command.c:663       trace: run_command: git rev-list --objects --stdin --not --all --quiet --alternate-refs\n23:55:28.434082 git.c:439               trace: built-in: git rev-list --objects --stdin --not --all --quiet --alternate-refs\nFrom https://github.com/ELLIOTTCABLE/ppx-sedlex\n = [up to date]      develop       -> origin/develop\n = [up to date]      master        -> origin/master\n = [up to date]      v1.99.4       -> v1.99.4\n = [up to date]      v1.99.4-pre.1 -> v1.99.4-pre.1\n = [up to date]      v1.99.4-pre.3 -> v1.99.4-pre.3\n = [up to date]      v1.99.4-pre.8 -> v1.99.4-pre.8\n = [up to date]      v2.0.0        -> v2.0.0\n = [up to date]      v20.0.0-pre.1 -> v20.0.0-pre.1\n = [up to date]      v20.0.0-pre.2 -> v20.0.0-pre.2\n23:55:28.442482 run-command.c:1616      run_processes_parallel: preparing to run up to 1 tasks\n23:55:28.442504 run-command.c:1648      run_processes_parallel: done\n23:55:28.442536 run-command.c:663       trace: run_command: git gc --auto\n23:55:28.443983 git.c:439               trace: built-in: git gc --auto\n23:55:28.444903 run-command.c:663       trace: run_command: cd /home/vagrant/ELLIOTTCABLE/bs-sedlex/.git/modules/ppx-sedlex; unset GIT_PREFIX; GIT_DIR=. git fetch --no-prune --no-prune-tags --tags -v --recurse-submodules-default on-demand --submodule-prefix ppx-sedlex/ origin 0f509703fcd43ff4324d721a39220153bab49d4a\n23:55:28.446392 git.c:439               trace: built-in: git fetch --no-prune --no-prune-tags --tags -v --recurse-submodules-default on-demand --submodule-prefix ppx-sedlex/ origin 0f509703fcd43ff4324d721a39220153bab49d4a\n23:55:28.447105 run-command.c:663       trace: run_command: git-remote-https origin https://github.com/ELLIOTTCABLE/ppx-sedlex.git\n23:55:28.735871 run-command.c:663       trace: run_command: git fetch-pack --stateless-rpc --stdin --lock-pack --thin --no-progress https://github.com/ELLIOTTCABLE/ppx-sedlex.git/\n23:55:28.738885 git.c:439               trace: built-in: git fetch-pack --stateless-rpc --stdin --lock-pack --thin --no-progress https://github.com/ELLIOTTCABLE/ppx-sedlex.git/\nerror: Server does not allow request for unadvertised object 0f509703fcd43ff4324d721a39220153bab49d4a\n\nI can't make hide-nor-hair of why Git is requesting an \"unadvertised object\" here; but it's clearly not a GitHub problem, here \u2014 for some reason, the command:\ngit fetch --no-prune --no-prune-tags --tags -v \\\n   --recurse-submodules-default on-demand \\ \n   --submodule-prefix ppx-sedlex/ \\\n   origin 0f509703fcd43ff4324d721a39220153bab49d4a\n\n... is being automatically invoked upon the submodule, when I git fetch in the parent repo. (Again, that commit, 0f509703, does not exist in either repo; again, the exact same repo, the exact same commit, and this isn't happening on macOS \u2014 only on Travis's Linux machines.)"}, {"role": "assistant", "content": "I had the same error:\nradato$ git submodule update \nfatal: git upload-pack: not our ref somehash0\nfatal: remote error: upload-pack: not our ref somehash0\nfatal: Fetched in submodule path 'dashboard', but it did not contain somehash0. Direct fetching of that commit failed.\n\nSo I deinitialized the submodule:\nradato$ git submodule deinit -f dashboard\nCleared directory 'dashboard'\nSubmodule 'dashboard' (ssh://[email\u00a0protected]/somedomain/dashboard.git) unregistered for path 'dashboard'\n\nNow checking the summary I get\nradato@$ git submodule summary \n* somepath1 somehash1 (2):\n  < Merged in fixed_edge (pull request #2)\n  < fixed broken test\n\n* somepath2 somehash2 (2):\n  < Merged in dsp_tx_freq (pull request #14)\n  < Merged in v0.2.0 (pull request #13)\n\nEventually I pulled:\nradato@$ git pull --prune --recurse-submodules --force \nFetching submodule dashboard\nFetching submodule somepath1\nFetching submodule somepath2\nAlready up to date.\nSubmodule path 'somesubmodulepath1': checked out 'somehash1'\nSubmodule path 'somesubmodulepath2': checked out 'somehash2'\n\nAnd now it works again. Here is the status\nradato$ git status \nOn branch develop\nYour branch is up to date with 'origin/develop'.\n\nnothing to commit, working tree clean"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to count total lines changed by a specific author in a Git repository?\nIs there a command I can invoke which will count the lines changed by a specific author in a Git repository? I know that there must be ways to count the number of commits as Github does this for their Impact graph."}, {"role": "assistant", "content": "This gives some statistics about the author, modify as required.\nUsing Gawk:\ngit log --author=\"_Your_Name_Here_\" --pretty=tformat: --numstat \\\n| gawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s removed lines: %s total lines: %s\\n\", add, subs, loc }' -\n\nUsing Awk on Mac OSX:\ngit log --author=\"_Your_Name_Here_\" --pretty=tformat: --numstat | awk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s, removed lines: %s, total lines: %s\\n\", add, subs, loc }' -\n\n\nUsing count-lines git-alias:\nSimply create count-lines alias (once per system), like:\ngit config --global alias.count-lines \"! git log --author=\\\"\\$1\\\" --pretty=tformat: --numstat | awk '{ add += \\$1; subs += \\$2; loc += \\$1 - \\$2 } END { printf \\\"added lines: %s, removed lines: %s, total lines: %s\\n\\\", add, subs, loc }' #\"\n\nAnd use each time later, like:\ngit count-lines [email\u00a0protected]\n\n\nFor Windows, works after adding Git-Bash to PATH (environment-variable).\nFor Linux, maybe replace awk part with gawk.\nFor MacOS, works without any change.\n\nUsing existing script (Update 2017)\nThere is a new package on github that looks slick and uses bash as dependencies (tested on linux). It's more suitable for direct usage rather than scripts.\nIt's git-quick-stats (github link).\nCopy git-quick-stats to a folder and add the folder to path.\nmkdir ~/source\ncd ~/source\ngit clone [email\u00a0protected]:arzzen/git-quick-stats.git\nmkdir ~/bin\nln -s ~/source/git-quick-stats/git-quick-stats ~/bin/git-quick-stats\nchmod +x ~/bin/git-quick-stats\nexport PATH=${PATH}:~/bin\n\nUsage:\ngit-quick-stats"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  push [-p|--patch] [-S|--staged] [-k|--[no-]keep-index] [-u|--include-untracked] [-a|--all] [-q|--quiet] [(-m|--message) <message>] [--pathspec-from-file=<file> [--pathspec-file-nul]] [--] [<pathspec>\u2026\u200b]"}, {"role": "assistant", "content": "Save your local modifications to a new stash entry and roll them\nback to HEAD (in the working tree and in the index).\nThe <message> part is optional and gives\nthe description along with the stashed state. For quickly making a snapshot, you can omit \"push\".  In this mode,\nnon-option arguments are not allowed to prevent a misspelled\nsubcommand from making an unwanted stash entry.  The two exceptions to this\nare stash -p which acts as alias for stash push -p and pathspec elements,\nwhich are allowed after a double hyphen -- for disambiguation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Mirror a git repository by pulling?\nI am wondering if there is an easy way, ie like a simple cron job, to regularly pull from a remote git repository to a local read only mirror for backup purposes?\nIdeally it would pull all branches and tags, but the master/trunk/head would be sufficient.\nI just need a way to make sure that if the master git server dies, we have a backup location that we could manually fail over to."}, {"role": "assistant", "content": "First create a mirror with \ngit clone --mirror [email\u00a0protected]:repo.git\n\nthen setup a cron job like this:\n*/1 * * * * gitbackup cd /backup/repo.git && git fetch -q --tags\n\nThis will backup the changesets every minute. Maybe you want to do this less frequently."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -C[<n>]  --find-copies[=<n>]"}, {"role": "assistant", "content": "Detect copies as well as renames.  See also --find-copies-harder .\nIf n is specified, it has the same meaning as for -M<n> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --ws-error-highlight=<kind>"}, {"role": "assistant", "content": "Highlight whitespace errors in the context , old or new lines of the diff.  Multiple values are separated by comma, none resets previous values, default reset the list to new and all is a shorthand for old,new,context .  When\nthis option is not given, and the configuration variable diff.wsErrorHighlight is not set, only whitespace errors in new lines are highlighted. The whitespace errors are colored\nwith color.diff.whitespace ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitLab postfix configuration mail not sending\n\nI installed GitLab on my Ubuntu 12.04 server. Now I can login as an Administrator, do some stuffs, however, my question is the email seems to be not workin. I need to confirm the confirmation email sent to my address.\nI installed postfix as per instruction by our the readme. How can I test my postfix or configure GitLab configuration."}, {"role": "assistant", "content": "In case your ISP is blocking port 25 (this happens apparently quite often and was the case for me as well) you can use Gmail as a Relay. The following instructions are from here and walk you step-by-step through the process:\nIn /etc/postfix/main.cf add:\n# Relaying Postfix SMTP via GMAIL\nrelayhost = [smtp.gmail.com]:587\nsmtp_sasl_auth_enable = yes\nsmtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd\nsmtp_sasl_security_options = noanonymous\nsmtp_tls_CAfile = /etc/postfix/cacert.pem\nsmtp_use_tls = yes\n\nThen you need to setup the Gmail credentials. For this open/create /etc/postfix/sasl_passwd and write:\n[smtp.gmail.com]:587    [email\u00a0protected]:PASSWORD\n\nWhere (as you might have guessed) USERNAME and PASSWORD are your credentials. Then change permissions for the file:\n$ sudo chmod 400 /etc/postfix/sasl_passwd\n$ sudo postmap /etc/postfix/sasl_passwd\n\nNow we need to add the certificate to Postfix:\n$ cat /etc/ssl/certs/Thawte_Premium_Server_CA.pem | sudo tee -a /etc/postfix/cacert.pem\n\nJust restart postfix and you should be good:\n$ sudo service postfix restart\n\nIf you want to test:\n$ echo \"Hello World\" | mail -s \"Test Message\" [email\u00a0protected]\n\nAnd check what the mail log thinks about it:\n$ tail /var/log/mail.log\n\nNote: You only have 500 emails per day using Gmail's SMTP Server as Relay."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --oneline"}, {"role": "assistant", "content": "This is a shorthand for \"--pretty=oneline --abbrev-commit\"\nused together."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "\"Updates were rejected because the remote contains work that you do not have locally.\" after creating a new repository on GitHub\nI created a new repo, cloned it, added files to the directory, added them with add -A, committed changes, and when I try to push using git push <repo name> master I get:\n\nhint: Updates were rejected because the remote contains work that you do not have locally. This is usually caused by another repository pushing to the same ref. You may want to first merge the remote changes (e.g.,\nhint: 'git pull') before pushing again.\n\nThis doesn't seem to make sense since it's a new repo and contains only a readme file."}, {"role": "assistant", "content": "This happens if you initialized a new github repo with README and/or LICENSE file\ngit remote add origin [//your github url]\n\n//pull those changes\n\ngit pull origin main \n\n// or optionally, 'git pull origin main --allow-unrelated-histories' if you have initialized repo in github and also committed locally\n\n//now, push your work to your new repo\n\ngit push origin main\n\nNow you will be able to push your repository to github. Basically, you have to merge those new initialized files with your work. git pull fetches and merges for you. You can also fetch and merge if that suits you."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitprotocol-capabilities"}, {"role": "assistant", "content": "Protocol v0 and v1 capabilities"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git Submodule - Permission Denied\n\nI am not able to clone the submodule existing within my private git repository. I do have access to entire repository, \nHave used the below commands but dint work, please help. What is the right way to clone the submodules in an existing repository? \ndjrecker$ git submodule update --init --recursive\nSubmodule 'Path' ([email\u00a0protected]:Path) registered for path 'App'\nCloning into 'Path'...\nPermission denied (publickey).\nfatal: Could not read from remote repository."}, {"role": "assistant", "content": "I was facing the same issue.  The problem was on your github repo , you might be using some old ssh key. \nYou need to update the current ssh key.\nSteps involved are:\n\n1. vim ~/.ssh/id_rsa.pub\n2. copy the ssh key\n3. Go to the github settings\n4. Select the option ssh keys\n5. Remove the old ssh keys not used anymore.\n6. Add a new ssh key.\n7. Try running the \"git submodule update --recursive\"\n\nThis worked for me !!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  gc.aggressiveDepth"}, {"role": "assistant", "content": "The depth parameter used in the delta compression\nalgorithm used by git gc --aggressive .  This defaults\nto 50, which is the default for the --depth option when --aggressive isn\u2019t in use. See the documentation for the --depth option in git-repack for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Check if \"git stash\" stashed anything\nI have a Windows Command script designed to merge the dev branch into a project branch.  It starts by reading the current branch name, stashing changes, fetching and merging the dev and project branches, then switches back to the original branch and pops the stash.\nThe issue is there might not be any changes to stash.  This leaves the previous stash at the top of the stack.  When it gets to the end of the script and pops the stash, it's popping the previous stash which is unrelated to the current branch.\nSet SourceBranch=dev\nSet ProjectBranch=project\n\n:: Stash current changes.\nFor /F \"tokens=1,2\" %%a In ('Git branch -q') Do If \"%%a\"==\"*\" Set CurrentBranch=%%b\nGit stash save -u\n\n:: Pull latest source branch.\nGit checkout %SourceBranch%\nGit pull\nFor /F \"tokens=1,3\" %%a In ('Git branch -q -v') Do If \"%%a\"==\"*\" Set MergeHash=%%b\n\n:: Merge source into project branch.\nGit checkout %ProjectBranch%\nGit pull\nGit merge --commit %MergeHash%||Exit 1\n\n:: Return to original branch.\nGit checkout %CurrentBranch%\nGit stash pop\n\nHow can I get feedback from Git stash or Git status to determine whether I need to pop the stash?"}, {"role": "assistant", "content": "What you want is:\ngit stash list\n\n\ngit stash allows you to provide a message. You can use a generated token as your message so that you know it won't conflict with other git stash messages.\nThen, when you want to check whether or not to pop, simply check if the git stash list output contains your token. If so, pop the stash."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Purging file from Git repo failed, unable to create new backup\nI tried to remove a file from my remote repo by running:\ngit filter-branch --index-filter 'git rm --cached --ignore-unmatch Rakefile' HEAD\n\nBut Git complains that \n\nCannot create new backup. A previous backup already exists in refs/original/\n  Force overwriting the backup with -f\n  rm: cannot remove /.git-rewrite/backup-refs : Permission denied\n  rm: cannot remove directory /.git-rewrite : Directory not empty\n\nThis was after I already deleted the .git-rewrite directory on Windows.\nHow can I remove that file? It's a 29Mb file sitting on my repo, so I quite need to remove the file. \nI tried to delete the commit in git rebase -i, but apparently because the commit touched a lot of different files, Git complains of conflicts and I aborted to be safe."}, {"role": "assistant", "content": "You have already performed a filter-branch operation. After filter-branch, Git keeps refs to the old commits around, in case something goes wrong. \nYou can find those in .git/refs/original/\u2026. Either delete that directory and all files within, or use the -f flag to force Git to delete the old references.\ngit filter-branch -f \\\n--index-filter 'git rm --cached --ignore-unmatch Rakefile' HEAD"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-fast-import"}, {"role": "assistant", "content": "Backend for fast Git data importers"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  largePathname"}, {"role": "assistant", "content": "(WARN) A tree contains an entry with a very long path name. If\nthe value of fsck.largePathname contains a colon, that value\nis used as the maximum allowable length (e.g., \"warn:10\" would\ncomplain about any path component of 11 or more bytes). The\ndefault value is 4096."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I properly remove sensitive data pushed to a Git repo?\n\nI pushed a file containing a password to my repo by mistake - FYI the repo is just a small personal project.\nOnce I realised the password was present I added the file to .gitignore and executed git rm -r --cached <filename>, committed and pushed to the repo.\nI now realise the password is still present in the history - what is the best way to remove it?\nI read the Remove sensitive data page on Github which suggests changing the password - which I have done - but I would like to remove the history as well."}, {"role": "assistant", "content": "Since you have already made 5 commits since the commit containing the clear text password, you best bet is to do a git rebase -i in interactive mode on your local branch.  Find the SHA-1 of the commit where you added the clear text password, and type the following:\ngit rebase --interactive dba507c^\n\nwhere dba507c are the first 7 characters of the SHA-1 for the bad commit.\nChange this:\npick dba507c comment for commit containing clear text password\n\nTo this:\nedit dba507c I have removed the clear text password\n\nMake the change to the password file to remove the clear text, then commit your result like this:\ngit commit --all --amend --no-edit\ngit rebase --continue\n\nFinish the rebase, then push your (correct) local branch to the remote via:\ngit push -f origin your_branch\n\nYou will need to force push your_branch because you have rewritten history (by modifying the password file).  Now you have all your latest commits, but you have removed the clear text."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  --prefix=<prefix>/"}, {"role": "assistant", "content": "Prepend <prefix>/ to paths in the archive.  Can be repeated; its\nrightmost value is used for all tracked files.  See below which\nvalue gets used by --add-file and --add-virtual-file ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --compact-summary"}, {"role": "assistant", "content": "Output a condensed summary of extended header information such\nas file creations or deletions (\"new\" or \"gone\", optionally \"+l\"\nif it\u2019s a symlink) and mode changes (\"+x\" or \"-x\" for adding\nor removing executable bit respectively) in diffstat. The\ninformation is put between the filename part and the graph\npart. Implies --stat ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Change GIT account of Visual Studio Team Explorer\nI am having a very weird situation when cloning a Git repository from our company private server. The repository is not anonymous (it requires authentication), but when cloning, VS didn't ask any username and password and automatically use an old authentication of old employee. Is there a way to remove the saved username and password and make Visual Studio to prompt them when cloning?"}, {"role": "assistant", "content": "Look in the Windows Credential manager and remove/update your credentials there:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git ignore exception\nI have a gitignore file that makes git ignore *.dll files, and that is actually the behavior I want. However, if I want an exception ( i.e. to be able to commit foo.dll), how can I achieve this?"}, {"role": "assistant", "content": "Use:\n*.dll    #Exclude all dlls\n!foo.dll #Except for foo.dll\n\nFrom gitignore:\n\nAn optional prefix ! which negates the pattern; any matching file excluded by a previous pattern will become included again. If a negated pattern matches, this will override lower precedence patterns sources."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-describe - Give an object a human readable name based on an available ref"}, {"role": "assistant", "content": "DESCRIPTION The command finds the most recent tag that is reachable from a\ncommit.  If the tag points to the commit, then only the tag is\nshown.  Otherwise, it suffixes the tag name with the number of\nadditional commits on top of the tagged object and the\nabbreviated object name of the most recent commit. The result\nis a \"human-readable\" object name which can also be used to\nidentify the commit to other git commands. By default (without --all or --tags) git describe only shows\nannotated tags.  For more information about creating annotated tags\nsee the -a and -s options to git-tag . If the given object refers to a blob, it will be described\nas <commit-ish>:<path> , such that the blob can be found\nat <path> in the <commit-ish> , which itself describes the\nfirst commit in which this blob occurs in a reverse revision walk\nfrom HEAD."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %aD"}, {"role": "assistant", "content": "author date, RFC2822 style"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Disable git EOL Conversions\nI am trying to get git to not change any line endings whatsoever for any operation.  Unfortunately, it seems to do so not matter what.  I have reduced it down to the following test case, which has as many different mechanisms for disabling this behavior as I could find.\n\n\nBegin with two machines (Windows computer = A, Linux computer = B)\nOn both machines: git config --global core.autocrlf false\nOn both machines: git config --global core.eol crlf (just in case)\n\n\n\nMake new repository on A.  From an empty folder:\n\n\ngit init --shared (then unhide the created .git directory)\nMake a new file .gitignore in the repository\nMake a new file .gitattributes in the repository with the single line: * -text\ngit add ., then git commit -m \"initial commit\" to work around, e.g. this.\ngit branch master_recv\nAdd remotes\n\nMake a new file document.txt in the repository containing CRLF\nCommit: git add -A, then git commit -m \"<something>\"\nNote that A's document.txt still contains CRLF (and deleting it and resetting with --hard returns the version still with CRLF)\n\n\n\nSCP the whole directory to computer B\nAdd a new file new file containing CRLF\nCommit: git add -A, then git commit -m \"<something>\"\nNote that B's document.txt and B's new file both still contain CRLF\n\n\n\nPull B's master to A: git pull <remote> master:master_recv\nA's document.txt has changed to LF.  The added file new file also contains LF.\n\nThe problem does not occur if B is a Windows machine."}, {"role": "assistant", "content": "One simple solution is:\n\nmake sure core.autocrlf is set to false for all repos:\ngit config --global core.autocrlf false\n\nGit 2.16 (Q1 2018) and above, run git add --renormalize .\notherwise, re-clone your repo, and check no EOL conversion is done.\n\n\n\nIf there are conversions automatically done, that mean a .gitattributes core.eol directive is there within the repo.\nWith Git 2.8+ (March 2016), check if there are still eol transformation with:\ngit ls-files --eol"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to configure Jenkins to access Gitlab private repository without Gitlab plugin?\n\nI have installed latest Jenkins on ubuntu server and Jenkinsfile in my project repo on Gitlab.\nI am able to connect to private repo on Gitlab using username/password credential on Jenkins configuration for the project pipeline without using Jenkins Gitlab plugin. This does not seem safe to me. How can I use Gitlab API token instead of username/password for Jenkins to access remote private Gitlab repo without using Jenkins Gitlab plugin. Another option is to set ssh private key on Jenkins server to athenticate against Gitlab repo. Is this option possible? \nJenkins Gitlab plugin is not officially supported and not well maintained because Gitlab wants customers to user their own CI/CD solution in order to tie customers to their platform for marketing reasons."}, {"role": "assistant", "content": "A relatively safe way to handle this situation is to store your credentials is the credentials system in Jenkins (that way you do not have to include the credentials in the JenkinsFile), and using a deploy token (available for Gitlab 10.7 and later) for the relevant repository. That token allows you to provide read-only rights to the repository.\nStep 1 - setup the deploy token in GitLab\nFrom the GitLab documentation\n\nYou can create as many deploy tokens as you like from the settings of your project:\n\nLog in to your GitLab account.\nGo to the project you want to create Deploy Tokens for.\nGo to Settings > Repository.\nClick on \u201cExpand\u201d on Deploy Tokens section.\nChoose a name and optionally an expiry date for the token.\nChoose the desired scopes.\nClick on Create deploy token.\nSave the deploy token somewhere safe. Once you leave or refresh the page, you won\u2019t be able to access it again.\n\n\nStep 2 - Saving the deploy token in Jenkins' credentials system\nSince the deploy tokens have a username and password, pick that as the type in the steps below. Write down the id you will use in this step (see below) as you will need it in your pipeline declaration.\nFrom the Jenkins documentation\n\nTo add new global credentials to your Jenkins instance:\n\nIf required, ensure you are logged in to Jenkins (as a user with the Credentials > Create permission).\nFrom the Jenkins home page (i.e. the Dashboard of the Jenkins classic UI), click Credentials > System on the left.\nUnder System, click the Global credentials (unrestricted) link to access this default domain.\nClick Add Credentials on the left. Note: If there are no credentials in this default domain, you could also click the add some credentials link (which is the same as clicking the Add Credentials link).\nFrom the Kind field, choose the type of credentials to add.\nFrom the Scope field, choose either:\n  \n  \n\nGlobal - if the credential/s to be added is/are for a Pipeline project/item. Choosing this option applies the scope of the credential/s to the Pipeline project/item \"object\" and all its descendent objects.\nSystem - if the credential/s to be added is/are for the Jenkins instance itself to interact with system administration functions, such as email authentication, agent connection, etc. Choosing this option applies the scope of the credential/s to a single object only.\n\n\nAdd the credentials themselves into the appropriate fields for your chosen credential type:\n  \n  \n(...)\n\nUsername and password - specify the credential\u2019s Username and Password in their respective fields.\n    (...)\n\n\nIn the ID field, specify a meaningful credential ID value - for example, jenkins-user-for-xyz-artifact-repository. You can use upper- or lower-case letters for the credential ID, as well as any valid separator character. However, for the benefit of all users on your Jenkins instance, it is best to use a single and consistent convention for specifying credential IDs. Note: This field is optional. If you do not specify its value, Jenkins assigns a globally unique ID (GUID) value for the credential ID. Bear in mind that once a credential ID is set, it can no longer be changed.\nSpecify an optional Description for the credential/s.\nClick OK to save the credentials.\n\n\nStep 3 - Use the credentials in your pipeline declaration\nYou can use the credentials in your jenkinsFile like so:\npipeline {\n  stages {\n    stage('Clone stage') {\n       steps {\n         git url: 'https://gitlab.com/[username]/[my-repo].git', branch: 'master', credentialsId: 'my-gitlab-repo-creds'\n       }\n    }\n  }    \n}\n\nIn the above example I assume you picked the id my-gitlab-repo-creds in step 2."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to track directories but not their files with Git?\nI've recently started using Git and am having trouble with just one thing. How can I track directories without tracking their contents?\nFor example the site I'm working on allows uploads. I want to track the uploads directory so that it is created when branching, etc. but obviously not the files within it (test files whilst in develop branch or the real files in master).\nIn my .gitignore I have the following:\nuploads/*.*\nHave also tried (which ignores the whole directory):\nuploads/\nThis directory may also contain sub directories (uploads/thumbs/ uploads/videos/) I would like to be able to track these but not their files.\nIs this possible with Git? I've searched everywhere without finding an answer."}, {"role": "assistant", "content": "Git doesn't track directories, it tracks files, so to acheive this you need to track at least one file. So assuming your .gitignore file looks something like this:\nupload/*\n\nYou can do this:\n$ touch upload/.placeholder\n$ git add -f upload/.placeholder\n\nIf you forget the -f you'll see:\n\n$ git add upload/.placeholder\nThe following paths are ignored by one of your .gitignore files:\nupload\nUse -f if you really want to add them.\nfatal: no files added\n\nThen when you do git status you'll see:\n\n# On branch master\n#\n# Initial commit\n#\n# Changes to be committed:\n#   (use \"git rm --cached ...\" to unstage)\n#\n#   new file:   upload/.placeholder\n#\n\nObviously you can then do:\n$ touch upload/images/.placeholder\n$ git add -f upload/images/.placeholder"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories"}, {"role": "assistant", "content": "ENVIRONMENT git daemon will set REMOTE_ADDR to the IP address of the client\nthat connected to it, if the IP address is available. REMOTE_ADDR will\nbe available in the environment of hooks called when\nservices are performed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to combine group of local commits to single push in IDEA?\nIn IDEA I am trying to push some commits.\nI have a requirement that on remote server it looks like single action.\nI click to push and see following window\n\nI expected to see squash checkbox here but don't see it.\nPlease help me."}, {"role": "assistant", "content": "You can do it using rebase. Go to VCS/Git/Rebase. Then select Interactive option. It will show you a list of commits, where you can pick which ones you want to squash.\nAfter you hit Start rebasing it will prompt you for a commit message for the squashed commit. After that is done you can push your squashed commit using push dialog.\n\nMore information about rebase in IntelliJ is here."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Removing multiple files from a Git repo that have already been deleted from disk\nI have a Git repo that I have deleted four files from using rm (not git rm), and my Git status looks like this:\n#    deleted:    file1.txt\n#    deleted:    file2.txt\n#    deleted:    file3.txt\n#    deleted:    file4.txt\n\nHow do I remove these files from Git without having to manually go through and add each file like this:\ngit rm file1 file2 file3 file4\n\nIdeally, I'm looking for something that works in the same way that git add . does, if that's possible."}, {"role": "assistant", "content": "For Git 1.x\n$ git add -u\n\nThis tells git to automatically stage tracked files -- including deleting the previously tracked files. \nFor Git 2.0\nTo stage your whole working tree:\n$ git add -u :/\n\nTo stage just the current path:\n$ git add -u ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to get pull request number within GitHub Actions workflow\n\nI want to access the Pull Request number in a Github Actions workflow. I can access the GITHUB_REF environment variable that is available. Although on a Pull Request action it has the value: refs/pull/125/merge. I need to extract just the 125.\nI have found a similar post here that shows how to get the current branch using this variable. Although in this case, what I am parsing is different and I have been unable to isolate the Pull Request number.\n\nI have tried using {GITHUB_REF##\\*/} which resolves to merge\nI have also tried {GITHUB_REF#\\*/} which resolves to pull/125/merge\n\nI only need the Pull Request number (which in my example is 125)"}, {"role": "assistant", "content": "Although it is already answered, the easiest way I found is using the github context. The following example shows how to set it to an environment variable.\nenv:\n  PR_NUMBER: ${{ github.event.number }}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --no-notes"}, {"role": "assistant", "content": "Do not show notes. This negates the above --notes option, by\nresetting the list of notes refs from which notes are shown.\nOptions are parsed in the order given on the command line, so e.g.\n\"--notes --notes=foo --no-notes --notes=bar\" will only show notes\nfrom \"refs/notes/bar\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to solve the requested URL returned error: 403 in git repository\nI have multiple accounts in git I committed code three weeks back with this account. I'll unable to pull my code . I was getting    The requested \nURL returned error: 403\nI'll try Pushing to Git returning Error Code 403 fatal: HTTP request failed\n but I couldn't solved my error\ngit -c diff.mnemonicprefix=false -c core.quotepath=false fetch origin\nremote: Forbidden\nfatal: unable to access \n'https://[email\u00a0protected]/chantidurgam/patanjali.git/': The requested \nURL returned error: 403\n\nCompleted with errors, see above."}, {"role": "assistant", "content": "What needs to be checked before anything else is the access level, which should be set to write. This can happen if you were added to the repo by someone else, and they forgot to grant you the required permissions."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How does one retrieve an arbritrary user's ssh public keys from GitLab?\n\nHow does one retrieve an arbritrary user's ssh public keys from GitLab?\nGitHub provides this feature. For example: https://github.com/winny-.keys\nThe GitLab API exposes public keys, however it looks like it requires:\n\nSeparate authentication\nQuery a given user name for its UID\nFinally get the public keys"}, {"role": "assistant", "content": "GitHub style ssh public key access was added in GitLab 6.6.0 using the following scheme: http://__HOST__/__USERNAME__.keys (thanks @bastelflp).\nCurrently we are running 6.2.3, and we will upgrade."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Shell variable expansion in git config\nI have a shell variable which points to the directory where all my configuration files are located. Let's assume the variable is created with export RC=$HOME/rc. I have a global ignore file in the configuration directory: ~/rc/globalgitignore.\nMy Question is, how can I expand the RC variable in my .gitconfig file?\nI already tried the following:\n\nexcludesfile = $RC/globalgitignore\nexcludesfile = !$RC/globalgitignore\nexcludesfile = !echo $RC/globalgitignore\nexcludesfile = !$(echo $RC/globalgitignore)\n\nNone of these solutions work.\nThe only way this works if I enter the full path: excludesfile = ~/rc/globalgitignore, but then I have to change the path if move my rc directory to a different location."}, {"role": "assistant", "content": "You can't. git-config(1) does not support environment variable expansion, but only limited type conversion and path expansion:\n\nThe type specifier can be either --int or --bool, to make git config ensure that the variable(s) are of the given type and convert the value to the canonical form (simple decimal number for int, a \"true\" or \"false\" string for bool), or --path, which does some path expansion (see --path below). If no type specifier is passed, no checks or transformations are performed on the value.\n\nThe documentation for --path states:\n\n--path\ngit-config will expand leading ~ to the value of $HOME, and ~user to the home directory for the specified user. This option has no effect when setting the value (but you can use git config bla ~/ from the command line to let your shell do the expansion).\n\nThe term \"expansion\" does not appear in any different context in git-config(1). So how did you even get the idea that it should, given that no such feature is documented anywhere?\nIn order to expand environment variables you have to pre-process the Git config file yourself, i.e. by creating a template file, and expand variables with a script before copying the file to your $HOME directory.\nIf it's about dotfile management, then do, what all people do: Put them in a directory, and add symlinks to this directory from your $HOME."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Gitlab: why \"squash\" merge creates two commits?\n\nTo reproduce it:\n\nCreate issue\nOpen Merge Request (MR) from the issue\nMake changes with multiple commits\nCheck \"squash commits\" and Merge the MR\n\nWhy on earth this creates TWO commits in history with exactly the same changes?\nThe commits titles:\n\nMerge branch '123-branch-name' into 'dev'\nFull Issue name\n\nWhat is the point of that?"}, {"role": "assistant", "content": "Sounds like you create one commit containing your changes (commit Full Issue name) and a merge commit, merging changes from that commit into dev branch.\nThe merge commit is usually created for every merge request. This can be changed in Settings->Merge Request Settings by choosing e.g. Fast Forward Merge instad of Merge Commit. This will lead to only one commit on top of your current dev HEAD, which will only work if dev can be fast forwarded.\nChecking squash commits will squash all commits in the feature branch you want to merge before merging it. Thus, if you had more than one commit in your feature branch, they would be squashed into one commit, which would be merged, creating a merge commit as you described (as long as your merge request settings are set to merge commit, see above).\nThe point of that is that you might want to see that changes were performed on a different branch. This is done by not fast forwarding the branch you merge into, but create a merge request instead. This displays that two lines of development were merged, while a fast forward merge (not creating a merge commit) would not."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  --ignore-missing"}, {"role": "assistant", "content": "Do not consider it an error to request removing notes from an\nobject that does not have notes attached to it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  notes.rewrite.<command>"}, {"role": "assistant", "content": "When rewriting commits with <command> (currently amend or rebase ), if this variable is false , git will not copy\nnotes from the original to the rewritten commit.  Defaults to true .  See also \" notes.rewriteRef \" below. This setting can be overridden with the GIT_NOTES_REWRITE_REF environment variable, which must be a colon separated list of refs or\nglobs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  git log -3"}, {"role": "assistant", "content": "Limits the number of commits to show to 3."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I create a GitLab webhook?\n\nI've read that GitLab is capable of sending messages to other servers via \"web hooks\" but I can't find where one would create one.\nCan someone point me in the right direction?"}, {"role": "assistant", "content": "All the answers I've found in official documentation and on Stack Overflow for finding web hooks are incorrect. The admin area > hooks page does NOT contain web hooks. It contains system hooks, which fire when you create/delete projects and users and things like that. This is not what you want.\nTo find your web hooks, go to the specific project > settings > web hooks (on sidebar in GitLab 6.1.0) page. These will fire on post-receive for the project in question. You can use a service like RequestBin to see what the payload looks like and to ensure you're firing these off correctly for debugging purposes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Shortcut to push code to git in VSCode?\nIn VS Code, the only way that I know of to push commits with git is to go into the \"...\" menu of the Source Control tab and click Push.\n\nThat method seems a bit roundabout to me, especially considering that there is a unique button to commit code right in the tab. Is there a way to have a push button be next to the commit button in VS Code Source Control?"}, {"role": "assistant", "content": "There is a button at the bottom left of the VS Code editor, which you can click to automatically sync your branch with that from remote (i.e. both pull AND push, merging your branch with upstream if necessary). This might or might not be what you want, but it's easy to click this when you know that there are no changes upstream (e.g. when you're working on a project by yourself).\n\nOtherwise, I frequently bring up the Command Palette with \u21e7\u2318P (Ctrl-Shift-P on Windows/Linux) and type gpus, which brings up Git: Push as the first option. (It's been ingrained in my fingers since the days of Sublime Text)\nIf you are using the later versions of VS Code which has MRU list of command history, you can shorten it even further and just type gp, which is exactly what I've been using since SublimeGit in Sublime Text.\n\nLastly, another option you may want is to add a custom keyboard shortcut to push changes. You can do this by editing your Keyboard Shortcuts File, and adding something like the following:\n{\n    {\n        \"key\": \"ctrl+alt+p\",\n        \"command\": \"git.push\"\n    }\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I synchronize two branches in the same Git repository?\nHere's a common workflow hurdle I encounter often:\nmaster is our \"stable\" branch\n$ git status\n# On branch master\nnothing to commit (working directory clean)\n\nCreate a module on a branch\n$ git checkout -b foo\n$ echo \"hello\" > world\n$ git add .\n$ git commit -m \"init commit for foo module\"\n$ git checkout master\n$ git merge foo\n\nDo work on master or other branches\nOver the next couple weeks, more code will be committed to master directly and by other branches. The foo branch will go untouched for this time period.\nResume work/make updates on the foo branch\n$ git checkout foo\n\nOh no! foo is massively out of date! I understand why, but I do need foo back in sync.\nThe question\nHow do I get the latest contents from the master branch?"}, {"role": "assistant", "content": "If you don't need the branch around:\nIf you've merged foo back to master, \"git branch -d foo\" to kill the topic branch, and then \"checkout -b foo\" in the future when you need to hack on it again.\nIf you do need the branch around:\nYou can rebase your topic branch against the master branch:\ngit checkout foo\ngit rebase master\n\nOr:\ngit rebase master foo"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Show just the current branch in Git\nIs there a Git command equivalent to:\ngit branch | awk '/\\*/ { print $2; }'"}, {"role": "assistant", "content": "$ git rev-parse --abbrev-ref HEAD\nmaster\n\nThis should work with Git 1.6.3 or newer."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to prefer files from one branch during a merge?\nSome time ago I created a branch from my master branch. Let's call it new_feature. While I was working on new_feature, the master branch followed its normal evolution. Now that new_feature is ready to be merged into master I see some conflicts, all of them are into files that are totally unrelated to the actual new feature (like some config files and the likes that have changed on master). I'm going to solve the conflicts manually but I was wondering, since it's a situation that happens quite often, how I could just merge the new_feature branch into master while always keeping the master version of the files in case of conflict?\nI'm sure it's easy and is related to something like 'keep version' but since it's a pretty sensitive subject I'd rather ask than be sorry."}, {"role": "assistant", "content": "As mention in the comment there are several strategies in the documentation.  You can also find them here: http://git-scm.com/docs/git-merge\nYou are looking for either git merge -s recursive -X ours or git merge -s recursive -X theirs depending on the branch that you are on.  Be careful with these as you can accidentally miss changes to your files from the other branch and these would be overwritten.\nAnother method, which I prefer due to more control, is to git checkout <other-branch> -- <list of files>.  This way I don't accidentally overwrite a file with the wrong changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mergetool"}, {"role": "assistant", "content": "Run merge conflict resolution tools to resolve merge conflicts"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -A <num>  --after-context <num>"}, {"role": "assistant", "content": "Show <num> trailing lines, and place a line containing -- between contiguous groups of matches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git, rewrite previous commit usernames and emails\nI've committed a bunch of commits to a project on Github, however I realized I hadn't set up the proper email and committer full name on the computer I'm currently using to make my commits and therefore the users avatar and email address are not there.\nHow can I rewrite all past commit email and usernames?"}, {"role": "assistant", "content": "You can add this alias:\ngit config --global alias.change-commits '!'\"f() { VAR=\\$1; OLD=\\$2; NEW=\\$3; shift 3; git filter-branch --env-filter \\\"if [[ \\\\\\\"\\$\\`echo \\$VAR\\`\\\\\\\" = '\\$OLD' ]]; then export \\$VAR='\\$NEW'; fi\\\" \\$@; }; f\"\n\nTo change the author name:\ngit change-commits GIT_AUTHOR_NAME \"old name\" \"new name\"\n\nor the email for only the last 10 commits:\ngit change-commits GIT_AUTHOR_EMAIL \"[email\u00a0protected]\" \"[email\u00a0protected]\" HEAD~10..HEAD\n\nAlias:\nchange-commits=\"!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \\\"if [[ \\\\\\\"$`echo $VAR`\\\\\\\" = '$OLD' ]]; then export $VAR='$NEW'; fi\\\" \\$@; }; f\"\n\nSource: https://github.com/brauliobo/gitconfig/blob/master/configs/.gitconfig"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  Unset"}, {"role": "assistant", "content": "The path has the attribute with special value \"false\";\nthis is specified by listing the name of the attribute\nprefixed with a dash - in the attribute list."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  guitool.<name>.needsFile"}, {"role": "assistant", "content": "Run the tool only if a diff is selected in the GUI. It guarantees\nthat FILENAME is not empty."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git add all except ignoring files in .gitignore file\nI am adding source control to a project that had none. The problem is that there are a lot of files to initially add to git with a .gitignore file, but I can't figure out how to add all files without including the files matching something in the .gitignore file.\ngit add *\n\nThe above command will not add any files because it detects files which are ignored by the .gitignore.\ngit add -f *\n\nThe above command will add all files including the files I wish to ignore.\nSo, how do I add all files while still adhering to the .gitignore file?"}, {"role": "assistant", "content": "I think you mean git add . which will add all of the files to the repo that AREN'T specified in the .gitignore - you can see these changes by typing git status\nThe . in bash usually means this directory and all other directories recursively, so if you do this from the bottom level of your repo, you should add all of the files.\nMy usual git flow is to create the .gitignore file and add the project files to the repo. I'll test the .gitignore file by typing git status after importing the files - if I see the files that I've added (for example only .php or .html, NOT .mp3 or .mov), then you can git add . to add all, and git commit -m \"initial commit\" to commit them and you should be set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to setup admin user with gitlab with LDAP authentication?\n\nI've just setup gitlab, but I'm completely lost with regards to admin user. The wiki seems silent about this topic, and google hasn't been of help either.\nSo, how do I setup admin users with gitlab on LDAP authentication?"}, {"role": "assistant", "content": "You can also set admin permissions to a user by doing something like this in the rails console:\nUser.find_by_email(\"[email\u00a0protected]\") do |i|\n    i.admin = true\n    i.save\nend"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -<num>  -C <num>  --context <num>"}, {"role": "assistant", "content": "Show <num> leading and trailing lines, and place a line\ncontaining -- between contiguous groups of matches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-worktree - Manage multiple working trees  list"}, {"role": "assistant", "content": "List details of each worktree.  The main worktree is listed first,\nfollowed by each of the linked worktrees.  The output details include\nwhether the worktree is bare, the revision currently checked out, the\nbranch currently checked out (or \"detached HEAD\" if none), \"locked\" if\nthe worktree is locked, \"prunable\" if the worktree can be pruned by the prune command."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_GLOB_PATHSPECS"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true will cause Git to treat all\npathspecs as glob patterns (aka \"glob\" magic)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Referencing a .css file in github repo as stylesheet in a .html file\n\nI've got a repository on github with a .css file in it. Is there any way to have github serve this file in a way that I can consume it in a web page?\nIn other words, I'd like to be able to reference this source file at github directly, from an HTML file on my local computer or a live domain. Something like:\n<link rel=\"stylesheet\"\n      type=\"text/css\"\n      href=\"http://github.com/foouser/barproject/master/xenu-is-my-lover.css\"\n/>\n\nI've tried including a<link> to the \"raw\" source file (http://raw.github.com...), but github serves its Content-Type as text/plain, and consequently, Chrome and FF are not adding its content as CSS styles to the page\u2014the file's data is being discarded and a warning is shown in the debugger consoles of the browsers."}, {"role": "assistant", "content": "Important: rawgit.com is shutting down. Read more about other alternatives here - https://rawgit.com/\n\nFound something really cool. You get the raw link as: http://raw.github.com/...\nSimply fetch the files from rawgit.com (or cdn.rawgit.com) instead of raw.github.com and DONE!\n\nUPDATE:\nYou can also use raw.githack.com if you want to serves raw files directly from Bitbucket or GitLab"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.guiDefault"}, {"role": "assistant", "content": "Set true to use the merge.guitool by default (equivalent to\nspecifying the --gui argument), or auto to select merge.guitool or merge.tool depending on the presence of a DISPLAY environment\nvariable value. The default is false , where the --gui argument\nmust be provided explicitly for the merge.guitool to be used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  difftool.<tool>.path"}, {"role": "assistant", "content": "Override the path for the given tool.  This is useful in case\nyour tool is not in the PATH."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I completely remove a file from a git repository?\nI noticed recently that the project files my text editors use (along with some other junk) got added the git repository for the project.  Since they aren't actually part of the project, I'd like to remove them, but git rm doesnt remove the old versions from the repository, and I couldnt find anything else that looks promising."}, {"role": "assistant", "content": "The tool you want is git filter-branch. Its usage is described here, but basically:\n$ git filter-branch --tree-filter 'rm -f my_file' HEAD\n\nwill remove \"my_file\" from every commit.\nNotice that this rewrites every commit, so if you push into a remote repository, you have to (a) force the update, and (b) everyone else who pulled from you will now have duplicate commits (since you rewrote the history), as described on the git rebase man page."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "cloning laravel project from github\n\nI'm new to GitHub and I found this site very useful for a lot of us. I came upon storing my Laravel project here in GitHub, but there's a problem every time I will clone it to be able to go to production, when I'm about to clone it at first, it always shows this error.\nWarning: require(C:\\xampp\\htdocs\\tourismPortal\\bootstrap/../vendor/autoload.php): failed to open stream: No such file or directory in C:\\xampp\\htdocs\\tourismPortal\\bootstrap\\autoload.php on line 17\n\nFatal error: require(): Failed opening required 'C:\\xampp\\htdocs\\tourismPortal\\bootstrap/../vendor/autoload.php' (include_path='.;C:\\xampp\\php\\PEAR') in C:\\xampp\\htdocs\\tourismPortal\\bootstrap\\autoload.php on line 17\n\nI know this will be solved by using composer update on it, but is there any way to prevent this error so that every time I clone it, I will go to production without encountering this error? Thanks, by the way, I'm using tortoisegit to clone, pull and push."}, {"role": "assistant", "content": "Clone your project\nGo to the folder application using cd command on your cmd or terminal\nRun composer install on your cmd or terminal\nCopy .env.example file to .env on the root folder. You can type copy .env.example .env if using command prompt Windows or cp .env.example .env if using terminal, Ubuntu\nOpen your .env file and change the database name (DB_DATABASE) to whatever you have, username (DB_USERNAME) and password (DB_PASSWORD) field correspond to your configuration.\nRun php artisan key:generate\nRun php artisan migrate\nRun php artisan serve\nGo to http://localhost:8000/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Docker - Gitlab container. SSH git login error\n\nI have a Docker container with a Gitlab application. When i execute a git clone/push/pull the command not work and output this message:\n\"fatal protocol error bad line length character: Welc\"\nThe server response is not the response expected by git (it is a response for a common ssh connection).\nThis occurs because there is an error during the connection, see:\n Mar 20 14:55:31 gitlab sshd[7934]: reverse mapping checking getaddrinfo for XXXX.XXXX.XXX.XX.static.host.gvt.net.br [XXXX.XXXX.XXX.XX] failed - POSSIBLE BREAK-IN ATTEMPT!\n Mar 20 14:55:32 gitlab sshd[7934]: Accepted publickey for git from XXXX.XXXX.XXX.XX port XXXX ssh2\n Mar 20 14:55:32 gitlab sshd[7934]: pam_loginuid(sshd:session): set_loginuid failed\n Mar 20 14:55:32 gitlab sshd[7934]: pam_unix(sshd:session): session opened for user git by (uid=0)\n Mar 20 14:55:32 gitlab sshd[7934]: pam_env(sshd:session): Unable to open env file: /etc/default/locale: No such file or directory\n Mar 20 14:55:32 gitlab sshd[7934]: error: PAM: pam_open_session(): Cannot make/remove an entry for the specified session\n\nInfo \n\nGitLab version: 6.6.5\nDocker version: 9.0\nHost: Ubuntu 13.10\nContainer: Ubuntu 13.10\n\nI think i need to enable something in my Docker container because outside a Docker container the gitlab works correctly.\nHow to fix this?\nThanks!"}, {"role": "assistant", "content": "I fix this following this article: \nhttp://www.linuxweblog.com/blogs/sandip/20090203/setloginuid-failed-opening-loginuid\nJust comment this line in file \"/etc/pam.d/sshd\":\nsession required        pam_loginuid.so"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -o  --only-matching"}, {"role": "assistant", "content": "Print only the matched (non-empty) parts of a matching line, with each such\npart on a separate output line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub folders have a white arrow on them\n\nI have recently pushed to github, and see a white arrow on one of my folders. \n\nand when i click on the folder, it does not open it. On my local machine, it has contents, but in github i cannot access them. What does this mean?"}, {"role": "assistant", "content": "Symptom\nCheck if locally you have a .git/ sub-folder under that folder.\nCause\nThat would mean the folder (locally) is a nested Git repository, whose tree SHA1 is recorded as a \"gitlink\" (gray folder with straight white arrow)\nWhat you would then see on GitHub is that gitlink: SHA-1 of the object refers to a commit in another repository, represented by an empty folder name. It is a nested Git repository.\nIf you see a folder @ xxx, then it is a submodule entry, meaning your own repository has a .gitmodules in it, which records, in addition of the gitlink, the actual URL of the remote repository.\nIt represents the object name of the commit that the super-project expects the nested submodule's working directory to be at.\nIn both cases (white arrow with a folder name, or white arrow with folder @ xxx, folder name and version), it is a Gitlink represented a nested Git repository: a placeholder for another Git repository, hence an empty folder. But in the second case, that empty folder would be referenced/visible in a special .gitmodules file.\n\nSolution (to remove the white arrow)\nIn order to restore that folder content:\nsubmodule:\nA git clone --recurse-submodules would restore the content of that submodule in your local repository (as opposed to a nested Git repo, where its URL is not recorded, and the content of the folder would remain empty)\nThe white arrow would remain on the remote repository, with folder @ version displaying what SHA1 of the submodule repository is referenced by your project.\nNested Git repository:\nAlternatively, you could, if you don't care about the history of that folder, delete locally its .git subfolder (assuming it is not a submodule, meaning it is not referenced in a .gitmodules file in your main repository), add, commit and push.\nThe white arrow would then disappear, and you would be able to access that folder content on GitHub.\nThen you would need to delete the gitlink entry:\ngit rm --cache client_folder \n# without a trailing slash: \n# not client_folder/ but client_folder\n\nFinally, you can add, commit and push that folder content."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-update-index"}, {"role": "assistant", "content": "Register file contents in the working tree to the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Download a GitLab private repository\n\nI want to use curl to download my private repo in GitLab. I know I can use the Gitlab API, but for some reason, It doesn't work.\nIs this possible? When I try to do it this way, it always returns the login page."}, {"role": "assistant", "content": "This is possible, just follow these steps:\n\nFirst, you have to create a \"Personal Access Token\":\n\nGo to Your Profile > Settings > Access Tokens.\n\nEnter a name for your \"Personal Access Token\".\n\nCheck \"api Access the authenticated user's API\"\n\n\nClick \"Create personal access token\"\n\nThe page will reload and save your new token.\n\nMake sure you save the token somewhere safe, you won't be able to view it again.\n\n\n\n\nNow that you have your \"Personal Access Token\", you need to get your project id to use the API:\n\nGo to https://gitlab.com/api/v4/projects?private_token=XXXXXXXXXXXXXXXXXXXX (replace the Xs with your new token)\n\nGet your project's id from the json.\n\n\n\n(alternatively you can just copy Project ID from its web page)\n\n\nNow you can call:\n wget -O your_project.tar.gz https://gitlab.com/api/v4/projects/0000000/repository/archive?private_token=XXXXXXXXXXXXXXXXXXXX\n\n\n\nAnd that'll download your project as a .tar.gz file.\nEdit: you can get tarball for specific commit/tag by adding &sha=... parameter to URL, like:\nhttps://gitlab.com/api/v4/projects/24470128/repository/archive?private_token=XXXXXXXXXXXXX&sha=606e81c69eff27eccbbc59a0546a9439780dff55"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Trigger Github Action only on new tags?\n\nIs there a possibility to trigger a GitHub action only if a new version (which comes with a new tag) is pushed? I don't want run them on every push into master, but I also want to avoid creating a release branch."}, {"role": "assistant", "content": "Use the following syntax:\non:\n  push:\n    # Pattern matched against refs/tags\n    tags:        \n      - '*'           # Push events to every tag not containing /\n\nFor hierarchical tags:\non:\n  push:\n    # Pattern matched against refs/tags\n    tags:        \n      - '**'           # Push events to every tag including hierarchical tags like v1.0/beta\n\nhttps://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#patterns-to-match-branches-and-tags"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I have multiple working directories with Git?\nI'm not sure if this is something supported by Git, but in theory it seems like it should work to me.\nMy workflow often involves my editing of files in multiple branches simultaneously. In other words, I often want to open a few files in one branch is while I edit the contents of another file in another branch.\nMy typical solution to this is to make two checkouts, but it's a shame I can't share branches and refs between them. What I would like is to just have two working directories managed by the same .git folder.\nI'm aware of local git clone solutions (the default, which is to hardlink shared objects, and the --shared option, which sets up an alternate object store with the original repo), but these solutions only cut down on disk space usage, and especially in the case of --shared, seem fraught with peril.\nIs there a way to use one .git folder, and have two working directories backed by it? Or is Git hardcoded to have just one working directory checked out at any time?"}, {"role": "assistant", "content": "Git 2.5 proposes since July 2015 a replacement for contrib/workdir/git-new-workdir: git worktree\nSee commit 68a2e6a by Junio C Hamano (gitster).\nThe release note mentions:\n\nA replacement for contrib/workdir/git-new-workdir that does not rely on symbolic links and make sharing of objects and refs safer by making the borrowee and borrowers aware of each other.\n\nSee commit 799767cc9 (Git 2.5rc2)\nThat means you now can do a git worktree add <path> [<branch>]\n\nCreate <path> and checkout <branch> into it. The new working directory\nis linked to the current repository, sharing everything except working\ndirectory specific files such as HEAD, index, etc.\nThe git worktree section adds:\nA git repository can support multiple working trees, allowing you to check out more than one branch at a time.\nWith git worktree add, a new working tree is associated with the repository.\nThis new working tree is called a \"linked working tree\" as opposed to the \"main working tree\" prepared by \"git init\" or \"git clone\".\nA repository has one main working tree (if it's not a bare repository) and zero or more linked working trees.\n\n\ndetails:\n\n\nEach linked working tree has a private sub-directory in the repository's\n$GIT_DIR/worktrees directory.\nThe private sub-directory's name is usually the base name of the linked working tree's path, possibly appended with a number to make it unique.\nFor example, when $GIT_DIR=/path/main/.git the command git worktree add /path/other/test-next next creates:\n\nthe linked working tree in /path/other/test-next and\nalso creates a $GIT_DIR/worktrees/test-next directory (or $GIT_DIR/worktrees/test-next1 if test-next is already taken).\n\nWithin a linked working tree:\n\n$GIT_DIR is set to point to this private directory (e.g. /path/main/.git/worktrees/test-next in the example) and\n$GIT_COMMON_DIR is set to point back to the main working tree's $GIT_DIR (e.g. /path/main/.git).\n\nThese settings are made in a .git file located at the top directory of the linked working tree.\nWhen you are done with a linked working tree you can simply delete it.\nThe working tree's administrative files in the repository will eventually be removed automatically (see gc.pruneworktreesexpire in git config), or you can run git worktree prune in the main or any linked working tree to\nclean up any stale administrative files.\n\n\nWarning: there is still a git worktree \"BUGS\" section to be aware of.\n\nThe support for submodules is incomplete.\nIt is NOT recommended to make multiple checkouts of a superproject.\n\n\nNote: with git 2.7rc1 (Nov 2015) you are able to list your worktrees.\nSee commit bb9c03b, commit 92718b7, commit 5193490, commit 1ceb7f9, commit 1ceb7f9, commit 5193490, commit 1ceb7f9, commit 1ceb7f9 (08 Oct 2015), commit 92718b7, commit 5193490, commit 1ceb7f9, commit 1ceb7f9 (08 Oct 2015), commit 5193490, commit 1ceb7f9 (08 Oct 2015), commit 1ceb7f9 (08 Oct 2015), and commit ac6c561 (02 Oct 2015) by Michael Rappazzo (rappazzo).\n(Merged by Junio C Hamano -- gitster -- in commit a46dcfb, 26 Oct 2015)\n\nworktree: add 'list' command\n\n\n'git worktree list' iterates through the worktree list, and outputs\ndetails of the worktree including the path to the worktree, the currently\nchecked out revision and branch, and if the work tree is bare.\n$ git worktree list\n/path/to/bare-source            (bare)\n/path/to/linked-worktree        abcd1234 [master]\n/path/to/other-linked-worktree  1234abc  (detached HEAD)\nThere is also porcelain format option available.\nThe porcelain format has a line per attribute.\n\nAttributes are listed with a label and value separated by a single space.\nBoolean attributes (like 'bare' and 'detached') are listed as a label only, and are only present if and only if the value is true.\nAn empty line indicates the end of a worktree\n\n\nFor instance:\n$ git worktree list --porcelain\n\nworktree /path/to/bare-source\nbare\n\nworktree /path/to/linked-worktree\nHEAD abcd1234abcd1234abcd1234abcd1234abcd1234\nbranch refs/heads/master\n\nworktree /path/to/other-linked-worktree\nHEAD 1234abc1234abc1234abc1234abc1234abc1234a\ndetached\n\n\nNote: if you MOVE a worktree folder, you need to manually update the gitdir file.\nSee commit 618244e (22 Jan 2016), and commit d4cddd6 (18 Jan 2016) by Nguy\u1ec5n Th\u00e1i Ng\u1ecdc Duy (pclouds).\nHelped-by: Eric Sunshine (sunshineco).\n(Merged by Junio C Hamano -- gitster -- in commit d0a1cbc, 10 Feb 2016)\nThe new doc in git 2.8 (March 2016) will include:\n\nIf you move a linked working tree, you need to update the 'gitdir' file\nin the entry's directory.\nFor example, if a linked working tree is moved to /newpath/test-next and its .git file points to /path/main/.git/worktrees/test-next, then update\n/path/main/.git/worktrees/test-next/gitdir to reference /newpath/test-next instead.\n\n\nBe careful when deleting a branch: before git 2.9 (June 2016), you could delete one in use in another working tree.\n\nWhen \"git worktree\" feature is in use, \"git branch -d\" allowed\ndeletion of a branch that is checked out in another worktree.\n\nSee commit f292244 (29 Mar 2016) by Kazuki Yamaguchi (rhenium).\nHelped-by: Eric Sunshine (sunshineco).\n(Merged by Junio C Hamano -- gitster -- in commit 4fca4e3, 13 Apr 2016)\n\nbranch -d: refuse deleting a branch which is currently checked out\n\n\nWhen a branch is checked out by current working tree, deleting the\nbranch is forbidden.\nHowever when the branch is checked out only by other working trees, deleting incorrectly succeeds.\nUse find_shared_symref() to check if the branch is in use, not just\ncomparing with the current working tree's HEAD.\n\n\nSimilarly, before git 2.9 (June 2016), renaming a branch checked out in another worktree did not adjust the symbolic HEAD in said other worktree.\nSee commit 18eb3a9 (08 Apr 2016), and commit 70999e9, commit 2233066 (27 Mar 2016) by Kazuki Yamaguchi (rhenium).\n(Merged by Junio C Hamano -- gitster -- in commit 741a694, 18 Apr 2016)\n\nbranch -m: update all per-worktree HEADs\n\n\nWhen renaming a branch, currently only the HEAD of current working tree\nis updated, but it must update HEADs of all working trees which point at\nthe old branch.\nThis is the current behavior, /path/to/wt's HEAD is not updated:\n % git worktree list\n /path/to     2c3c5f2 [master]\n /path/to/wt  2c3c5f2 [oldname]\n % git branch -m master master2\n % git worktree list\n /path/to     2c3c5f2 [master2]\n /path/to/wt  2c3c5f2 [oldname]\n % git branch -m oldname newname\n % git worktree list\n /path/to     2c3c5f2 [master2]\n /path/to/wt  0000000 [oldname]\n\nThis patch fixes this issue by updating all relevant worktree HEADs\nwhen renaming a branch.\n\n\nThe locking mechanism is officially supported with git 2.10 (Q3 2016)\nSee commit 080739b, commit 6d30862, commit 58142c0, commit 346ef53, commit 346ef53, commit 58142c0, commit 346ef53, commit 346ef53 (13 Jun 2016), and commit 984ad9e, commit 6835314 (03 Jun 2016) by Nguy\u1ec5n Th\u00e1i Ng\u1ecdc Duy (pclouds).\nSuggested-by: Eric Sunshine (sunshineco).\n(Merged by Junio C Hamano -- gitster -- in commit 2c608e0, 28 Jul 2016)\ngit worktree lock [--reason <string>] <worktree>\ngit worktree unlock <worktree>\n\n\nIf a linked working tree is stored on a portable device or network share\nwhich is not always mounted, you can prevent its administrative files from\nbeing pruned by issuing the git worktree lock command, optionally\nspecifying --reason to explain why the working tree is locked.\n<worktree>: If the last path components in the working tree's path is unique among working trees, it can be used to identify worktrees.\nFor example if you only have to working trees at \"/abc/def/ghi\" and \"/abc/def/ggg\", then \"ghi\" or \"def/ghi\" is enough to point to the former working tree.\n\n\nGit 2.13 (Q2 2017) add a lock option in commit 507e6e9 (12 Apr 2017) by Nguy\u1ec5n Th\u00e1i Ng\u1ecdc Duy (pclouds).\nSuggested-by: David Taylor (dt).\nHelped-by: Jeff King (peff).\n(Merged by Junio C Hamano -- gitster -- in commit e311597, 26 Apr 2017)\n\nAllow to lock a worktree immediately after it's created.\nThis helps prevent a race between \"git worktree add; git worktree lock\" and\n\"git worktree prune\".\n\nSo git worktree add' --lock  is the equivalent of git worktree lock after git worktree add,   but without race condition.\n\nGit 2.17+ (Q2 2018) adds git worktree move / git worktree remove: see this answer.\n\nGit 2.19 (Q3 2018) add a \"--quiet\" option to make \"git worktree add\"  less\nverbose.\nSee commit 371979c (15 Aug 2018) by Elia Pinto (devzero2000).\nHelped-by: Martin \u00c5gren [email\u00a0protected], Duy Nguyen (pclouds), and Eric Sunshine (sunshineco).\n(Merged by Junio C Hamano -- gitster -- in commit a988ce9, 27 Aug 2018)\n\nworktree: add --quiet option\n\n\nAdd the '--quiet' option to git worktree, as for the other git commands.\n'add' is the only command affected by it since all other commands, except 'list', are currently silent by default.\n\n\nNote that \"git worktree add\" used to do a \"find an available name with stat\nand then mkdir\", which is race-prone.\nThis has been fixed with Git 2.22 (Q2 2019) by using mkdir and reacting to EEXIST in a loop.\nSee commit 7af01f2 (20 Feb 2019) by Michal Suchanek (hramrach).\n(Merged by Junio C Hamano -- gitster -- in commit 20fe798, 09 Apr 2019)\n\nworktree: fix worktree add race\n\n\nGit runs a stat loop to find a worktree name that's available and\nthen does mkdir on the found name.\nTurn it to mkdir loop to avoid another invocation of worktree add finding the same free name and creating the directory first.\n\n\nGit 2.22 (Q2 2019) fixes the logic to tell if a Git repository has a working tree protects \"git branch -D\" from removing the branch that is currently checked\nout by mistake.\nThe implementation of this logic was broken for repositories with unusual name, which unfortunately is the norm for submodules these days.\nSee commit f3534c9 (19 Apr 2019) by Jonathan Tan (jhowtan).\n(Merged by Junio C Hamano -- gitster -- in commit ec2642a, 08 May 2019)\n\nworktree: update is_bare heuristics\n\n\nWhen \"git branch -D <name>\" is run, Git usually first checks if that\nbranch is currently checked out.\nBut this check is not performed if the Git directory of that repository is not at \"<repo>/.git\", which is the case if that repository is a submodule that has its Git directory stored as \"super/.git/modules/<repo>\", for example.\nThis results in the branch being deleted even though it is checked out.\nThis is because get_main_worktree() in worktree.c sets is_bare on a\nworktree only using the heuristic that a repo is bare if the worktree's\npath does not end in \"/.git\", and not bare otherwise.\nThis is_bare code was introduced in 92718b7 (\"worktree: add details to the worktree struct\", 2015-10-08, Git v2.7.0-rc0), following a pre-core.bare heuristic.\nThis patch does 2 things:\n\nTeach get_main_worktree() to use is_bare_repository() instead, introduced in 7d1864c (\"Introduce is_bare_repository() and core.bare configuration variable\", 2007-01-07, Git v1.5.0-rc1) and updated in e90fdc3 (\"Clean up work-tree handling\", 2007-08-01, Git v1.5.3-rc4).\nThis solves the \"git branch -D <name>\" problem described above.\nHowever...\nIf a repository has core.bare=1 but the \"git\" command is being run from one of its secondary worktrees, is_bare_repository() returns false (which is fine, since there is a worktree available).\nAnd, treating the main worktree as non-bare when it is bare causes issues: for example, failure to delete a branch from a secondary worktree that is referred to by a main worktree's HEAD, even if that main worktree is bare.\n\nIn order to avoid that, also check core.bare when setting is_bare.\nIf core.bare=1, trust it, and otherwise, use is_bare_repository().\n\n\nWith Git 2.29 (Q4 2020), the \"worktree\" API offers a better determination of a worktree path.\nSee commit 918d8ff, commit 1c4854e, commit 246756f, commit 62573a5 (31 Jul 2020) by Eric Sunshine (sunshineco).\n(Merged by Junio C Hamano -- gitster -- in commit 197253e, 10 Aug 2020)\n\nworktree: drop bogus and unnecessary path munging\nSigned-off-by: Eric Sunshine\n\n\nThe content of .git/worktrees/<id>/gitdir must be a path of the form \"/path/to/worktree/.git\".\nAny other content would be indicative of a corrupt \"gitdir\" file.\nTo determine the path of the worktree itself one merely strips the \"/.git\" suffix, and this is indeed how the worktree path was determined from inception.\nHowever, 5193490442 (\"worktree: add a function to get worktree details\", 2015-10-08, Git v2.7.0-rc0 -- merge listed in batch #7) extended the path manipulation in a mysterious way.\nIf it is unable to strip \"/.git\" from the path, then it instead reports the current working directory as the linked worktree's path:\nif (!strbuf_strip_suffix(&worktree_path, \"/.git\")) {\n    strbuf_reset(&worktree_path);\n    strbuf_add_absolute_path(&worktree_path, \".\");\n    strbuf_strip_suffix(&worktree_path, \"/.\");\n}  \n\nThis logic is clearly bogus; it can never be generally correct behavior. It materialized out of thin air in 5193490442 with neither explanation nor tests to illustrate a case in which it would be desirable.\nIt's possible that this logic was introduced to somehow deal with a corrupt \"gitdir\" file, so that it returns some sort of meaningful value, but returning the current working directory is not helpful. In fact, it is quite misleading (except in the one specific case when the current directory is the worktree whose \"gitdir\" entry is corrupt).\nMoreover, reporting the corrupt value to the user, rather than fibbing about it and hiding it outright, is more helpful since it may aid in diagnosing the problem.\nTherefore, drop this bogus path munging and restore the logic to the original behavior of merely stripping \"/.git\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --pickaxe-regex"}, {"role": "assistant", "content": "Treat the <string> given to -S as an extended POSIX regular\nexpression to match."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pack.depth"}, {"role": "assistant", "content": "The maximum delta depth used by git-pack-objects when no\nmaximum depth is given on the command line. Defaults to 50.\nMaximum value is 4095."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "override git from Xcode with homebrew version\nI've installed XCode and therefore git is there as well. Since i want to have a newer version of git I installed using homebrew.\nBut the homebrew version of git is never called since my PATH looks like this\n/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/X11/bin\n\nwhich means the /usr/bin/git is allways called before /usr/local/bin/git.\nIs there a way to change that without changing the PATH?"}, {"role": "assistant", "content": "Xcode is actually using the GIT that is stored in /Applications/Xcode.app/Contents/Developer/usr/bin.  The same version of GIT gets installed in /usr/bin when you installed the command line tools as part of Xcode installation.  So, you won't be able to change what Xcode is using (unless you are willing to muck with the contents of the Xcode package).  If, from a terminal application, you want to use the homebrew-installed GIT then you have two options:\n\nReference GIT with the full path as /usr/local/bin/git ...  For this case you can create an alias like alias mgit=/usr/local/bin/git and then use mgit ... from the terminal\nChange the path as PATH=/usr/local/bin:$PATH either in your .bashrc or .zshrc if you use zsh file (or each time you start a terminal at the command line)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Install npm module from gitlab private repository\nWe are using GitLab for our private project. There are some forked libraries from github, that we want to install as npm module. Installing that module directly from npm is ok and for example this:\nnpm install git://github.com/FredyC/grunt-stylus-sprite.git\n\n...works correctly too, but doing the same for GitLab, just changing domain gets me this error.\nnpm WARN `git config --get remote.origin.url` returned wrong result (git://git.domain.com/library/grunt-stylus-sprite.git)\nnpm ERR! git clone git://git.domain.com/library/grunt-stylus-sprite.git Cloning into bare repository 'D:\\users\\Fredy\\AppData\\Roaming\\npm-cache\\_git-remotes\\git-git-domain-com-library-grunt-stylus-sprite-git-6f33bc59'...\nnpm ERR! git clone git://git.domain.com/library/grunt-stylus-sprite.git fatal:unable to connect to git.domain.com:\nnpm ERR! git clone git://git.domain.com/library/grunt-stylus-sprite.git git.domain.com[0: 77.93.195.214]: errno=No error\nnpm ERR! Error: Command failed: Cloning into bare repository 'D:\\users\\Fredy\\App\nData\\Roaming\\npm-cache\\_git-remotes\\git-git-domain-com-library-grunt-stylus-spr\nite-git-6f33bc59'...\nnpm ERR! fatal: unable to connect to git.domain.com:\nnpm ERR! git.domain.com[0: xx.xx.xx.xx]: errno=No error\n\nFrom the web interface of GitLab, I have this URL\n[email\u00a0protected]:library/grunt-stylus-sprite.git. Running this against npm install it tries to install git module from npm registry.\nHowever using URL: [email\u00a0protected]:library/grunt-stylus-sprite.git is suddenly asking me for the password. My SSH key doesn't include passphrase, so I assume it wasn't able to load that key. Maybe there is some configuration for that I have missed ? Key is located at standard location in my home directory with the name \"id_rsa\".\nI am on Windows 7 x64.\nUPDATE\nSince NPM v3 there is built-in support for GitLab and other sources (BitBucket, Gist), from where you can install packages. It works for public and private ones so it's not exactly related to this, but some might find it useful.\nnpm install gitlab:<gitlabname>/<gitlabrepo>[#<commit-ish>]\n\nCheck out documentation: https://docs.npmjs.com/cli/install\nI you want to work with private repos in Gitlab you are required to manage your credentials/auth-token in your .npmrc. See here: https://docs.gitlab.com/ee/user/packages/npm_registry/#authenticate-to-the-package-registry"}, {"role": "assistant", "content": "You have the following methods for connecting to a private gitlab repository\nWith SSH\ngit+ssh://[email\u00a0protected]:Username/Repository#{branch|tag}\ngit+ssh://[email\u00a0protected]/Username/Repository#{branch|tag}\n\nWith HTTPS\ngit+https://[email\u00a0protected]/Username/Repository#{branch|tag}\n\nWith HTTPS and deploy token\ngit+https://<token-name>:<token>@gitlab.com/Username/Repository#{branch|tag}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Make git diff show UTF8 encoded characters properly\nI have a file with Swedish characters in it (\u00e5\u00e4\u00f6) encoded with UTF8.\nIf I cat the file it displays fine, but if I do git diff the special characters are printed, for example, as <F6>.\nExample git diff output:\n-            name: 'Magler<F6>d, S<F6>der<E5>sen',\n\nWhat I wanted to see:\n-            name: 'Magler\u00f6d, S\u00f6der\u00e5sen',\n\nI found another question related to git and encoding problems: git, msysgit, accents, utf-8, the definitive answers\nIt says all problems should be fixed in git version 1.7.10. I have version 1.8.1.2\nWhat can I do to make git diff properly display \u00e5\u00e4\u00f6?"}, {"role": "assistant", "content": "git is dumping out raw bytes.  In this case, it doesn't care what your file's encoding is.  The highlighted <F6> you're seeing is coming from less, which is presumably configured as your PAGER.  Try setting:\nLESSCHARSET=UTF-8"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --src-prefix=<prefix>"}, {"role": "assistant", "content": "Show the given source prefix instead of \"a/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-bundle"}, {"role": "assistant", "content": "Move objects and refs by archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  GIT_CONFIG_COUNT  GIT_CONFIG_KEY_<n>  GIT_CONFIG_VALUE_<n>"}, {"role": "assistant", "content": "If GIT_CONFIG_COUNT is set to a positive number, all environment pairs\nGIT_CONFIG_KEY_<n> and GIT_CONFIG_VALUE_<n> up to that number will be\nadded to the process\u2019s runtime configuration. The config pairs are\nzero-indexed. Any missing key or value is treated as an error. An empty\nGIT_CONFIG_COUNT is treated the same as GIT_CONFIG_COUNT=0, namely no\npairs are processed. These environment variables will override values\nin configuration files, but will be overridden by any explicit options\npassed via git -c . This is useful for cases where you want to spawn multiple git commands\nwith a common configuration but cannot depend on a configuration file,\nfor example when writing scripts."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -j <n>  --jobs <n>"}, {"role": "assistant", "content": "The number of submodules fetched at the same time.\nDefaults to the submodule.fetchJobs option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --man-path"}, {"role": "assistant", "content": "Print the manpath (see man(1) ) for the man pages for\nthis version of Git and exit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Not able to checkout branch even after removing worktree and running worktree prune\n\nI create a worktree for branch using the following command:\nGit add worktree <path> <branch-name>\n\nThis created a new worktree for me and checked out the branch  at the path \nNow I thought of deleting/removing the worktree. Ran following commands:\nrm -rf <path>\ngit worktree prune\n\nThis should ideally remove the worktree and remove the reference for that path too. So now I should be able to checkout the branch. But when I run following command to checkout to that branch:\ngit checkout <branch-name>\n\nI get this error:\nfatal: '<branch-name>' is already checked out at ''\n\nCould someone help me with what is going on."}, {"role": "assistant", "content": "I worked around this by erasing .git/worktrees/<branch-name> from the repository directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-restore - Restore working tree files  -s <tree>  --source=<tree>"}, {"role": "assistant", "content": "Restore the working tree files with the content from the given\ntree. It is common to specify the source tree by naming a\ncommit, branch or tag associated with it. If not specified, the contents are restored from HEAD if --staged is\ngiven, otherwise from the index. As a special case, you may use \"A...B\" as a shortcut for the\nmerge base of A and B if there is exactly one merge base. You can\nleave out at most one of A and B , in which case it defaults to HEAD ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --commit  --no-commit"}, {"role": "assistant", "content": "Perform the merge and commit the result. This option can\nbe used to override --no-commit.\nOnly useful when merging. With --no-commit perform the merge and stop just before creating\na merge commit, to give the user a chance to inspect and further\ntweak the merge result before committing. Note that fast-forward updates do not create a merge commit and\ntherefore there is no way to stop those merges with --no-commit.\nThus, if you want to ensure your branch is not changed or updated\nby the merge command, use --no-ff with --no-commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Visual Studio - Remote: HTTP Basic: Access denied Error encountered while cloning the remote repository: Git failed with a fatal error\n\nI'm working with Visual Studio and am trying to clone a online repo from a  server where gitlab is running. Let's call the server https://gitlab.example.com\nI get the following error when I try to clone the repo \nRemote: HTTP Basic: Access denied\nError encountered while cloning the remote repository: Git failed with a fatal error.\nAuthentication failed for 'https://gitlab.example.com/username/test.git/'\n\nWhen I try it, I get promted to enter a username and password for the server. I entered the user credentials of the user which created the repo. \nI've found a similar problem with an answer here on stackoverflow, but this didn't work for me.\nI am using Visual Studio 2017 Enterprise 15.7.2"}, {"role": "assistant", "content": "Windows must have saved your git credentials which needs to be updated/remove. Below steps worked for me in VS2017.\nGo to \"Credential Manager\" from Windows \"Start\" and under \"Generic Credentials\" select your git url. Click on the right side arrow, it should expand and you should see two links \"Edit\" & \"Remove from vault\". \nClick on latter link (recommendable), restart VS, open your project & do a sync/pull request, it should ask your credentials to enter and you should be good to go. Thanks"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git rebase merge conflict\n\nI forked a github repo and worked on my github repo.\nI have made pull-requests and it was completed. \nAfter that the upstream had some more commits so now I want to rebase, I guess thats what I have to do.\nBut I'm getting these merge conflicts:\nFirst, rewinding head to replay your work on top of it...\nApplying: Issue 135 homepage refresh\nUsing index info to reconstruct a base tree...\n<stdin>:17: trailing whitespace.\n      %h4 \nwarning: 1 line adds whitespace errors.\nFalling back to patching base and 3-way merge...\nAuto-merging app/views/layouts/application.html.haml\nCONFLICT (content): Merge conflict in app/views/layouts/application.html.haml\nAuto-merging app/views/home/index.html.haml\nCONFLICT (content): Merge conflict in app/views/home/index.html.haml\nAuto-merging app/views/home/_group_projects.html.haml\nCONFLICT (content): Merge conflict in app/views/home/_group_projects.html.haml\nFailed to merge in the changes.\nPatch failed at 0001 Issue 135 homepage refresh\n\nWhen you have resolved this problem run \"git rebase --continue\".\nIf you would prefer to skip this patch, instead run \"git rebase --skip\".\nTo check out the original branch and stop rebasing run \"git rebase --abort\".\n\nI don't know how to fix these, please help."}, {"role": "assistant", "content": "Rebasing can be a real headache. You have to resolve the merge conflicts and continue rebasing. For example you can use the merge tool (which differs depending on your settings)\ngit mergetool\n\nThen add your changes and go on\ngit rebase --continue\n\nGood luck"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Where does Git store files?\nI just ran the following commands on my Ruby on Rails project:\ngit init\ngit add .\ngit commit -a -m 'Initial'\n\nWhere does Git actually store this repository? (It's on my local machine, but where?)"}, {"role": "assistant", "content": "It will create your repository in the .git folder in the current directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  -t <tool>  --tool=<tool>"}, {"role": "assistant", "content": "Use the diff tool specified by <tool>.  Valid values include\nemerge, kompare, meld, and vimdiff. Run git difftool --tool-help for the list of valid <tool> settings. If a diff tool is not specified, git difftool will use the configuration variable diff.tool .  If the\nconfiguration variable diff.tool is not set, git difftool will pick a suitable default. You can explicitly provide a full path to the tool by setting the\nconfiguration variable difftool.<tool>.path . For example, you\ncan configure the absolute path to kdiff3 by setting difftool.kdiff3.path . Otherwise, git difftool assumes the\ntool is available in PATH. Instead of running one of the known diff tools, git difftool can be customized to run an alternative program\nby specifying the command line to invoke in a configuration\nvariable difftool.<tool>.cmd . When git difftool is invoked with this tool (either through the -t or --tool option or the diff.tool configuration variable)\nthe configured command line will be invoked with the following\nvariables available: $LOCAL is set to the name of the temporary\nfile containing the contents of the diff pre-image and $REMOTE is set to the name of the temporary file containing the contents\nof the diff post-image. $MERGED is the name of the file which is\nbeing compared. $BASE is provided for compatibility\nwith custom merge tool commands and has the same value as $MERGED ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools"}, {"role": "assistant", "content": "NAME git-difftool - Show changes using common diff tools"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --default-prefix"}, {"role": "assistant", "content": "Use the default source and destination prefixes (\"a/\" and \"b/\").\nThis overrides configuration variables such as diff.noprefix , diff.srcPrefix , diff.dstPrefix , and diff.mnemonicPrefix (see git-config (1))."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Password authentication is temporarily disabled as part of a brownout. Please use a personal access token instead [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nIssue on adding SSH key to GitHub\n\n                                (8 answers)\n                            \n\nClosed 2 years ago.\nThe community reviewed whether to reopen this question 2 years ago and left it closed:\n\nOriginal close reason(s) were not resolved\n\n\n\n\nI was using a username password for pushing my code. It was working for several months, but suddenly I'm not able to do it and am getting this error:\nUsername for 'https://github.com': shreyas-jadhav\nPassword for 'https://[email\u00a0protected]':\nremote: Password authentication is temporarily disabled as part of a brownout. Please use a personal access token instead.\nremote: Please see https://github.blog/2020-07-30-token-authentication-requirements-for-api-and-git-operations/ for more information.\n\nPlease note that the link doesn't help. Even using the generated token doesn't help.\n\nModerator Note: This is part of a planned and soon-to-be permanent service change by GitHub"}, {"role": "assistant", "content": "Generate a new token from GitHub's developer settings\n\nUpdate the remote URL:\ngit remote set-url origin https://<token>@github.com/<Git_URL>\n\n\nPull once:\ngit pull https://<token>@<Git_URL>.git\n\n\n\nAnd you are good to go."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git rename many files and folders\nI am trying to rename many files in my application and need to be able to do a rename in all subdirectories from the app root through git (i.e. git mv %filenamematch% %replacement%) that only replaces the matching text. I'm no good with bash scripting though.\nupdate: would be good it if also renamed directories that match as well!"}, {"role": "assistant", "content": "This should do the trick:\nfor file in $(git ls-files | grep %filenamematch% | sed -e 's/\\(%filenamematch%[^/]*\\).*/\\1/' | uniq); do git mv $file $(echo $file | sed -e 's/%filenamematch%/%replacement%/'); done\n\nTo follow what this is doing, you'll need to understand piping with \"|\" and command substitution with \"$(...)\". These powerful shell constructs allow us to combine several commands to get the result we need. See Pipelines and Command Substitution.\nHere's what's going on in this one-liner:\n\ngit ls-files: This produces a list of files in the Git repository. It's similar to what you could get from ls, except it only outputs Git project files. Starting from this list ensures that nothing in your .git/ directory gets touched.\n\n| grep %filenamematch%: We take the list from git ls-files and pipe it through grep to filter it down to only the file names containing the word or pattern we're looking for.\n\n| sed -e 's/\\(%filenamematch%[^/]*\\).*/\\1/': We pipe these matches through sed (the stream editor), executing (-e) sed's s (substitute) command to chop off any / and subsequent characters after our matching directory (if it happens to be one).\n\n| uniq: In cases where the match is a directory, now that we've chopped off contained directories and files, there could be many matching lines. We use uniq to make them all into one line.\n\nfor file in ...: The shell's \"for\" command will iterate through all the items (file names) in the list. Each filename in turn, it assigns to the variable \"$file\" and then executes the command after the semicolon (;).\n\nsed -e 's/%filenamematch%/%replacement%/': We use echo to pipe each filename through sed, using it's substitute command again--this time to perform our pattern replacement on the filename.\n\ngit mv: We use this git command to mv the existing file ($file) to the new filename (the one altered by sed).\n\n\nOne way to understand this better would be to observe each of these steps in isolation. To do that, run the commands below in your shell, and observe the output. All of these are non-destructive, only producing lists for your observation:\n\ngit ls-files\n\ngit ls-files | grep %filenamematch%\n\ngit ls-files | grep %filenamematch% | sed -e 's/\\(%filenamematch%[^/]*\\).*/\\1/'\n\ngit ls-files | grep %filenamematch% | sed -e 's/\\(%filenamematch%[^/]*\\).*/\\1/' | uniq\n\nfor file in $(git ls-files | grep %filenamematch% | sed -e 's/\\(%filenamematch%[^/]*\\).*/\\1/' | uniq); do echo $file; done\n\nfor file in $(git ls-files | grep %filenamematch% | sed -e 's/\\(%filenamematch%[^/]*\\).*/\\1/' | uniq); do echo $file | sed -e 's/%filenamematch%/%replacement%/'; done"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --bare"}, {"role": "assistant", "content": "Treat the repository as a bare repository.  If GIT_DIR\nenvironment is not set, it is set to the current working\ndirectory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  -d  --delete"}, {"role": "assistant", "content": "All listed refs are deleted from the remote repository. This is\nthe same as prefixing all refs with a colon."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.renames"}, {"role": "assistant", "content": "Whether and how Git detects renames.  If set to \"false\",\nrename detection is disabled. If set to \"true\", basic rename\ndetection is enabled.  If set to \"copies\" or \"copy\", Git will\ndetect copies, as well.  Defaults to true.  Note that this\naffects only git diff Porcelain like git-diff and git-log , and not lower level commands such as git-diff-files ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Does \"Allow access to this project with a CI_JOB_TOKEN\" in GitLab work between private repositories?\n\nI am part of a private group (our team in our department). All underlying projects and subgroups can only be private (this is how GitLab works) and we all have at least Report-level access to those. Not to be confused with the personal namespace for each user!\nI have created a subgroup with multiple repositories inside for a large Django project I am working on. One of the repositories (main, also includes manage.py as well as the Django project main files that are used by django-admin to configure and run the whole project) is referencing a couple of the others as submodules (Django apps).\nI am trying to create a building job using Kaniko that is configured in the main repo and uses both the repo's own code as well as all the submodules to make the application complete. Sadly, I am encountering an authentication problem.\nEven though I am the owner of the subgroup as well as the repos inside, cloning a submodule apparently still requires username and password. My setup does not allow me to use git config to add the required credentials - an automatically generated CI user and CI_JOB_TOKEN - I decided to look into sharing these credentials among all repos that are in some way linked (main repo + submodules).\nIn the CI/CD section of the Web UI in GitLab I have the following option:\n\nI tried to set the path to the project to my main repo that uses the current repo as a submodule. However, I am getting\nThe target_project that you are attempting to access does not exist or you don't have permission to perform this action\n\nThe project does exist (tried with and without the .git suffix) so the only thing that remains is, yet again a credentials issue.\nI might have missed a hint but the official documentation doesn't say that private repos cannot share a token."}, {"role": "assistant", "content": "I can confirm that is possible to add the permission to a private project. The problem is the confusing gitlab UI that does not accept the entire URL of a repo and requires the user to inform just the final part.\nI had a repo with the following url:\nhttps://gitlab.com/mygroup/mysubgroup/myreponame\n\nI was adding the entire url path to it, I was getting the same error:\nThe target_project that you are attempting to access does not exist or you don't have permission to perform this action\n\nThen I realized that all I needed to do was add just the final part:\nmygroup/mysubgroup/myreponame\n\nAnd it worked."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %n"}, {"role": "assistant", "content": "newline"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  -4  --ipv4"}, {"role": "assistant", "content": "Use IPv4 addresses only, ignoring IPv6 addresses."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Leaving Github, how to change the origin of a Git repo?\nI'm hosting a project in Github, but now I purchased a plan with Dreamhost that includes shell access and Git.\n      Github [Origin]\n       /         \\\n  pull/           \\pull\n     /push     push\\\n    /               \\  \nLaptop           Dreamhost\n(cloned)          (cloned)\n\nI would like to delete my repo from Github, and starting push directly to DH.\nHow do I change origin in my Laptop, and should I delete the origin in Dreamhost?"}, {"role": "assistant", "content": "git remote rename origin github\ngit remote add origin <DreamHost-git-URL>\n# test and make sure the DreamHost origin works properly for fetch and push\ngit remote rm github\n\nI prefer using the 'git remote' command instead of screwing about with the .git/config file by hand."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  raw-permissive"}, {"role": "assistant", "content": "This is the same as raw except that no sanity checks on\nthe numeric epoch and local offset are performed.  This can\nbe useful when trying to filter or import an existing history\nwith e.g. bogus timezone values."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I make git commit messages divide into multiple lines?\nWhen I use git log to check out my commit explanatory note I want it to look like this:\n1. what I changed\n2. blank line\n3. why I changed it\n\n...being in 3 lines not 1 like this: \n1. what i changed  2. blank line 3. why i changed\n\nHowever, git log shows it in one line. So, how do I get this to happen using git commit -m?"}, {"role": "assistant", "content": "You just use the following command:\n$ git commit -m \"1. what i changed\n> 2. blank line\n> 3. why i changed\"\n\nIn your terminal, just hit 'enter' for a new line. The commit message won't end until you add the closing quote. The git log will look like:\n$ git log\ncommit abcde2f660c707br2d20411581c4183170c3p0c2\nAuthor: Alex Pan <[email\u00a0protected]>\nDate:   Tue Apr 28 20:52:44 2015 -0700\n\n    1. what i changed\n    2. blank line\n    3. why i changed"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-describe"}, {"role": "assistant", "content": "Give an object a human readable name based on an available ref"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git \"error: The branch 'x' is not fully merged\"\nHere are the commands I used from the master branch\ngit branch experiment\ngit checkout experiment\n\nThen I made some changes to my files, committed the changes, and pushed the new branch to GitHub.\ngit commit . -m 'changed files'\ngit push -u origin experiment\n\nLater on I decided to merge my experiment branch into the master branch.\ngit checkout master\ngit merge experiment\n\nFinally I pushed the changes to GitHub.\ngit push -u origin master\n\nAll went well until I tried deleting my experiment branch using\ngit branch -d experiment\n\nI got the error message:\n\nerror: The branch 'experiment' is not fully merged.\nIf you are sure you want to delete it, run 'git branch -D experiment'.\n\nI'm a bit new to git, and I don't know how much more I could possibly merge the two branches. What am I missing here?"}, {"role": "assistant", "content": "Note Wording changed in response to the commments. Thanks @slekse\nThat is not an error, it is a warning. It means the branch you are about to delete contains commits that are not reachable from any of: its upstream branch, or HEAD (currently checked out revision). In other words, when you might lose commits\u00b9.\nIn practice it means that you probably amended, rebased (including squash merge) or filtered commits and they don't seem identical.\nTherefore you could avoid the warning by checking out a branch that does contain the commits that you're about un-reference by deleting that other branch.\u00b2\nYou will want to verify that you in fact aren't missing any vital commits:\ngit log --graph --left-right --cherry-pick --oneline master...experiment\n\nThis will give you a list of any nonshared between the branches. In case you are curious, there might be a difference without --cherry-pick and this difference could well be the reason for the warning you get:\n\n--cherry-pick\nOmit any commit that introduces the same change as another commit on the \"other side\" when the set of commits are limited with symmetric difference. For example, if you have two branches, A and B, a usual way to list all commits on only one side of them is with --left-right, like the example above in the description of that option. It however shows the commits that were cherry-picked from the other branch (for example, \"3rd on b\" may be cherry-picked from branch A). With this option, such pairs of commits are excluded from the output.\n\n\n\u00b9 they're really only garbage collected after a while, by default. Also, the git-branch command does not check the revision tree of all branches. The warning is there to avoid obvious mistakes.\n\u00b2 (My preference here is to just force the deletion instead, but you might want to have the extra reassurance)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Reverting an interactive git rebase\nAfter completing a feature branch, during a git rebase -i I accidentally removed all my commits. I'm not completely sure but I suspect that instead of squashing my commits, I replaced the entire entry with a commit message.\nhttp://shafiulazam.com/gitbook/4_interactive_rebasing.html says:\n\nThe last useful thing that interactive\n  rebase can do is drop commits for you.\n  If instead of choosing 'pick',\n  'squash' or 'edit' for the commit\n  line, you simply remove the line, it\n  will remove the commit from the\n  history.\n\nMy question is: is there a way to revert/undo this?"}, {"role": "assistant", "content": "If you have just done the rebase, you can try as mentioned here:\ngit reset --hard ORIG_HEAD\n\nas Jakub Nar\u0119bski details:\n\nORIG_HEAD is previous state of HEAD, set by commands that have possibly dangerous behavior, to be easy to revert them.\n  It is less useful now that Git has reflog: HEAD@{1} is roughly equivalent to ORIG_HEAD (HEAD@{1} is always last value of HEAD, ORIG_HEAD is last value of HEAD before dangerous operation).\n\nIf you have executed some operations since the rebase, the reflog can still help."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Add new commit to the existing Git tag\n\nI have created a Git tag as v1.1 using \ngit tag -a v1.1 -m 'my version 1.1'\n\nand I pushed that tag. Later, I made some changes related to v1.1. Now when I push new changes and check the git tag using \ngit describe it is showing me v1.1-g2dcc97.\nHow can I add my new commit to the existing tag?"}, {"role": "assistant", "content": "You can't put a new commit into an existing tag without breaking an important Git guideline: Never(*) modify commits that you have published.\nTags in Git aren't meant to be mutable. Once you push a tag out there, leave it alone.\nYou can, however, add some changes on top of v1.1 and release something like v1.1.1 or v1.2. One way of doing that would be\n# Create a new branch from tag v1.1\ngit checkout -b newbranch v1.1\n\n# Do some work and commit it\n\n# Create a new tag from your work\ngit tag -a -m \"Tag version 1.1.1, a bugfix release\" v1.1.1\n\n(*) Unless you have a really super special reason for doing so, and only if you completely understand the implications, and even then, don't make a habit of it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git: generate a single patch across multiple commits\nThis is the situation:\n\nWe created a \"private\" repo (say our-repo) based off an existing open-source git repo (say source-repo).\nWe have been developing code and have around 20 merges into our repo. So, the repo moved from \"State_Initial\" to \"State_Current\".\n\nNow, for business reasons, we want to hand-over all our development to a third party. Based on some legal issues, the only option is we give them a \"single\" patch file with all our changes. That is a squashed patch between \"State_Initial\" and \"State_Current\".\nI looked around, and found \ngit format-patch -X\n\nBut, it generates \"n\" .patch files.\nIs there a way to create a single patch file, so that if we create a repo based off \"source-repo\" and apply the patch, it takes us to \"State_Current\"?"}, {"role": "assistant", "content": "The following command creates a single .patch file that contains multiple commits.\ngit format-patch cc1dde0dd^..6de6d4b06 --stdout > foo.patch\n\nYou can then apply it like so:\ngit am foo.patch\n\nNote: Be sure to use ^.. instead of .. if you want the first commit SHA to be included."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  <path>\u2026\u200b"}, {"role": "assistant", "content": "The <paths> parameters, when given, are used to limit\nthe diff to the named paths (you can give directory\nnames and get diff for all files under them)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there an upper limit to the number of commits a git repository can handle?\nI'm wondering if there's an upper limit to the number of commits that a git repository can handle.\nIn a solo project I'm working on right now, I've been coding locally, committing/pushing changes in git, then pulling the changes on my development server.\nI treat this as an easier alternative to working locally and uploading changes via FTP... Fortunately/Unfortunately it's such an easy workflow that I sometimes go through many edit/commit/push/pull/browser-refresh cycles while coding.\nI'm wondering if this is going to turn around and bite me somewhere down the line.  If it's likely to be a problem, I'm wondering how I can avoid that trouble ... It seems like a rebase might be the way to go, especially since I won't have to worry about conflicting branches etc."}, {"role": "assistant", "content": "Well the \"upper limit\" would likely be the point at which a SHA1 collision occurs, but since the SHAs are 40 hexadecimal digits long (16^40 ~ 1.4x10^48 possibilities), it's so close to zero possibility that it's not even funny. So there's roughly a zero percent chance you'll have any problems for at least the next several millennia.\nHyperbolic Example (just for fun): 1 commit/minute (just changing one file -> three new SHAs used (file, commit, tree) = 3 new shas used / minute = ... = 1.6M shas used / year = 1.6 Billion shahs / millennia = 1x10^-37 % used each millenia... (at 1000 files/commmit/min, it's still 3.6x10^-35%)\nThat being said, if you want to clean up your history, squashing them down with rebase is probably your best bet. Just make sure you understand the implications if you've shared the repo publicly at all.\nYou might also want to garbage collect after rebasing to free up some space (make sure the rebase worked right first, though, and you might need to tell it to collect everything or it will, by default, not collect anything newer than two-weeks old)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --ignore-blank-lines"}, {"role": "assistant", "content": "Ignore changes whose lines are all blank."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  (space)"}, {"role": "assistant", "content": "for a successfully pushed fast-forward;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  --mixed"}, {"role": "assistant", "content": "Resets the index but not the working tree (i.e., the changed files\nare preserved but not marked for commit) and reports what has not\nbeen updated. This is the default action. If -N is specified, removed paths are marked as intent-to-add (see git-add )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %>>( <N> ) , %>>|( <M> )"}, {"role": "assistant", "content": "similar to %>( <N> ) , %>|( <M> ) respectively, except that if the next\nplaceholder takes more spaces than given and\nthere are spaces on its left, use those\nspaces"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  --soft"}, {"role": "assistant", "content": "Does not touch the index file or the working tree at all (but\nresets the head to <commit> , just like all modes do). This leaves\nall your changed files \"Changes to be committed\", as git status would put it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  -C<n>"}, {"role": "assistant", "content": "Ensure at least <n> lines of surrounding context match before\nand after each change.  When fewer lines of surrounding\ncontext exist they all must match.  By default no context is\never ignored.  Implies --apply . See also INCOMPATIBLE OPTIONS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --reschedule-failed-exec  --no-reschedule-failed-exec"}, {"role": "assistant", "content": "Automatically reschedule exec commands that failed. This only makes\nsense in interactive mode (or when an --exec option was provided). This option applies once a rebase is started. It is preserved for the whole\nrebase based on, in order, the command line option provided to the initial git\nrebase , the rebase.rescheduleFailedExec configuration (see git-config or \"CONFIGURATION\" below), or it defaults to false. Recording this option for the whole rebase is a convenience feature. Otherwise\nan explicit --no-reschedule-failed-exec at the start would be overridden by\nthe presence of a rebase.rescheduleFailedExec=true configuration when git\nrebase --continue is invoked. Currently, you cannot pass --[no-]reschedule-failed-exec to git rebase --continue ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git, Heroku: pre-receive hook declined\nI am in the process of setting up a git repository and attempting to link it to Heroku. When I run the command\ngit push heroku master\n\nI receive\nCounting objects: 7, done.\nDelta compression using up to 2 threads.\nCompressing objects: 100% (5/5), done.\nWriting objects: 100% (7/7), 714 bytes, done.\nTotal 7 (delta 1), reused 0 (delta 0)\n\n-----> Heroku receiving push\n\n !     Heroku push rejected due to an unrecognized error.\n !     We've been notified, see http://support.heroku.com if the problem persists.\n\n\nTo [email\u00a0protected]:morning-stream-3712.git\n ! [remote rejected] master -> master (pre-receive hook declined)\nerror: failed to push some refs to '[email\u00a0protected]:morning-stream-3712.git'\n\nHow can I get my application pushed to Heroku?"}, {"role": "assistant", "content": "Make sure you are pushing a repo that contains a proper supported app ( Rails, Django etc.) and you are not just pushing some random repo to test it out.\nNewbie in Heroku: Error when push my app to Heroku\nIf that is not the case and you are pushing what you think is a valid app, contact Heroku support and they will fix it for you."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git: How do you add an external directory to the repository?\nI want to add an external directory to an existing repository.\nExternal Dir:\n/home/some/directory\nWorking Dir:\n/htdocs/.git\nIf I attempt the following command from the /htdocs dir:\n\ngit add /home/some/directory\n\nI get an error:\nfatal: '/home/some/directory' is outside repository"}, {"role": "assistant", "content": "If I need to do something like that I would normally move that external file or directory into my git repo and symlink it's original location to the new one.\nmv /home/some/directory /htdocs/directory\nln -s /htdocs/directory /home/some/\ngit add ./directory\n\nI use this technique when I am developing a plug-in for an application that I want to keep under version control but have to store in a specific location."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_NO_LAZY_FETCH"}, {"role": "assistant", "content": "Setting this Boolean environment variable to true tells Git\nnot to lazily fetch missing objects from the promisor remote\non demand."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -r <n>[:<n>]  --revision=<n>[:<n>]"}, {"role": "assistant", "content": "is supported, non-numeric args are not:\nHEAD, NEXT, BASE, PREV, etc \u2026\u200b"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "how to delete all commit history in github? [duplicate]\nThis question already has answers here:\n                                \n                            \n\n\n\n\nMake the current commit the only (initial) commit in a Git repository?\n\n                                (19 answers)\n                            \n\nClosed 8 years ago.\n\n\n\nI want to delete all commit history but keep the code in its current state because, in my commit history, there are too many unused commits.\nHow can I do it?\nIs there any git command can do this?\ngit filter-branch ?\ngit rebase ?\n... \n\nMy code is hosted on github.com."}, {"role": "assistant", "content": "Deleting the .git folder may cause problems in your git repository. If you want to delete all your commit history but keep the code in its current state, it is very safe to do it as in the following:\n\nCheckout/create orphan branch (this branch won't show in git branch command):\ngit checkout --orphan latest_branch\n\n\nAdd all the files to the newly created branch:\ngit add -A\n\n\nCommit the changes:\ngit commit -am \"commit message\"\n\n\nDelete main (default) branch (this step is permanent):\ngit branch -D main\n\n\nRename the current branch to main:\ngit branch -m main\n\n\nFinally, all changes are completed on your local repository, and force update your remote repository:\ngit push -f origin main\n\n\n\nPS: This will not keep your old commit history around. Now you should only see your new commit in the history of your git repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  prune"}, {"role": "assistant", "content": "Remove all notes for non-existing/unreachable objects."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why is github asking me username/password although I setup SSH authentication?\n\nI have followed these instructions to set up the SSH key for github. But now when I do\n> git pull\nUsername for 'https://github.com': \n\nin a repository on the local computer I have taken the public SSH key from, I am still asked for a username/password. Did I miss a step?"}, {"role": "assistant", "content": "You need to tell Git to use SSH protocol instead of HTTPS. On the repository page on GitHub, select Clone or Download and Use SSH. You will get a URL for the SSH protocol in the form [email\u00a0protected]:<user>/<repo>.git.\nThen run the following command in your working tree to tell Git to use this URL instead of the current one:\ngit remote set-url origin [email\u00a0protected]:<user>/<repo>.git\n\nThis is also explained in the GitHub Help.\nThe method above won\u2019t cause the repository to be cloned again, it just changes the communication protocol used for future synchronization between your local repo and GitHub.\nAlternatively, you could set up a new remote using git remote add <new-remote-name> <url> and then git pull <new-remote-name> but Git would keep track of both protocols as separate remotes, so I do not recommend this."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %ge"}, {"role": "assistant", "content": "reflog identity email"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "different push/pull urls for git submodule\n\nI'm using the git superproject pattern in a large project which is deployed by a Teamcity build agent which does not have a repository account, however the repository is set up to allow anonymous cloning. For this reason I have set up the submodules with their http:// url rather than their git url. The issue with this is that the repository rejects http pushes:\nTotal 0 (delta 0), reused 0 (delta 0)\nerror: RPC failed; result=22, HTTP code = 401\nfatal: The remote end hung up unexpectedly\nfatal: The remote end hung up unexpectedly\n\nSo every time I update the submodules when switching branches, I have to do a git remote add-url --push to add the git:// url.\nIs there any way to set up the submodules in the superproject such that they already use the http:// url for pulling and the git:// url for pushing?"}, {"role": "assistant", "content": "The LibreOffice project also uses submodules and includes:\n\nBy default you submodules repository is in a state called 'detached HEAD' that means that the commit checked-out -- which is the one that the super-project (core) need -- is not associated with a local branch name.\nDon't forget to add a correct pushurl for the submodule you are working on or you will not be able to commit.\n\n$ editor .git/modules/submodule/config\n\n\nAnd in the section [remote \"origin\"] add:\n\npushurl = ssh://logerrit/submodule\n\n(similar to soulseekah's comment) (in your case, use a git:// address)\nYou can also do it through (within a submodule)\ngit config remote.origin.pushurl git://...\n\nIf you don't, as illulstrated in this project, you would get a:\nfatal: The remote end hung up unexpectedly"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Sonarqube quality badges on gitlab\n\nI have a project on gitlab for which I'm trying to display quality badges from sonarqube on. For that I used the \"Get project badges\" button on the bottom right corner of your sonarqube project overview. They give you for each badge a Markdown which you can easily copy & paste to your README.md file on gitlab/github.\n\nMarkdown looks like this: [![Bugs](https://yourprojectonsonarqube/api/project_badges/measure?project=your_project_key&metric=bugs)](https://yourprojectonsonarqube/dashboard?id=your_project_key)\nFor me it looks like this on the README.md file(logged in as maintainer):\n\nFor other users on the project which also have maintainer or developer permissions it looks like this:\n\nIf you click on the missing images, it will redirect you to sonarqube and ask for you to log in. Afterwards the images are visible. How can I change that? I want them to always be visible to every user of my project."}, {"role": "assistant", "content": "If this is for a private project on SonarQube, this is most likely a permissions issue.\nThere is currently an open issue for SonarQube to allow this to work: https://jira.sonarsource.com/browse/MMF-1942\nAs an FYI, this feature has already been implemented for SonarCloud: https://jira.sonarsource.com/browse/MMF-1178."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Given a git refname, can I detect whether it's a hash, tag, or branch?\nI'm writing a script that will take in a specification used as the base for creating a branch. Thus, it will have something like this:\ngit checkout -b $newbranch $startingpoint\n\nNow, startingpoint can be specified either as a branch name, a tag, or a SHA1.\nLater in the script, I need to do different things based on what startingpoint actually is.  Is had thought git rev-parse would give me this information, but I cannot seem to bend it to my whim.\nIs there a git way, preferably a porcelain, to get the information I seek?\nUpdate\nI used the show-ref information to craft the following shell function:\ngit_ref_type() {\n    [ -n \"$1\" ] || die \"Missing ref name\"\n\n    if git show-ref -q --verify \"refs/heads/$1\" 2>/dev/null; then\n        echo \"branch\"\n    elif git show-ref -q --verify \"refs/tags/$1\" 2>/dev/null; then\n        echo \"tag\"\n    elif git show-ref -q --verify \"refs/remote/$1\" 2>/dev/null; then\n        echo \"remote\"\n    elif git rev-parse --verify \"$1^{commit}\" >/dev/null 2>&1; then\n        echo \"hash\"\n    else\n        echo \"unknown\"\n    fi\n    return 0\n}\n\nThis seems to work well for now, though it's been only very lightly tested."}, {"role": "assistant", "content": "You can probably use the show-ref command to do (mostly) what you want.  Given some string, if it refers to a tag then...\ngit show-ref --verify refs/tags/$thestring\n\n...will be true.  If it's a branch name, then...\ngit show-ref --verify refs/heads/$thestring\n\n...will be true.  If the string fails both of those tests, then...\ngit rev-parse --verify \"$thestring^{commit}\"\n\n...will tell you if it otherwise refers to a commit (which could be a complete SHA1, a partial SHA1, HEAD, or possibly something else that doesn't fall into the previous two categories."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  branch.<name>.remote"}, {"role": "assistant", "content": "When on branch <name>, it tells git fetch and git push which remote to fetch from or push to.  The remote to push to\nmay be overridden with remote.pushDefault (for all branches).\nThe remote to push to, for the current branch, may be further\noverridden by branch.<name>.pushRemote .  If no remote is\nconfigured, or if you are not on any branch and there is more than\none remote defined in the repository, it defaults to origin for\nfetching and remote.pushDefault for pushing.\nAdditionally, . (a period) is the current local repository\n(a dot-repository), see branch.<name>.merge 's final note below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-pack-redundant"}, {"role": "assistant", "content": "Find redundant pack files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.proxySSLCertPasswordProtected"}, {"role": "assistant", "content": "Enable Git\u2019s password prompt for the proxy SSL certificate.  Otherwise OpenSSL\nwill prompt the user, possibly many times, if the certificate or private key\nis encrypted. Can be overridden by the GIT_PROXY_SSL_CERT_PASSWORD_PROTECTED environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  git config tar.tar.xz.command \"xz -c\""}, {"role": "assistant", "content": "Configure a \"tar.xz\" format for making LZMA-compressed tarfiles.\nYou can use it specifying --format=tar.xz , or by creating an\noutput file like -o foo.tar.xz ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-symbolic-ref - Read, modify and delete symbolic refs"}, {"role": "assistant", "content": "DESCRIPTION Given one argument, reads which branch head the given symbolic\nref refers to and outputs its path, relative to the .git/ directory.  Typically you would give HEAD as the <name>\nargument to see which branch your working tree is on. Given two arguments, creates or updates a symbolic ref <name> to\npoint at the given branch <ref>. Given --delete and an additional argument, deletes the given\nsymbolic ref. A symbolic ref is a regular file that stores a string that\nbegins with ref: refs/ .  For example, your .git/HEAD is\na regular file whose content is ref: refs/heads/master ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git push existing repo to a new and different remote repo server?\nSay I have a repository on git.fedorahosted.org and I want to clone this into my account at github to have my own playground aside from the more \"official\" repo on fedorahosted.\nWhat would be the steps to initially copy that over?\nWithin github there is this nice \"fork\" button, but I can't use this for obvious reasons.\nAnd how would I track changes in the fedorahosted repo into the github one?"}, {"role": "assistant", "content": "Create a new repo at github.\nClone the repo from fedorahosted to your local machine.\ngit remote rename origin upstream\ngit remote add origin URL_TO_GITHUB_REPO\ngit push origin master\n\nNow you can work with it just like any other github repo. To pull in patches from upstream, simply run git pull upstream master && git push origin master.\nGitHub has recently renamed its master branch to main so (depending on whether your branch is called master or main) in step 5 you might have to use git push origin main and for pulling patches from upstream git pull upstream main && git push origin main, otherwise you will receive an error message."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  ahead-behind:<committish>"}, {"role": "assistant", "content": "Two integers, separated by a space, demonstrating the number of\ncommits ahead and behind, respectively, when comparing the output\nref to the <committish> specified in the format."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  --"}, {"role": "assistant", "content": "Do not interpret any more arguments as options."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --patience"}, {"role": "assistant", "content": "Generate a diff using the \"patience diff\" algorithm."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to clone all repos at once from GitHub?\nI have a company GitHub account and I want to back up all of the repositories within, accounting for anything new that might get created for purposes of automation. I was hoping something like this:\ngit clone [email\u00a0protected]:company/*.git \n\nor similar would work, but it doesn't seem to like the wildcard there. \nIs there a way in Git to clone and then pull everything assuming one has the appropriate permissions?"}, {"role": "assistant", "content": "Simple script using GitHub CLI (no API keys)\nHere's a simple solution using the official GitHub CLI tool, gh - no need for API keys and can handle up to 4,000 private repos.\nFirst time only: log in with gh for private repos, and follow the prompts:\ngh auth login\n\nNow you can clone thousands of repos under a new ./myorgname folder. Replace myorgname with your org name:\ngh repo list myorgname --limit 4000 | while read -r repo _; do\n  gh repo clone \"$repo\" \"$repo\"\ndone\n\nThe default limit is 30.\nThis should work on Mac or Linux.\nFor Windows:\n\nRun this bash script in Git Bash, part of Git for Windows - or in WSL\nOr try the comment here by @Karson for a similar script in PowerShell\n\nSetup\nTo get the GitHub CLI tool:\n\nMac - brew install gh\nLinux or Windows - see GitHub install guide\n\nFuture proofing: the GitHub CLI tool will be supported long-term as and when the GitHub API changes.  Some older answers here don't work any more due to this.\nOptional: update existing checkouts\nTo update repo folders already on disk, as well as clone new repos, the script needs to check for failure of the gh repo clone, like this:\ngh repo list myorgname --limit 1000 | while read -r repo _; do\n  gh repo clone \"$repo\" \"$repo\" -- -q 2>/dev/null || (\n    cd \"$repo\"\n    # Handle case where local checkout is on a non-main/master branch\n    # - ignore checkout errors because some repos may have zero commits, \n    #\u00a0so no main or master\n    git checkout -q main 2>/dev/null || true\n    git checkout -q master 2>/dev/null || true\n    git pull -q\n  )\ndone\n\nTips\n\nDon't want to create repos in the ./myorgname folder?  Drop the second \"$repo\" argument to gh repo clone to create them in the current directory\n\nTo filter results:\n\n--no-archived - omit archived repositories\n--source - show only non-forks\n\nTip: Handling thousands of repos\nThis script works with up to about 4,000 repos - see @Ryan Fisher comment below, and comment with your results.\nThe gh repo list command uses the GitHub Search API, which is paginated when returning many results.  There is a limit of 4,000 on the number of repos that can be searched.\nTo work around any limits:\n\ncheck the gh repo list command is returning what you expect\nmake sure you are omitting archived and forked repos\nsee gh repo list --help to filter by language, topic, etc\n\nOr you can use a different answer (based on API requests) that replaces the gh repo list command or the whole script.\nTip: Faster cloning for many repos\nIf you are cloning a large number of repos, you can speed up this script with GNU parallel.\ngh repo list <ORG_NAME> --limit <LIMIT> --json nameWithOwner --jq '.[].nameWithOwner' | \\\n   parallel -j<JOBS> gh repo clone\n\nThis uses gh's internal jq library, rather than a standalone jq.\nIf you are using the \"update existing checkouts\" option above, you will need to merge this into the above script - perhaps putting the loop contents into a separate bash -c \"...\" command under parallel.\nYou can also use xargs -P to clone repos in parallel - see this answer.\nBackground\n\nGitHub CLI login doc\nScript commands above were derived from an issue comment and gist by davegallant\nGNU parallel script contributed by @RyanFisher"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %ct"}, {"role": "assistant", "content": "committer date, UNIX timestamp"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -z"}, {"role": "assistant", "content": "When --raw , --numstat , --name-only or --name-status has been\ngiven, do not munge pathnames and use NULs as output field terminators. Without this option, pathnames with \"unusual\" characters are quoted as\nexplained for the configuration variable core.quotePath (see git-config )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to reset Heroku app and re-commit everything?\nI'm building an application which I'm also testing in Heroku. I ran into some problem today and had to rollback one commit in my local git repo, but Heroku now won't recognize my changes saying that \"everything is up to date\".\nSo, running\ngit push heroku master\n\nheroku responds with \nEverything up-to-date\n\nwhich isn't true.\nUPDATE: Things I've tried\ngit push -f heroku master\ngit push --force heroku master\ngit push heroku +master\ngit push --force heroku +master\n\nDid some changes in the source code and then\ngit add.\ngit commit -a -m \"Message\" #(Then this commit shows in my git explorer)\ngit push heroku master #Everything up-to-date"}, {"role": "assistant", "content": "Sounds weird. Maybe try pushing a different branch would do?\ngit branch production\ngit checkout production\n#do some code changes\ngit commit -am \"some desperate code changes to try fix heroku\"\ngit push heroku production:master\n\nCreating a new production branch is what I want you to test. Besides, it's nice to have a production branch that you can use to deploy.\nIf it doesn't work, then I think the problem runs deeper and you need help from heroku.\nEDIT: \nAdd the heroku releases addon too. Rolling back is as easy as heroku rollback"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Jenkins could not run git\nI've installed Jenkins on my mac (osx lion). But I couldn't get it work. This is the stacktrace I've got:\nStarted by user anonymous\n\nCheckout:workspace / /Users/Shared/Jenkins/Home/jobs/test/workspace - hudson.remoting.LocalChannel@1c0a0847\nUsing strategy: Default\nCheckout:workspace / /Users/Shared/Jenkins/Home/jobs/test/workspace - hudson.remoting.LocalChannel@1c0a0847\nCloning the remote Git repository\nCloning repository origin\nError trying to determine the git version: Error performing command: /usr/local/git/ --version\nCannot run program \"/usr/local/git/\" (in directory \"/Users/Shared/Jenkins/Home/jobs/test/workspace\"): error=13, Permission denied\nAssuming 1.6\nERROR: Error cloning remote repo 'origin' : Could not clone [email\u00a0protected]:iRest.git\nERROR: Cause: Error performing command: /usr/local/git/ clone -o origin [email\u00a0protected]:iRest.git /Users/Shared/Jenkins/Home/jobs/test/workspace\nCannot run program \"/usr/local/git/\": error=13, Permission denied\nTrying next repository\nERROR: Could not clone repository\nFATAL: Could not clone\nhudson.plugins.git.GitException: Could not clone\n    at hudson.plugins.git.GitSCM$2.invoke(GitSCM.java:1046)\n    at hudson.plugins.git.GitSCM$2.invoke(GitSCM.java:972)\n    at hudson.FilePath.act(FilePath.java:783)\n    at hudson.FilePath.act(FilePath.java:765)\n    at hudson.plugins.git.GitSCM.checkout(GitSCM.java:972)\n    at hudson.model.AbstractProject.checkout(AbstractProject.java:1195)\n    at hudson.model.AbstractBuild$AbstractRunner.checkout(AbstractBuild.java:571)\n    at hudson.model.AbstractBuild$AbstractRunner.run(AbstractBuild.java:460)\n    at hudson.model.Run.run(Run.java:1404)\n    at hudson.model.FreeStyleBuild.run(FreeStyleBuild.java:46)\n    at hudson.model.ResourceController.execute(ResourceController.java:88)\n    at hudson.model.Executor.run(Executor.java:238)"}, {"role": "assistant", "content": "The solution for me was to set the git path in the Manage Jenkins > Global Tool Configuration settings. In the Git section, I changed the Path to Git executable to /usr/local/bin/git."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Unable to connect to git remote repository\n\nAfter performing git push -u origin master, I got:\nfatal: unable to access 'https://github.com/xxxx/xxxx.git': Failed to connect to 127.0.0.1 port 8087: Connection refused\n\nSame error occurred, when I tried to clone other repositories, too.\nThe Port 8087 doesn't seem to be busy. What could go wrong?\nEdit:\nwhen I do clone from git:// instead of https://, it works just fine."}, {"role": "assistant", "content": "This happens because a proxy is configured in git.\nSince it's https proxy (and not http) git config http.proxy and git config --global http.proxy can't help.\n\nTake a look at your git configuration\ngit config --global -l\n\nIf you have nothing related to https proxy like https_proxy=... the problem is not here.\nIf you have something related to https proxy then remove it from the file ~/.gitconfig and try again\n\nIf it still doesn't work, unset environment variables\nCheck your environment variables :\nenv|grep -i proxy  \n\nYou should have one or several lines with https_proxy=...\nUnset one by one with :\nunset https_proxy (or HTTPS_PROXY depending of the name of the variable)\n\nCheck environment variables again\nenv|grep -i proxy\n\nIf it shows nothing you should be good.\nNote: This solution can applies to http and https proxy problems. just the variables name changes from https to http"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I deal with corrupted Git object files?\nI did a Git pull when I was near my quota, and as a result (so I think),  got a corrupted file:\n$ git pull\nwalk dffbfa18916a9db95ef8fafc6d7d769c29a445aa\nfatal: object d4a0e7599494bfee2b5351113895b43c351496b3 is corrupted\n\n$ git fsck --full\nbad sha1 file: .git/objects/66/b55c76947b1d38983e0944f1e6388c86f07a1b.temp\nfatal: object d4a0e7599494bfee2b5351113895b43c351496b3 is corrupted\n\n$ git cat-file -t d4a0e7599494bfee2b5351113895b43c351496b3\nerror: unable to find d4a0e7599494bfee2b5351113895b43c351496b3\nfatal: git cat-file d4a0e7599494bfee2b5351113895b43c351496b3: bad file\n\nHow can I solve this corruption?\n.git/objects/66/b55c76947b1d38983e0944f1e6388c86f07a1b.temp was zero bytes; deleting it did nothing to solve my problem (same errors)."}, {"role": "assistant", "content": "You can use \"find\" for remove all files in the /objects directory with 0 in size with the command:\nfind .git/objects/ -size 0 -delete\n\nBackup is recommended."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git error fatal: unable to stat '*': No such file or directory\nI ran into this error, and found very little documentation on how to fix it online. I got the error by trying to run the command git add ., and received this response:\nfatal: unable to stat 'myPathToAFile': No such file or directory"}, {"role": "assistant", "content": "To solve the problem, I removed the file from git, then re-added it by doing the following:\ngit rm \"myPathToAFile\"\ngit add .\ngit commit -am 'my commit'\nHope this helps someone else!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  -e"}, {"role": "assistant", "content": "Exit with zero status if <object> exists and is a valid\nobject. If <object> is of an invalid format, exit with non-zero\nstatus and emit an error on stderr."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Merging between forks in GitHub\nI forked a GitHub repository. Then I pushed some changes to my fork. Then the original repository merged my changes and some others. Now, I want to merge those changes I'm missing. I tried a simple pull followed by push, but this yield my commits in duplicate. What's the best way to do it?"}, {"role": "assistant", "content": "You probably have a \"remote\" for each repository. You need to pull from one remote and push to the other.\nIf you originally cloned from your fork, that remote will be called \"origin\". If you haven't added it already, you'll need to add the other repository as another remote:\ngit remote add <shortname> git://github.com/<ownerName>/repo.git\n\nAfter that's all set up, you should indeed be able to (github changed default branch from master to main, change as necessary)\ngit pull <shortname> master\ngit push origin\n\nRemember, git pull is nothing more than a macro that does git fetch and git merge, in that order. You just need to fetch the list of commits from the other repository and then merge his branch into your tree. Merging should do the right thing with your commits on both branches.\nGitHub, in all its perpetual awesomeness, gives you a shortcut, of course. There's a \"fast-forward\" button on your fork of the repository that you can use to catch your fork up if you're entirely merged into the other side."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Microservices: How to store source code of many microservices?\nCurrently, I have 20 microservices for one project. And every microservice stored in separate GIT reposotiry. \nSubsequently, the number of services will increase to 200 (or more).\nEvery service has unit tests and integration tests. Every service has build in TeamCity (Continuous integration server). \nQuestion: How to store source code of 200 microservices for one project? In one repository or in separate repositories?"}, {"role": "assistant", "content": "Unless those micro-services are tightly coupled (meaning it wouldn't make sense to download only some of them, and you would only work with all of them), keeping them each in a separate Git repo is recommended.\nBut you can still reference them as submodule in a parent repo in order to keep track of their state at any given time."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to pull a remote branch locally?\n\nI created a project on Gitlab and cloned it on my computer. So I only have one branch (master) locally (git branch only shows master). A colleague created a new branch. So now there are 2 branches on Gitlab but not on my computer.\nHow do I do to have the branch created by my co-worker on my computer too so as git branch shows both master and  new-branch ?\nThank you."}, {"role": "assistant", "content": "First, update your remote-tracking branches (local replicas of the remote branches, with which you can't interact in the same way you do with your own local branches). It's typically done with\ngit fetch\n\n(without any parameters, --all is implied)\nYour local repo will then know every new branch your coworker could have created since you last fetched (or pulled, since a pull does a fetch as a first step).\nThen you'll be able to create a local counterpart for any of these remote branches with\ngit checkout <branchName>\n\nHere, note that <branchName> is meant to be given without the <remote>/ prefix, or else git will attempt to check out the so-named remote-tracking branch, which it can't, by design. At this point it will then resolve the branch ref to the commit which this remote-tracking branch points to, check this commit out directly, resulting in a detached HEAD state. (which is no big deal but can unsettle people starting to use git)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  dirty"}, {"role": "assistant", "content": "A working tree is said to be \"dirty\" if\nit contains modifications which have not been committed to the current branch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff HEAD:file1 file2"}, {"role": "assistant", "content": "compares an (o)bject and a (w)ork tree entity;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What are some good ways to manage a changelog using Git? [closed]\nClosed. This question needs to be more focused. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\n\n\nClosed 3 years ago.\n\n\nThe community reviewed whether to reopen this question 3 months ago and left it closed:\n\nOriginal close reason(s) were not resolved\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI've been using Git for a while now, and I recently started using it to tag my releases so that I could more easily keep track of changes and be able to see which version each of our clients is running (unfortunately the code currently mandates that each client have their own copy of the PHP site; I'm changing this, but it's slow-going).\nIn any case, we're starting to build some momentum, and I thought it would be really good to be able to show people what has changed since the last release. The problem is, I haven't been maintaining a changelog, because I don't have a good idea of how to go about it. For this particular time, I can run through the log and manually create one, but that will get tiring very quickly.\nI tried googling \"git changelog\" and \"git manage changelog\", but I didn't find anything that really talked about the workflow of code changes and how that coincides with the changelog. We're currently following Rein Henrichs' development workflow and I would love something that went along with that.\nIs there a standard approach that I am missing, or is this an area where everybody does their own thing?"}, {"role": "assistant", "content": "This was in 2015, but for the sake of future searchers, it's now possible to generate gorgeous logs with:\ngit log --oneline --decorate\n\nOr, if you want it even prettier (with color for the terminal):\ngit log --oneline --decorate --color\n\nPiping that output to ChangeLog is what I currently use in all my projects, and it's simply amazing."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitrevisions - Specifying revisions and ranges for Git  <rev>~[<n>] , e.g. HEAD~, master~3"}, {"role": "assistant", "content": "A suffix ~ to a revision parameter means the first parent of\nthat commit object.\nA suffix ~<n> to a revision parameter means the commit\nobject that is the <n>th generation ancestor of the named\ncommit object, following only the first parents.  I.e. <rev>~3 is\nequivalent to <rev>^^^ which is equivalent to <rev>^1^1^1 .  See below for an illustration of\nthe usage of this form."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  --unreachable"}, {"role": "assistant", "content": "Print out objects that exist but that aren\u2019t reachable from any\nof the reference nodes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  hash"}, {"role": "assistant", "content": "In Git\u2019s context, synonym for object name ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "When to delete branches in Git?\n\nSuppose we have an application that's stable. \nTomorrow, someone reports a big ol' bug that we decide to hotfix right away. So we create a branch for that hotfix off of \"master\", we name it \"2011_Hotfix\", and we push it up so that all of the developers can collaborate on fixing it.\nWe fix the bug, and merge \"2011_Hotfix\" into \"master\" as well as into the current development branch. And push \"master.\"\nWhat do we do with \"2011_Hotfix\" now? Should it just sit out there as a branch forever until the end of time or should we now delete it, since it has served its purpose? It seems unclean to just leave branches lying around everywhere, as the list of branches will likely become very long, most of which aren't even necessary anymore.\nIn the event that it should be deleted, what will happen to its history? Will that be maintained, even though the actual branch is no longer available? Also, how would I remove a remote branch?"}, {"role": "assistant", "content": "You can safely remove a branch with git branch -d yourbranch. If it contains unmerged changes (ie, you would lose commits by deleting the branch), git will tell you and won't delete it.\nSo, deleting a merged branch is cheap and won't make you lose any history.\nTo delete a remote branch, use git push origin :mybranch, assuming your remote name is origin and the remote branch you want do delete is named mybranch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-server-info - Update auxiliary info file to help dumb servers"}, {"role": "assistant", "content": "DESCRIPTION A dumb server that does not do on-the-fly pack generations must\nhave some auxiliary information files in $GIT_DIR/info and\n$GIT_OBJECT_DIRECTORY/info directories to help clients discover\nwhat references and packs the server has.  This command\ngenerates such auxiliary files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do you see / show a git merge conflict resolution that was done, given a merge commit SHA1?\nWhen you resolve a conflict, then stage the changes, then do a git diff, it shows you two columns of +'s and -'s, one for \"ours\" and one for \"theirs\".  Given a merge commit in a repo's git history, how do I see that resolution, which was done by someone else?  In other instances, I've seen it before (in gitk, I think), but I can't seem to determine it for this SHA1 that I have."}, {"role": "assistant", "content": "If you know the ref, then git show <MERGE_COMMIT> will show you the resolution done (if any) for the merge commit.\nFor log, use git log -p -c or git log -p --cc. From the manpage of git log:\n   -c\n       With this option, diff output for a merge commit shows the differences from each \n       of the parents to the merge result simultaneously instead of showing pairwise \n       diff between a parent and the result one at a time. Furthermore, it lists only \n       files which were modified from all parents.\n\n   --cc\n       This flag implies the -c option and further compresses the patch output by \n       omitting uninteresting hunks whose contents in the parents have only two \n       variants and the merge result picks one of them without modification."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I use Notepad++ (or other) with msysgit?\nHow do I use Notepad++ (or any other editor besides vim) with msysgit?\nI tried all of the following to no avail:\ngit config --global core.editor C:\\Program Files\\Notepad++\\notepad++.exe\n\ngit config --global core.editor \"C:\\Program Files\\Notepad++\\notepad++.exe\"\n\ngit config --global core.editor C:/Program Files/Notepad++/notepad++.exe\n\ngit config --global core.editor C:\\\\Program Files\\\\Notepad++\\\\notepad++.exe"}, {"role": "assistant", "content": "git config --global core.editor \"'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\"\n\nOr, for 64-bit Windows and a 32-bit install of Notepad++:\ngit config --global core.editor \"'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\"\n\nOr, the following can be issued on the command line on either 32-bit or 64-bit Windows.  It will pull the location of notepad++.exe from the registry and configure git to use it automatically:\nFOR /F \"usebackq tokens=2*\" %A IN (`REG QUERY \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\notepad++.exe\" /ve`) DO git config --global core.editor \"'%B' -multiInst -notabbar -nosession -noPlugin\"\n\nIf you wish to place the above from a .BAT or .CMD file, you must replace %A with %%A and %B with %%B"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-http-push"}, {"role": "assistant", "content": "Push objects over HTTP/DAV to another repository"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.sslCAPath"}, {"role": "assistant", "content": "Path containing files with the CA certificates to verify the peer\nwith when fetching or pushing over HTTPS. Can be overridden\nby the GIT_SSL_CAPATH environment variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Hidden markdown text on GitHub\n\nIs there anything in markdown syntax specifically on GitHub to support hidden text?\nI just want to put some to-do notes in README.md for myself, not to be visible.\n\nEXTRAS\nAs a tribute to the great answer by Tamas, and what's also asked a lot of times, below is an example of how to write foldable sections within MD files:\n<details>\n<summary><b>My section header in bold</b></summary>\n\nAny folded content here. It requires an empty line just above it.\n\n</details>"}, {"role": "assistant", "content": "Just use standard HTML comments:\n<!-- This is commented out. -->"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I kick off a container instance using the Azure api?\n\nI have a container building in gitlab and registering itself with the gitlab custom registry.  Inside this container is a command that runs a very long time.  I would like to somehow deploy this container to azure, and only kick off this long running process inside a new container instance on demand from an administrative api service.  I don't want the container running all the time, only for the time it takes to run the command.\nI was thinking that this admin api could be a classic http rest api service hosted under Azure \"App Services\", or possibly using the new \"Function Apps\" feature of Azure.\nIn my research, I found that using the azure cli commands, I can start a container like so:\naz container create \\\n    --resource-group myResourceGroup \\\n    --name mycontainer2 \\\n    --image microsoft/aci-wordcount:latest \\\n    --restart-policy OnFailure \\\n    --environment-variables NumWords=5 MinLength=8\n\nhttps://learn.microsoft.com/en-us/azure/container-instances/container-instances-environment-variables\nI would like to do this from the admin api, preferably using what looks to me like the official Azure npm package located here:\nhttps://www.npmjs.com/package/azure\nIdeally, it would be a single command to create and start the instance, being able to set the environment variables like this example at the launch of the container is important to me.  I'm not interested in moving all my code over into Azure, I would like to continue using gitlab for the source code and container registry but if there is some reason I have to switch to using the Azure container registry, I need a way to somehow move the container registration over there using the gitlab ci yaml.\nIn all my searching, I couldn't find any way to do this but the closest documentation I found was here:\nhttps://learn.microsoft.com/en-us/javascript/api/azure-arm-containerservice/containerserviceclient?view=azure-node-latest"}, {"role": "assistant", "content": "At the current time there is no way to officially do this from the api, maybe in the future there will be"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "SVN:externals equivalent in Git?\nI have two SVN projects in use from another SVN repository using svn:externals. \nHow can I have the same repository layout structure in Git?"}, {"role": "assistant", "content": "Git has two approaches similar to, but not exactly equivalent to svn:externals:\n\nSubtree merges insert the external project's code into a separate sub-directory within your repo. This has a detailed process to set up and then is very easy for other users, because it is automatically included when the repository is checked out or cloned. This can be a convenient way to include a dependency in your project.\nIt is easy to pull changes from the other project, but complicated to submit changes back. And if the other project have to merge from your code, the project histories get merged and the two projects effectively become one.\n\nGit submodules (manual) link to a particular commit in another project's repository, much like svn:externals with an -r argument. Submodules are easy to set up, but all users have to manage the submodules, which are not automatically included in checkouts (or clones).\nAlthough it is easy to submit changes back to the other project, doing so may cause problems if the repo has changed. Therefore it is generally not appropriate to submit changes back to a project that is under active development."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git force push tag when the tag already exists on remote\nI have a tag already pushed onto the remote. When another user creates the same tag and tries to push, the push will fail because the tag already exists on the remote.\nBut I thought if I did --f force tag push, it should work. But that is not what I see.\nI think I have to do this.\n Create tag\n Push tag -> If push fails -> Delete tag on remote\n                           -> push tag again.\n\nIs this correct? Isn`t force pushing a tag supposed to take care of this?\nI am using annotated tags with\n git -a v1.0 -f -m \"message\""}, {"role": "assistant", "content": "This will force push all the tags and overwrite the existing ones.\ngit push -f --tags"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --cherry"}, {"role": "assistant", "content": "A synonym for --right-only --cherry-mark --no-merges ; useful to\nlimit the output to the commits on our side and mark those that\nhave been applied to the other side of a forked history with git log --cherry upstream...mybranch , similar to git cherry upstream mybranch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff HEAD"}, {"role": "assistant", "content": "compares a (c)ommit and the (w)ork tree;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - merge conflict when local is deleted but file exists in remote\nI am very new to git and wondered how I should go about a merge where in the local repo I have deleted several files on the master branch but these files exist within the remote master branch.\nAfter doing git-merge it shows the conflicts that have occured.\nUsing git gui it shows that the local file is deleted, while the remote branch file has contents.\nHow do you stop these files from being conflicted?\nIs there a simple way using git gui?\nMany thanks"}, {"role": "assistant", "content": "You should resolve the conflicts as you see fit. If the file really is supposed to be removed, and you will be publishing that change to origin, remove it again:\ngit rm path/to/file\n\nIf the file should in fact be tracked still, add it (the version in the work tree will be the version from origin):\ngit add path/to/file\n\nAfter doing either of those to resolve the conflict, commit the merge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Undo \u201cgit add <dir>\u201d?\nI mistakenly added files using the command \"git add dir\". I have not yet run \"git commit\". Is there a way to remove this dir and everything contained within it from the commit?\nI have tried git reset dir, but it didn't work. Apparently git reset file is the way to undo it. But I have so many files and so little time."}, {"role": "assistant", "content": "To remove a directory and everything inside it from the index,\ngit rm --cached -r dir\nThe --cached switch makes git rm operate on the index only and not touch the working copy. The -r switch makes it recursive."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to leave a message for a github.com user\n\nNeed help on GitHub usage. I wonder if there is a way to communicate with a github.com user i.e. write the user a message when only username/id is given on their GitHub page? Does GitHub have this social feature?"}, {"role": "assistant", "content": "Although GitHub removed the private messaging feature, there's still an alternative.\nGitHub host git repositories. If the user you're willing to communicate with has ever committed some code, there are good chances you may reach your goal. Indeed, within each commit is stored some information about the author of the change or the one who accepted it.\nProvided you're really dying to exchange with user user_test\n\nDisplay the public activity page of the user: https://github.com/user_test?tab=activity\nSearch for an event stating \"user_test pushed to [branch] at [repository]\". There are usually good chances, they may have pushed one of his own commits. Ensure this is the case by clicking on the \"View comparison...\" link and make sure the user is listed as one of the committers.\nClone on your local machine the repository they pushed to: git clone https://github.com/..../repository.git \nCheckout the branch they pushed to: git checkout [branch]\nDisplay the latest commits: git log -50\n\nAs a committer/author, an email should be displayed along with the commit data.\nNote: Every warning related to unsolicited email should apply there. Do not spam."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-switch - Switch branches  --progress  --no-progress"}, {"role": "assistant", "content": "Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless --quiet is specified. This flag enables progress reporting even if not\nattached to a terminal, regardless of --quiet ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitlab merge request. Who is the assignee?\n\nThere is one particular point I don't understand for GitLab's merge requests.\nI cloned a repository and made a feature branch. I worked something on it, committed it, and pushed the new branch to my GitLab repo.\nWith that I can make a merge request. When I do it says:\nAssignee (and Assign to me)\nWho should I assign it to? I mean, if I assign it to me, it is going to be me who \"reviews\" the change and approves it, so what is the point?\nOr should I assign it to the repository administrator? Or to other member reviewers, so that they can check that and approve the merge?\nWhat is the \"Assign to me\" option, and how does that makes sense?"}, {"role": "assistant", "content": "There is documentation for that. It states:\n\nThis person owns the merge request, but isn\u2019t responsible for reviewing it.\n\nAdditionally, the documentation explains an exemplary merge request workflow:\n\nYou would typically create the MR before working on your feature branch.\nThen you can use the Assign to me feature to indicate that you are the one currently working on implementing the features of the MR.\nAfter your work is done you can request a review following these guidelines.\nAfter finishing the review you can fall back to step 8 in the MR workflow."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Redo merge of just a single file\nI'm in the middle of a large merge, and I've used git mergetool to resolve all the conflicts, but I have not committed yet, as I wanted to make sure the merge was ok first.\nIt turns out that I made a mistake while resolving the conflicts in one file, and I would like to redo the conflict resolution with git mergetool on that file. As this is a large merge I would like to avoid redoing the merge on all the other files, as I understand I would have to do with git merge --abort.\nI know I could just edit the file manually, but this would be quite tedious and it would be much easier to just redo the git mergetool operation. Is this possible?"}, {"role": "assistant", "content": "It seems I was just looking in the wrong place. The solution turned out to be quite simple.\ngit checkout -m <file>\n\nThis returns the file to its conflicted state. I can then run git mergetool to redo the merge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Display JavaDocs on GitHub\n\nI'm looking for a way to convert the javadocs from my open source project (generated in Eclipse) to GitHub MarkDown, or come up with some other simple solution to display my documentation on GitHub (shy of simply adding a docs directory). Is there a simple solution for this? Can I simply point the GitHub README.md to my docs directory? Is there something more elegant? I have been striking out on Google."}, {"role": "assistant", "content": "I don't think it's possible to make a usable Javadoc with MarkDown. The best solution is probably to commit the Javadoc you generated on the gh-pages branch (or in the docs/ directory depending on the settings of your GitHub project). It will be available at :\nhttp://username.github.io/projectname\nHere is an example from one of my projects:\nhttp://ebourg.github.io/jsign/apidocs/\nI used to do this but nowadays I just rely on javadoc.io to host the Javadoc:\nhttps://javadoc.io/doc/net.jsign/jsign/\nThe documentation is picked automatically from Maven Central, this saves the extra step of commiting the files into the Git repository when preparing a new release."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to disable 'detached' pipelines in Gitlab?\n\nWe have a normal repository, with some code and tests.\nOne job has 'rules' statement:\n  rules:\n    - changes:\n      - foo/**/*\n      - foo_scenarios/**/*\n      - .gitlab-ci.yml\n\nThe problem is that presence of rules causes Gitlab to run 'detached pipeline', which wasn't my intention, and it's annoying. Is there any way to disable those 'detached' pipelines, but keep the rules section in place?"}, {"role": "assistant", "content": "rules:\n    - if: '$CI_PIPELINE_SOURCE == \"merge_request_event\"'\n      when: never\n    - changes:\n      - foo/**/*\n      - foo_scenarios/**/*\n      - .gitlab-ci.yml\n      when: always\n\nI have not tested this, but I believe this is what you are looking for. This page and this one too are both easily navigable and are very helpful for finding the answer to basic gitlab-ci.yml questions.\nEdit- Gitlab will evaluate the rules in order, and it stops evaluating subsequent rules as soon as one of the conditions are met. In this case, it will evaluate if: '$CI_PIPELINE_SOURCE == \"merge_request_event\"' first, and if it evaluates to true, no more rules will be checked. If the first rule evaluates to false, it will move on to the next rule."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I configure Git to automatically pull from current branch when using \"git pull\"?\nWith our current setup you always have to enter the branch name (ie: git pull origin feature-branch\" when doing a pull. I've already made the mistake of pulling from one branch into another, accidentally merging two branches with two very different releases. I'd like to avoid this by configuring Git so that simply typing git pull will pull the current branch you're in.\nHow do I do this?"}, {"role": "assistant", "content": "I am, too, a fan of typing just git pull and getting all the magic. \nYou have 2 options:\n1) git config --global branch.autoSetupMerge always\nThis will ensure that whether you checkout a remote branch, or create a new one; the tracking information will be handled automatically by git. Then you will be able to\ngit clone <some_repo>\ngit checkout -b <new_branch>\ngit push\ngit pull\n\nNote that in order to push without more keywords, you need to set the push option as well. I have set it to matching, but everyone has their preference on that. (git config --global push.default matching)\nMore info: autosetupmerge defaults to true. When set to true, this lets git to perform tracking when you checkout an already existing branch at the remote. For example, if you do git checkout <branch>, git will handle the tracking info so that you can do git pull while on that branch. However, it will not perform this on branches that you create with -b option. Setting autosetupmerge to always ensures that git handles tracking info all the time.\n2) When checking out a new branch, you need to specifically set the branch to pull from origin (aka tracking)\ngit checkout -b <branch> --track <remote>/<branch>\n\nI find this less useful when the branches are transient. If you rarely create a new branch, you should go with this. However, if you are like me, where only the master branch is persistent and every feature has its own brand new branch, then I find option 1 more useful.\nNote that, you do not need to make git configuration --global. You may simply write --local there, and have that setting specific to that repository only."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "My pull request has been merged, what to do next?\nI recently participated in a project from GitHub. I did the following:\nForked the original repository, cloned it to my local machine, made a branch to fix existing bug, fixed bug being in that branch, pushed that branch to my repo, send a pull request to the author of the repository to merge my fix branch to its master branch.\nIt was my first time I commited on another's code so I don't know what to do. Now my pull request has been merged to original repo/project by the author. \nWhat should I do next? Should I delete the branch? Should I merge the branch? Anything else?\n\nAdditional info:\nThe original project has a single branch.\nI also have a upstream set to get latest updates form the original repo. (I did it like this):\ngit remote add upstream https://path/to/original/repo.git\n\nAnd I get updates like this:\ngit fetch upstream"}, {"role": "assistant", "content": "What to do next is: going on contributing new features or fixing other bugs in their own dedicated branches (pushed only to your fork).  \nMeaning your fork stays, but the branches within your fork can come and go.  \nYou can also remove the fork if you are not planning to contribute further, but it will remove the corresponding entry in 'Repositories you contribute to'.\nIt is easier to:\n\ndelete your fix branch (actually, it is now deleted for you) on your fork (and in your local cloned repo: see \"Delete a Git branch both locally and remotely\")\ngit pull upstream master (if master was the branch in which your fix has been integrated: the merge will be a fast-forward one): no rebase needed at this point.\nrecreate a fix branch on top of your updated local master (now with the latest from upstream master).\n\n\nHowever, never forget one step before submitting any future pull request:\nrebase first your current branch (fix) from upstream destination branch\n(upstream being the original repo you have forked: see \"What is the difference between origin and upstream in github\")\nBefore submitting anything back to the original repo (\"upstream\"), you need to make sure your work is based on top of the latest from said original repo (or the pull-request won't result in a fast-forward merge once applied back on upstream repo).\nSee, for instance, \"Workflow for managing pull requests on shared repos in github\".\nIn other words, upstream can evolve (have new commits pushed on it) while you are busy fixing stuff. You need to replay your fixes on top of that latest work from upstream to make sure your commits are still compatible with the latest of upstream.\n\nThe OP Santosh Kumar asks in the comments:\n\nI have pulled and merged from upstream to master, now what? \n\nIf you haven't made any new fixes since your recent pull request, see above (delete and recreate an new branch fix on top of your updated master).\nIf you have done any more work since your pull request, I wouldn't merge from upstream if I want to make a new pull request: I would pull and rebase:\ngit pull --rebase upstream master\n\nThat way, all my new local work is replayed on top of the most recent upstream master commits (fetched in my local repo), supposing that master is the target branch that will integrate my future pull request.\nThen I can push my local work to 'origin', which is my fork on GitHub of upstream.\nAnd from my fork on GitHub, I can safely make a pull request, knowing that it will only add new commits to upstream without needing any merge resolution: merging those new commits in upstream repo will mean a simple fast-forward merge.\n\nA git pull --rebase without specifying the branch on top of which you want to rebase your (currently checked out) fix branch wouldn't work:\n\nThat (git pull --rebase) says: \n\nYou asked to pull from the remote '`upstream`', but did not specify a branch. \n\n\nShould I append master at last? And what will this do?, will it delete my fix branch?\n\nYes, you can specify the branch which will be the target of the pull request, for instance 'master'.\nThat will not delete your fix branch, but will replay it on top of upstream master fetched in your repo."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "OpenSSL SSL_connect: Connection was reset in connection to github.com:443 while try to git push\n\nfatal: unable to access 'https://github.com/XXX/XXXXX.git/': OpenSSL SSL_connect: Connection was reset in connection to github.com:443\n\nSuddenly I'm getting above error while I try to git pull, git push, or clone the repo."}, {"role": "assistant", "content": "I also encountered a similar situation; that's when I came across an answer on Code Grepper by Shibbir Ahmed, where he provided this:\ngit config --global --unset-all remote.origin.proxy\nThat solved the issue for me."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I copy a Git working copy onto another machine?\nI am in the process of creating a Git working copy from our SVN server with 'git svn clone'.  But this takes quite some time (we have > 20.000 revs and almost 10.000 files).  I have some other machines (for other developers) that I would like to setup the same way.  Will it be possible to copy the resulting files from the first machine onto others, so as to spend less time?\nIn other words, is there anything in a Git working copy that ties it to the machine it was created on?\nThanks."}, {"role": "assistant", "content": "You can copy it, everything is inside the .git folder and is not dependant on anything else."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Official badge for GitHub actions\n\nDoes GitHub have an official 'badge' for their new 'actions' feature?  \nI came across this request on their official repo and there seems to be an official one:\nhttps://github.com/{github_id}/{repository}/workflows/{workflow_name}/badge.svg\n\nas per this comment, but I am unable to get it to work.  Is it actually working?  When I use it, I get the below output:\n\nNote that I have replaced {github_id} with my username, {repository} with my repo name and {workflow_name} with the corresponding workflow name (removing the curly braces).  Does anyone else have this issue?\nEdit: I am working on a private repo, in case it makes a difference."}, {"role": "assistant", "content": "You can get the actions badge by navigating to the required workflow on your repo on GitHub.com, clicking on the settings button on the right (the one with 3 dots beside the workflow search) and clicking on the Create status badge button.\n\nHere, you can select the badge for the required branch and event and use the generated markdown.\nFor eg, below is the badge that I generated for the default branch and event of the CI workflow of my fork:\n\nThe markdown for the above badge:\n[![Build and Deploy](https://github.com/kratostaine/spring-authorization-server/actions/workflows/continuous-integration-workflow.yml/badge.svg)](https://github.com/kratostaine/spring-authorization-server/actions/workflows/continuous-integration-workflow.yml)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I establish manual stages in Gitlab CI?\n\nI'd can't seem to find any documentation of manual staging in Gitlab CI in version 8.9. How do I do a manual stage such as \"Deploy to Test\"? \nI'd like Gitlab CI to deploy a successful RPM to dev, and then once I've reviewed it, push to Test, and from there generate a release. Is this possible with Gitlab CI currently?"}, {"role": "assistant", "content": "You can set tasks to be manual by using when: manual in the job (documentation).\nSo for example, if you want to want the deployment to happen at every push but give the option to manually tear down the infrastructure, this is how you would do it:\nstages:\n  - deploy\n  - destroy\n\ndeploy:\n  stage: deploy\n  script:\n    - [STEPS TO DEPLOY]\n\ndestroy:\n  stage: destroy\n  script:\n    - [STEPS TO DESTROY]\n  when: manual\n\nWith the above config, if you go to the GitLab project > Pipelines, you should see a play button next to the last commit. When you click the play button you can see the destroy option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  -p<n>"}, {"role": "assistant", "content": "Remove <n> leading path components (separated by slashes) from\ntraditional diff paths. E.g., with -p2 , a patch against a/dir/file will be applied directly to file . The default is\n1."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git error - can't push to github - pack-objects died of signal 9\nI added some files to the repo, committed, and attempted to push to Github:\n$ git add .  \n$ git commit -m 'bla'  \n$ git push origin master\n\nI am getting an error when I try to push to Github.  \nCounting objects: 84, done.  \nDelta compression using up to 2 threads.  \nerror: pack-objects died of signal 9  \nerror: failed to push some refs to '[email\u00a0protected]:xxxxx/xxxxx.git'\n\nAll was working fine before I went on vacation 2 weeks ago. Nothing has changed in the interim as far as I know.  The config file seems to be fine.  And git push -f also generates the same errors as above."}, {"role": "assistant", "content": "Try this:\ngit config --global pack.windowMemory \"32m\"\n\npack.windowMemory::\n    The maximum size of memory that is consumed by each thread\n    in linkgit:git-pack-objects[1] for pack window memory when\n    no limit is given on the command line.  The value can be\n    suffixed with \"k\", \"m\", or \"g\".  When left unconfigured (or\n    set explicitly to 0), there will be no limit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --stat"}, {"role": "assistant", "content": "Instead of applying the patch, output diffstat for the\ninput.  Turns off \"apply\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  color"}, {"role": "assistant", "content": "Highlight changed words using only colors.  Implies --color ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  <limit>"}, {"role": "assistant", "content": "An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I configure git to ignore some files locally?\nCan I ignore files locally without polluting the global git config for everyone else? I have untracked files that are spam in my git status but I don't want to commit git config changes for every single little random untracked file I have in my local branches."}, {"role": "assistant", "content": "From the relevant Git documentation:\n\nPatterns which are specific to a particular repository but which do not need to be shared with other related repositories (e.g., auxiliary files that live inside the repository but are specific to one user's workflow) should go into the $GIT_DIR/info/exclude file.\n\nThe .git/info/exclude file has the same format as any .gitignore file. Another option is to set core.excludesFile to the name of a file containing global patterns.\nNote, if you already have unstaged changes you must run the following after editing your ignore-patterns:\ngit update-index --assume-unchanged <file-list>\n\nNote on $GIT_DIR: This is a notation used all over the git manual simply to indicate the path to the git repository. If the environment variable is set, then it will override the location of whichever repo you're in, which probably isn't what you want.\n\nEdit: Another way is to use:\ngit update-index --skip-worktree <file-list>\n\nReverse it by:\ngit update-index --no-skip-worktree <file-list>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.mnemonicPrefix"}, {"role": "assistant", "content": "If set, git diff uses a prefix pair that is different from the\nstandard \"a/\" and \"b/\" depending on what is being compared.  When\nthis configuration is in effect, reverse diff output also swaps\nthe order of the prefixes: git diff compares the (i)ndex and the (w)ork tree; git diff HEAD compares a (c)ommit and the (w)ork tree; git diff --cached compares a (c)ommit and the (i)ndex; git diff HEAD:file1 file2 compares an (o)bject and a (w)ork tree entity; git diff --no-index a b compares two non-git things (1) and (2)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.ignoreSubmodules"}, {"role": "assistant", "content": "Sets the default value of --ignore-submodules. Note that this\naffects only git diff Porcelain, and not lower level diff commands such as git diff-files . git checkout and git switch also honor\nthis setting when reporting uncommitted changes. Setting it to all disables the submodule summary normally shown by git commit and git status when status.submoduleSummary is set unless it is\noverridden by using the --ignore-submodules command-line option.\nThe git submodule commands are not affected by this setting.\nBy default this is set to untracked so that any untracked\nsubmodules are ignored."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-revert - Revert some existing commits  --cleanup=<mode>"}, {"role": "assistant", "content": "This option determines how the commit message will be cleaned up before\nbeing passed on to the commit machinery. See git-commit for more\ndetails. In particular, if the <mode> is given a value of scissors ,\nscissors will be appended to MERGE_MSG before being passed on in the case\nof a conflict."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I do a git pull to a specific branch?\nI am trying to pull from my heroku remote, I get this message:\n>git pull heroku\nYou asked to pull from the remote 'heroku', but did not specify\na branch. Because this is not the default configured remote\n\nMy local branch is 'develop'.\nHow do I pull from Heroku to my local branch 'develop' ?\nThanks."}, {"role": "assistant", "content": "Updated answer: You need to specify what branch you want to pull from, since your local branch is not configured to pull from heroku's master.\nSo try something like:\ngit pull heroku master\n\nRemember that you have to have checked out develop in order for this command to pull to the local branch develop."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git diff on date?\nI'm accustomed to running a git comparison that will allow comparison with local git revs like:\ngit diff HEAD HEAD~110 -- some/file/path/file.ext\n\nIs it possible to use the date instead? And if so, how? I would like to be able insert in place of the \"110\" in the above example, a date such as \"4 Dec 2012\"."}, {"role": "assistant", "content": "git diff HEAD 'HEAD@{3 weeks ago}' -- some/file/path/file.ext\n\nThis is not, strictly speaking, the revision made three weeks ago. Instead, it's the position HEAD was at three weeks prior to the present. But it's probably close enough for your purposes - it will be very accurate if the current branch's HEAD moved forward steadily, as most tend to do. You can improve the accuracy by using a branch name instead of HEAD.\nInstead of an offset-from-the-present, you can also use a date/time, like HEAD@{1979-02-26 18:30:00}. See git help rev-parse."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --system"}, {"role": "assistant", "content": "For writing options: write to system-wide $(prefix)/etc/gitconfig rather than the repository .git/config . For reading options: read only from system-wide $(prefix)/etc/gitconfig rather than from all available files. See also FILES ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to remove git account from local machine and add new account\n\nI have a github account which is configured in my windows pc. Now I have created a new Github account and want to use the new one.\nHow will I remove my old account from my windows pc and add the new github account ?\nNOTE: I have edited the gitconfig file and added the new user email and username there. But the public key still contains the old user email !!"}, {"role": "assistant", "content": "For windows machine\nyou can manage windows credential for doing this\ngo to search button then write\nmanage windows credential\nthen you will find a button double click it\nthen remove your current windows credential\nafter that when you are using git again git authentication will be asked\nthen you will enter your new github id\nNext you need to edit .gitconfig file\nfile path will be like\nC:\\Users\\Imu\n\nhere imu is my user name\nit will be different in yours\nNow edit .gitconfig file using text editor like nodepad++ or sublime text with ur current id information\nhoping it helps"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What's the difference \"origin master\" vs \"origin/master\"\nWhat is the difference between a space and a slash when running git commands?\nI sometimes see\ngit push origin master (which is a space)\nand other times I see\ngit rebase origin/master (which uses a slash)\nWhat is the difference in this convention?  Is it that the slash notation accesses a local cached copy whereas the space version actually reaches out to the remote repo (github) ?"}, {"role": "assistant", "content": "This is not a \"convention\". The former is two separate arguments in different positions with different meanings to git push, and the latter is a single argument which identifies the remote-tracking branch origin/master."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is the convention for the content of an initial/first git commit?\nI know that Git commits should be made for each logical change, but what is the convention (if any exist) for the first commit? \n\n[note: I'm not inviting opinion/discussion on this - if there isn't a common convention then fine]. \n\nFor instance I've started a website from scratch with index.html - my first 'logical change' commit could be anything from adding the <head> elements, adding the HTML structure, or adding the basic content and CSS. Or should the first commit be the first 'working' version?\nEdit: I don't mean the commit message; I mean the content of the files."}, {"role": "assistant", "content": "Usually the first commit is named \"Initial commit\".\nAs best practice its include a README file describing the project.\nThe README is usually is a md file.\nJust for fun read this:  Funny initial git commit messages:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  include.path  includeIf.<condition>.path"}, {"role": "assistant", "content": "Special variables to include other configuration files. See\nthe \"CONFIGURATION FILE\" section in the main git-config documentation,\nspecifically the \"Includes\" and \"Conditional Includes\" subsections."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I perform a `git pull` without re-entering my SSH password?\nIs it possible to configure git/ssh so I don't have to enter my passphrase every time I want to perform a git pull?   Note that the repo is a private one on github.\nOr, alternatively, what would be the best practice to automate code deployment from a private Github repo?\nAdditional details: EC2 instance running a public AMI based on Fedora."}, {"role": "assistant", "content": "Have a look at this link https://help.github.com/articles/working-with-ssh-key-passphrases/\n\nBut I don\u2019t want to enter a long passphrase every time I use the key!\nNeither do I! Thankfully, there\u2019s a nifty little tool called\n  ssh-agent that can save your passphrase securely so you don\u2019t have\n  to re-enter it. If you\u2019re on OSX Leopard or later your keys can be\n  saved in the system\u2019s keychain to make your life even easier. Most\n  linux installations will automatically start ssh-agent for you when\n  you log in."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_SSL_NO_VERIFY"}, {"role": "assistant", "content": "Setting and exporting this environment variable to any value\ntells Git not to verify the SSL certificate when fetching or\npushing over HTTPS."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to abort a git rebase from inside vim during interactive editing\nWhen I do an interactive rebase, e.g.\ngit rebase -i HEAD~3\n\nthe rebase interactive editor (vim in my case) opens to let me edit the commits to rebase\npick c843ea2 Set Vim column limit to 80 (OS X)\npick fc32eac Add Bash alias for `pbcopy` (OS X)\n....\n\nIf I now decide that I want to abort the rebase and quit vim using :q the rebase starts anyway. I'm using git version 1.9.0.msysgit.0 on windows.\nSure I can just delete all pick lines, but it might be a lot to do if I rebase a longer history. Is there another way?\nHow can I quit the rebase interactive editor (vim) and abort the rebase?"}, {"role": "assistant", "content": "If you exit the editor with an error code, the rebase will be aborted.\nTo exit with an error code on vim, do\n:cq\n\nSee here and vimdoc here."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What does 'git commit' mean when it says 'create mode ...' on stdout?\nEDIT:\nSee Danny Lin's git-store-meta as a proposed solution to the versioning-metadata problem described below. I have yet to test it as of 2015-05-13.\nORIGINAL QUESTION:\nDo the create|delete mode ... lines in the git commit output (example below) represent some sort of metadata control? (And/or, what do these lines represent in general?) These appear to be unix-like file-permission codes/representations, although I'm not sure -exactly- the mapping, but the bigger question is: what if anything does git do with these codes/settings/values? Does git attempt to leverage these saved codes in any way to prove helpful to solve metadata problems my per superuser.com question \"How to reuse/extend etckeeper's metadata engine for git control of non-/etc filesystems, or extend git natively with said capability?\"?  I'm aware that git doesn't control all filesystem metadata.\n[Git does apparently, already control the \"executeable attribute/perm\" of a file (apparently portable for most OSes) and some other things like filesystem links. I'm seeking a more Unix/Linux/BSD/DarwinMacOSX-specific control mechanism for more/all metadata, namely all permissions and user/group ownership. ACLs and other metadata control optional. Trying to see if the stuff git is currently storing might prove useful to solve this problem.]\nroot@node1 Dec 15 09:40:45 ~/.../sandbox-1# git status\n# On branch master\n# Changes to be committed:\n#   (use \"git reset HEAD <file>...\" to unstage)\n#\n#   modified:   README\n#   new file:   dummy-file-will-be-removed\n#   deleted:    ownerfile\n#\nroot@node1 Dec 15 09:40:45 ~/.../sandbox-1# git commit -m \"testing git\"\n[master c5b0201] testing git\n 2 files changed, 1 insertions(+), 2 deletions(-)\n create mode 100644 dummy-file-will-be-removed\n delete mode 100644 ownerfile\nroot@node1 Dec 15 09:41:55 ~/.../sandbox-1# \n[...]\nroot@node1 Dec 15 11:33:11 ~# git --version\ngit version 1.7.4.1\nroot@node1 Dec 15 11:33:14 ~#"}, {"role": "assistant", "content": "For more information about Git's mode, see this answer.\nGit's ability to store file metadata is limited to a simple subset of information to allow Git to track some basic file system changes allowing Git to track relevant changes for source code management; such as whether a file has been modified and whether a file is a regular file or an executable file.\nGit does not try to implement any notion of a file system, leaving file system routines to an actual file system implementation. This makes good sense to allow Git to work equally whether on a FAT32, NTFS, EXT3, XFS, NFS, etc. file system running on Linux, MacOS, Windows, etc."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts"}, {"role": "assistant", "content": "DESCRIPTION Use git mergetool to run one of several merge utilities to resolve\nmerge conflicts.  It is typically run after git merge . If one or more <file> parameters are given, the merge tool program will\nbe run to resolve differences in each file (skipping those without\nconflicts).  Specifying a directory will include all unresolved files in\nthat path.  If no <file> names are specified, git mergetool will run\nthe merge tool program on every file with merge conflicts."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do show my tests passing/failing in Github?\n\nI have a project on github that has extensive unit tests (using mocha for node.js). \nI'd like to show off by showing those tests passing/failing on each page. I notice other projects on Github are doing this.\n\nI've been unable to find any documentation on how to make the test status display. \n\nHow can I make Github show unit test output? \nDoes Github run the tests or do you need to hook up with an external webapp? \nIs there a free webservice to do this (my app is Open Source)?"}, {"role": "assistant", "content": "Take a look at Travis CI. You can use it with GitHub.\nThey have docs on using NodeJS\nThose badges you see are called \"status images\" and Travis provides MarkDown that you can insert into your project's README.md file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to debug Gitlab LDAP authentication?\n\nI am trying to configure LDAP authentication with gitlab. My configuration is someting like:\nldap:\n    enabled: true\n    host: 'ldap.example.com'\n    base: 'ou=People,o=example.com'\n    port: 636\n    uid: 'uid'\n    method: 'ssl' # \"ssl\" or \"plain\"\n    bind_dn: 'cn=gitlab,ou=Apps,o=example.com'\n    password: 'password'\n    allow_username_or_email_login: true\n\nI tested it with the following :\nldapsearch  -b \"ou=People,o=example.com\" -s sub -D \"cn=gitlab,ou=Apps,o=example.com\" -H ldaps://ldap.example.com:636 -w \"password\" -x \"([email\u00a0protected])\"\n\nThe line above works, but when I try to log in using LDAP, I always got \"invalid credentials\".\nHow can I troubleshoot this and narrow down the root cause f this problem?\nEdit 26/09:\nHere are some things I found on production.log:\nStarted GET \"/users/sign_in\" for 127.0.0.1 at 2013-09-23 17:42:58 -0300\nProcessing by Devise::SessionsController#new as HTML\n  Rendered devise/sessions/_new_ldap.html.haml (1.7ms)\n  Rendered devise/sessions/_new_base.html.haml (1.8ms)\n  Rendered devise/sessions/_oauth_providers.html.haml (0.0ms)\n  Rendered devise/sessions/new.html.haml within layouts/devise (4.2ms)\n  Rendered layouts/_head.html.haml (1.6ms)\n  Rendered layouts/_flash.html.haml (0.1ms)\nCompleted 200 OK in 9ms (Views: 6.9ms | ActiveRecord: 0.0ms)\nStarted POST \"/users/auth/ldap/callback\" for 127.0.0.1 at 2013-09-23 17:43:00 -0300\nProcessing by OmniauthCallbacksController#failure as HTML\n  Parameters: {\"utf8\"=>\"\u00e2\", \"authenticity_token\"=>\"AwqZsVHRqOeZr+GLWWeGM7MyOAdk7cFl8/rZgbVRU+8=\", \"username\"=>\"[email\u00a0protected]\", \"password\"=>\"[FILTERED]\"}\nRedirected to http://example.com/users/sign_in\nCompleted 302 Found in 3ms (ActiveRecord: 0.0ms)\nStarted GET \"/users/sign_in\" for 127.0.0.1 at 2013-09-23 17:43:00 -0300\nProcessing by Devise::SessionsController#new as HTML\n  Rendered devise/sessions/_new_base.html.haml (2.8ms)\n  Rendered devise/sessions/_oauth_providers.html.haml (0.1ms)\n  Rendered devise/sessions/new.html.haml within layouts/devise (3.7ms)\n  Rendered layouts/_head.html.haml (1.7ms)\n  Rendered layouts/_flash.html.haml (0.1ms)\nCompleted 200 OK in 9ms (Views: 6.6ms | ActiveRecord: 0.0ms)\nStarted GET \"/\" for 127.0.0.1 at 2013-09-23 18:50:08 -0300\nProcessing by DashboardController#show as HTML\nCompleted 401 Unauthorized in 1ms\n\nEdit: I finally got the answer: a configuration on devise was stripping everyting after the \"@\". I can't recall the exact name, but I can post as soon as I got access to the machine. I discovered this by adding logs to the ldap oauth login."}, {"role": "assistant", "content": "The OP kidbomb mentions:\n\nA configuration on devise was stripping everything after the \"@\".\n  I discovered this by adding logs to the ldap oauth login.\n\n\nCheck if the LDAP server is also accessible through ldap (not ldaps://)\nldapsearch  -b \"ou=People,o=example.com\" -s sub -D \"cn=gitlab,ou=Apps,o=example.com\" -H ldap://ldap.example.com:389 -w \"password\" -x \"([email\u00a0protected])\"\n\nIf yes, try and modify the gitlab.yml setting file ldap.method from 'ssl' to \"plain\".\nThe goal is to validate if the certificate used for contacting the ldap server is the issue here or not.\nIf you can contact the server through ldap:// (no certificate), that gives you at least a workaround.\nIf not (you have to go through ldaps://), you need to study more in detail the certificate associated to the LDAP server.\nopenssl s_client -connect ldap.example.com:636  2>/dev/null < /dev/null\n\n(I am not using -CAFile or -CAPath here, assuming the CA are at their default place mentioned in /etc/ssl/openssl.cnf)\nIf you get at the end of the output of that command the message:\nerror:num=21:unable to verify the first certificate \n\nThat means you need to get the certificate from the issuer.\nSee \"How To Verify SSL Certificate From A Shell Prompt\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  -C <commit>  --reuse-message=<commit>"}, {"role": "assistant", "content": "Take an existing commit object, and reuse the log message\nand the authorship information (including the timestamp)\nwhen creating the commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "list tags contained by a branch\nHow can I list tags contained by a given branch, the opposite of:\ngit tag --contains <commit>\n\nWhich \"only list tags which contain the specified commit\".\nIf something like this does not exist, how do I test whether a commit is contained by another commit so that I can script this?\nI could do this:\ncommit=$(git rev-parse $branch)\nfor tag in $(git tag)\ndo\n    git log --pretty=%H $tag | grep -q -E \"^$commit$\"\ndone\n\nBut I hope there is a better way as this might take a long time in a repository with many tags and commits."}, {"role": "assistant", "content": "git tag --merged <branch>\n\nFrom the man page: \n--[no-]merged <commit>\n\nOnly list tags whose tips are reachable, or not reachable if --no-merged is used, from the specified commit (HEAD if not specified).\n\nI believe this option was added quite recently - it definitely wasn't available back when the original question was posed and the above answers suggested.  Since this thread is still the first hit in Google for the question I figured I'd throw it in for anyone who scrolls down to the bottom looking for an answer that involves less typing than the accepted answer (and for my own reference when I forget this answer again next week)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] [--] [<path>\u2026\u200b]"}, {"role": "assistant", "content": "This form is to view the changes you made relative to\nthe index (staging area for the next commit).  In other\nwords, the differences are what you could tell Git to\nfurther add to the index but you still haven\u2019t.  You can\nstage these changes by using git-add ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git rebase --continue and --stepback?\nIs there a way to step back a commit during an interactive rebase?"}, {"role": "assistant", "content": "Yes there is. How to step back during an interactive rebase:\n\nGet the commit hash of your current HEAD, for example with git rev-parse HEAD\nrun git rebase --edit-todo\ninsert a pick with that hash to the top of that file pick <hash from step 1>\nrun git reset --hard HEAD^ (this is a hard reset so if you have done anything you want to keep make sure to store it somewhere e.g. git stash before you run the command)\n\nNow you are still in the rebase but one commit back and you are free to continue rebasing with\n\ngit rebase --continue.\n\nIf you don't want the undone commit to be picked straight up without edits you can add edit <HASH> instead of pick <HASH> to the todo list (step 3).\nIdea from: http://arigrant.com/blog/2014/5/4/git-rebase-stepping-forward-and-back\nAddendum 3: If you are worried of missing a hash in the rebase, you can compare your todo file (.git/rebase-merge/git-rebase-todo) with the original one (.git/rebase-merge/git-rebase-todo.backup) as per comment from @Andrew Keeton .\nAddendum 1 and 2: You can remember more hashes, reset to an even earlier point and add multiple picks to redo more than one commit. When you edit the todo list it also contains a large comment about the different commands available:\npick 8f8b9645c1c python: remove declare_namespace\n\n# Rebase 803c25a8314..8f8b9645c1c onto 803c25a8314 (1 command)\n#\n# Commands:\n# p, pick <commit> = use commit\n# r, reword <commit> = use commit, but edit the commit message\n# e, edit <commit> = use commit, but stop for amending\n# s, squash <commit> = use commit, but meld into previous commit\n# f, fixup [-C | -c] <commit> = like \"squash\" but keep only the previous\n#                    commit's log message, unless -C is used, in which case\n#                    keep only this commit's message; -c is same as -C but\n#                    opens the editor\n# x, exec <command> = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop <commit> = remove commit\n# l, label <label> = label current HEAD with a name\n# t, reset <label> = reset HEAD to a label\n# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]\n# .       create a merge commit using the original merge commit's\n# .       message (or the oneline, if no original merge commit was\n# .       specified); use -c <commit> to reword the commit message\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Merge different issues on github\n\nSometimes the developers open new issues regarding the same subject. \nIt will be great to have the possibility to merge the issues.\nIf it is possible in github, how can I do it?\nIf not, what is the best way to link different issues?"}, {"role": "assistant", "content": "Currently, the simplest way to resolve this situation is to pick one of the issues to be the main one (whether the best documented, oldest, or whatever). Then, add a comment to the other issues linking to the main issue and close the duplicates.\nHere's an example.\nHere's another showing the \"Duplicate of #123\" syntax.\nAlternatively, you can leave the issues open and reference them all together in your commit messages: Example.\nI imagine that in the future, the team behind GitHub will make this process easier."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "`git fetch` a remote branch\nThe remote repository contains various branches such as origin/daves_branch:\n$ git branch -r\norigin/HEAD -> origin/master\norigin/daves_branch\norigin/master\n\nHow do I switch to daves_branch in the local repository so that it tracks origin/daves_branch?\nI tried:\n$ git fetch origin daves_branch\n$ git checkout daves_branch"}, {"role": "assistant", "content": "Update: Using Git Switch\nAll of the information written below was accurate, but a new command, git switch has been added that simplifies the effort.\nIf daves_branch exists on the remote repository, but not on your local branch, you can simply type:\ngit switch daves_branch\n\nSince you do not have the branch locally, this will automatically make switch look on the remote repo.  It will then also automatically set up remote branch tracking.\nNote that if daves_branch doesn't exist locally you'll need to git fetch first before using switch.\n\nOriginal Post\nYou need to create a local branch that tracks a remote branch. The following command will create a local branch named daves_branch, tracking the remote branch origin/daves_branch. When you push your changes the remote branch will be updated.\nFor most recent versions of Git:\ngit checkout --track origin/daves_branch\n\n--track is shorthand for git checkout -b [branch] [remotename]/[branch] where [remotename] is origin in this case and [branch] is twice the same, daves_branch in this case.\nFor Git 1.5.6.5 you needed this:\ngit checkout --track -b daves_branch origin/daves_branch\n\nFor Git 1.7.2.3 and higher, this is enough (it might have started earlier, but this is the earliest confirmation I could find quickly):\ngit checkout daves_branch\n\nNote that with recent Git versions, this command will not create a local branch and will put you in a 'detached HEAD' state. If you want a local branch, use the --track option.\nFull details are here: 3.5 Git Branching - Remote Branches, Tracking Branches"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --ignore-cr-at-eol"}, {"role": "assistant", "content": "Ignore carriage-return at the end of line when doing a comparison."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I view previous diff commits using Git?\nHow do I view previous diff commits using Git?\nI have a file that I've made several commits on, but I want to view previous versions of the file AND its diff's at different stages. Seeing where I made mistakes and how I fixed them is really helping my code. By the way, I'm using Tower as a GUI on top of Git."}, {"role": "assistant", "content": "git log --full-diff -p your_file_path\n\nCheck out: \nhttp://git-scm.com/docs/git-log"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --since=<date>  --after=<date>"}, {"role": "assistant", "content": "Show commits more recent than a specific date."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub can't rebase my feature branch: \"This branch cannot be rebased due to conflicts\"\n\nEven when my feature branch was branched out from the latest version of main, when I attempt to rebase my PR (from feature X to main), I end up seeing:\nThis branch cannot be rebased due to conflicts\nRebasing the commits of this branch on top of the base branch cannot be performed automatically due to conflicts encountered while reapplying the individual commits from the head branch.\nI understand that this can be resolved by:\ngit checkout main\ngit rebase feature/x\n(resolve conflicts)\n\nHowever, direct pushing to main is locked and I need to go through a PR. What are the steps to successfully be able to rebase a feature/x branch to main through a pull request?"}, {"role": "assistant", "content": "If you created the branch from main but you now need to rebase onto main then main must have been updated since you created your branch. The conflicts come from those changes.\n\nI understand that this can be resolved by:\ngit checkout main\ngit rebase feature/x\n(resolve conflicts)\n\n\nThis isn't correct. This would rebase main onto feature/x; you need to rebase feature/x onto main.\nInstead,\n\nupdate your local main from GitHub before the rebase by pulling it or similar,\ncheck feature/x out,\nrun git rebase main, and\nresolve conflicts.\n\nThen push your feature branch to GitHub (you'll need to use --force-with-lease since this rewrites commit hashes). The pull request will be updated accordingly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  -A  --all  --no-ignore-removal"}, {"role": "assistant", "content": "Update the index not only where the working tree has a file\nmatching <pathspec> but also where the index already has an\nentry. This adds, modifies, and removes index entries to\nmatch the working tree. If no <pathspec> is given when -A option is used, all\nfiles in the entire working tree are updated (old versions\nof Git used to limit the update to the current directory and its\nsubdirectories)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  no-renormalize"}, {"role": "assistant", "content": "Disables the renormalize option.  This overrides the merge.renormalize configuration variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Gitlab CI script: exclude branches\n\nI'm trying to improve the project building script, described in YML-file, the improvement itself seems quite trivial, but the idea of accidentally ruining the auto-builds scares me a bit.\nRight now there are several branches, version tags and other stuff in the project.\nA development branch, not built by the runners would be of use, because copying a huge project somehow between virtual machines to test the build on different platforms is not convenient at all. So, I want to exclude from builds some \"prj-dev\" branch.\nAnd there we have:\nstages:\n - build\n - linuxbuild\njob:\n tags:\n - win2008build\n stage: build\n script:\n  # something complex\n\njob1:\n tags:\n - linux\n stage: linuxbuild\n script:\n  # something else complex\n\nI googled and found a solution like:\nstages:\n - build\n - linuxbuild\njob:\n tags:\n - win2008build \n branches:\n  except:\n    - *dev-only\n\nBut it seems that our pipelines are quite different, the tags are not git tags, they are pipeline tags. So, I'm considering rather to use a config like:\nstages:\n - build\n - linuxbuild\njob:\n tags:\n - win2008build \n except:\n   branches:\n    - *dev-only\n\n...which would mean \"build as usual, but not my branch\". There are complications in trying it both ways, I'm pretty sure someone should know the recipe for sure.\nSo, if you please, -- how do I exclude my dev branch without changing the pipelines, config only? Is it possible at all?"}, {"role": "assistant", "content": "All you need to do is use except in the gitlab-ci.yml file and add your branches directly below like this:\nmybuild:\n    stage: test\n    image: somedockerimage\n    script:\n        - some script running\n    except:\n        - branch-name\n\nThis is working on my project without problems."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to fetch entire repository with GitLab CI/CD?\n\nI'm currently setting up GitLab CI/CD. We use GitVersion in our project, which throws the following error:\n/root/.nuget/packages/gitversiontask/5.3.7/build/GitVersionTask.targets(46,9): error : InvalidOperationException: Could not find a 'develop' or 'master' branch, neither locally nor remotely.\nAccording to this blog this happens, when the CI-server does not fetch the full repository (we have both a develop and a master branch, but I'm working on a different one). For Jenkins we solved this problem by expanding the checkout stage:\nstage(\"Checkout\") { gitlabCommitStatus(name: \"Checkout\") {\n    \n    // These are the normal checkout instructions\n    cleanWs()\n    checkout scm\n    \n    // This is the additional checkout to get all branches\n    checkout([\n      $class: 'GitSCM',\n      branches: [[name: 'refs/heads/'+env.BRANCH_NAME]],\n      extensions: [[$class: 'CloneOption', noTags: false, shallow: false, depth: 0, reference: '']],\n      userRemoteConfigs: scm.userRemoteConfigs,\n    ])\n\n    sh \"git checkout ${env.BRANCH_NAME}\"\n    sh \"git reset --hard origin/${env.BRANCH_NAME}\"\n}}\n\nI'm essentially looking for something equivalent to this for the .gitlab-ci.yml file."}, {"role": "assistant", "content": "By default, runners download your code with a 'fetch' rather than a 'clone' for speed's sake, but it can be configured a number of ways. If you want all jobs in your project's pipeline to be cloned rather than fetched, you can change the default in your CI Settings:\n\n\nIf you don't want all your jobs to clone since it's slower, you can change it in your .gitlab-ci.yml for your job:\nmy_job:\n  stage: deploy\n  variables:\n    GIT_STRATEGY: clone\n  script:\n    - ./deploy\n\nYou can read more about the GIT_STRATEGY variable here: https://docs.gitlab.com/ee/ci/runners/configure_runners.html#git-strategy\nNote: You can also set this variable to none, which is useful if you don't need the code but maybe an artifact created by a previous job. Using this, it won't checkout any code, but skip straight to your script."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-help - Display help information about Git  -m  --man"}, {"role": "assistant", "content": "Display manual page for the command in the man format. This\noption may be used to override a value set in the help.format configuration variable. By default the man program will be used to display the manual page,\nbut the man.viewer configuration variable may be used to choose\nother display programs (see below)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git command for making one branch like another\nI'm trying to take a branch with changes and bring it back to be identical to the upstream it diverged from. The changes are both local and have been pushed to github, so neither git reset or git rebase are really viable, since they change history, which is a bad thing with a branch that's already been pushed.\nI've also tried git merge with various strategies but none of them undo the local changes, i.e. if I'd added a file, a merge might bring other files back in line, but I'll still have that file that the upstream doesn't have.\nI could just create a new branch off the upstream, but i'd really like a merge that in terms of revision history applies all the changes to take my branch and make it identical to the upstream again, so that I can safely push that change without clobbering history. Is there such a command or series of commands?"}, {"role": "assistant", "content": "You could merge your upstream branch to your dev branch, with a custom merge driver, \"keepTheirs\":\nSee \"\u201cgit merge -s theirs\u201d needed \u2014 but I know it doesn't exist\".\nIn your case, only one .gitattributes would be required, and a keepTheirs script like:\nmv -f $3 $2\nexit 0\n\n\ngit merge --strategy=theirs Simulation #1\nShows as a merge, with upstream as the first parent.\nJefromi mentions (in the comments) the merge -s ours, by merging your work on the upstream (or on a temp branch starting from upstream),  and then fast-forwarding your branch to the result of that merge:\ngit checkout -b tmp origin/upstream\ngit merge -s ours downstream         # ignoring all changes from downstream\ngit checkout downstream\ngit merge tmp                        # fast-forward to tmp HEAD\ngit branch -D tmp                    # deleting tmp\n\n\nThis has the benefit of recording the upstream ancestor as the first parent, so that the merge means \"absorb this out-of-date topic branch\" rather than \"destroy this topic branch and replace it with upstream\".\n\nUpdate 2023: for instance, if you want main to reflect exactly what dev is:\ngit switch -c tmp dev\ngit merge -s ours main   # ignoring all changes from main\ngit switch main\ngit merge tmp            # fast-forward to tmp HEAD, which is dev\ngit branch -D tmp        # deleting tmp\n\n\n(Edit 2011):\nThis workflow has been reported in this blog post by the OP:\n\nWhy do I want this again?\nAs long as my repo had nothing to do with the public version, this was all fine, but since now I'd want the ability to collorate on WIP with other team members and outside contributors, I want to make sure that my public branches are reliable for others to branch off and pull from, i.e. no more rebase and reset on things I've pushed to the remote backup, since it's now on GitHub and public.\nSo that leaves me with how I should proceed.\n99% of the time, my copy will go into the upstream master, so I want to work my master and push into upstream most of the time.\nBut every once in a while, what I have in wip will get invalidated by what goes into upstream, and I will abandon some part of my wip.\nAt that point, I want to bring my master back in sync with upstream, but not destroy any commit points on my publicly pushed master. I.e. I want a merge with upstream that ends up with the changeset that make my copy identical to upstream.\nAnd that's what git merge --strategy=theirs should do.\n\n\ngit merge --strategy=theirs Simulation #2\nShows as a merge, with ours as the first parent.\n(proposed by jcwenger)\ngit checkout -b tmp upstream\ngit merge -s ours thebranch         # ignoring all changes from downstream\ngit checkout downstream\ngit merge --squash tmp               # apply changes from tmp, but not as merge.\ngit rev-parse upstream > .git/MERGE_HEAD #record upstream 2nd merge head\ngit commit -m \"rebaselined thebranch from upstream\" # make the commit.\ngit branch -D tmp                    # deleting tmp\n\n\ngit merge --strategy=theirs Simulation #3\nThis blog post mentions:\ngit merge -s ours ref-to-be-merged\ngit diff --binary ref-to-be-merged | git apply -R --index\ngit commit -F .git/COMMIT_EDITMSG --amend\n\n\nsometimes you do want to do this, and not because you have \"crap\" in your history, but perhaps because you want to change the baseline for development in a public repository where rebasing should be avoided.\n\n\ngit merge --strategy=theirs Simulation #4\n(same blog post)\n\nAlternatively, if you want to keep the local upstream branches fast-forwardable, a potential compromise is to work with the understanding that for sid/unstable, the upstream branch can from time to time be reset/rebased (based on events that are ultimately out of your control on the upstream project's side).\nThis isn't a big deal, and working with that assumption means that it's easy to keep the local upstream branch in a state where it only takes fast-forward updates.\n\ngit branch -m upstream-unstable upstream-unstable-save\ngit branch upstream-unstable upstream-remote/master\ngit merge -s ours upstream-unstable\ngit diff --binary ref-to-be-merged | git apply -R --index --exclude=\"debian/*\"\ngit commit -F .git/COMMIT_EDITMSG --amend\n\n\ngit merge --strategy=theirs Simulation #5\n(proposed by Barak A. Pearlmutter):\ngit checkout MINE\ngit merge --no-commit -s ours HERS\ngit rm -rf .\ngit checkout HERS -- .\ngit checkout MINE -- debian # or whatever, as appropriate\ngit gui # edit commit message & click commit button\n\n\ngit merge --strategy=theirs Simulation #6\n(proposed by the same Michael Gebetsroither):\n\nMichael Gebetsroither chimed in, claiming I was \"cheating\" ;) and gave another solution with lower-level plumbing commands:\n(it wouldn't be git if it wouldn't be possible with git only commands, everything in git with diff/patch/apply isn't a real solution ;).\n\n# get the contents of another branch\ngit read-tree -u --reset <ID>\n# selectivly merge subdirectories\n# e.g. superseed upstream source with that from another branch\ngit merge -s ours --no-commit other_upstream\ngit read-tree --reset -u other_upstream     # or use --prefix=foo/\ngit checkout HEAD -- debian/\ngit checkout HEAD -- .gitignore\ngit commit -m 'superseed upstream source' -a\n\n\ngit merge --strategy=theirs Simulation #7\n\nThe necessary steps can be described as:\n\nReplace your worktree with upstream\nApply the changes to the index\nAdd upstream as the second parent\nCommit\n\nThe command git read-tree overwrites the index with a different tree, accomplishing the second step, and has flags to update the work tree, accomplishing the first step.  When committing, git uses the SHA1 in .git/MERGE_HEAD as the second parent, so we can populate this to create a merge commit.  Therefore, this can be accomplished with:\n\ngit read-tree -u --reset upstream                 # update files and stage changes\ngit rev-parse upstream > .git/MERGE_HEAD          # setup merge commit\ngit commit -m \"Merge branch 'upstream' into mine\" # commit\n\n\nGit 2.44 (Q1 2024) also proposes a custom merge driver approach (that I illustrate in \"git merge -s theirs needed, but it does not exist\").\nCustom merge drivers need access to the names of the revisions they are working on, so that the merge conflict markers they introduce can refer to those revisions.\nThe conflict labels to be used for the common ancestor, local head and other head can be passed by using the placeholders '%S', '%X' and '%Y' respectively."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-status - Show the working tree status  -v  --verbose"}, {"role": "assistant", "content": "In addition to the names of files that have been changed, also\nshow the textual changes that are staged to be committed\n(i.e., like the output of git diff --cached ). If -v is specified\ntwice, then also show the changes in the working tree that\nhave not yet been staged (i.e., like the output of git diff )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Gitlab - How to add badge based on jobs pipeline\n\nMy goal is to show badges (ex : ) based on pipeline results.\nI have a private gitlab ce omnibus instance with the following .gitlab-ci.yml : \nimage: python:3.6\n\nstages:\n  - lint\n  - test\n\nbefore_script:\n  - python -V\n  - pip install pipenv\n  - pipenv install --dev\n\nlint:\n  stage: lint\n  script:\n  - pipenv run pylint --output-format=text --load-plugins pylint_django project/ | tee pylint.txt\n  - score=$(sed -n 's/^Your code has been rated at \\([-0-9.]*\\)\\/.*/\\1/p' pylint.txt)\n  - echo \"Pylint score was $score\"\n  - ls\n  - pwd\n  - pipenv run anybadge --value=$score --file=pylint.svg pylint\n  artifacts:\n    paths:\n      - pylint.svg\n\ntest:\n  stage: test\n  script:\n  - pipenv run python manage.py test\n\nSo I thought that I would store the image in the artifacts of the lint job and display it via the badge feature.\nBut I encounter the following issue : when I browse https://example.com/[group]/[project]/-/jobs/[ID]/artifacts/file/pylint.svg, instead of seeing the badge I have the following message : \nThe image could not be displayed because it is stored as a job artifact. You can download it instead.\n\nAnd anyways, I feel like this is the wrong way, because even if I could get the image, there don't seems to be a way to get the image from the last job since gitlab URL for badges images only supports %{project_path}, %{project_id}, %{default_branch}, %{commit_sha}\nSo how one would add badge to a gitlab project based on a svg generated from results in a gitlab pipeline ?\nMy guess is that I could push to a .badge folder but that doesn't sound like a clean solution."}, {"role": "assistant", "content": "You can indeed get the artifact(s) for the latest job (see documentation here), but the trick is that you need to use a slightly different URL:\nhttps://example.com/[group]/[project]/-/jobs/artifacts/[ref]/raw/pylint.svg?job=lint\nwhere [ref] is the reference to your branch/commit/tag.\nSpeaking of badge placeholders available in Gitlab, you can potentially put %{default_branch} or %{commit_sha} into [ref]. This won't allow you to get the correct badge for every branch, but at least your default branch will get one.\nPlease also note that ?job=lint query parameter is required, without it the URL won't work."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-revert"}, {"role": "assistant", "content": "Revert some existing commits"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Inject GitLab CI Variables into Terraform Variables\n\nI'm having a set of Terraform files and in particular one variables.tf file which sort of holds my variables like aws access key, aws access token etc. I want to now automate the resource creation on AWS using GitLab CI / CD. \nMy plan is the following:\n\nWrite a .gitlab-ci-yml file\nHave the terraform calls in the .gitlab-ci.yml file\n\nI know that I can have secret environment variables in GitLab, but I'm not sure how I can push those variables into my Terraform variables.tf file which looks like this now!\n# AWS Config\n\nvariable \"aws_access_key\" {\n  default = \"YOUR_ADMIN_ACCESS_KEY\"\n}\n\nvariable \"aws_secret_key\" {\n  default = \"YOUR_ADMIN_SECRET_KEY\"\n}\n\nvariable \"aws_region\" {\n  default = \"us-west-2\"\n}\n\nIn my .gitlab-ci.yml, I have access to the secrets like this:\n- 'AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}' \n- 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}' \n- 'AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}'\n\nHow can I pipe it to my Terraform scripts? Any ideas? I would need to read the secrets from GitLab's environment and pass it on to the Terraform scripts!"}, {"role": "assistant", "content": "Which executor are you using for your GitLab runners? \nYou don't necessarily need to use the Docker executor but can use a runner installed on a bare-metal machine or in a VM. \nIf you install the gettext package on the respective machine/VM as well you can use the same method as I described in Referencing gitlab secrets in Terraform for the Docker executor. \nAnother possibility could be that you set \njob:\n    stage: ...\n    variables: \n        TF_VAR_SECRET1: ${GITLAB_SECRET}\n\nor \njob:\n    stage: ...\n    script:\n        - export TF_VAR_SECRET1=${GITLAB_SECRET}\n\nin your CI job configuration and interpolate these. Please see Getting an Environment Variable in Terraform configuration? as well"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitLab pull submodules inside CI\n\nI have a GitLab project that utilises GitLab CI.\nThe project also uses submodules, both the project and it's submodules are under the same GitLab account.\nHere is my .gitmodules file\n[submodule \"proto_contracts\"]\n    path = proto_contracts\n    url = https://gitlab.com/areller/proto_contracts.git\n\nI also have this piece in the .gitlab-ci.yml file\nvariables:\n  GIT_SUBMODULE_STRATEGY: recursive\n\nHowever, when i run the CI I get this error\nfatal: could not read Username for 'https://gitlab.com': No such device or address\n\nBoth the project and the submodules are in a private repository so you would expect to be prompted for authentication, but as I've mentioned, the project and the submodule are under the same account and one of the runner's jobs is to clone the original repository\n\nSo it's odd that it's unable to reach the submodule\nIs there a way around it?"}, {"role": "assistant", "content": "You must use relative URLs for submodules. Update your .gitmodules as follow:\n    [submodule \"proto_contracts\"]\n        path = proto_contracts\n        url = ../../areller/proto_contracts.git\n\nFurther reading: Using Git submodules with GitLab CI | GitLab Docs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  grep.fallbackToNoIndex"}, {"role": "assistant", "content": "If set to true, fall back to git grep --no-index if git grep is executed outside of a git repository.  Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  rebase"}, {"role": "assistant", "content": "To reapply a series of changes from a branch to a\ndifferent base, and reset the head of that branch\nto the result."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --namespace=<path>"}, {"role": "assistant", "content": "Set the Git namespace.  See gitnamespaces for more\ndetails.  Equivalent to setting the GIT_NAMESPACE environment\nvariable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "IntelliJ: Viewing diff of all changed files between local and a git commit/branch\nUsing IntelliJ's diff viewer is a very nice way to review code because you can make changes in your local version with all the capabilities of the IntelliJ code editor (refactoring, completion, etc).\nUnfortunately, I have not worked out how to do the most important thing when you're doing code reviews in IntelliJ, namely: Looking at the diff of all the changed files in the working tree (checked out to the branch you want to merge from) and another branch (the branch you plan to merge into, e.g. \"master\").\nDoes anyone know how to do this?"}, {"role": "assistant", "content": "This has now been implemented. In order to compare two branches, you do:\n\nCheck out one of the branches you want to compare with.\nSelect the branch you want to compare with in the Git branch popup in the status bar in the bottom right of the IntelliJ window. A popup with some options is shown.\nSelect the \"Compare\" option.\nThis, by default, shows all the commits. You can also select the \"Diff\" tab to show the actual changes.\n\nThis is all described in much greater detail in one of their blog posts."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  rebase.updateRefs"}, {"role": "assistant", "content": "If set to true enable --update-refs option by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git push error: Unable to unlink old (Permission denied)\nIn the remote server I have a post-receive hook set up in order to make a git checkout of my repository:\n#!/bin/sh\nGIT_WORK_TREE=/var/www/<website> git checkout -f\n\nBut when I make a push from my local machine to the git repository in the server, I get the following error messages:\nremote: error: unable to unlink old '<file>' (Permission denied)\n\nThis appears many times over, one error message for almost every file.\nHowever I have a README.txt file that I'm able to change using git, here are its permissions:\n-rw-r--r--  1 <serverusername>  <serverusername>  2939 Aug  2 10:58 README.txt\n\nBut other files with exactly the same owner and same permissions, give me that error.\nIn another local repository for another website, I have the files with my local machine username as owner, and when I push to the remote server it respects the remote server owner of the files and works like a charm.\nObviously it seems a permissions related error, but I can't find a way to fix it, any suggestions?"}, {"role": "assistant", "content": "When you have to unlink file, you have to have permission 'w' for directory, in which file is, not for the file..."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.dirstat"}, {"role": "assistant", "content": "A comma separated list of --dirstat parameters specifying the\ndefault behavior of the --dirstat option to git-diff and friends. The defaults can be overridden on the command line\n(using --dirstat=<param1,param2,...> ). The fallback defaults\n(when not changed by diff.dirstat ) are changes,noncumulative,3 .\nThe following parameters are available: changes Compute the dirstat numbers by counting the lines that have been\nremoved from the source, or added to the destination. This ignores\nthe amount of pure code movements within a file.  In other words,\nrearranging lines in a file is not counted as much as other changes.\nThis is the default behavior when no parameter is given. lines Compute the dirstat numbers by doing the regular line-based diff\nanalysis, and summing the removed/added line counts. (For binary\nfiles, count 64-byte chunks instead, since binary files have no\nnatural concept of lines). This is a more expensive --dirstat behavior than the changes behavior, but it does count rearranged\nlines within a file as much as other changes. The resulting output\nis consistent with what you get from the other --*stat options. files Compute the dirstat numbers by counting the number of files changed.\nEach changed file counts equally in the dirstat analysis. This is\nthe computationally cheapest --dirstat behavior, since it does\nnot have to look at the file contents at all. cumulative Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter. <limit> An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output. Example: The following will count changed files, while ignoring\ndirectories with less than 10% of the total amount of changed files,\nand accumulating child directory counts in the parent directories: files,10,cumulative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --intent-to-add"}, {"role": "assistant", "content": "When applying the patch only to the working tree, mark new\nfiles to be added to the index later (see --intent-to-add option in git-add ). This option is ignored unless\nrunning in a Git repository and --index is not specified.\nNote that --index could be implied by other options such\nas --cached or --3way ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  missingTag"}, {"role": "assistant", "content": "(ERROR) Unexpected end after type line in a tag object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  color"}, {"role": "assistant", "content": "Highlight changed words using only colors.  Implies --color ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a command to undo git init?\nI just Git init'ed a repos with a wrong user, and want to undo it.  Is there any command for this?  Do I actually have to go in and edit the .git directory?"}, {"role": "assistant", "content": "You can just delete .git.  Typically:\nrm -rf .git\n\nThen, recreate as the right user."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Checkout remote branch using git svn\nI have checked out a svn repository using git svn. Now I need to checkout one of the branches and track it. Which is the best way to do it?"}, {"role": "assistant", "content": "Standard Subversion layout\nCreate a git clone of that includes your Subversion trunk, tags, and branches with\ngit svn clone http://svn.example.com/project -T trunk -b branches -t tags\nThe --stdlayout option is a nice shortcut if your Subversion repository uses the typical structure:\ngit svn clone http://svn.example.com/project --stdlayout\nMake your git repository ignore everything the subversion repo does:\ngit svn show-ignore >> .git/info/exclude\nYou should now be able to see all the Subversion branches on the git side:\ngit branch -r\nSay the name of the branch in Subversion is waldo. On the git side, you'd run\ngit checkout -b waldo-svn remotes/waldo\nThe -svn suffix is to avoid warnings of the form\nwarning: refname 'waldo' is ambiguous.\nTo update the git branch waldo-svn, run\ngit checkout waldo-svn\ngit svn rebase\n\nStarting from a trunk-only checkout\nTo add a Subversion branch to a trunk-only clone, modify your git repository's .git/config to contain\n[svn-remote \"svn-mybranch\"]\n        url = http://svn.example.com/project/branches/mybranch\n        fetch = :refs/remotes/mybranch\nYou'll need to develop the habit of running\ngit svn fetch --fetch-all\nto update all of what git svn thinks are separate remotes. At this point, you can create and track branches as above. For example, to create a git branch that corresponds to mybranch, run\ngit checkout -b mybranch-svn remotes/mybranch\nFor the branches from which you intend to git svn dcommit, keep their histories linear!\n\nFurther information\nYou may also be interested in reading an answer to a related question."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Changing \"git status\" output colors in Posh-Git\nIn Posh-Git, when I run \"git status\" in a repository, the colors for changes and untracked files are dark red, when I have tried to configure them to be \"normal\" red.  I want to do this because I have a console with a dark background, so dark red is difficult to read.\nI searched around, and there seem to be two configuration changes which I needed to make:\n\nChange \"WorkingForegroundColor\" and \"UntrackedForegroundColor\" from \"DarkRed\" to \"Red\" in $GitPromptSettings.\nChange \"color.status.changed\" and \"color.status.untracked\" to red in git config.\n\nFrom my reading, that's all I should need to do, and yet the results of \"git status\" remain dark red.\nHere's a summary, to prove I set them as I claimed, and maybe someone can spot the error:"}, {"role": "assistant", "content": "The output of git status is controlled by your .gitconfig file. The default for changed and untracked files is a dim Red but you likely want Red Bold which is the bright (default) red you have in the prompt.\nAdd the following to your .gitconfig file:\n[color]\n    ui = true\n[color \"status\"]\n    changed = red bold\n    untracked = red bold\n    added = green bold\n\nFor anyone else referencing this in the future, the accepted colours are normal, black, red, green, yellow, blue, magenta, cyan, and white as well a single optional modifier bold, dim, ul, blink, or reverse. If two colours are given the first is the foreground, and the second is the background."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can you disable Git integration in Visual Studio 2013 permanently?\nI know that you can disable git integration by using the Tools / Options dialog, but what I've noticed is that this setting doesn't seem to persist across sessions; i.e., as soon as close and reopen the solution, Git integration is enabled again. I'm guessing Visual Studio is seeing the .git folder in my solution file system tree.\nThere are a variety of Visual Studio 2013 plugins that behave incorrectly when the Git plug-in is enabled, I prefer to manage my source control at the command line, and I work on a few very large projects for which the Git integration introduces noticeable slowdowns in opening and working with the solution. I'd like to turn it off for good, as I simply don't use it or need it. Is this possible?"}, {"role": "assistant", "content": "As you said you can disable the source control plugin going to: \n\nTools / Options \nCheck \"Show all settings\"\nSource Control / Plug-in Selection \nSet \"Current source control plug-in\" to \"None\"\n\nThen, as Ade Miller says: Restart Visual Studio.\nMy Visual Studio was working really slow since the git plugging was enabled and I managed to disable it \"persistently across sessions\" following this steps.\nHope it helps."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Multiple bitbucket accounts\nI have a Bitbucket account for my 9-5 job and I also have a personal Bitbucket account. My goal is to be able to use both on the same computer. I have installed the latest git on a Windows 7 pc.\nSo currently everything with my companies Bitbucket account works fine, I can pull/push with no problems. I created a new ssh key using ssh-keygen and assigned a new name in my case \"tech\". But I am having issues on how to tell a local repo to use the new ssh key I created. I am assuming everytime I try to connect it uses the first ssh key.\nI get the error:\n$ git push\nconq: repository access denied.\nfatal: The remote end hung up unexpectedly\nI found some advice on the internet but it seems to relate to a linux/git setup, for example I can't find the \"config\" file on windows."}, {"role": "assistant", "content": "This blog post describes a straightforward way to add multiple ssh keys to a single computer and use one ssh key per a bitbucket account. It is much clearer than the official bitbucket documentation. To summarize:\nFirst, make sure you have a default account setup through a tutorial like this one on Github.\nFor the second account:\n\nCreate a new ssh key:\nssh-keygen -f ~/.ssh/<your second account name> -C \"<you email>\"\n\nAdd the ssh key:\nssh-add ~/.ssh/<key file name> \n\nUse pbcopy < ~/.ssh/<your second account name>.pub to copy the public key and add this key to your bitbucket account (in the settings area)\n\n(On Windows you can copy the ssh key using ssh-keygen -f ~/.ssh/<your account name> -c \"<your email>\" | clip or on Linux you can follow these instructions.)\n\nAdd the following to your ~/.ssh/config file. The first sets the default key for bitbucket.org. The second sets your second key to an alias bitbucket-account2 for bitbucket.org:\nHost bitbucket.org\n  Hostname bitbucket.org\n  IdentityFile ~/.ssh/id_rsa\n\nHost bitbucket-account2\n  Hostname bitbucket.org\n  PreferredAuthentications publickey\n  IdentityFile ~/.ssh/<your second account name>\n\nYou can now clone projects with your default account the same way as before:\ngit clone [email\u00a0protected]:username/project.git\n\nTo clone a project with the second identity, replace bitbucket.org with the Host that you specified in the ~/.ssh/config file (i.e. bitbucket-account2 above):\ngit clone git@bitbucket-account2:username/project.git\n\n\nThat's it!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission"}, {"role": "assistant", "content": "MUA-SPECIFIC HINTS Here are some hints on how to successfully submit patches inline using\nvarious mailers. GMail GMail does not have any way to turn off line wrapping in the web\ninterface, so it will mangle any emails that you send.  You can however\nuse \"git send-email\" and send your patches through the GMail SMTP server, or\nuse any IMAP email client to connect to the google IMAP server and forward\nthe emails through that. For hints on using git send-email to send your patches through the\nGMail SMTP server, see the EXAMPLE section of git-send-email . For hints on submission using the IMAP interface, see the EXAMPLE\nsection of git-imap-send . Thunderbird By default, Thunderbird will both wrap emails as well as flag\nthem as being format=flowed , both of which will make the\nresulting email unusable by Git. There are three different approaches: use an add-on to turn off line wraps,\nconfigure Thunderbird to not mangle patches, or use\nan external editor to keep Thunderbird from mangling the patches. Approach #1 (add-on) Install the Toggle Word Wrap add-on that is available from https://addons.mozilla.org/thunderbird/addon/toggle-word-wrap/ It adds a menu entry \"Enable Word Wrap\" in the composer\u2019s \"Options\" menu\nthat you can tick off. Now you can compose the message as you otherwise do\n(cut + paste, git format-patch | git imap-send , etc), but you have to\ninsert line breaks manually in any text that you type. Approach #2 (configuration) Three steps: Configure your mail server composition as plain text:\nEdit\u2026\u200bAccount Settings\u2026\u200bComposition & Addressing,\nuncheck \"Compose Messages in HTML\". Configure your general composition window to not wrap. In Thunderbird 2:\nEdit..Preferences..Composition, wrap plain text messages at 0 In Thunderbird 3:\nEdit..Preferences..Advanced..Config Editor.  Search for\n\"mail.wrap_long_lines\".\nToggle it to make sure it is set to false . Also, search for\n\"mailnews.wraplength\" and set the value to 0. Disable the use of format=flowed:\nEdit..Preferences..Advanced..Config Editor.  Search for\n\"mailnews.send_plaintext_flowed\".\nToggle it to make sure it is set to false . After that is done, you should be able to compose email as you\notherwise would (cut + paste, git format-patch | git imap-send , etc),\nand the patches will not be mangled. Approach #3 (external editor) The following Thunderbird extensions are needed:\nAboutConfig from https://mjg.github.io/AboutConfig/ and\nExternal Editor from https://globs.org/articles.php?lng=en&pg=8 Prepare the patch as a text file using your method of choice. Before opening a compose window, use Edit\u2192Account Settings to\nuncheck the \"Compose messages in HTML format\" setting in the\n\"Composition & Addressing\" panel of the account to be used to\nsend the patch. In the main Thunderbird window, before you open the compose\nwindow for the patch, use Tools\u2192about:config to set the\nfollowing to the indicated values: mailnews.send_plaintext_flowed  => false\n\tmailnews.wraplength             => 0 Open a compose window and click the external editor icon. In the external editor window, read in the patch file and exit\nthe editor normally. Side note: it may be possible to do step 2 with\nabout:config and the following settings but no one\u2019s tried yet. mail.html_compose                       => false\n\tmail.identity.default.compose_html      => false\n\tmail.identity.id?.compose_html          => false There is a script in contrib/thunderbird-patch-inline which can help\nyou include patches with Thunderbird in an easy way. To use it, do the\nsteps above and then use the script as the external editor. KMail This should help you to submit patches inline using KMail. Prepare the patch as a text file. Click on New Mail. Go under \"Options\" in the Composer window and be sure that\n\"Word wrap\" is not set. Use Message \u2192 Insert file\u2026\u200b and insert the patch. Back in the compose window: add whatever other text you wish to the\nmessage, complete the addressing and subject fields, and press send."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: Pulling a rebased branch\nLet me describe my situation:\nMr Blond and Mr Orange are working on branch A that branches out of the master branch on commit M1. Branch A has 2 commits: A1 and A2.\nM1  \n   \\\n    \\\n     A1 - A2\n\nMeanwhile, Mr Orange committed and pushed 2 more commits on the master branch, M2 and M3.\nM1  - M2 - M3\n   \\\n    \\\n     A1 - A2\n\nMr Blond pulls from the remote, and after a while decides to rebase onto the master branch:\nM1  - M2 - M3\n   \\         \\\n    \\         \\\n     A1 - A2   A1` - A2`\n\nNow A1` and A2` are the rebased commits that exist locally at Mr blond's, and A1 and A2 exist remotely. Mr Blond pushes his commits, using -f to force his changes and \"rewrite\" history. Now the remote repository looks like this:\nM1  - M2 - M3\n             \\\n              \\\n               A1` - A2`\n\nBut Mr. Orange worked on the A branch as well. His local repository still looks like this:\nM1  - M2 - M3\n   \\\n    \\\n     A1 - A2\n\nWhat does Mr. Orange need to do in order to be synchronized with A branch in the remote repository?\nA normal pull won't work. Will pull -f force the changes from the remote locally? I know that deleting the local version of A and bringing it again from the remote repository will do the trick but that doesn't seem to be a good way to achieve that."}, {"role": "assistant", "content": "If Mr. Orange doesn't mind losing his changes, he can fetch from the server, then checkout the the branch:\ngit checkout A to get onto his local A branch.\nThen, assuming the remote is named \"origin\", reset your local branch in favor of the remote branch:\ngit reset --hard origin/A\nIf he is concerned with losing changes, he can merge the server's changes in to resolve them (from his own A branch, and presuming again that the remote is named \"origin\") with git merge origin/A. This will make a new commit that's on top of both his and the remote's A branches with the changes from both merged together. Then this can be pushed back to the remote."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "npm install package from github repo subfolder\nIs it possible to install npm package from github when the package located inside subfolder?\nFor example, we have Microsoft BotBuilder repository:\nhttps://github.com/Microsoft/BotBuilder\nBut I need to install package inside subfolder \"Node/core/\":\nhttps://github.com/Microsoft/BotBuilder/tree/master/Node/core/\nSo how can I install it with npm?"}, {"role": "assistant", "content": "Add to package.json:\n...\n\"scripts\": {\n  \"postinstall\": \"mkdir BotBuilder; cd BotBuilder; git init; git remote add -f origin https://github.com/Microsoft/BotBuilder.git; git config core.sparseCheckout true; echo \\\"Node/core\\\" >> .git/info/sparse-checkout; git pull --depth=1 origin master; cd ..; npm i ./BotBuilder/Node/core/\"\n  ...\n},\n...\n\npostinstall script is running after the package is installed.\nAnd step by step:\n\nMake folder to clone repo: mkdir BotBuilder\nenter to the folder: cd BotBuilder\ninit git repo: git init\nset git origin to Microsoft/BotBuilder repo: git remote add -f origin https://github.com/Microsoft/BotBuilder.git\nenable sparse checkout: git config core.sparseCheckout true\nadd Node/core to checkout list: echo \"Node/core\" >> .git/info/sparse-checkout\npull part of repo: git pull --depth=1 origin master\nenter to Your app folder: cd ..\ninstall BotBuilder: npm i ./BotBuilder/Node/core/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --pickaxe-regex"}, {"role": "assistant", "content": "Treat the <string> given to -S as an extended POSIX regular\nexpression to match."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What's the equivalent of Subversion's \"use-commit-times\" for Git?\nI need the timestamps of files on my local system and on my server to be in sync. This is accomplished with Subversion by setting use-commit-times=true in the configuration so that the last modified of each file is when it was committed.\nEach time I clone my repository, I want the timestamps of files to reflect when they were last changed in the remote repository, not when I cloned the repository.\nIs there a way to do this with Git?"}, {"role": "assistant", "content": "UPDATE: My solution is now packaged into Debian, Ubuntu, Linux Mint, Fedora, Gentoo Linux, Arch Linux and possibly other distributions:\nhttps://github.com/MestreLion/git-tools#install\napt install git-restore-mtime  # Debian, Ubuntu, Linux Mint\nyum install git-tools          # Fedora, Red Hat Enterprise Linux (RHEL), CentOS\nemerge dev-vcs/git-tools       # Gentoo Linux\npacman -S git-tools-git        # Arch Linux\n\n\nIMHO, not storing timestamps (and other metadata like permissions and ownership) is a big limitation of Git.\nLinus' rationale of timestamps being harmful just because it \"confuses make\" is lame:\n\nmake clean is enough to fix any problems.\n\nApplies only to projects that use make, mostly C/C++. It is completely moot for scripts like Python, Perl, or documentation in general.\n\nThere is only harm if you apply the timestamps. There would be no harm in storing them in repo. Applying them could be a simple --with-timestamps option for git checkout and friends (clone, pull, etc.), at the user's discretion.\n\n\nBoth Bazaar and Mercurial stores metadata. Users can apply them or not when checking out. But in Git, since original timestamps are not even available in the repository, there is no such option.\nSo, for a very small gain (not having to re-compile everything) that is specific to a subset of projects, Git as a general DVCS was crippled, some information from about files is lost, and, as Linus said, it's infeasible to do it now. Sad.\nThat said, may I offer two approaches?\n1 - http://repo.or.cz/w/metastore.git , by David H\u00e4rdeman. It tries to do what Git should have done in the first place: stores metadata (not only timestamps) in the repository when committing (via a pre-commit hook), and reapplies them when pulling (also via hooks).\n2 - My humble version of a script I used before for generating release tarballs. As mentioned in other answers, the approach is a little different: to apply for each file the timestamp of the most recent commit where the file was modified.\n\ngit-restore-mtime, with lots of options, supports any repository layout, and runs on Python 3.\n\nBelow is a really bare-bones version of the script, as a proof-of-concept, on Python 2.7. For actual usage I strongly recommend the full version above:\n#!/usr/bin/env python\n# Bare-bones version. Current directory must be top-level of work tree.\n# Usage: git-restore-mtime-bare [pathspecs...]\n# By default update all files\n# Example: to only update only the README and files in ./doc:\n# git-restore-mtime-bare README doc\n\nimport subprocess, shlex\nimport sys, os.path\n\nfilelist = set()\nfor path in (sys.argv[1:] or [os.path.curdir]):\n    if os.path.isfile(path) or os.path.islink(path):\n        filelist.add(os.path.relpath(path))\n    elif os.path.isdir(path):\n        for root, subdirs, files in os.walk(path):\n            if '.git' in subdirs:\n                subdirs.remove('.git')\n            for file in files:\n                filelist.add(os.path.relpath(os.path.join(root, file)))\n\nmtime = 0\ngitobj = subprocess.Popen(shlex.split('git whatchanged --pretty=%at'),\n                          stdout=subprocess.PIPE)\nfor line in gitobj.stdout:\n    line = line.strip()\n    if not line: continue\n\n    if line.startswith(':'):\n        file = line.split('\\t')[-1]\n        if file in filelist:\n            filelist.remove(file)\n            #print mtime, file\n            os.utime(file, (mtime, mtime))\n    else:\n        mtime = long(line)\n\n    # All files done?\n    if not filelist:\n        break\n\nPerformance is pretty impressive, even for monster projects wine, git or even the Linux kernel:\nBash\n# 0.27 seconds\n# 5,750 log lines processed\n# 62 commits evaluated\n# 1,155 updated files\n\nGit\n# 3.71 seconds\n# 96,702 log lines processed\n# 24,217 commits evaluated\n# 2,495 updated files\n\nWine\n# 13.53 seconds\n# 443,979 log lines processed\n# 91,703 commits evaluated\n# 6,005 updated files\n\nLinux kernel\n# 59.11 seconds\n# 1,484,567 log lines processed\n# 313,164 commits evaluated\n# 40,902 updated files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bundle - Move objects and refs by archive  <git-rev-list-args>"}, {"role": "assistant", "content": "A list of arguments, acceptable to git rev-parse and git rev-list (and containing a named ref, see SPECIFYING REFERENCES\nbelow), that specifies the specific objects and references\nto transport.  For example, master~10..master causes the\ncurrent master reference to be packaged along with all objects\nadded since its 10th ancestor commit.  There is no explicit\nlimit to the number of references and objects that may be\npackaged."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Merging to a branch in git without switching to it\nI have an application running in a git repository on a branch (say dev). The application modifies the content in some the repository and commits them. I now have to merge these changes into another branch (say master) but the snag is that I don't want to git checkout master before doing this. Is there some way to say \"merge current branch into master\"?"}, {"role": "assistant", "content": "The \"master\" in your case appears to be \"fast-forwardable\". You could \"push\" the branch to master.\ncd /path_to_dir_with_no_branch_switch/\ngit push . appbranch:master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub authentication failing over https, returning wrong email address\n\nInitiating a push or any other action with GitHub from the command line (over https, not ssh) that calls for the username and password not only fails but, when it does, it returns \nUsername for 'https://github.com': username\nPassword for 'https://[email\u00a0protected]': \nremote: Invalid username or password.\nfatal: Authentication failed for 'https://github.com/username/repository.git/'\n\nI do not have an @github.com address. The password and username are correct.\nI know I could switch to SSH and use keys but that doesn't answer why the authentication is failing over https."}, {"role": "assistant", "content": "GitHub's support determined the root of the issue right away: Two-factor authorization.\nTo use GitHub over the shell with https, create an OAuth token. As the page notes, I did have to remove my username and password credentials from Keychain but with osx-keychain in place, the token is stored as the password and things work exactly as they would over https without two-factor authorization in place."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  -C <object>  --reuse-message=<object>"}, {"role": "assistant", "content": "Take the given blob object (for example, another note) as the\nnote message. (Use git notes copy <object> instead to\ncopy notes between objects.).  By default, message will be\ncopied verbatim, but if you wish to strip out the lines\nstarting with # and empty lines other than a single line\nbetween paragraphs, use with`--stripspace` option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --no-indent-heuristic"}, {"role": "assistant", "content": "Disable the indent heuristic."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "SSH Host Key Verification Failed inside GitLab CI\n\nLocal Setup\nI created a public and private SSH key via the ssh-keygen command.\nI decided to setup the private key locally first, before setting it up on my repo's gitlab CI.\nI setup the public key on the server (in this case, another gitlab repo, but this may change in the future and shouldn't affect the question).\nI successfully communicated with the server locally via the following command  (in this case I am using SSH via git, but this again may change in the future):\ngit clone [email\u00a0protected]:...../......git\n\nGitLab CI Setup\nI then decided to setup the private key and communication on gitlab CI.\nInside my repo, I navigated to Settings -> Continuous Integration -> Variables, and added the following environment variables:\n\nSSH_DEPLOY_PRIVATE_KEY - I used to same private key that I used locally\nSSH_KNOWN_HOSTS\n\nI took the gitlab.com known host from my local computer's ~/.ssh/known_hosts file\ngitlab.com,35.231.145.151 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=\n\n\nI then setup the SSH inside .gitlab-ci.yml:\nscript:\n  - apt-get install openssh-client -y\n  - eval $(ssh-agent -s)\n  - echo \"$SSH_DEPLOY_PRIVATE_KEY\" | tr -d '\\r' | ssh-add - > /dev/null\n  - mkdir -p /.ssh && touch /.ssh/known_hosts\n  - echo \"$SSH_KNOWN_HOSTS\" >> /.ssh/known_hosts\n  - mkdir -p ~/.ssh\n  - chmod 700 ~/.ssh\n\nThis seemed to work fine and I got the following message: Identity added: (stdin) (runner@....)\nI then added the same git clone command to communicate with the server, and it failed with the following error:\nCloning into '......'...\nHost key verification failed.\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n\nTesting locally still works. I used the same commands above to setup the SSH locally (except I used pacman -S openssh to install instead).\nHow do I fix this?\nEdit\nI'm aware that I can execute ssh-keyscan directly in the GitLab CI and this should in theory solve the problem, but from what I know, this is susceptible to man-in-the-middle attacks. I'm trying to find a more secure solution.\nEdit 2\nAfter running ssh-keyscan directly in the GitLab CI, I get the same error message.\nVerbose output is the same:\n$ GIT_SSH_COMMAND=\"ssh -vvv\" git clone [email\u00a0protected]:..../.....git deployed\nCloning into 'deployed'...\nHost key verification failed.\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n\nEdit 3\nSeems to be connected to the internet. Plus apt-get install wouldn't work otherwise.\n\nEdit 4\nI don't understand why this is such a difficult task. I followed this article and am doing everything correctly. There seems to be plenty of other similar questions, which also do not have any answers. Is this just an issue with GitLab CI that we have no control over?\nI'm also now thinking that it has something to do with the fact that the SSH server is another GitLab repo. Maybe GitLab CI blocks SSH connections within the same network. Not sure why but it's a possibility. Also don't know how you'd connect without SSH.\nEdit 5\nThe verbose output clearly was not working using GIT_SSH_COMMAND, so I tried an ssh connection without git:\nssh -vvvv [email\u00a0protected]\n\nLog output:\nOpenSSH_6.7p1 Debian-5+deb8u5, OpenSSL 1.0.1t  3 May 2016\ndebug1: Reading configuration data /etc/ssh/ssh_config\ndebug1: /etc/ssh/ssh_config line 19: Applying options for *\nPseudo-terminal will not be allocated because stdin is not a terminal.\ndebug2: ssh_connect: needpriv 0\ndebug1: Connecting to gitlab.com [35.231.145.151] port 22.\ndebug1: Connection established.\ndebug1: permanently_set_uid: 0/0\ndebug1: key_load_public: No such file or directory\ndebug1: identity file /root/.ssh/id_rsa type -1\ndebug1: key_load_public: No such file or directory\ndebug1: identity file /root/.ssh/id_rsa-cert type -1\ndebug1: key_load_public: No such file or directory\ndebug1: identity file /root/.ssh/id_dsa type -1\ndebug1: key_load_public: No such file or directory\ndebug1: identity file /root/.ssh/id_dsa-cert type -1\ndebug1: key_load_public: No such file or directory\ndebug1: identity file /root/.ssh/id_ecdsa type -1\ndebug1: key_load_public: No such file or directory\ndebug1: identity file /root/.ssh/id_ecdsa-cert type -1\ndebug1: key_load_public: No such file or directory\ndebug1: identity file /root/.ssh/id_ed25519 type -1\ndebug1: key_load_public: No such file or directory\ndebug1: identity file /root/.ssh/id_ed25519-cert type -1\ndebug1: Enabling compatibility mode for protocol 2.0\ndebug1: Local version string SSH-2.0-OpenSSH_6.7p1 Debian-5+deb8u5\ndebug1: Remote protocol version 2.0, remote software version OpenSSH_7.2p2 Ubuntu-4ubuntu2.8\ndebug1: match: OpenSSH_7.2p2 Ubuntu-4ubuntu2.8 pat OpenSSH* compat 0x04000000\ndebug2: fd 3 setting O_NONBLOCK\ndebug3: load_hostkeys: loading entries for host \"gitlab.com\" from file \"/root/.ssh/known_hosts\"\ndebug3: load_hostkeys: loaded 0 keys\ndebug1: SSH2_MSG_KEXINIT sent\ndebug1: SSH2_MSG_KEXINIT received\ndebug2: kex_parse_kexinit: [email\u00a0protected],ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1,diffie-hellman-group1-sha1\ndebug2: kex_parse_kexinit: [email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519,ssh-rsa,ssh-dss\ndebug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,[email\u00a0protected]\ndebug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,[email\u00a0protected]\ndebug2: kex_parse_kexinit: [email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],hmac-sha2-256,hmac-sha2-512,hmac-sha1,[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],hmac-md5,hmac-ripemd160,[email\u00a0protected],hmac-sha1-96,hmac-md5-96\ndebug2: kex_parse_kexinit: [email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],hmac-sha2-256,hmac-sha2-512,hmac-sha1,[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],hmac-md5,hmac-ripemd160,[email\u00a0protected],hmac-sha1-96,hmac-md5-96\ndebug2: kex_parse_kexinit: none,[email\u00a0protected],zlib\ndebug2: kex_parse_kexinit: none,[email\u00a0protected],zlib\ndebug2: kex_parse_kexinit: \ndebug2: kex_parse_kexinit: \ndebug2: kex_parse_kexinit: first_kex_follows 0 \ndebug2: kex_parse_kexinit: reserved 0 \ndebug2: kex_parse_kexinit: [email\u00a0protected],ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1\ndebug2: kex_parse_kexinit: ssh-rsa,rsa-sha2-512,rsa-sha2-256,ecdsa-sha2-nistp256,ssh-ed25519\ndebug2: kex_parse_kexinit: [email\u00a0protected],aes128-ctr,aes192-ctr,aes256-ctr,[email\u00a0protected],[email\u00a0protected]\ndebug2: kex_parse_kexinit: [email\u00a0protected],aes128-ctr,aes192-ctr,aes256-ctr,[email\u00a0protected],[email\u00a0protected]\ndebug2: kex_parse_kexinit: [email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],hmac-sha2-256,hmac-sha2-512,hmac-sha1\ndebug2: kex_parse_kexinit: [email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],hmac-sha2-256,hmac-sha2-512,hmac-sha1\ndebug2: kex_parse_kexinit: none,[email\u00a0protected]\ndebug2: kex_parse_kexinit: none,[email\u00a0protected]\ndebug2: kex_parse_kexinit: \ndebug2: kex_parse_kexinit: \ndebug2: kex_parse_kexinit: first_kex_follows 0 \ndebug2: kex_parse_kexinit: reserved 0 \ndebug2: mac_setup: setup [email\u00a0protected]\ndebug1: kex: server->client aes128-ctr [email\u00a0protected] none\ndebug2: mac_setup: setup [email\u00a0protected]\ndebug1: kex: client->server aes128-ctr [email\u00a0protected] none\ndebug1: sending SSH2_MSG_KEX_ECDH_INIT\ndebug1: expecting SSH2_MSG_KEX_ECDH_REPLY\ndebug1: Server host key: ECDSA f1:d0:fb:46:73:7a:70:92:5a:ab:5d:ef:43:e2:1c:35\ndebug3: load_hostkeys: loading entries for host \"gitlab.com\" from file \"/root/.ssh/known_hosts\"\ndebug3: load_hostkeys: loaded 0 keys\ndebug3: load_hostkeys: loading entries for host \"35.231.145.151\" from file \"/root/.ssh/known_hosts\"\ndebug3: load_hostkeys: loaded 0 keys\ndebug1: read_passphrase: can't open /dev/tty: No such device or address\nHost key verification failed.\n\nThe second-last line indicates that it's trying to communicate with the terminal using the /dev/tty file. Of course, this script is running in a non-interactive manor so it fails. Shouldn't it be using my key instead of requesting a passphrase from the terminal?"}, {"role": "assistant", "content": "You may need to try setting the mode to 644 rather than 700. 644 is what is suggested in the Verifying the SSH host keys documentation, and is also what SSH uses for this file by default. Some parts of SSH are very particular about this - I'm not sure if known_hosts is particular.  \nThe docs also mention you should set the value of SSH_KNOWN_HOSTS variable to the entire output of ssh-keyscan since there are multiple keys. \nEDIT:\nThe following .gitlab-ci.yml worked for me on GitLab.com. Note the use of ~/.ssh/ rather than /.ssh/. \nimage: ubuntu:latest\n\ntest_job:\n  script:\n  - apt-get update\n  - apt-get install openssh-client git-core -y\n  - eval $(ssh-agent -s)\n  - echo \"$SSH_DEPLOY_PRIVATE_KEY\" | tr -d '\\r' | ssh-add - > /dev/null\n  - mkdir -p ~/.ssh && touch ~/.ssh/known_hosts\n  - echo \"$SSH_KNOWN_HOSTS\" >> ~/.ssh/known_hosts\n  - git clone [email\u00a0protected]:gitlab-org/gitlab-ce.git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Symfony2 - creating own vendor bundle - project and git strategy\nWe're considering creating our own common bundle for entity mapping and services for use within few separate apps. A bundle should be easy to modify, run, include and test. I know about Best Practices for Structuring Bundles, but I don't know what git strategy to use when it comes to development.\nShould we create common bundle as a whole project and commit whole repository to our git server, or is it better to start source control only for root of common bundle and push only its contents? I see this approach in bundles available on github, but I don't know easy and comfortable way to develop bundles that way."}, {"role": "assistant", "content": "Create a new empty symfony project\nphp composer.phar create-project symfony/framework-standard-edition demo/ 2.4.1\ncd demo\n\nGenerate a new bundle\n(for example src/Company/DemoBundle)\nphp app/console generate:bundle\ncd src/Company/DemoBundle/\n\nInit your github repository in src/Company/DemoBundle\ngit init\ntouch README.md\ngit add .\ngit commit -m \"initial commit\"\ngit remote add origin https://github.com/YourAccount/DemoBundle.git\ngit push -u origin master\n\nAdd a composer.json file\nsrc/Company/DemoBundle/composer.json:\n{\n    \"name\" : \"company/demobundle\",\n    \"description\" : \"A demo bundle\",\n    \"type\" : \"symfony-bundle\",\n    \"authors\" : [{\n        \"name\" : \"demo\",\n        \"email\" : \"[email\u00a0protected]\"\n    }],\n    \"keywords\" : [\n        \"demo bundle\"\n    ],\n    \"license\" : [\n        \"MIT\"\n    ],\n    \"require\" : {\n    },\n    \"autoload\" : {\n        \"psr-0\" : {\n            \"Company\\\\DemoBundle\" : \"\"\n        }\n    },\n    \"target-dir\" : \"Company/DemoBundle\",\n    \"repositories\" : [{\n    }],\n    \"extra\" : {\n    \"branch-alias\" : {\n            \"dev-master\" : \"some_version-dev\"\n        }\n    }\n}\n\nNow you have the base structure of your bundle\nUse it in another project\ncomposer.json:\n    [...]\n    \"require\" : {\n        [...]\n        \"company/demobundle\" : \"dev-master\"\n    },\n    \"repositories\" : [{\n        \"type\" : \"vcs\",\n        \"url\" : \"https://github.com/Company/DemoBundle.git\"\n    }],\n    [...]\n\nDo:\ncurl -sS https://getcomposer.org/installer | php\nphp composer.phar update company/demobundle\n\napp/AppKernel:\nnew Company\\DemoBundle\\CompanyDemoBundle(),\n\nWork on it\n\nYou can clone your DemoBundle in the src/Company folder, then manually install it\nYou can use symlink\n\nConclusion\nYou can develop and test your bundle in your first project and use it with github and composer in your second project."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Revert to local commit?\nI've pulled code down from my repo which has messed things up. I'd like to revert my entire project to my last local commit. How would I do this?"}, {"role": "assistant", "content": "This will reset everything to your current commit (getting rid of all changes, staged or otherwise:\ngit reset HEAD --hard\n\nThis will reset everything to the previous commit (also getting rid of all changes, staged or otherwise)\ngit reset HEAD^ --hard\n\nthe ^ next to HEAD means one commit before HEAD, HEAD being where you are currently. You can go two commits back by using ^^, or three with ^^^. Additionally you can use a tilde to specify the number of commits: ~3 for three commits back.\ngit reset HEAD~3 --hard\n\nAlso keep in mind that the --hard option means that these commands will throw away any changes you have that are not stashed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git merge commits [duplicate]\nThis question already has answers here:\n                                \n                            \n\n\n\n\nHow do I squash my last N commits together?\n\n                                (46 answers)\n                            \n\n\nHow to check if a string \"StartsWith\" another string?\n\n                                (19 answers)\n                            \n\nClosed 5 years ago.\n\n\n\nI'm new to git (and enjoying it a lot!). While developing in a new branch, I kept committing the various development 'states' of my application. Now I have to check it in for review but didn't want everything to go in different commits (different comments and ids).\nHow can I do a push of all changes as if it was the first time?"}, {"role": "assistant", "content": "git rebase -i HEAD~5\n\nallows you to interactively select which of the 5 last commits to join into one; off the top of my head it opens the editor with something like this\npick xxxx commit1\npick xxxx commit2\npick xxxx commit3\npick xxxx commit4\npick xxxx commit5\n\nyou change this into\npick xxxx commit1\nsquash xxxx commit2\nsquash xxxx commit3\nsquash xxxx commit4\npick xxxx commit5\n\nwhich results in two commits being left: first one that has combined commits 1 - 4, and commit 5 (the newest one) which is left alone"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to set up a git project to use an external repo submodule?\nI'd like to create a repo which pulls in a remote repo.\nFor example, let's say jQuery as a submodule:\ngit://github.com/jquery/jquery.git\n\nWhat would be the process of creating a repo with jQuery as a submodule and adding my own external as a remote repo.\nAlso once this is setup, if I push / pull to my own remote, will the external remain intact?"}, {"role": "assistant", "content": "You have a project -- call it MyWebApp that already has a github repo\nYou want to use the jquery repository in your project\nYou want to pull the jquery repo into your project as a submodule.\n\nSubmodules are really, really easy to reference and use. Assuming you already have MyWebApp set up as a repo, from terminal issue these commands:\ncd MyWebApp\ngit submodule add git://github.com/jquery/jquery.git externals/jquery\n\nThis will create a directory named externals/jquery* and link it to the github jquery repository. Now we just need to init the submodule and clone the code to it: \ngit submodule update --init --recursive\n\nYou should now have all the latest code cloned into the submodule. If the jquery repo changes and you want to pull the latest code down, just issue the submodule update command again. Please note: I typically have a number of external repositories in my projects, so I always group the repos under an \"externals\" directory.\nThe online Pro Git Book has some good information on submodules (and git in general) presented in an easy-to-read fashion. Alternately, git help submodule will also give good information. Or take a look at the Git Submodule Tutorial on the git wiki.\nI noticed this blog entry which talks about submodules and compares them to Subversion's svn:externals mechanism: http://speirs.org/blog/2009/5/11/understanding-git-submodules.html \n* As a best practice, you should always place your submodules in their own directory, such as Externals. If you don't, your root project directory can become very cluttered very fast."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I write a batch file which opens the GitBash shell and runs a command in the shell?\nI'm on Windows 7 trying to use a batch file to open the GitBash shell and make a git call.\nThis is the contents of my batch file:\nREM Open GitBash \nC:\\Windows\\SysWOW64\\cmd.exe /c \"\"C:\\Program Files (x86)\\Git\\bin\\sh.exe\" --login -i\"\nREM retrieve archive\ngit archive master | tar -x -C %~1\nREM quit GitBash\nexit\n\nI noticed that the GitBash is logging out before the next command \"git archive...\". Does anybody know if I can pass the command into GitBash and how?\nMike"}, {"role": "assistant", "content": "\"C:\\Program Files (x86)\\Git\\bin\\sh.exe\" --login -i -c \"git archive master | tar -x -C $0\" \"%~1\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Setting Visual Studio Code as my Mac's default editor (including editing Git commits)\nI am trying to configure my Mac Book Pro (OSX El Capitan 10.11.1) to use Visual Studio Code as its default editor. I have created a ~/.bash_profile file with the following two lines\nvscode () { VSCODE_CWD=\"$PWD\" open -n -b \"com.microsoft.VSCode\" --args $* ;}\nexport VISUAL=open\\ -n\\ -b\\ \"com.microsoft.VSCode\"\n\nThis works for some things: I can type vscode test.txt at the bash terminal and up pops test.txt in Visual Studio Code, and if I run the command env I see VISUAL=open -n -b com.microsoft.VSCode in the list. I can even just type $VISUAL and Visual Studio Code opens on a new empty file.\nBut if I type git commit I get the following error\n\nerror: cannot run com.microsoft.vscode: No such file or directory\n  error: unable to start editor 'com.microsoft.vscode' Please supply the\n  message using either -m or -F option.  \n\nSo I have succeeded inasmuch as git is trying to open Visual Studio Code for me to edit my commit message but it is then failing.\nWhat X should I use in the line export VISUAL=X in my ~/.bash_profile file to enable git to open Visual Studio Code for commit messages?\n(N.B. How to use Visual Studio Code as Default Editor for Git is not a duplicate since Gary is on a Windows PC.)"}, {"role": "assistant", "content": "Add export EDITOR=\"code -w\" to your shell's profile or rc file\n(For example, your bash profile is accessible via open ~/.bash_profile)\nThis requires you to have the code binary already in your path.\nIf you don't have that, or don't know if you do, simply go into vscode, enter CMD + SHIFT + P, type code and click Shell Command: Install 'code' command in PATH.\nAlso, very helpful comment by pompalini below,\n\nremember to \"refresh\" terminal by closing and opening it again or resourcing your bash profile by running source ~/.bash_profile. Only then will the new changes in .bash_profile apply to your terminal."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I change which commit master points to in git?\nIn git, I've been making commits onto the master branch, when really I should have been working on a feature branch. I want to change this so that master is back to where it started, and what was on master is now on a new branch. Basically, my commit history looks like this:\nA -- B -- C -- D -- E\n          |         |\n          |       master\n     origin/master\n\nAnd I want it to look like this:\n        master\n          |\nA -- B -- C -- D -- E\n          |         |\n          |       new_branch\n     origin/master\n\nHow can I change where master points?"}, {"role": "assistant", "content": "Stash your uncommitted changes: git stash\nCreate a new branch: git branch new_branch\nReset master to origin/master: git reset --hard origin/master\nCheck out the new branch again: git checkout new_branch\nUnstash your changes: git stash pop\n\nStash/unstash is not necessary if your working tree is clean. Just make sure there are no changes in your working tree, because those will be removed when you reset --hard\n\nAnother possibility (faster, and without the need to stash and reset):\n\nCheck out a new branch: git checkout -b new_branch master\nCreate a 'new' master branch and point it to origin/master's commit: git branch -f master origin/master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I show just the names and commit titles since a tag in Git?\nI'm trying to use tags for release management in Git\u2014I create a tag for each release. I'd like to be able to create release notes by listing the comment titles for every commit since a tag, or between 2 tags. I can't seem to find any way to do this."}, {"role": "assistant", "content": "If your tags are named LastRelease and NextRelease then do\ngit log --pretty=format:%s LastRelease..NextRelease\n."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rm - Remove files from the working tree and from the index  -r"}, {"role": "assistant", "content": "Allow recursive removal when a leading directory name is\ngiven."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git gc --aggressive vs git repack\n\nI want to reduce the size of a Git repository. I have discovered:\n\ngit gc --aggressive. But some people discourage its use. Why? What's wrong with it?\n\ngit repack -a -d --depth=250 --window=250. Some say to use this instead. Why? How does this reduce the size of a repository? What are --depth and --window for?\n\n\nWhat should I choose: gc or repack?"}, {"role": "assistant", "content": "Nowadays there is no difference: git gc --aggressive operates according to the suggestion Linus made in 2007; see below. As of version 2.11 (Q4 2016), git defaults to a depth of 50. A window of size 250 is good because it scans a larger section of each object, but depth at 250 is bad because it makes every chain refer to very deep old objects, which slows down all future git operations for marginally lower disk usage.\n\nHistorical Background\nLinus suggested (see below for the full mailing list post) using git gc --aggressive only when you have, in his words, \u201ca really bad pack\u201d or \u201creally horribly bad deltas,\u201d however \u201calmost always, in other cases, it\u2019s actually a really bad thing to do.\u201d The result may even leave your repository in worse condition than when you started!\nThe command he suggests for doing this properly after having imported \u201ca long and involved history\u201d is\ngit repack -a -d -f --depth=250 --window=250\n\nBut this assumes you have already removed unwanted gunk from your repository history and that you have followed the checklist for shrinking a repository found in the git filter-branch documentation.\n\ngit-filter-branch can be used to get rid of a subset of files, usually with some combination of --index-filter and --subdirectory-filter. People expect the resulting repository to be smaller than the original, but you need a few more steps to actually make it smaller, because Git tries hard not to lose your objects until you tell it to. First make sure that:\n\nYou really removed all variants of a filename, if a blob was moved over its lifetime. git log --name-only --follow --all -- filename can help you find renames.\nYou really filtered all refs: use --tag-name-filter cat -- --all when calling git filter-branch.\n\nThen there are two ways to get a smaller repository. A safer way is to clone, that keeps your original intact.\n\nClone it with git clone file:///path/to/repo. The clone will not have the removed objects. See git-clone. (Note that cloning with a plain path just hardlinks everything!)\n\nIf you really don\u2019t want to clone it, for whatever reasons, check the following points instead (in this order). This is a very destructive approach, so make a backup or go back to cloning it. You have been warned.\n\nRemove the original refs backed up by git-filter-branch: say\ngit for-each-ref --format=\"%(refname)\" refs/original/ |\n  xargs -n 1 git update-ref -d\n\nExpire all reflogs with git reflog expire --expire=now --all.\nGarbage collect all unreferenced objects with git gc --prune=now (or if your git gc is not new enough to support arguments to --prune, use git repack -ad; git prune instead).\n\n\n\n\nDate: Wed, 5 Dec 2007 22:09:12 -0800 (PST)\nFrom: Linus Torvalds <torvalds at linux-foundation dot org>\nTo: Daniel Berlin <dberlin at dberlin dot org>\ncc: David Miller <davem at davemloft dot net>,\n    ismail at pardus dot org dot tr,\n    gcc at gcc dot gnu dot org,\n    git at vger dot kernel dot org\nSubject: Re: Git and GCC\nIn-Reply-To: <[email\u00a0protected]>\nMessage-ID: <[email\u00a0protected]>\nReferences: <[email\u00a0protected]>\n            <[email\u00a0protected]>\n            <[email\u00a0protected]>\n            <[email\u00a0protected]>\n            <[email\u00a0protected]>\n\nOn Thu, 6 Dec 2007, Daniel Berlin wrote:\n\nActually, it turns out that git-gc --aggressive does this dumb thing\n    to pack files sometimes regardless of whether you converted from an\n    SVN repo or not.\n\nAbsolutely. git --aggressive is mostly dumb. It\u2019s really only useful for\n  the case of \u201cI know I have a really bad pack, and I want to throw away\n  all the bad packing decisions I have done.\u201d\nTo explain this, it\u2019s worth explaining (you are probably aware of it, but\n  let me go through the basics anyway) how git delta-chains work, and how\n  they are so different from most other systems.\nIn other SCMs, a delta-chain is generally fixed. It might be \u201cforwards\u201d\n  or \u201cbackwards,\u201d and it might evolve a bit as you work with the repository,\n  but generally it\u2019s a chain of changes to a single file represented as some\n  kind of single SCM entity. In CVS, it\u2019s obviously the *,v file, and a lot\n  of other systems do rather similar things.\nGit also does delta-chains, but it does them a lot more \u201cloosely.\u201d There\n  is no fixed entity. Deltas are generated against any random other version\n  that git deems to be a good delta candidate (with various fairly\n  successful heuristics), and there are absolutely no hard grouping rules.\nThis is generally a very good thing. It\u2019s good for various conceptual\n  reasons (i.e., git internally never really even needs to care about the whole\n  revision chain \u2014 it doesn\u2019t really think in terms of deltas at all), but\n  it\u2019s also great because getting rid of the inflexible delta rules means\n  that git doesn\u2019t have any problems at all with merging two files together,\n  for example \u2014 there simply are no arbitrary *,v \u201crevision files\u201d that have\n  some hidden meaning.\nIt also means that the choice of deltas is a much more open-ended\n  question. If you limit the delta chain to just one file, you really don\u2019t\n  have a lot of choices on what to do about deltas, but in git, it really\n  can be a totally different issue.\nAnd this is where the really badly named --aggressive comes in. While\n  git generally tries to re-use delta information (because it\u2019s a good idea,\n  and it doesn\u2019t waste CPU time re-finding all the good deltas we found\n  earlier), sometimes you want to say \u201clet\u2019s start all over, with a blank\n  slate, and ignore all the previous delta information, and try to generate\n  a new set of deltas.\u201d\nSo --aggressive is not really about being aggressive, but about wasting\n  CPU time re-doing a decision we already did earlier!\nSometimes that is a good thing. Some import tools in particular could\n  generate really horribly bad deltas. Anything that uses git fast-import,\n  for example, likely doesn\u2019t have much of a great delta layout, so it might\n  be worth saying \u201cI want to start from a clean slate.\u201d\nBut almost always, in other cases, it\u2019s actually a really bad thing to do.\n  It\u2019s going to waste CPU time, and especially if you had actually done a\n  good job at deltaing earlier, the end result isn\u2019t going to re-use all\n  those good deltas you already found, so you\u2019ll actually end up with a\n  much worse end result too!\nI\u2019ll send a patch to Junio to just remove the git gc --aggressive\n  documentation. It can be useful, but it generally is useful only when you\n  really understand at a very deep level what it\u2019s doing, and that\n  documentation doesn\u2019t help you do that.\nGenerally, doing incremental git gc is the right approach, and better\n  than doing git gc --aggressive. It\u2019s going to re-use old deltas, and\n  when those old deltas can\u2019t be found (the reason for doing incremental GC\n  in the first place!) it\u2019s going to create new ones.\nOn the other hand, it\u2019s definitely true that an \u201cinitial import of a long\n  and involved history\u201d is a point where it can be worth spending a lot of\n  time finding the really good deltas. Then, every user ever after (as\n  long as they don\u2019t use git gc --aggressive to undo it!) will get the\n  advantage of that one-time event. So especially for big projects with a\n  long history, it\u2019s probably worth doing some extra work, telling the delta\n  finding code to go wild.\nSo the equivalent of git gc --aggressive \u2014 but done properly \u2014 is to\n  do (overnight) something like\ngit repack -a -d --depth=250 --window=250\n\nwhere that depth thing is just about how deep the delta chains can be\n  (make them longer for old history \u2014 it\u2019s worth the space overhead), and\n  the window thing is about how big an object window we want each delta\n  candidate to scan.\nAnd here, you might well want to add the -f flag (which is the \u201cdrop all\n  old deltas,\u201d since you now are actually trying to make sure that this one\n  actually finds good candidates.\nAnd then it\u2019s going to take forever and a day (i.e., a \u201cdo it overnight\u201d\n  thing). But the end result is that everybody downstream from that\n  repository will get much better packs, without having to spend any effort\n  on it themselves.\n          Linus"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do you create a project in a specific group via GitLab API?\n\nI tried to use GitLab API to create a new project. This worked, but this is in my user space:\n        curl \\\n            --header \"Authorization: Bearer ${GITLAB_API_TOKEN}\" \\\n            --request POST \\\n            \"https://gitlab.com/api/v4/projects/?name=$test-proj\"\n\nBut I wanted to do it under a specific group with group_id <group_id> (I blanked it here). The most sensible approach that occured to me was:\n        curl \\\n            --header \"Authorization: Bearer ${GITLAB_API_TOKEN}\" \\\n            --request POST \\\n            \"https://gitlab.com/api/v4/groups/<group_id>/projects/?name=test-proj\n\nBut this did not work. Are there any suggestions on how I could achieve this?\nI consulted the following references\n\nhttps://forum.gitlab.com/t/create-a-new-project-in-a-group-using-api/1552\nhttps://docs.gitlab.com/ee/api/projects.html#create-project\n\nThe GitLab documentation mentions the path or namespace_id attribute (although I would actually be in search of a group_id attribute). I am not sure about path and how to specify that. I tried - without success - to retrieve the namespace_id via\ncurl --header \"PRIVATE-TOKEN: ${GITLAB_API_TOKEN}\" \"https://gitlab.example.com/api/v4/namespaces\"\n\nIt is well possible that I might not have the rights to do the required operation. Therefore a reference to an official (GitLab) documentation together with a test curl command that works would be very helpful to me - thank you!"}, {"role": "assistant", "content": "For anyone looking for the direct command:\nSTEP 1:\nNavigate as below and identify the group ID from GUI:\nAdmin Area -> Groups -> GroupName\n\nSTEP 2:\nConstruct the command with two parameters viz., name, namespace_id\ncurl --header \"PRIVATE-TOKEN: <myprivatetoken>\" -X POST \"https://gitlab.com/api/v4/projects?name=myexpectedrepo&namespace_id=38\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Jenkins Git Plugin not pulling latest changes before building job\nI am working with Jenkins CI and am trying to properly configure my jobs to use git.\nI have the git plugin installed and configured for one of my jobs. When I build the job, I expect it to pull the latest changes for the branch I specify and then continue with the rest of the build process (e.g., unit tests, etc.).\nWhen I look at the console output, I see\n> git fetch --tags --progress ssh://gerrit@git-dev/Util +refs/heads/*:refs/remotes/origin/*\n > git rev-parse origin/some_branch^{commit}\nChecking out Revision <latest_SHA1> (origin/some_branch)\n > git config core.sparsecheckout\n > git checkout -f <latest_SHA1>\n > git rev-list <latest_SHA1>\n\nI see that the plugin fetches and checks out the proper commit hash, but when the tests run it seems as though the repo wasn't updated at all.\nIf I go into the repository in Jenkins, I see there that the latest changes were never pulled. \nShouldn't it pull before it tries to build? \nI have git 1.8.5 installed on my Jenkins machine, which is a recommended version.\nhttps://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin\nAfter checking other similar sounding questions on SO, their answers weren't helpful for my problem."}, {"role": "assistant", "content": "Relates me to scenario where workspace wasn't getting cleaned-up, used:\n\nSource Code Management--> Additional Behaviours --> Clean after checkout\n\nOther option is to use Workspace Cleanup Plugin"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  <tree-ish>"}, {"role": "assistant", "content": "Indicates a tree, commit or tag object name.  A\ncommand that takes a <tree-ish> argument ultimately wants to\noperate on a <tree> object but automatically dereferences\n<commit> and <tag> objects that point at a <tree>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_DEFAULT_HASH"}, {"role": "assistant", "content": "If this variable is set, the default hash algorithm for new\nrepositories will be set to this value. This value is\nignored when cloning and the setting of the remote repository\nis always used. The default is \"sha1\".\nSee --object-format in git-init ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "\"fatal: HttpRequestException encountered.\" Error with GitHub/Bitbucket Repositories due to dropping TLS-1.0 support\n\nProblem\nI recently encountered the following message when I pushed to a GitHub repo:\n\"fatal: HttpRequestException encountered. \"\nfollowed by being prompted for my username and password again. \nFrom previous searches, Visual Studio and various others have the same root problem. For those lazier than I am, a summary of the various solutions for different applications/OS are here with relevant discussions. Hopefully people find this helpful.\nReason\nCan't really call updating sercurity a problem, so here's the reason. The issue is GitHub has removed TLS-1.0 support which is causing the problem with clients including Microsoft Visual Studio's built in git client, versions of Git below 1.14 as well as GUI clients includint tortoiseGit, etc. The full release notes can be found here: \nhttps://githubengineering.com/crypto-removal-notice/\nBitbucket will drop TLSv1.0 and TLSv1.1 starting 1 Dec 2018. I expect similar problems as before. \nSolution\nEdit: moved my self-answer to an answer box. See below."}, {"role": "assistant", "content": "Git hub has removed TLS-1.0 from it's authentication services. https://githubengineering.com/crypto-removal-notice/\nSolutions\nWindows Clients\nUse Version 2.14.3 (or newer) of Git for Windows and newer include an up-to-date Git Credential Manager for Windows: https://gitforwindows.org/\nYou can also explicitly update your Git Windows Credential Manager to the latest version, 1.14.0, to get TLS-1.2 support: https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/tag/v1.14.0\nVisual Studio Clients\nIt is suggested to update your client to VS 2017 or, if you cannot upgrade, there are two machine-wide registry keys you can set that affect all .NET-based applications on the client machine that you can change... https://developercommunity.visualstudio.com/content/problem/201457/unable-to-connect-to-github-due-to-tls-12-only-cha.html\nJDK\nTLS-1.2 is default in JDK8 and available in JDK7.\nhttps://blogs.oracle.com/java-platform-group/diagnosing-tls,-ssl,-and-https\nRed Hat native Git clients\nRH 5 does not support TLS-1.2 and GitHubEngineering suggest updating to newer versions of the OS. RH 6.8 and 7.2 will support TLS-1.2. https://www.linuxquestions.org/questions/blog/mensawater-183304/rhel5-wont-support-tlsv1-1-or-higher-36951/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Multiple GitHub Pages and custom domains via DNS\n\nI want to have one user page and multiple project pages hosted by GitHub Pages but available under ONE custom domain (with subdomains for each GitHub Pages repository, of course). So my goals are as follows:\n\nOne user page (http://florianwolters.github.com) available under http://blog.florianwolters.de, http://www.florianwolters.de and http://florianwolters.de.\nAs many project pages as I wish (e.g. http://florianwolters.github.com/pear available under http://pear.florianwolters.de.\n\nAs of my current understanding, GitHub Pages do only allow ONE CNAME resource record for a page (both user pages and project pages) defined in the CNAME file in the root of a Git repository.\nI already tried out many things (playing around with DNS records and header redirects at my domain provider EUserv, but I can only access my GitHub user pages under one URL (http://blog.florianwolters.de). I am aware that DNS changes can take up until two days.\nCan somebody explain to me, how I can achieve the goals described above? I can not believe that this is not possible but I am also no expert for DNS, etc.\nIf the above is not possible: What is your suggested workaround? I do want to access all my GitHub pages under one domain (and the subdomains of that domain).\nResources\n\nhttp://help.github.com/pages/\nCustom domain for GitHub project pages\nhttps://groups.google.com/forum/?fromgroups#!topic/github/AaAuoDK44Ag\nhttps://github.com/blog/315-cname-support-for-github-pages\nhttp://code.lancepollard.com/custom-domain-github-pages"}, {"role": "assistant", "content": "You can do it. Notice that all DNS CNAME entries point to the same host.\n1:\ngithub.com/florianwolters/florianwolters.github.com\nCNAME file content: blog.florianwolters.de\nDNS CNAME: blog > florianwolters.github.com\n2:\ngithub.com/florianwolters/pear/tree/gh-pages\nCNAME file content: pear.florianwolters.de\nDNS CNAME: pear > florianwolters.github.com"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Configuring user and password with Git Bash\nI am using Git Bash on Windows 7. We are using GitHub as our repository origin.\nEvery time I push or pull I have to provide user and password credentials. I know that my SSH keys are set up correctly, otherwise I would not be able to access the repository. (That is, once I enter my credentials the push/pull works correctly.)\nI have entered\ngit config --global user.name myusername\ngit config --global user.email myemail\ngit config --global github.user myusername\ngit config --global github.token mytoken\n\nBut nonetheless I am being asked for credentials each and every time I push/pull."}, {"role": "assistant", "content": "Make sure you are using the SSH URL for the GitHub repository rather than the HTTPS URL. It will ask for username and password when you are using HTTPS and not SSH. You can check the file .git/config or run git config -e or git remote show origin to verify the URL and change it if needed.\nYou can change the URL with: [1]\ngit remote set-url origin git+ssh://[email\u00a0protected]/username/reponame.git\n\n[1] This portion incorporates the answer to this question."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to see contributor's email address on Git commit chain?\n\nI can't see how to email a contributor on github after lengthy attempts, and google searches. Why does every beginners guide encourage us to immediately configure our user.email such that it is sent with every commit if its so difficult to view the contributors' email addresses on the commit chain in GitHub?"}, {"role": "assistant", "content": "Add .patch to the end of the commit url to open patch view.\nhttps://github.com/torvalds/test-tlb/commit/4210d1cfc58f2d8a3da0730389ee63d68c6fe914.patch\n\nhttps://www.thereach.io/blog/articles/how-to-find-github-user-email-addresses"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitmodules - Defining submodule properties"}, {"role": "assistant", "content": "NAME gitmodules - Defining submodule properties"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to store a git config as part of the repository?\nI'm using filters to mangle files during checkout like described here.\nNow the problem is that filter definition is only stored in my local configuration file:\n$ cat .git/config\n....\n[filter \"dater\"]\n        smudge = /home/.../expand_date\n        clean = perl -pe \\\"s/\\\\\\\\\\\\$Date[^\\\\\\\\\\\\$]*\\\\\\\\\\\\$/\\\\\\\\\\\\$Date\\\\\\\\\\\\$/\\\"\n\nIf my coworkers want to benefit from this Date expansion, they need to copy my filter definition. And if I change it, I need to notify them, etc..\nSo can I store this filter definition part of .git/config in repository and make git use it?"}, {"role": "assistant", "content": "There are 3 supported scopes of .gitconfig file: --system, --global, --local. You can also create a custom configuration file, and include it in one of the supported files.\nFor your needs custom - is the right choice. Instead of writing your filter in .git/config you should save it in .gitconfig file in your repository root:\nyour-repo/\n\u2502\n\u251c\u2500\u2500 .git/\n\u2502   \u251c\u2500\u2500 config\n\u2502\n\u251c\u2500\u2500 .gitconfig\n\u2502\n\nCreate the .gitconfig with your filter and commit the changes. Then your colleagues will always keep it updated -- but they will have to include it manually. It is not possible to automatically include your custom configuration file through git alone, because it creates a security vulnerability.\nTo apply this configuration for a single repository, each user will need to run the following command in your-repo/:\ngit config --local include.path ../.gitconfig\n\nReference: https://git-scm.com/docs/git-config#_includes\nBe careful not to store personal data in the custom .gitconfig, like user.*, keep those in your global .gitconfig."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git, error: remote unpack failed: unable to create temporary object directory - By creating new Branch\nI'm trying to create a new branch in my repo.\nI did this:\ngit branch events\n\ngit Checkout events\n\nThat worked. So I changed some files and did:\ngit Status\ngit add --all\ngit commit -m \"Commit\"\n\nThat worked well but I tried to push it and that didn't work:\ngit push -u origin events\n\nThis is the error:\nEnumerating objects: 9, done.                                                                                                                       \nCounting objects: 100% (9/9), done.                                                                                                                 \nDelta compression using up to 4 threads.                                                                                                            \nCompressing objects: 100% (5/5), done.                                                                                                              \nWriting objects: 100% (5/5), 716 bytes | 716.00 KiB/s, done.                                                                                        \nTotal 5 (delta 4), reused 0 (delta 0)                                                                                                               \nerror: remote unpack failed: unable to create temporary object directory                                                                            \nTo http://git.int.censoredlink/scm/freeb/freebrep.git                                                                                       \n ! [remote rejected] events -> events (unpacker error)                                                                                              \nerror: failed to push some refs to 'http://[email\u00a0protected]/scm/freeb/freebrep.git'\n\nI don't know why it does not work.\nI have Admin rights on the Repo. I censored the link to the repo because its an internal Repo with private link."}, {"role": "assistant", "content": "This error message:\n\nerror: remote unpack failed: unable to create temporary object directory\n\n\nindicates that the Git repository at the server (not your Git) is out of space, or running into similar server problems,1 or installed incorrectly.  That is, given:\n\nTo: http://git.int.censoredlink/scm/freeb/freebrep.git\n\n\nyou will have to log in to the machine that serves HTTP traffic at git.int.censoredlink, walk down to the scm/freeb/freebrep.git directory, and correct the installation there.  It's most likely a permissions issue: the receiving Git must be able to create, in the objects area, a directory named incoming-XXXXXX with the Xs replaced by a unique identifier, and then create within that directory a pack subdirectory.\nAll incoming objects and pack files are placed in these directories, in a sort of quarantine procedure, until the server-side Git hooks are satisfied with the reference name update requests.  If the push fails, the quarantine directory is simply removed.  If the push succeeds, the quarantined objects and/or pack files are migrated (and thin packs adjusted) into the normal object storage area.  Note that the migration can fail even if the quarantine process succeeds; but if it does so, you get a different error reported to the client.  (This error must also be corrected on the server.)\nNote: it's rather unusual to push to http:// rather than https:// or ssh:// URLs.  Inspect your server configuration to see who will own the various files thus created, and what permissions the web server will have.\n\n1If a hard drive fails, Linux will sometimes mark the drive and/or its file systems read only.  Or, even if you have disk space, you can run out of inodes.  A number of different root causes will all lead to the same observed behavior on your client end.  If you are a Linux admin checking on a server, look for system log messages, and consider both df and df -i output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -t"}, {"role": "assistant", "content": "Show the tree objects in the diff output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Confusing error message from git\nI got this message from Git:\n\nYou asked to pull from the remote 'origin', but did not specify\n  a branch. Because this is not the default configured remote\n  for your current branch, you must specify a branch on the command line.\n\nCan anyone explain it? and more important how to fix it?"}, {"role": "assistant", "content": "You have to tell git which branch you want to pull from the \"origin\" remote repos.\nI guess you want the default branch (master) so git pull origin master should fix your problem.\nSee git help branch, git help pull and git help fetch  for more informations."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  -P  --prune-tags"}, {"role": "assistant", "content": "Before fetching, remove any local tags that no longer exist on\nthe remote if --prune is enabled. This option should be used\nmore carefully, unlike --prune it will remove any local\nreferences (local tags) that have been created. This option is\na shorthand for providing the explicit tag refspec along with --prune , see the discussion about that in its documentation. See the PRUNING section below for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "\"You are on a branch yet to be born\" when adding git submodule\nI am attempting to add a few submodules to my .vim/bundles directory, and when I attempt to add this particular repo Git gives me a strange error I've never seen before:\n$ git submodule add -f git://github.com/derekwyatt/vim-scala.git .vim/bundle/vim-scala\nfatal: You are on a branch yet to be born\nUnable to checkout submodule '.vim/bundle/vim-scala'\n\nAny idea what can cause this?\nIf I clone the same repo to a test directory (not through the submodule command), it works fine, and creates the expected files."}, {"role": "assistant", "content": "To fix that error, you should delete the folder with the same path to the submodule inside .git/modules/ directory. This error can occurs when url was incorrect for submodule for the first-time when submodule was added."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.<name>.receivepack"}, {"role": "assistant", "content": "The default program to execute on the remote side when pushing.  See\noption --receive-pack of git-push ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Pass an argument to a Git alias command\nCan I pass arguments to the alias of a Git command?\nI have some alias in Git config, like so:\nrb1 = rebase -i HEAD~1\nrb2 = rebase -i HEAD~2\nrb3 = rebase -i HEAD~3\nrb4 = rebase -i HEAD~4\n....\n\nIs it possible to make an rb alias so that git rb <x> works for any <x>?\nI tried this alias:\nrb = rebase -i HEAD~\n\nbut then for instance git rb 8 does not work."}, {"role": "assistant", "content": "If you consider the Git Faq section \"Git Aliases with argument\", you could do it, but by calling git through a shell:\n[alias]\n        rb = \"!sh -c \\\"git rebase -i HEAD~$1\\\" -\"\n\nI haven't tested it yet, but if you can pass an argument, that would be the way to do it.  \nA similar solution would be to use a shell function:\n[alias]\n        rb = \"!f() { git rebase -i HEAD~$1; }; f\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --check"}, {"role": "assistant", "content": "Warn if changes introduce conflict markers or whitespace errors.\nWhat are considered whitespace errors is controlled by core.whitespace configuration.  By default, trailing whitespaces (including\nlines that consist solely of whitespaces) and a space character\nthat is immediately followed by a tab character inside the\ninitial indent of the line are considered whitespace errors.\nExits with non-zero status if problems are found. Not compatible\nwith --exit-code."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to remove git hooks\nI had set up a git hook in pre-commit file to run git pull before any commit. Now I have deleted that file and restarted my computer multiple times, but that hook is still running before my commits.  \nHow can I remove  or disable that completely?"}, {"role": "assistant", "content": "I figured out what was causing that:\nI had created my pre-commit hook in git core directory, but the git had created a pre-commit hook in project's .git/hooks/ directory. I just removed it.\nIt means running the command that @romin21 mentioned inside project's root directory:\nrm -rf .git/hooks"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  extensions.worktreeConfig"}, {"role": "assistant", "content": "If enabled, then worktrees will load config settings from the $GIT_DIR/config.worktree file in addition to the $GIT_COMMON_DIR/config file. Note that $GIT_COMMON_DIR and $GIT_DIR are the same for the main working tree, while other\nworking trees have $GIT_DIR equal to $GIT_COMMON_DIR/worktrees/<id>/ . The settings in the config.worktree file will override settings from any other\nconfig files. When enabling extensions.worktreeConfig , you must be careful to move\ncertain values from the common config file to the main working tree\u2019s config.worktree file, if present: core.worktree must be moved from $GIT_COMMON_DIR/config to $GIT_COMMON_DIR/config.worktree . If core.bare is true, then it must be moved from $GIT_COMMON_DIR/config to $GIT_COMMON_DIR/config.worktree . It may also be beneficial to adjust the locations of core.sparseCheckout and core.sparseCheckoutCone depending on your desire for customizable\nsparse-checkout settings for each worktree. By default, the git\nsparse-checkout builtin enables extensions.worktreeConfig , assigns\nthese config values on a per-worktree basis, and uses the $GIT_DIR/info/sparse-checkout file to specify the sparsity for each\nworktree independently. See git-sparse-checkout for more\ndetails. For historical reasons, extensions.worktreeConfig is respected\nregardless of the core.repositoryFormatVersion setting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_INDEX_VERSION"}, {"role": "assistant", "content": "This environment variable specifies what index version is used\nwhen writing the index file out.  It won\u2019t affect existing index\nfiles.  By default index file version 2 or 3 is used. See git-update-index for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "github: Adding commits to existing pull request\n\nI opened a pull request to rails repo on github by using Fork & Edit this file file button.\nNow, \nAfter getting feedback on my PR, I wanted to add some more commits. so here is what I ended by doing\n$ git clone [email\u00a0protected]:gaurish/rails.git #my forked repo\n$ git rebase -i 785a2e5 #commit hash of my commit using which PR was opened\n$ git checkout patch-3 #branch name I had to send my commits under to be shown in that PR\n$ git commit -am \"Changes done as per feedback\"\n$ git push origin patch-3\n\nThis worked fine but seems quite a complex workflow. Maybe I am wrong something wrong here? \nmy question is:\nAm I doing this the correct way? if not, then what is the proper way to do this?"}, {"role": "assistant", "content": "Since you're using GitHub's tools and just changing one file, you could also browse to the file on GitHub, select the proper branch from the upper left corner under the \"tree:\" dropdown (patch-3 in your case), and now choose \"Edit this file\".  Now your changes will be committed to this branch and will show up in your pull request"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "ssh: Could not resolve hostname git: Name or service not known fatal: Could not read from remote repository\n\nAfter I switched from HTTPS to SSH for my repo then I received this error when pushing to origin master:\nssh: Could not resolve hostname git: Name or service not known\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n\nI also add my ssh in the gitlab. What should I do?"}, {"role": "assistant", "content": "I was getting the same error.\n\nThis error typically occurs when there is an issue with the SSH configuration or the Git remote repository's hostname cannot be resolved.\n\nHere, you can check your remote by running:\ngit remote -v\n\nThere are few reasons why this error occurs:\n\nIncorrect Hostname\nSSH Configuration\nNetwork Connection\nDNS Resolution\nFirewall or Proxy\n\nTypically, you can solve this by Change the [remote \"origin\"] URL value in .gitconfig or .config/git/config file\nPreviously:\nhttps://[email\u00a0protected]:userName/repo.git\n\nOR\nssh://[email\u00a0protected]:userName/repo.git\n\nNew:\n[email\u00a0protected]:userName/repo.git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitmailmap"}, {"role": "assistant", "content": "Map author/committer names and/or E-Mail addresses"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to checkout old git commit including all submodules recursively?\nI have a git repo with multiple submodules. One of those submodules has multiple submodules of it's own. All I'm looking to do is check out an old commit on the master repo and have it checkout the appropriate commits from all submodules to get the correct state of the code at that time.\nI know that git contains the information necessary as the ls-tree command can tell me which commit each submodule was on. However, I have to manually check out each one, which is painfully time consuming.\nI'm looking for something like git checkout --recursive but such a command doesn't seem to exist.\nIs there anyway to do this?"}, {"role": "assistant", "content": "You need two commands to achieve this:\ngit checkout *oldcommit*\ngit submodule update --recursive\n\n\nUpdate: This answer is outdated as of 2018 \u2013 see VonC's answer below for more current information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  chain"}, {"role": "assistant", "content": "A list of objects, where each object in the list contains\na reference to its successor (for example, the successor of a commit could be one of its parents )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Undo git rm -r --cached\nMy .gitignore file wasn't working, so I followed this question.\nAnd now I have bunch of files that I need to commit, in order to proceed.\nI made a mistake and committed those, because I couldn't find a way to get rid of those. \nIs there any way that I can revert all these actions? I can't do reset cause I now I get error:\nerror: The following untracked working tree files would be overwritten by checkout.\nStupid stupid mistake, and I can find solution for this."}, {"role": "assistant", "content": "If you've run only git rm -r --cached, try doing a git reset HEAD . from within your repo root.\nIf you did a git commit -m \"msg\" after doing a git rm -r --cached, i.e., you committed the changes, then do git reset HEAD~1 to undo your last commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitk"}, {"role": "assistant", "content": "The Git repository browser"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "remote: repository not found fatal: not found\n\nWhy  won't my git push? I created the repository and I keep getting this message:\nC:\\Users\\petey_000\\rails_projects\\first_app>git push -u github master\nUsername for 'https://github.com': ***@gmail.com\nPassword for 'https://***@[email\u00a0protected]':\nremote: Repository not found.\nfatal: repository 'https://github.com/pete/first_app.git/' not found"}, {"role": "assistant", "content": "Your username shouldn't be an email address, but your GitHub user account: pete.\nAnd your password should be your GitHub account password (2014).\nUpdate 2021: your password should be (since Aug. 2021) a PAT (Personal Access Token).\nYou actually can set your username directly in the remote url, in order for Git to request only your password:\ncd C:\\Users\\petey_000\\rails_projects\\first_app\ngit remote set-url origin https://[email\u00a0protected]/pete/first_app\n\nAnd you need to create the fist_app repo on GitHub first: make sure to create it completely empty, or, if you create it with an initial commit (including a README.md, a license file and a .gitignore file), then do a git pull first, before making your git push."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to get \"their\" changes in the middle of conflicting Git rebase?\nI have conflicting branches, feature_x branched from main.\nLet's say when rebasing feature_x on current main, while resolving conflicts, I decide to take some (not all) of \"their\" (i.e. main) files as-is.\nHow do I do that?\nI tried:\ngit checkout main:foo/bar.java\nfatal: reference is not a tree: TS-modules-tmp:foo/bar.java\n  \ngit checkout refs/heads/main:foo/bar.java\nfatal: reference is not a tree: refs/heads/TS-modules-tmp:foo/bar.java"}, {"role": "assistant", "content": "You want to use:\ngit checkout --ours foo/bar.java\ngit add foo/bar.java\n\nIf you rebase a branch feature_x against main (i.e. running git rebase main while on branch feature_x), during rebasing ours refers to main and theirs to feature_x.\nAs pointed out in the git-rebase docs:\n\nNote that a rebase merge works by replaying each commit from the\nworking branch on top of the  branch. Because of this, when\na merge conflict happens, the side reported as ours is the so-far\nrebased series, starting with <upstream>, and theirs is the working\nbranch. In other words, the sides are swapped.\n\nFor further details read this thread."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --full-history"}, {"role": "assistant", "content": "Same as the default mode, but does not prune some history."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to add my current project to an already existing GitHub repository\n\nI'm very new to Git. I've been searching for an answer, but I couldn't find one.\nIn my computer I have a project folder like this:\nproject_a\n--some_folder\n--another_folder\n--.git\n\nAnd I have a repository on GitHub, let\u2019s say https://github.com/company/our_repo.git. Under this repository I have some folders. So my goal is to put my project_a under trunk/bin. How do I achieve this? (Again, I'm very very very new.)"}, {"role": "assistant", "content": "Open your Terminal, access to this folder and write:\ngit init\ngit add .\ngit commit -m \"my commit\"\ngit remote set-url origin [email\u00a0protected]:username/repo.git\ngit push origin master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "can't download github project with curl command\n\nI used \"curl -sO\" command to download project files from this GitHub project link:\nhttp://github.com/ziyaddin/xampp/archive/master.zip\nbut, I couldn't download. There is error occured and says that:\nArchive:  /home/ziyaddin/Desktop/master.zip\n[/home/ziyaddin/Desktop/master.zip]   End-of-central-directory\nsignature not found.  Either this file is not   a zipfile, or it\nconstitutes one disk of a multi-part archive.  In the   latter case\nthe central directory and zipfile comment will be found on   the last\ndisk(s) of this archive. zipinfo:  cannot find zipfile directory in\none of /home/ziyaddin/Desktop/master.zip or\n          /home/ziyaddin/Desktop/master.zip.zip, and cannot find \n/home/ziyaddin/Desktop/master.zip.ZIP, period.\n\nbut I can download this link with curl command:\nhttp://cloud.github.com/downloads/pivotal/jasmine/jasmine-standalone-1.3.1.zip\nI think that it is because it is in cloud.github.com. I want to know how can I download from  first link with curl command?"}, {"role": "assistant", "content": "curl -L -O https://github.com/ziyaddin/xampp/archive/master.zip\n\n\nyou must use https://\nyou must use -L to follow redirects"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to draw (visualise) git workflows [closed]\nClosed. This question is seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. It does not meet Stack Overflow guidelines. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n We don\u2019t allow questions seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. You can edit the question so it can be answered with facts and citations.\n\n\nClosed 2 years ago.\n\n\nThe community reviewed whether to reopen this question 2 years ago and left it closed:\n\nOriginal close reason(s) were not resolved\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nYou sure know those nice git timeline charts, visualising a git branching strategy and workflow.\nI created a git workflow based upon the specific needs of a customer. To hand over my work, I\u00b4d prefer not to scan my drawings, nor to fiddle with photoshop. Are there any free tools to create those? (i.e. sure they are - but are any of these especcially well suited for the task?) Ideally theye are web-based, or at least easy to learn for such a one-time-occasion. (No, LaTeX isn\u00b4t :) )\nThanks!"}, {"role": "assistant", "content": "You can describe your flow using JS code. Here is GitGraph.js\n\n- a simple JavaScript library which is meant to help you visually presenting git branching stuff like a git workflow, a tricky git command or whatever git tree you'd have in mind."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I make Git treat a file as binary?\nHaving a problem with a medium sized project where visual studio project files keep having issues due to git treating them as text and merging. I'd like to just set the file as binary so that git won't auto merge these files ever. \nIs there a way to do this?"}, {"role": "assistant", "content": "Yes, using attributes. Put something like this in your .gitattributes file (create it if it doesn't exist):\n*.sln binary\n*.suo binary\n*.vcxproj binary\n\nHere binary is actually a predefined macro, equivalent to -diff -merge -text.\nIf you want to still be able to see the diff, you can use:\n*.sln -merge -text\n\nThis way, the *.sln files won't be merged, not have eol normalized, but meanwhile diff-able."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.notes"}, {"role": "assistant", "content": "Provides the default value for the --notes option to\nformat-patch. Accepts a boolean value, or a ref which specifies\nwhere to get notes. If false, format-patch defaults to --no-notes . If true, format-patch defaults to --notes . If\nset to a non-boolean value, format-patch defaults to --notes=<ref> , where ref is the non-boolean value. Defaults\nto false. If one wishes to use the ref refs/notes/true , please use that literal\ninstead. This configuration can be specified multiple times in order to allow\nmultiple notes refs to be included. In that case, it will behave\nsimilarly to multiple --[no-]notes[=] options passed in. That is, a\nvalue of true will show the default notes, a value of <ref> will\nalso show notes from that notes ref and a value of false will negate\nprevious configurations and not show notes. For example, [format]\n\tnotes = true\n\tnotes = foo\n\tnotes = false\n\tnotes = bar will only show notes from refs/notes/bar ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to remove files from git staging area?\nI made changes to some of my files in my local repo, and then I did git add -A which I think added too many files to the staging area. How can I delete all the files from the staging area?\nAfter I do that, I'll just manually do git add \"filename\"."}, {"role": "assistant", "content": "You can unstage files from the index using\ngit reset HEAD -- path/to/file\n\nJust like git add, you can unstage files recursively by directory and so forth, so to unstage everything at once, run this from the root directory of your repository:\ngit reset HEAD -- .\n\nAlso, for future reference, the output of git status will tell you the commands you need to run to move files from one state to another."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-submodule - Initialize, update or inspect submodules  none"}, {"role": "assistant", "content": "the submodule is not updated. This update procedure is not\nallowed on the command line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Advice on multiple release lines and git-flow, for git non-gurus\nOur software product line requires developing and maintaining multiple software versions concurrently.  We are relative Git newbies and recently adopted Git Flow to take advantage of Driessen's branching model.  We have a very small software team with few dedicated developers (we all wear many hats) and no \"integration guru.\"\nMuch searching has turned up little specific advice on how to adapt Git and Git Flow to our needs.  What has turned up is that Git Flow is not well suited to supporting multiple versions concurrently.  One related discussion on SO has answers indicating separate branch names need to be used to track separate versions' histories.  This, and related strategies, eliminates Git Flow unless it is modified; see our team limitations above for a reason why this isn't practical for us.\nThe key question is what have others found to be a good approach for implementing Driessen's branching model as closely as possible while supporting multiple release lines?\nUPDATES:\nDistilling the answers below (particularly @Rasmus') with more targeted searching and internal discussions on a few options leads to the following solution that we are implementing, and which I offer as one approach that may be relevant to similar teams under similar conditions.\nWe won't continue to use Git Flow.  Instead, we will apply Driessen's model to each individual release line in a repo by prefacing each branch name with its intended release string, e.g.:\nr1.5/develop\n\nAll versions of a project are contained in the Git repository.  Starting a new project version consists of creating a small set of new long-lived branches prefaced by the release string (e.g. r1.6/develop and, in our case, r1.6/release; no master with its implication of the single current good buildable state).\nWe establish one central public repository per project on a server that will be the main avenue for sharing code through local repo remote links.  A push to this repository signifies code that is ready to be consumed by others.  Merging RX.Y/develop into and then pushing the RX.Y/release branch signifies code that is intended for release.  feature, hotfix, et. al. branches are handled similarly.  The branch merge/commit history for a given release line is clean and understandable.  We don't want the typical Git distributed repo strategy in favor of avoiding the complexity of merging such repos that, over time, are likely to diverge in structure.\nIn some Git GUIs (such as SourceTree for example) this branch structure is recognized and displayed as hierarchical, which helps understand the top-level history of a project from the branch structure.\nApologies for not up-voting any answers; my reputation on SO is not yet the minimum required to do so."}, {"role": "assistant", "content": "we are having a similar setup except we have more than 300 dedicated developers, we have exactly what you described several revision we need to deliver to different customers. \nWe have divided it so we have an initial ref like refs/heads/platformX.Y/ then we build on that \nSo depending on what you need to do you checkout platformX.Y/develop and start working from that point on a feature branch and you merge back to develop when you are done. \nThis works for us and we can follow the nvie model. \non top of everything we are merging all these platformX.Y branch to our main develop branch so errors corrected on those branches are released in to the latest software as well."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %aI"}, {"role": "assistant", "content": "author date, strict ISO 8601 format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --date-order"}, {"role": "assistant", "content": "Show no parents before all of its children are shown, but\notherwise show commits in the commit timestamp order."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  <refspec>"}, {"role": "assistant", "content": "Specifies which refs to fetch and which local refs to update.\nWhen no <refspec>s appear on the command line, the refs to fetch\nare read from remote.<repository>.fetch variables instead\n(see the section \"CONFIGURED REMOTE-TRACKING BRANCHES\"\nin git-fetch ). The format of a <refspec> parameter is an optional plus + , followed by the source <src>, followed\nby a colon : , followed by the destination ref <dst>.\nThe colon can be omitted when <dst> is empty.  <src> is\ntypically a ref, but it can also be a fully spelled hex object\nname. A <refspec> may contain a * in its <src> to indicate a simple pattern\nmatch. Such a refspec functions like a glob that matches any ref with the\nsame prefix. A pattern <refspec> must have a * in both the <src> and\n<dst>. It will map refs to the destination by replacing the * with the\ncontents matched from the source. If a refspec is prefixed by ^ , it will be interpreted as a negative\nrefspec. Rather than specifying which refs to fetch or which local refs to\nupdate, such a refspec will instead specify refs to exclude. A ref will be\nconsidered to match if it matches at least one positive refspec, and does\nnot match any negative refspec. Negative refspecs can be useful to restrict\nthe scope of a pattern refspec so that it will not include specific refs.\nNegative refspecs can themselves be pattern refspecs. However, they may only\ncontain a <src> and do not specify a <dst>. Fully spelled out hex object\nnames are also not supported. tag <tag> means the same as refs/tags/<tag>:refs/tags/<tag> ;\nit requests fetching everything up to the given tag. The remote ref that matches <src>\nis fetched, and if <dst> is not an empty string, an attempt\nis made to update the local ref that matches it. Whether that update is allowed without --force depends on the ref\nnamespace it\u2019s being fetched to, the type of object being fetched, and\nwhether the update is considered to be a fast-forward. Generally, the\nsame rules apply for fetching as when pushing, see the <refspec>... section of git-push for what those are. Exceptions to those\nrules particular to git fetch are noted below. Until Git version 2.20, and unlike when pushing with git-push , any updates to refs/tags/* would be accepted\nwithout + in the refspec (or --force ). When fetching, we promiscuously\nconsidered all tag updates from a remote to be forced fetches.  Since\nGit version 2.20, fetching to update refs/tags/* works the same way\nas when pushing. I.e. any updates will be rejected without + in the\nrefspec (or --force ). Unlike when pushing with git-push , any updates outside of refs/{tags,heads}/* will be accepted without + in the refspec (or --force ), whether that\u2019s swapping e.g. a tree object for a blob, or\na commit for another commit that doesn\u2019t have the previous commit as\nan ancestor etc. Unlike when pushing with git-push , there is no\nconfiguration which\u2019ll amend these rules, and nothing like a pre-fetch hook analogous to the pre-receive hook. As with pushing with git-push , all of the rules described\nabove about what\u2019s not allowed as an update can be overridden by\nadding an optional leading + to a refspec (or using the --force command line option). The only exception to this is that no amount of\nforcing will make the refs/heads/* namespace accept a non-commit\nobject. Note When the remote branch you want to fetch is known to\nbe rewound and rebased regularly, it is expected that\nits new tip will not be a descendant of its previous tip\n(as stored in your remote-tracking branch the last time\nyou fetched).  You would want\nto use the + sign to indicate non-fast-forward updates\nwill be needed for such branches.  There is no way to\ndetermine or declare that a branch will be made available\nin a repository with this behavior; the pulling user simply\nmust know this is the expected usage pattern for a branch. Note There is a difference between listing multiple <refspec>\ndirectly on git pull command line and having multiple remote.<repository>.fetch entries in your configuration\nfor a <repository> and running a git pull command without any explicit <refspec> parameters.\n<refspec>s listed explicitly on the command line are always\nmerged into the current branch after fetching.  In other words,\nif you list more than one remote ref, git pull will create\nan Octopus merge.  On the other hand, if you do not list any\nexplicit <refspec> parameter on the command line, git pull will fetch all the <refspec>s it finds in the remote.<repository>.fetch configuration and merge\nonly the first <refspec> found into the current branch.\nThis is because making an\nOctopus from remote refs is rarely done, while keeping track\nof multiple remote heads in one-go by fetching more than one\nis often useful."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git SSH error: \"Connect to host: Bad file number\"\n\nI followed the git guide but I have this strange issue when trying to connect to github:\n$ ssh -v [email\u00a0protected]\nOpenSSH_4.6p1, OpenSSL 0.9.8e 23 Feb 2007\ndebug1: Reading configuration data /c/Documents and Settings/mugues/.ssh/config\ndebug1: Applying options for github.com\ndebug1: Connecting to github.com [207.97.227.239] port 22.\ndebug1: connect to address 207.97.227.239 port 22: Attempt to connect timed out without establishing a connection\nssh: connect to host github.com port 22: Bad file number\n\nThis is my config file under .ssh\nHost github.com\n    User git\n    Hostname github.com\n    PreferredAuthentications publickey\n    IdentityFile \"C:\\Documents and Settings\\mugues\\.ssh\\id_rsa\"\n    TCPKeepAlive yes\n    IdentitiesOnly yes\n\nAny idea?"}, {"role": "assistant", "content": "After having this problem myself, I found a solution that works for me:\nError message: \n    ssh -v [email\u00a0protected]\n    OpenSSH_5.8p1, OpenSSL 1.0.0d 8 Feb 2011\n    debug1: Connecting to github.com [207.97.227.239] port 22.\n    debug1: connect to address 207.97.227.239 port 22: Connection timed out\n    ssh: connect to host github.com port 22: Connection timed out\n    ssh: connect to host github.com port 22: Bad file number\n\nYou will only see the bad file number message when on windows using the MINGGW shell. Linux users will just get Timed out.\nProblem:\nSSH is probably blocked on port 22. You can see this by typing\n    $nmap -sS github.com -p 22\n    Starting Nmap 5.35DC1 ( http://nmap.org ) at 2011-11-05 10:53 CET\n    Nmap scan report for github.com (207.97.227.239)\n    Host is up (0.10s latency).\n    PORT   STATE    SERVICE\n    22/tcp ***filtered*** ssh\n\n    Nmap done: 1 IP address (1 host up) scanned in 2.63 seconds\n\nAs you can see the state is Filtered, which means something is blocking it.\nYou can solve this by performing an SSH to port 443 (your firewall / isp will not block this).\nIt is also important that you need to ssh to \"ssh.github.com\" instead of github.com.\nOtherwise, you will report to the webserver instead of the ssh server. \nBelow are all the steps needed to solve this problem.\nSolution:\n(First of all make sure you generated your keys like explained on http://help.github.com/win-set-up-git/)\ncreate file ~/.ssh/config (ssh config file located in your user directory. \nOn windows probably %USERPROFILE%\\.ssh\\config\nPaste the following code in it:\n    Host github.com\n    User git\n    Hostname ssh.github.com\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/id_rsa\n    Port 443\n\nSave the file.\nPerform ssh like usual:\n$ssh -T github.com \n    $Enter passphrase for key '.......... (you can smile now :))\n\nNote that I do not have to supply the username or port number."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.fsyncObjectFiles"}, {"role": "assistant", "content": "This boolean will enable fsync() when writing object files.\nThis setting is deprecated. Use core.fsync instead. This setting affects data added to the Git repository in loose-object\nform. When set to true, Git will issue an fsync or similar system call\nto flush caches so that loose-objects remain consistent in the face\nof a unclean system shutdown."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-archive - Create an archive of files from a named tree  <extra>"}, {"role": "assistant", "content": "This can be any options that the archiver backend understands.\nSee next section."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I ignore files in a directory in Git?\nWhat is the proper syntax for the .gitignore file to ignore files in a directory?\nWould it be\nconfig/databases.yml\ncache/*\nlog/*\ndata/sql/*\nlib/filter/base/*\nlib/form/base/*\nlib/model/map/*\nlib/model/om/*\n\nor\n/config/databases.yml\n/cache/*\n/log/*\n/data/sql/*\n/lib/filter/base/*\n/lib/form/base/*\n/lib/model/map/*\n/lib/model/om/*\n\n?"}, {"role": "assistant", "content": "PATTERN FORMAT\n\nA blank line matches no files, so it can serve as a separator for readability.\nA line starting with # serves as a comment.\nAn optional prefix ! which negates the pattern; any matching file excluded by a previous pattern will become included again. If a negated pattern matches, this will override lower precedence patterns sources.\nIf the pattern ends with a slash, it is removed for the purpose of the following description, but it would only find a match with a directory. In other words, foo/ will match a directory foo and paths underneath it, but will not match a regular file or a symbolic link foo (this is consistent with the way how pathspec works in general in git).\nIf the pattern does not contain a slash /, git treats it as a shell glob pattern and checks for a match against the pathname relative to the location of the .gitignore file (relative to the toplevel of the work tree if not from a .gitignore file).\nOtherwise, git treats the pattern as a shell glob suitable for consumption by fnmatch(3) with the FNM_PATHNAME flag: wildcards in the pattern will not match a / in the pathname. For example, Documentation/*.html matches Documentation/git.html but not Documentation/ppc/ppc.html or tools/perf/Documentation/perf.html.\nA leading slash matches the beginning of the pathname. For example, /*.c matches cat-file.c but not mozilla-sha1/sha1.c.\n\nYou can find more here\ngit help gitignore\nor\nman gitignore"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "use Winmerge inside of Git to file diff\nIs there a way to use Winmerge inside of git to do Diffs?"}, {"role": "assistant", "content": "Update June 2015, 6 years later:\nAs detailed in \"git mergetool winmerge\", a simple git config diff.tool winmerge will be enough.\nGit 2.5+ (Q2, 2015) is now aware of Winmerge as a diff or merge tool!\n\nOriginal answer (2009-2012)\n(msysgit, 1.6.5, DOS session)\nThe first part (using winmerge) is described in \"How do I view \u2018git diff\u2019 output with visual diff program?\"\nC:\\myGitRepo>git config --replace --global diff.tool winmerge\nC:\\myGitRepo>git config --replace --global difftool.winmerge.cmd \"winmerge.sh \\\"$LOCAL\\\" \\\"$REMOTE\\\"\"\nC:\\myGitRepo>git config --replace --global difftool.prompt false\n\nWith winmerge.sh stored in a directory part of your PATH:\n#!/bin/sh\necho Launching WinMergeU.exe: $1 $2\n\"$PROGRAMFILES/WinMerge/WinMergeU.exe\" -e -u -dl \"Local\" -dr \"Remote\" \"$1\" \"$2\"\n\n(see WinMerge Command-line options)  \ngit difftool\n\nwill now launch WinMerge.\nIf you want git diff to launch WinMerge, just set:\nset GIT_EXTERNAL_DIFF=winmerge.sh\n\n\nBut the real added value comes from the ability to use that same diff tool to present all differences in one batch instead of presenting them sequentially, forcing you to close the diff tool windows one file at a time.\nUpdate June 2012 (2-and-a-half years later):\nComparing directories instead of file-by-file will be available soon:\nSee [ANNOUNCE] Git 1.7.11.rc1:\n\n\"git difftool\" learned the \"--dir-diff\" option to spawn external diff tools that can compare two directory hierarchies at a time after populating two temporary directories, instead of running an instance of the external tool once per a file pair.\n\nSee \"Patch difftool: teach difftool to handle directory diffs\", and the answer \"Directory comparison of Git branches\" for more details.\n\nOriginal difftool by directories script (December 2009)\nAs Seba Illingworth mentions in his answer, a script git-diffall.sh (also put in the path) can do just that:\n#!/bin/sh\ngit diff --name-only \"$@\" | while read filename; do\n    git difftool \"$@\" --no-prompt \"$filename\" &\ndone\n\nBut that only works by opening n windows for n files (if you try to use the -s option of WinMerge, it will not work because of the temp files being deleted by the difftool too early)\n\nThat is why I like the approach of GitDiff.bat - power-diffing with GI, which allows you to review the list of files with a difference, before selecting one to examine its  internal differences.\nI have tweaked it to use only DOS commands\n@echo off\n\nsetlocal\n\nif \"%1\" == \"-?\" (\n    echo GitDiff - enables diffing of file lists, instead of having to serially\n    echo diff files without being able to go back to a previous file.\n    echo Command-line options are passed through to git diff.\n    echo If GIT_FOLDER_DIFF is set, it is used to diff the file lists. Default is windff.\n    goto END\n)\n\nif \"%GIT_DIFF_COPY_FILES%\"==\"\" (\n    rd /s /q %TEMP%\\GitDiff\n    mkdir %TEMP%\\GitDiff\n    mkdir %TEMP%\\GitDiff\\old\n    mkdir %TEMP%\\GitDiff\\new\n\n    REM This batch file will be called by git diff. This env var indicates whether it is\n    REM being called directly, or inside git diff\n    set GIT_DIFF_COPY_FILES=1\n\n    set GIT_DIFF_OLD_FILES=%TEMP%\\GitDiff\\old\n    set GIT_DIFF_NEW_FILES=%TEMP%\\GitDiff\\new\n\n    set GIT_EXTERNAL_DIFF=%~dp0\\GitDiff.bat\n    echo Please wait and press q when you see \"(END)\" printed in reverse color...\n    call git diff %*\n\n    if defined GIT_FOLDER_DIFF (\n        REM This command using GIT_FOLDER_DIFF just does not work for some reason.\n        %GIT_FOLDER_DIFF% %TEMP%\\GitDiff\\old %TEMP%\\GitDiff\\new\n        goto END\n    )\n\n    if exist \"%ProgramFiles%\\Beyond Compare 2\\BC2.exe\" (\n        set GIT_FOLDER_DIFF=\"%ProgramFiles%\\Beyond Compare 2\\BC2.exe\"\n        \"%ProgramFiles%\\Beyond Compare 2\\BC2.exe\" %TEMP%\\GitDiff\\old %TEMP%\\GitDiff\\new\n        goto END\n    )\n\n    \"%ProgramFiles(x86)%\\WinMerge\\WinMergeU.exe\" -r -e -dl \"Local\" -dr \"Remote\"  %TEMP%\\GitDiff\\old %TEMP%\\GitDiff\\new\n    goto END\n)\n\nREM diff is called by git with 7 parameters:\nREM     path old-file old-hex old-mode new-file new-hex new-mode\ncopy %TEMP%\\%~nx2 %GIT_DIFF_OLD_FILES%\\%1\ncopy %5 %GIT_DIFF_NEW_FILES%\n\n:END\n\nIt is not robust enough to handle files with same names in different directories, but it gives you a general idea of what is possible:\nHere only one WinMerge will open up, with the list of files having internal differences. You can click on the ones you want to examines, then a simple ESC will close the all WinMerge-diff session."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a way to cache https credentials for pushing commits?\n\nI recently switched to synchronizing my repositories to https:// on GitHub (due to firewall issues), and it asks for a password every time.\nIs there a way to cache the credentials, instead of authenticating every time that git push?"}, {"role": "assistant", "content": "Since Git 1.7.9 (released 2012), there is a neat mechanism in Git to avoid having to type your password all the time for HTTP / HTTPS, called credential helpers.\nYou can just use one of the following credential helpers:\ngit config --global credential.helper cache\n\nThe credential.helper cache value tells Git to keep your password cached in memory for a particular amount of minutes. The default is 15 minutes, you can set a longer timeout with:\n# Cache for 1 hour\ngit config --global credential.helper \"cache --timeout=3600\"\n\n# Cache for 1 day\ngit config --global credential.helper \"cache --timeout=86400\"\n\n# Cache for 1 week\ngit config --global credential.helper \"cache --timeout=604800\"\n\nYou can also store your credentials permanently if so desired, see the other answers below.\nGitHub's help also suggests that if you're on Mac OS X and used Homebrew to install Git, you can use the native Mac\u00a0OS\u00a0X keystore with:\ngit config --global credential.helper osxkeychain\n\nFor Windows, there is a helper called Git Credential Manager for Windows or wincred in msysgit.\ngit config --global credential.helper wincred # obsolete\n\nWith Git for Windows 2.7.3+ (March 2016):\ngit config --global credential.helper manager\n\nFor Linux, you would use (in 2011) gnome-keyring(or other keyring implementation such as KWallet).\nNowadays (2020), that would be (on Linux)\nFedora\nsudo dnf install git-credential-libsecret\ngit config --global credential.helper /usr/libexec/git-core/git-credential-libsecret\n\nUbuntu\nsudo apt-get install libsecret-1-0 libsecret-1-dev\ncd /usr/share/doc/git/contrib/credential/libsecret\nsudo make\ngit config --global credential.helper /usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is a patch in Git version control?\nI am new to both Git and version control so I am trying to figure out what a patch is and how is it different from the rest of activities I do in Git?\nWhen do I apply a patch? Does it happen every time I commit?"}, {"role": "assistant", "content": "You can see in this blog post how you can create a patch (collection of changes you want to communicate and apply to another repo)\n\n(picture from the 2008 blog post \"Bioruby with git: how would that work?\", published by Jan AERTS)\nSee also Contributing to Rails with Git as another concrete example.\nNowadays, the GitHub pull request makes it really easy to apply patches on GitHub repos, which is useful when you aren't a direct contributor (ie you have no right to directly push to a repo).\nActually, fairly recently GitHub introduced \"Better Pull Request Emails\" to improve the notification of new patches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  cache"}, {"role": "assistant", "content": "Obsolete for: index ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is the master branch and release branch for?\nThe \"Master branch\" is for a product which is ready and can be downloaded by end-users.\nBut there are \"release branches\" - I have no ideas who these branches are for. Release for customers? For QA?\nImage showing the branches"}, {"role": "assistant", "content": "Once develop has acquired enough features for a release (or a predetermined release date is approaching), you fork a release branch off of develop. Creating this branch starts the next release cycle, so no new features can be added after this point.Only bug fixes, documentation generation, and other release-oriented tasks should go in this branch(which includes testing also). Once it's ready to ship, the release gets merged into master and tagged with a version number. In addition, it should be merged back into develop, which may have progressed since the release was initiated.\nUsing a dedicated branch to prepare releases makes it possible for one team to polish the current release while another team continues working on features for the next release. It also creates well-defined phases of development (e.g., it's easy to say, \u201cthis week we're preparing for version 4.0\u201d and to actually see it in the structure of the repository).\nMore info here for branches"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git pull / push - unable to access HTTPS, SSL routines seem to be down\nI'm using Git (and GitHub) on a daily basis and everything has been working fine and all of a sudden, I can no longer communicate with my remote GitHub repository through my Git commands. When I try to \"Git pull\", it gives the following error:\n\nfatal: unable to access 'https://github.com/snahrvar/eatibl.git/':\n  error:1407742E:SSL routines:SSL23_GET_SERVER_HELLO:tlsv1 alert\n  protocol version\n\nSo, I tested across multiple repositories, and I get the same errors on my computer. I had someone else interact with those same repositories, and it works fine for them. Prior to this error, I did an \"npm install sharp\" on a project and that ended up failing, and I suspect this may have messed with some SSL setting, but that's a wild guess!\nAny general thoughts or guidance would be much appreciated!\nIf it's helpful at all, here is my environment:\n\nGit version: 1.9.4.msysgit.2\nWindows version: Windows 8.1"}, {"role": "assistant", "content": "Updating TortoiseGit and GCM didn't help me, but updating Git itself did, as per @Frederic's advice in comments.\nhttps://git-scm.com/download/win\nTo make sure the new version of Git installs properly and doesn't conflict with previous installations (it might, if you used TortoiseGit's, because it would use different folders and mess with PATH variable), remove the existing Git installation before installing the updated Git. Might also need to install with administrator rights."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --[no-]recurse-submodules[=(yes|on-demand|no)]"}, {"role": "assistant", "content": "This option controls if new commits of populated submodules should\nbe fetched, and if the working trees of active submodules should be\nupdated, too (see git-fetch , git-config and gitmodules ). If the checkout is done via rebase, local submodule commits are rebased as well. If the update is done via merge, the submodule conflicts are resolved and checked out."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How does origin/HEAD get set?\nI have a branch set up to track a ref in origin.  git checkout <branchname> switches to that branch, and a git status will show me how far ahead or behind my branch is from origin, but I'm surprised that origin/HEAD still points at origin/master, and not origin/<branchname>\nSo my question is, under what circumstances does origin/HEAD get moved?\nEDIT:\nI appreciate the answers about how to move origin/HEAD, but I'm interested in what \"organically\" moves it, outside of me explicitly telling it to do so.\nFor example, when I switch branches, git makes HEAD point at the branch I'm checking out, so I'm surprised that origin/HEAD doesn't move in the same manner."}, {"role": "assistant", "content": "Note first that your question shows a bit of misunderstanding. origin/HEAD represents the default branch on the remote, i.e. the HEAD that's in that remote repository you're calling origin. When you switch branches in your repo, you're not affecting that. The same is true for remote branches; you might have master and origin/master in your repo, where origin/master represents a local copy of the master branch in the remote repository. \norigin's HEAD will only change if you or someone else actually changes it in the remote repository, which should basically never happen - you want the default branch a public repo to stay constant, on the stable branch (probably master). origin/HEAD is a local ref representing a local copy of the HEAD in the remote repository. (Its full name is refs/remotes/origin/HEAD.)\nI think the above answers what you actually wanted to know, but to go ahead and answer the question you explicitly asked... origin/HEAD is set automatically when you clone a repository, and that's about it. Bizarrely, that it's not set by commands like git remote update - I believe the only way it will change is if you manually change it. (By change I mean point to a different branch; obviously the commit it points to changes if that branch changes, which might happen on fetch/pull/remote update.)\n\nEdit: The problem discussed below was corrected in Git 1.8.4.3; see this update.\n\nThere is a tiny caveat, though. HEAD is a symbolic ref, pointing to a branch instead of directly to a commit, but the git remote transfer protocols only report commits for refs. So Git knows the SHA1 of the commit pointed to by HEAD and all other refs; it then has to deduce the value of HEAD by finding a branch that points to the same commit. This means that if two branches happen to point there, it's ambiguous. (I believe it picks master if possible, then falls back to first alphabetically.) You'll see this reported in the output of git remote show origin:\n$ git remote show origin\n* remote origin\n  Fetch URL: ...\n  Push  URL: ...\n  HEAD branch (remote HEAD is ambiguous, may be one of the following):\n    foo\n    master\n\nOddly, although the notion of HEAD printed this way will change if things change on the remote (e.g. if foo is removed), it doesn't actually update refs/remotes/origin/HEAD. This can lead to really odd situations. Say that in the above example origin/HEAD actually pointed to foo, and origin's foo branch was then removed. We can then do this:\n$ git remote show origin\n...\nHEAD branch: master\n$ git symbolic-ref refs/remotes/origin/HEAD\nrefs/remotes/origin/foo\n$ git remote update --prune origin\nFetching origin\n x [deleted]         (none)     -> origin/foo\n   (refs/remotes/origin/HEAD has become dangling)\n\nSo even though remote show knows HEAD is master, it doesn't update anything. The stale foo branch is correctly pruned, and HEAD becomes dangling (pointing to a nonexistent branch), and it still doesn't update it to point to master. If you want to fix this, use git remote set-head origin -a, which automatically determines origin's HEAD as above, and then actually sets origin/HEAD to point to the appropriate remote branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --patch-with-stat"}, {"role": "assistant", "content": "Synonym for -p --stat ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How much of a git sha is *generally* considered necessary to uniquely identify a change in a given codebase?\n\nIf you're going to build, say, a directory structure where a directory is named for a commit in a Git repository, and you want it to be short enough to make your eyes not bleed, but long enough that the chance of it colliding would be negligible, how much of the SHA substring is generally required?\nLet's say I want to uniquely identify this change: https://github.com/wycats/handlebars.js/commit/e62999f9ece7d9218b9768a908f8df9c11d7e920\nI can use as little as the first four characters:\nhttps://github.com/wycats/handlebars.js/commit/e629\nBut I feel like that would be risky.  But assuming a codebase that, over a couple of years, might have\u2014say\u201430k changes, what are the chances of collision if I use 8 characters?  12?  Is there a number that's generally considered acceptable for this sort of thing?"}, {"role": "assistant", "content": "This question is actually answered in Chapter 7 of the Pro Git book:\n\nGenerally, eight to ten characters are more than enough to be unique\nwithin a project. One of the largest Git projects, the Linux kernel,\nis beginning to need 12 characters out of the possible 40 to stay\nunique.\n\n7 digits are the Git default for a short SHA, so that's fine for most projects. The Kernel team has increased theirs several times, as mentioned because they have several hundred thousand commits. So for your ~30k commits, 8 or 10 digits should be perfectly fine."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --short[=<length>]"}, {"role": "assistant", "content": "Same as --verify but shortens the object name to a unique\nprefix with at least length characters. The minimum length\nis 4, the default is the effective value of the core.abbrev configuration variable (see git-config )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: How to update/checkout a single file from remote origin master?\nThe scenario:\n\nI make some changes in a single file locally and run git add, git commit and git push\nThe file is pushed to the remote origin master repository\nI have another local repository that is deployed via Capistrano with the \"remote_cache\" method from that remote repository\nNow I don't want to deploy the whole application but just update/checkout that single file.\n\nIs this somehow possible with git? I wasn't able to find anything that would work nor was I able to figure it out. With SVN I just did svn up file and voila."}, {"role": "assistant", "content": "It is possible to do (in the deployed repository)\ngit fetch\ngit checkout origin/master -- path/to/file\n\nThe fetch will download all the recent changes, but it will not put it in your current checked out code (working area).\nThe checkout will update the working tree with the particular file from the downloaded changes (origin/master).\nAt least this works for me for those little small typo fixes, where it feels weird to create a branch etc just to change one word in a file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  AUTO_MERGE"}, {"role": "assistant", "content": "records a tree object corresponding to the state the ort merge strategy wrote to the working tree when a merge operation\nresulted in conflicts."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitLab CI enable SCP\n\nI'm using one of the shared runners on GitLab.com currently. Is it possible to set up the .gitlab-ci.yaml file such that a build can SCP files from a remote server onto the runner? My goal is to SCP files that are necessary dependencies for my build, but they are not tracked in any Git repositories.\nI've marked the line where I would like to be able to perform the transfer, but I don't know how to express it properly. \nNote: CodeA has dependencies in CodeB and CodeC, which must be built before CodeA can compile, so I need to have access to CodeB and CodeC to build them first on the ubuntu image.\nimage: ubuntu:12.04\n\nbefore_script:\n\nbuild_CodeC:\n  stage: build\n  allow_failure: true\n  script:\n-->- scp user@remoteServer:/home/user/file.tar . <---\n   - sh ./continuous_integration/build_CodeC_dependency.sh\n\nbuild_CodeB:\n  stage: build\n  script:\n    - sh ./continuous_integration/build_CodeB_dependency.sh\n\nbuild_CodeA:\n  stage: build\n  script:\n    - sh ./continuous_integration/build_CodeA.sh"}, {"role": "assistant", "content": "From your question here, I think that getting your dependencies through http is not possible, so here's what you need to do in order to use scp:\n\nGenerate a key pair\nCopy the private key to a gitlab CI variable (let's call it SSH_PRIVATE_KEY)\nCopy the public key to the server gitlab will connect to and add it to your ~/.ssh/authorized_keys file\nTell your CI pipeline to use the private key that is stored in the Gitlab CI variable\n\nIn order to do that last step, just add the following to your .gitlab-ci.yml in the script or before_script section of the job of interest: \n- 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'\n# Run ssh-agent (inside the build environment)\n- eval $(ssh-agent -s)\n# Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store\n- ssh-add <(echo \"$SSH_PRIVATE_KEY\")\n- mkdir -p ~/.ssh\n- '[[ -f /.dockerenv ]] && echo -e \"Host *\\n\\tStrictHostKeyChecking no\\n\\n\" > ~/.ssh/config'\n\nYou may also want to specify that CodeA is dependent on B and C. In order for that to work, build_CodeB and build_CodeC need to be in a different stage than build_CodeA.\nBesides that, you need a way to carry the built files from build_CodeB and build_CodeC jobs to the build_CodeA job. One way to do that is to use artifacts.\nIn the end, your .gitlab-ci.yml file should look something like this:\nimage: ubuntu:12.04\n\nstages:\n  - deps\n  - build\n\nbuild_CodeC:\n  stage: deps\n  allow_failure: true\n  script:\n    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'\n    # Run ssh-agent (inside the build environment)\n    - eval $(ssh-agent -s)\n    # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store\n    - ssh-add <(echo \"$SSH_PRIVATE_KEY\")\n    - mkdir -p ~/.ssh\n    - '[[ -f /.dockerenv ]] && echo -e \"Host *\\n\\tStrictHostKeyChecking no\\n\\n\" > ~/.ssh/config'\n    - scp user@remoteServer:/home/user/file.tar .\n    - sh ./continuous_integration/build_CodeC_dependency.sh\n  artifacts:\n    paths:\n      - path_to_built_codeC\n\nbuild_CodeB:\n  stage: deps\n  script:\n    - sh ./continuous_integration/build_CodeB_dependency.sh\n  artifacts:\n    paths:\n      - path_to_built_codeB\n\nbuild_CodeA:\n  stage: build\n  dependencies:\n    - build_CodeB\n    - build_CodeC\n  script:\n    - sh ./continuous_integration/build_CodeA.sh\n\nI only put the SSH key setup part in build_CodeC because that's where you are using scp. You would need to copy this over to any job that would require to use scp. I'm thinking you may need to do this in build_codeB since your tar file will not be carried to the build_CodeB job."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  --allow-unknown-type"}, {"role": "assistant", "content": "Allow -s or -t to query broken/corrupt objects of unknown type."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  -c  --committer"}, {"role": "assistant", "content": "This is an alias for --group=committer ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git pull not pulling everything\nI have a server where there's some config that I don't properly know where i just git pull and it gets what is in a github repo, then restart it in order to deploy.\nThe thing is, there's a commit which isn't my latest, that isn't really on my server. The files aren't in .gitignore. How do I assure that a pull, pulled a commit?\nI really don't know how to fix it, I'm thinking about restarting everything :(\n14:41][root@someserver] someserver_dir (master)$ git status\n# On branch master\n# Changes not staged for commit:\n#   (use \"git add <file>...\" to update what will be committed)\n#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n#\n#   modified:   Gemfile\n#   modified:   Gemfile.lock\n#   modified:   config/assets.yml\n#   modified:   config/database.yml\n#\n# Untracked files:\n#   (use \"git add <file>...\" to include in what will be committed)\n#\n#   randomfiles"}, {"role": "assistant", "content": "If you always want your server version to reflect a commit from your repo, it's probably better to use git reset instead of git pull - that way you never invoke merge functionality, but instead set all of the files to exactly what they are in the commit you reset to. For example:\ngit fetch origin master\ngit reset --hard FETCH_HEAD"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Setup CI on Gitlab for Flutter\n\nI am trying to setup CI for my flutter project on gitlab but I don't understand where to start or what I have to do.\nCan anyone help me?\nThanks"}, {"role": "assistant", "content": "I suggest to setup your GitLab CI integration for flutter treating the android and ios project folder by their own in order to build your APK or IPA or doing test with your GitLab CI.\nTo start having a clue on how to setup a CI for Android and iOS projects on GitLab I'll suggest you these readings:\nAndroid:\n\nhttps://about.gitlab.com/2018/10/24/setting-up-gitlab-ci-for-android-projects/\n\niOS\n\nhttps://about.gitlab.com/2016/03/10/setting-up-gitlab-ci-for-ios-projects/\nhttps://medium.com/flawless-app-stories/how-to-set-up-gitlab-continuous-integration-for-ios-projects-without-a-hustle-53c2b642c90f\n\nUPDATE: using Fastlane\nI've the above solutions running on my apps and so I know they work. But I've found these interesting official docs for flutter using Fastlane (they seem quite easier):\n\nhttps://flutter.io/docs/deployment/fastlane-cd\nhttps://docs.fastlane.tools/best-practices/continuous-integration/gitlab/\n\nSo I suggest to give them a try too."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Swap git submodule with own fork\n\nI added a submodule to my git repo like this:\n$ git submodule add git://github.com/user/some-library some-library\n\nI've decided I want to create a fork of that library to do some adjustments. How can i swap that submodule so that it points to my own github fork instead?"}, {"role": "assistant", "content": "The submodules are stored in .gitmodules:\n$ cat .gitmodules\n[submodule \"ext/google-maps\"]\n    path = ext/google-maps\n    url = git://git.naquadah.org/google-maps.git\n\nIf you edit the url with a text editor, you need to run the following:\n$ git submodule sync\n\nThis updates .git/config which contains a copy of this submodule list (you could also just edit the relevant [submodule] section of .git/config manually)\nThere might be a way to do it with only git commands, although the submodule system seems a bit incomplete (e.g see the instructions to remove a submodule)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Bitbucket activity graph\n\nI would like to know if there is a solution in Bitbucket similar to Github's graphs. For example, here are the ones for Node.js:\nContributions graph\n\nCommits graph\n\nI've done some research and I haven't found anything similar. Does anybody know if this kind of visualisation exists in a hidden place in Bitbucket? Or is there some 3rd party service which provides these kinds of graphs of a git repository?"}, {"role": "assistant", "content": "Take a look at Awesome Graphs for Bitbucket add-on\nFrom http://blog.bitbucket.org/2015/06/10/atlassian-connect-for-bitbucket-a-new-way-to-extend-your-workflow-in-the-cloud\n\nIf you are currently a user of Bitbucket and want to take a sneak peak, click on your avatar, select \u201cManage Account\u201d, and simply install these new add-ons by selecting \u201cFind new add-ons\u201d from the left menu.\n\nHere is the add-on's release notes page: https://docs.stiltsoft.com/awesome-graphs/cloud/release-notes-cloud"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Handling file renames in Git\nI'd read that when renaming files in Git, you should commit any changes, perform your rename and then stage your renamed file. Git will recognise the file from the contents, rather than seeing it as a new untracked file, and keep the change history.\nHowever, doing just this tonight I ended up reverting to git mv.\n> $ git status\n# On branch master\n# Changes to be committed:\n#   (use \"git reset HEAD <file>...\" to unstage)\n#\n#    modified:   index.html\n#\n\nI renamed my stylesheet in Finder from iphone.css to mobile.css:\n> $ git status\n# On branch master\n# Changes to be committed:\n#   (use \"git reset HEAD <file>...\" to unstage)\n#\n#    modified:   index.html\n#\n# Changed but not updated:\n#   (use \"git add/rm <file>...\" to update what will be committed)\n#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n#\n#    deleted:    css/iphone.css\n#\n# Untracked files:\n#   (use \"git add <file>...\" to include in what will be committed)\n#\n#    css/mobile.css\n\nSo Git now thinks I've deleted one CSS file, and added a new one. It is not what I want. Let\u2019s undo the rename and let Git do the work.\n> $ git reset HEAD .\nUnstaged changes after reset:\nM    css/iphone.css\nM    index.html\n\nI am back to where I began:\n> $ git status\n# On branch master\n# Changes to be committed:\n#   (use \"git reset HEAD <file>...\" to unstage)\n#\n#    modified:   index.html\n#\n\nLet's use git mv instead:\n> $ git mv css/iphone.css css/mobile.css\n> $ git status\n# On branch master\n# Changes to be committed:\n#   (use \"git reset HEAD <file>...\" to unstage)\n#\n#    renamed:    css/iphone.css -> css/mobile.css\n#\n# Changed but not updated:\n#   (use \"git add <file>...\" to update what will be committed)\n#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n#\n#    modified:   index.html\n#\n\nIt looks like we're good. So why didn't Git recognise the rename the first time around when I used Finder?"}, {"role": "assistant", "content": "For git mv the manual page says\n\nThe index is updated after successful completion,\n[\u2026]\n\nSo, at first, you have to update the index on your own\n(by using git add mobile.css). However git status\nwill still show two different files:\n$ git status\n# On branch master\nwarning: LF will be replaced by CRLF in index.html\n# Changes to be committed:\n#   (use \"git reset HEAD <file>...\" to unstage)\n#\n#       modified:   index.html\n#       new file:   mobile.css\n#\n# Changed but not updated:\n#   (use \"git add/rm <file>...\" to update what will be committed)\n#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n#\n#       deleted:    iphone.css\n#\n\nYou can get a different output by running git commit --dry-run -a, which results in what you\nexpect:\nTanascius@H181 /d/temp/blo (master)\n$ git commit --dry-run -a\n# On branch master\nwarning: LF will be replaced by CRLF in index.html\n# Changes to be committed:\n#   (use \"git reset HEAD <file>...\" to unstage)\n#\n#       modified:   index.html\n#       renamed:    iphone.css -> mobile.css\n#\n\nI can't tell you exactly why we see these differences\nbetween git status and git commit --dry-run -a, but\nhere is a hint from Linus:\n\ngit really doesn't even care about the whole\n\"rename detection\" internally, and any commits you have\ndone with renames are totally independent of the\nheuristics we then use to show the renames.\n\nA dry-run uses the real renaming mechanisms, while a\ngit status probably doesn't."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  String"}, {"role": "assistant", "content": "Specify a comma separated list of common whitespace problems to\nnotice in the same format as the core.whitespace configuration\nvariable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --show-pulls"}, {"role": "assistant", "content": "Include all commits from the default mode, but also any merge\ncommits that are not TREESAME to the first parent but are\nTREESAME to a later parent. This mode is helpful for showing\nthe merge commits that \"first introduced\" a change to a branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Dependencies Between Workflows on Github Actions\n\nI have a monorepo with two workflows:\n.github/workflows/test.yml\nname: test\n\non: [push, pull_request]\n\njobs:\n  test-packages:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - name: test packages\n        run: |\n          yarn install\n          yarn test\n...\n\n.github/workflows/deploy.yml\nname: deploy\n\non:\n  push:\n    tags:\n      - \"*\"\n\njobs:\n  deploy-packages:\n    runs-on: ubuntu-latest\n    needs: test-packages\n    steps:\n      - uses: actions/checkout@v1\n      - name: deploy packages\n        run: |\n          yarn deploy\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n...\n\nThis doesn't work, I can't reference a job in another workflow:\n### ERRORED 19:13:07Z\n\n- Your workflow file was invalid: The pipeline is not valid. The pipeline must contain at least one job with no dependencies.\n\nIs there a way to create a dependency between workflows?\nWhat I want is to run test.yml then deploy.yml on tags, and test.yml only on push and pull requests. I don't want to duplicate jobs between workflows."}, {"role": "assistant", "content": "Now it's possible to have dependencies between workflows on Github Actions using workflow_run.\nUsing this config, the Release workflow will work when the Run Tests workflow is completed.\nname: Release\non:\n  workflow_run:\n    workflows: [\"Run Tests\"]\n    branches: [main]\n    types: \n      - completed"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to check if the commit exists in a Git repository by its SHA-1\nIn a similar topic Validate if commit exists they recommend:\ngit rev-list HEAD..$sha\n\nIf it exits without error code than the commit exists.\nBut is it efficient enough just for validation?\nI was thinking about this option:\ngit cat-file commit $sha\n\nIs it correct for my task and are there any other ideas?"}, {"role": "assistant", "content": "You can just run git cat-file -t $sha and check it returns \"commit\". You are right, you don't need to actually print the actual object for that...\nI'm not 100% sure that what goes on behind the scene is more efficient, though.\ntest $(git cat-file -t $sha) == commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I stop .gitignore from appearing in the list of untracked files?\nI just did a git init on the root of my new project.\nThen I created a .gitignore file.\nNow, when I type git status, .gitignore file appears in the list of untracked files. Why is that?"}, {"role": "assistant", "content": "The .gitignore file should be in your repository, so it should indeed be added and committed in, as git status suggests. It has to be a part of the repository tree, so that changes to it can be merged and so on.\nSo, add it to your repository, it should not be gitignored.\nIf you really want you can add .gitignore to the .gitignore file if you don't want it to be committed. However, in that case it's probably better to add the ignores to .git/info/exclude, a special checkout-local file that works just like .gitignore but does not show up in \"git status\" since it's in the .git folder.\nSee also https://help.github.com/articles/ignoring-files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --find-copies-harder"}, {"role": "assistant", "content": "For performance reasons, by default, -C option finds copies only\nif the original file of the copy was modified in the same\nchangeset.  This flag makes the command\ninspect unmodified files as candidates for the source of\ncopy.  This is a very expensive operation for large\nprojects, so use it with caution.  Giving more than one -C option has the same effect."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.hooksPath"}, {"role": "assistant", "content": "By default Git will look for your hooks in the $GIT_DIR/hooks directory. Set this to different path,\ne.g. /etc/git/hooks , and Git will try to find your hooks in\nthat directory, e.g. /etc/git/hooks/pre-receive instead of\nin $GIT_DIR/hooks/pre-receive . The path can be either absolute or relative. A relative path is\ntaken as relative to the directory where the hooks are run (see\nthe \"DESCRIPTION\" section of githooks ). This configuration variable is useful in cases where you\u2019d like to\ncentrally configure your Git hooks instead of configuring them on a\nper-repository basis, or as a more flexible and centralized\nalternative to having an init.templateDir where you\u2019ve changed\ndefault hooks."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to use GIT LFS to track iOS frameworks?\nI want to track my frameworks with lfs by a smart way. So this is my setting for git lfs:\n*.framework/Versions/A (.gitattributes)\n*/*.framework/Versions/A (.gitattributes)\n*/{*.framework}/Versions/A (.gitattributes)\n\nBut it doesn't work. When I run \n\"git add .\"\n\nthere's no files tracked by lfs.\nHow to fix that.\nThank you!"}, {"role": "assistant", "content": "Important: To successfully get Git LFS working, the file may not already be in your Git history.\nMandatory steps:\n\nInstall Git LFS via brew (or mac ports.. ) \nbrew install git-lfs\nInitialize LFS inside jour local Git repo. Otherwise your commands will have no effect.\ngit lfs install\n\n// Updated pre-push hook. Git LFS initialized.\n\nDo not track the iOS framework directly (eg. \"opencv2.framework\") because macOS will treat it as a folder. Just track the one large binary file inside the framework.\ngit lfs track MyProject/Libraries/opencv2.framework/Versions/A/opencv2\n\n// Tracking MyProject/Libraries/opencv2.framework/Versions/A/opencv2\n\nAdd all the files including the new generated \".gitattributes\"\ngit add .\nCommit changes \ngit commit -m \"added lfs binary\"\nNow verify the file is properly tracked by LFS\ngit lfs ls-files\n\n// 604bd36eb5 * MyProject/Libraries/opencv2.framework/Versions/A/opencv2\n\nPush the commit and see that Git is uploading the large file first\ngit push\n\n// Git LFS: (1 of 1 files) 3.54 MB / 87.34 MB\nAnd you are done."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  core Git"}, {"role": "assistant", "content": "Fundamental data structures and utilities of Git. Exposes only limited\nsource code management tools."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Checkout, Fetch and Pull in BitBucket SourceTree\n\nI am using BitBucket for web based hosting of our projects. Along with that I am using their SourceTree for committing and such purpose. I am a bit confused with the Checkout, Fetch and Pull option available in the SourceTree interface and their usage. Can someone familiar with this tool explains the usage of these options available in SourceTree?"}, {"role": "assistant", "content": "Using Atlassian's Git tutorial (link updated) as a reference.\nGit checkout:\n\nThe git checkout command lets you navigate between the branches\n  created by git branch. Checking out a branch updates the files in the\n  working directory to match the version stored in that branch, and it\n  tells Git to record all new commits on that branch. Think of it as a\n  way to select which line of development you\u2019re working on.\nSource: https://www.atlassian.com/git/tutorials/using-branches#git-checkout\n\nGit pull:\n\nYou can think of git pull as Git's version of svn update. It\u2019s an easy\n  way to synchronize your local repository with upstream changes. The\n  following diagram explains each step of the pulling process.\nSource: https://www.atlassian.com/git/tutorials/syncing#git-pull\n\nGit fetch:\n\nThe git fetch command imports commits from a remote repository into\n  your local repo. The resulting commits are stored as remote branches\n  instead of the normal local branches that we\u2019ve been working with.\n  This gives you a chance to review changes before integrating them into\n  your copy of the project.\nSource: https://www.atlassian.com/git/tutorials/syncing#git-fetch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Disable auto-completion of remote branches in Git Bash?\nI'm working on a fairly large git repo with a couple of thousand (remote) branches. I am used to using auto-completion (using [TAB]) in the console (Git Bash in that case), so I unconsciously do that for git commands, too.\ne.g. I'd type\ngit checkout task[TAB]\n\nwith the effect that the console stalls for often minutes. Is there a way to limit auto-completion to local branches only?"}, {"role": "assistant", "content": "With Git 2.13 (Q2 2017), you can disable (some of) the branch completion.\ngit checkout --no-guess ...\n# or:\nexport GIT_COMPLETION_CHECKOUT_NO_GUESS=1\n\nSee commit 60e71bb (21 Apr 2017) by Jeff King (peff).\n(Merged by Junio C Hamano -- gitster -- in commit b439747, 01 May 2017) \nAs documented in contrib/completion/git-completion.bash now:\n\nYou can set the following environment variables to influence the behavior of the completion routines:\nGIT_COMPLETION_CHECKOUT_NO_GUESS\n\nWhen set to \"1\", do not include \"DWIM\" suggestions in git-checkout\n   completion (e.g., completing \"foo\" when \"origin/foo\" exists).\n\nNote: DWIM is short for Do What I Mean, where a system attempts to anticipate what users intend to do, correcting trivial errors automatically rather than blindly executing users' explicit but potentially incorrect inputs.\n\ncompletion: optionally disable checkout DWIM\nWhen we complete branch names for \"git checkout\", we also complete remote branch names that could trigger the DWIM behavior. Depending on your workflow and project, this can be either convenient or annoying.\nFor instance, my clone of gitster.git contains 74 local \"jk/*\" branches, but origin contains another 147.\n  When I want to checkout a local branch but can't quite remember the name, tab completion shows me 251 entries. And worse, for a topic that has been picked up for pu, the upstream branch name is likely to be similar to mine, leading to a high probability that I pick the wrong one and accidentally create a new branch.\n\n\nNote: \"picked up for pu\": see a What's cooking in git.git: it starts with:\n\nCommits prefixed with '-' are only in 'pu' (proposed updates) while commits prefixed with '+' are in 'next'.  \n\nThis is part of the Git Workflow Graduation process.\n\npu (proposed updates) is an integration branch for things that are not quite ready for inclusion yet \n\n\n\nThis patch adds a way for the user to tell the completion\n  code not to include DWIM suggestions for checkout.\n  This can already be done by typing:\ngit checkout --no-guess jk/<TAB>\n\nbut that's rather cumbersome. \nThe downside, of course, is that you no longer get completion support when you do want to invoke the DWIM behavior.\n  But depending on your workflow, that may not be a big loss (for instance, in git.git I am much more likely to want to detach, so I'd type \"git checkout origin/jk/<TAB>\" anyway)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "unable to write symref for HEAD: Permission denied unable to update HEAD\n\nGit checkout to new branch gives below error \n\nunable to write symref for HEAD: Permission denied unable to update\n  HEAD\n\nBut it works if I delete the repo and create a new one. The moment I restart my laptop I guess it stops working.\nThe problem is in Windows 10."}, {"role": "assistant", "content": "This happened to me when I had git and 2 Visual studio instances open with the same solution. Git checkout gave the same error and showed some changes as staged for commit when they shouldn't have been. I've reverted those changes, closed one of the Visual Studios and tried checkout again, it worked nicely."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Add only non-whitespace changes\nI have my text editor to automatically trim trailing whitespace upon saving a file, and I am contributing to an open source project that has severe problems with trailing whitespace.\nEvery time I try to submit a patch I must first ignore all whitespace-only changes by hand, to choose only the relevant information. Not only that, but when I run git rebase I usually run into several problems because of them.\nAs such I would like to be able to add to index only non-whitespace changes, in a way similar that git add -p does, but without having to pick all the changes myself.\nDoes anyone know how to do this?\nEDIT: I cannot change the way the project works, and they have decided, after discussing it on the mailing list, to ignore this."}, {"role": "assistant", "content": "@Frew solution wasn't quite what I needed, so this is the alias I made for the exact same problem:\nalias.addnw=!sh -c 'git diff -U0 -w --no-color --src-prefix=a/ --dst-prefix=b/ \"$@\" | git apply --cached --ignore-whitespace --unidiff-zero -'\n\nOr you can simply run:\ngit diff -U0 -w --no-color --src-prefix=a/ --dst-prefix=b/ | git apply --cached --ignore-whitespace --unidiff-zero -\n\nUpdate\nAdded options -U0, and --unidiff-zero respectively to workaround context matching issues, according to this comment.\nBasically it applies the patch which would be applied with add without whitespace changes. You will notice that after a git addnw your/file there will still be unstaged changes, it's the whitespaces left.\nThe --no-color isn't required but as I have colors set to always, I have to use it. Anyway, better safe than sorry.\nWarning\nWhile this trick works as-is, if you try to use it to drop blank line changes with --ignore-blank-lines then things get complicated.  With this option, git diff will just drop some chunks, making the resulting patch bogus since the line numbers in the destination file are going to be off."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  -X <strategy-option>  --strategy-option=<strategy-option>"}, {"role": "assistant", "content": "Pass the <strategy-option> through to the merge strategy.\nThis implies --merge and, if no strategy has been\nspecified, -s ort .  Note the reversal of ours and theirs as noted above for the -m option. See also INCOMPATIBLE OPTIONS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  fsmonitor.socketDir"}, {"role": "assistant", "content": "This Mac OS-specific option, if set, specifies the directory in\nwhich to create the Unix domain socket used for communication\nbetween the fsmonitor daemon and various Git commands. The directory must\nreside on a native Mac OS filesystem.  Only respected when core.fsmonitor is set to true ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git stash apply and drop\nIs there a git command that both applies the stash and removes it?\nThis as one command: \ngit stash apply\ngit stash drop"}, {"role": "assistant", "content": "You want git stash pop!\npop [--index] [-q|--quiet] [<stash>]\n       Remove a single stashed state from the stash list and apply it on\n       top of the current working tree state, i.e., do the inverse\n       operation of git stash save. The working directory must match the\n       index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --default <value>"}, {"role": "assistant", "content": "When using --get , and the requested variable is not found, behave as if\n<value> were the value assigned to that variable."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitLab API - How to get private_token using GET with session parameter?\n\nI am using GitLab API v3 to do some operations on my private installation. Using private_token in GET URL is working fine. e.g.\nGET http://git.example.com/api/v3/projects?=private_token=xyz123\n\nBut in order to make this possible, you need a private_token. There is one sure way to get it - from your account settings. But I want my users to use their email id/ login id and password to retrieve the private key and use it from there for rest of the operations.\nI used following GET url and it is doing nothing for me:\nGET http://git.example.com/api/v3/session?login=xyzuser&password=xyzpassword\n\nIdeally as per GitLab documentation, I should get a JSON as follows -\n{\n  \"id\": 1,\n  \"username\": \"john_smith\",\n  \"email\": \"[email\u00a0protected]\",\n  \"name\": \"John Smith\",\n  \"private_token\": \"dd34asd13as\",\n  \"blocked\": false,\n  \"created_at\": \"2012-05-23T08:00:58Z\",\n  \"bio\": null,\n  \"skype\": \"\",\n  \"linkedin\": \"\",\n  \"twitter\": \"\",\n  \"dark_scheme\": false,\n  \"theme_id\": 1,\n  \"is_admin\": false,\n  \"can_create_group\" : true,\n  \"can_create_team\" : true,\n  \"can_create_project\" : true\n}\n\nIf I get this, I can get private_token and work from there.\nWhat am I doing wrong?"}, {"role": "assistant", "content": "You need to POST the data as stated in the api (http://api.gitlab.org/session.html).\nBe aware that if you do this action on a http port (instead of using https) that the password is send in plain text to the server."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "There is no tracking information for the current branch\n\nI've been using github from a relatively short period, and I've always used the client to perform commits and pulls. I decided to try it from the git bash yesterday, and I successfully created a new repo and committed files.\nToday I did changes to the repository from another computer, I've committed the changes and now I'm back home and performed a git pull to update my local version and I get this:\nThere is no tracking information for the current branch.\n    Please specify which branch you want to merge with.\n    See git-pull(1) for details\n\n    git pull <remote> <branch>\n\nIf you wish to set tracking information for this branch you can do so with:\n\n    git branch --set-upstream develop origin/<branch>\n\nthe only contributor to this repo is me and there are no branches (just a master). I'm on windows and I've performed the pull from git bash:\n\ngit status:\n$ git status\n# On branch master\nnothing to commit, working directory clean\n\ngit branch:\n$ git branch\n* master\n\nWhat am I doing wrong?"}, {"role": "assistant", "content": "You could specify what branch you want to pull:\ngit pull origin master\n\nOr you could set it up so that your local master branch tracks github master branch as an upstream:\ngit branch --set-upstream-to=origin/master master\ngit pull\n\nThis branch tracking is set up for you automatically when you clone a repository (for the default branch only), but if you add a remote to an existing repository you have to set up the tracking yourself. Thankfully, the advice given by git makes that pretty easy to remember how to do."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to view the committed files you have not pushed yet?\n\nFor example I commit some files, the next day some more files, and so on. After some days I want to view all my committed files and view their difference with the remote repo. Note that I have not pushed anything. I just want to verify that if I push some thing then it will go to the remote repo as I expect."}, {"role": "assistant", "content": "Assuming you're on local branch master, which is tracking origin/master:\ngit diff --stat origin/master.."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Are pull requests part of Git, or a feature of tools like GitHub, Gerrit and Atlassian Stash?\nPull requests seem to be the common way to do code review with Git. However, it is not clear whether this term means the same when using the built-in git request-pull, or a different tool.\nAre pull requests an intrinsic function of Git, or is it a common term for tools like GitHub, Gerrit or Atlassian Stash?\nIs the discussion and \"result\" of the code review stored in the Git commit history or in a separate database?"}, {"role": "assistant", "content": "Pull requests are a simple concept that originated when Git was created but has been taken to different levels since.\nThe essence is that you do not have push rights to the repository you want to contribute on, so instead you fork the repository, making your private copy (a clone already does this btw.) and you contribute to that one instead. And then you ask a maintainer of the original repository to pull in your changes. So you are essentially submitting a patch.\nNow as I said, there are different ways to do this, but it all boils down to requesting a maintainer to pull in your changes, hence the name. The original purpose Git was created for is the Linux kernel, and they have been developing using mailing lists forever. So for them, a pull request is actually sending a patch per email; those patches are actually commit objects prepended by some normal email communication stuff\u2014Git has tools to generate this.\ngit request-pull is a similar tool to generate a message asking for a pull request. But in this case, it\u2019s closer to the pull idea. While patches can just be applied, requests created by request-pull actually tell the maintainer to pull the changes from a different remote repository.\nThe Git book has this example:\n$ git request-pull origin/master myfork\nThe following changes since commit 1edee6b1d61823a2de3b09c160d7080b8d1b3a40:\n  John Smith (1):\n        added a new function\n\nare available in the git repository at:\n\n  git://githost/simplegit.git featureA\n\nJessica Smith (2):\n      add limit to log function\n      change log output to 30 from 25\n\n lib/simplegit.rb |   10 +++++++++-\n 1 files changed, 9 insertions(+), 1 deletions(-)\n\nSo it\u2019s really just a utility to generate messages to execute the underlying concept.\nOther source code hosters like GitHub do this similarly as well. When you create a pull request on GitHub, you just create an issue which contains further information where the commits are the maintainer can pull. Of course, it all being on a single website, they can interlink everything a bit more and provide those one-click merge buttons for example.\nBut the basic concept is still the same: Requesting a maintainer to pull in some changes you have made. The only difference is the way this request is communicated with."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.algorithm"}, {"role": "assistant", "content": "Choose a diff algorithm.  The variants are as follows: default , myers The basic greedy diff algorithm. Currently, this is the default. minimal Spend extra time to make sure the smallest possible diff is\nproduced. patience Use \"patience diff\" algorithm when generating patches. histogram This algorithm extends the patience algorithm to \"support\nlow-occurrence common elements\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --exclude-hidden=[fetch|receive|uploadpack]"}, {"role": "assistant", "content": "Do not include refs that would be hidden by git-fetch , git-receive-pack or git-upload-pack by consulting the appropriate fetch.hideRefs , receive.hideRefs or uploadpack.hideRefs configuration along with transfer.hideRefs (see git-config ). This option affects the next pseudo-ref option --all or --glob and is cleared after processing them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  filename"}, {"role": "assistant", "content": "filename prefix (when not using -h )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub API: Repositories Contributed To\n\nIs there a way to get access to the data in the \u201cRepositories contributed to\u201d module on GitHub profile pages via the GitHub API? Ideally the entire list, not just the top five, which are all you can get on the web apparently."}, {"role": "assistant", "content": "With GraphQL API v4, you can now get these contributed repo using :\n{\n  viewer {\n    repositoriesContributedTo(first: 100, contributionTypes: [COMMIT, ISSUE, PULL_REQUEST, REPOSITORY]) {\n      totalCount\n      nodes {\n        nameWithOwner\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n    }\n  }\n}\n\nTry it in the explorer\nIf you have more than 100 contributed repo (including yours), you will have to go through pagination specifying after: \"END_CURSOR_VALUE\" in repositoriesContributedTo for the next request."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What are some good ways to manage a changelog using Git? [closed]\n\nClosed. This question needs to be more focused. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it focuses on one problem only by editing this post.\n\n\nClosed 3 years ago.\n\n\nThe community reviewed whether to reopen this question 4 months ago and left it closed:\n\nOriginal close reason(s) were not resolved\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI've been using Git for a while now, and I recently started using it to tag my releases so that I could more easily keep track of changes and be able to see which version each of our clients is running (unfortunately the code currently mandates that each client have their own copy of the PHP site; I'm changing this, but it's slow-going).\nIn any case, we're starting to build some momentum, and I thought it would be really good to be able to show people what has changed since the last release. The problem is, I haven't been maintaining a changelog, because I don't have a good idea of how to go about it. For this particular time, I can run through the log and manually create one, but that will get tiring very quickly.\nI tried googling \"git changelog\" and \"git manage changelog\", but I didn't find anything that really talked about the workflow of code changes and how that coincides with the changelog. We're currently following Rein Henrichs' development workflow and I would love something that went along with that.\nIs there a standard approach that I am missing, or is this an area where everybody does their own thing?"}, {"role": "assistant", "content": "This was in 2015, but for the sake of future searchers, it's now possible to generate gorgeous logs with:\ngit log --oneline --decorate\n\nOr, if you want it even prettier (with color for the terminal):\ngit log --oneline --decorate --color\n\nPiping that output to ChangeLog is what I currently use in all my projects, and it's simply amazing."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to hard delete an orphan commit in git?\nI have local commit that are not on any branch that I would like to delete.\nI don't want to rebase them, I really want to delete them, and loose all the content related to these commit.\nIs their a command to do so ?\nSo far I've tried interactive rebase as many suggested, but it just move commit around, it doesn't delete them. I've also tried to use reflog delete, but I can't figure out how to pass a specific commit Id to the command.\nHere's the working tree:\no [master] Commit #6  \n|  \no Commit #5  \n|  \n| o Commit #4  \n|/  \no Commit #3  \n|  \no Commit #2  \n|  \no Commit #1  \n\nI want to physically delete the commit #4."}, {"role": "assistant", "content": "If the commit is not referenced by anything, it will be removed with git's garbage collection, in time.  \nIf you want to force it before hand, use git gc --prune=now --aggressive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -<number>  -n <number>  --max-count=<number>"}, {"role": "assistant", "content": "Limit the number of commits to output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  fastimport.unpackLimit"}, {"role": "assistant", "content": "If the number of objects imported by git-fast-import is below this limit, then the objects will be unpacked into\nloose object files.  However, if the number of imported objects\nequals or exceeds this limit, then the pack will be stored as a\npack.  Storing the pack from a fast-import can make the import\noperation complete faster, especially on slow filesystems.  If\nnot set, the value of transfer.unpackLimit is used instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "error: cannot lock ref.. 'refs/tags' exists; cannot create 'refs/tags/\n\nI'm getting a strange \"cannot lock ref\" error when trying to pull changes from github.  I've tried git gc, and looked around for similar errors but can't find a solution.\n> git pull\nerror: cannot lock ref 'refs/tags/v2.8': 'refs/tags' exists; cannot create 'refs/tags/v2.8'\nFrom github.com:k3it/qsorder\n ! [new tag]         v2.8       -> v2.8  (unable to update local ref)\nerror: cannot lock ref 'refs/tags/v2.9': 'refs/tags' exists; cannot create 'refs/tags/v2.9'\n ! [new tag]         v2.9       -> v2.9  (unable to update local ref)"}, {"role": "assistant", "content": "Your Git is complaining that a reference (rather than a directory) named refs/tags exists.  It's not clear what would create that, but see if git rev-parse refs/tags produces a hash ID.  If so, that reference needs to go away:\ngit update-ref -d refs/tags\n\nafter which git fetch should work.\nIf git rev-parse refs/tags fails (which it should\u2014refs/tags itself should not be a valid name) then this is not the problem and it's not clear what the actual problem is."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to change the main branch in BitBucket?\nI have a repo on bitbucket with two branches. First branch is master with a fake content, then I have another one called trunk with the correct content.\nI would like to change the main branch to trunk (actually is master). I found that in the repo adminsitration are on bitbucket web I could change this but I couldn't.\nFinally I would like to understand if is possible to do this through terminal from my local repo.\nMaybe an easy thing is to delete contents from master and merge trunk into master and the delete trunk but I neither know how to do this."}, {"role": "assistant", "content": "Repositories.\nClick on a repository.\nRepository settings.\nAdvanced\nMain branch.\nChange it from master to main or something else.\nSave changes.\n\nBack in the day\n\nRepositories\n\n\n\nSelect repository\nSettings\n\n\n\nMain branch: master\n\n\n\nSave repository details"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git log --follow, the gitpython way\nI am trying to access the commit history of a single file as in:\ngit log --follow -- <filename>\n\nI have to use gitpython, so what I am doing now is:\nimport git \ng = git.Git('repo_dir') \nhexshas = g.log('--pretty=%H','--follow','--',filename).split('\\n') \n\nthen I build commit objects:\nrepo = git.Repo('repo_dir')\ncommits = [repo.rev_parse(c) for c in r]\n\nIs there a way to do it in a more gitpython-ic way?\nI tried both commit.iter_parents() and commit.iter_items(), but they both rely on git-rev-list, so they don't have a --follow option."}, {"role": "assistant", "content": "For example,\nWith range time:\ng = git.Git(\"C:/path/to/your/repo\") \nloginfo = g.log('--since=2013-09-01','--author=KIM BASINGER','--pretty=tformat:','--numstat')\nprint loginfo\n\nOutput:\n3       2       path/in/your/solutions/some_file.cs\n\nYou can see the added lines, removed lines and the file with these changes."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How could I remove my approval from a pull request on github?\n\nI approved a pull request of a random repository I do not have write access too. How can I remove or delete that approval?"}, {"role": "assistant", "content": "Dismiss review\nYou can \"Dismiss review\" in the bottom section of the PR.\n\nexpand approval(s)\nclick three dots\nchoose Dismiss review\n\n(not present in the timeline - little bit confusing)\n\nthen it looks like (in the timeline)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to access and modify a SSH file on mac? [closed]\nClosed. This question does not meet Stack Overflow guidelines. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n This question does not appear to be about a specific programming problem, a software algorithm, or software tools primarily used by programmers. If you believe the question would be on-topic on another Stack Exchange site, you can leave a comment to explain where the question may be able to be answered.\n\n\nClosed 2 years ago.\n\n\nThe community reviewed whether to reopen this question 2 years ago and left it closed:\n\nOriginal close reason(s) were not resolved\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI'm trying to setup SSH on my computer but not sure how to access the ~/.ssh/config file. From github's website they mention this file has to be modified but I'm not sure where its located or how to modify it.\nOn Github:\n\nIf you're using macOS Sierra 10.12.2 or later, you will need to modify your ~/.ssh/config file to automatically load keys into the ssh-agent and store passphrases in your keychain.\n\nHost *\n AddKeysToAgent yes\n UseKeychain yes\n IdentityFile ~/.ssh/id_rsa"}, {"role": "assistant", "content": "Start Terminal and create the ~/.ssh directory if it doesn't exist:\nmkdir -p ~/.ssh\n\nNow go into the directory:\ncd ~/.ssh\n\nNow open the file config with the default editor:\nopen -t config\n\nIf it says that file doesn't exist, create it with:\ntouch config\n\nand try opening again:\nopen -t config\n\nWhen you edit the file, make sure it is \"Plain Text\" using the menu at the top of the screen and clicking Format->Make Plain Text.\nSet the permissions as instructed in your tutorial."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git difftool, open all diff files immediately, not in serial\nThe default git diff behavior is to open each diff file in serial (wait for previous file to be closed before opening next file). \nI'm looking for a way to open all the files at once - in BeyondCompare for example this would open all the files in tabs within the same BC window.\nThis would make it easier to review a complex set of changes; flick back and forwards between the diff files and ignore unimportant files."}, {"role": "assistant", "content": "Starting with git v1.7.11, you can use git difftool --dir-diff to perform a directory diff.\nThis feature works well with Meld 3.14.2 for example, and lets you browse all modified files:\ngit difftool --dir-diff --tool=meld HEAD~ HEAD\n\nThis is a handy Bash function:\ngit-diff-meld() (\n  git difftool --dir-diff --tool=meld \"${1:-HEAD~}\" \"${2:-HEAD}\"\n)\n\nThe answer that follows applies to git installations older than v1.7.11.\n\nThis same question was asked on the git mail list.\nI put together a shell script based on that email thread which performs a directory diff between arbitrary commits.\nStarting with git v1.7.10, the git-diffall script is included in the contrib of the standard git installation.\nFor versions before v1.7.10, you can install from the git-diffall project on GitHub.  \nHere is the project description:\n\nThe git-diffall script provides a\n  directory based diff mechanism for\n  git.  The script relies on the\n  diff.tool configuration option to\n  determine what diff viewer is used.\nThis script is compatible with all the\n  forms used to specify a range of\n  revisions to diff:\n1) git diffall: shows diff between\n  working tree and staged changes\n    2) git diffall --cached [<commit>]: shows\n  diff between staged changes and HEAD\n  (or other named commit)\n    3) git diffall <commit>: shows diff between\n  working tree and named commit\n    4) git diffall <commit> <commit>: show diff\n  between two named commits\n    5) git diffall <commit>..<commit>: same as\n  above\n    6) git diffall <commit>...<commit>: show the changes\n  on the branch containing and up to the\n  second , starting at a    common\n  ancestor of both <commit>\nNote: all forms take an optional path\n  limiter [--] [<path>]\nThis script is based on an example\n  provided by Thomas Rast on the Git\n  list."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --all"}, {"role": "assistant", "content": "Pretend as if all the refs in refs/ , along with HEAD , are\nlisted on the command line as <commit> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "When would you use the different git merge strategies?\nFrom the man page on git-merge, there are a number of merge strategies you can use.  \n\nresolve - \nThis can only resolve two heads (i.e. the current branch and another branch you pulled from) using 3-way merge algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.\nrecursive - \nThis can only resolve two heads using 3-way merge algorithm. When there are more than one common ancestors that can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mis-merges by tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.\noctopus - \nThis resolves more than two-head case, but refuses to do complex merge that needs manual resolution. It is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when pulling or merging more than one branches.\nours - \nThis resolves any number of heads, but the result of the merge is always the current branch head. It is meant to be used to supersede old development history of side branches.\nsubtree - \nThis is a modified recursive strategy. When merging trees A and B, if B corresponds to a subtree of A, B is first adjusted to match the tree structure of A, instead of reading the trees at the same level. This adjustment is also done to the common ancestor tree.\n\nWhen should I specify something different than the default?  What scenarios are each best for?"}, {"role": "assistant", "content": "I'm not familiar with resolve, but I've used the others:\nRecursive\nRecursive is the default for non-fast-forward merges. We're all familiar with that one.\nOctopus\nI've used octopus when I've had several trees that needed to be merged.  You see this in larger projects where many branches have had independent development and it's all ready to come together into a single head.\nAn octopus branch merges multiple heads in one commit as long as it can do it cleanly.\nFor illustration, imagine you have a project that has a master, and then three branches to merge in (call them a, b, and c).\nA series of recursive merges would look like this (note that the first merge was a fast-forward, as I didn't force recursion):\n\nHowever, a single octopus merge would look like this:\ncommit ae632e99ba0ccd0e9e06d09e8647659220d043b9\nMerge: f51262e... c9ce629... aa0f25d...\n\n\nOurs\nOurs == I want to pull in another head, but throw away all of the changes that head introduces.\nThis keeps the history of a branch without any of the effects of the branch.\n(Read: It is not even looked at the changes between those branches. The branches are just merged and nothing is done to the files. If you want to merge in the other branch and every time there is the question \"our file version or their version\" you can use git merge -X ours)\nSubtree\nSubtree is useful when you want to merge in another project into a subdirectory of your current project. Useful when you have a library you don't want to include as a submodule."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to 'Watch' only a directory in a GitHub repository?\nFor example, https://github.com/vanillaforums/Garden is the GitHub repository. But I only want to 'watch' this directory https://github.com/vanillaforums/Garden/tree/master/plugins in the repository.\nHow do I do that? There doesn't seem to be a way."}, {"role": "assistant", "content": "GitHub provides feeds that can do this for both directories and files.1 Using that syndication, a service like Blog Trottr can send you an email whenever the feed is updated.\nSome samples, taken from the Linux source code on master:\n\n\n\n\n\nDirectory\nFile\n\n\n\n\nSource on GitHub\n/Documentation\n/Documentation/Makefile\n\n\nHistory on GitHub\n/Documentation\n/Documentation/Makefile\n\n\nHistory Atom feed\n/Documentation\n/Documentation/Makefile\n\n\n\n\n1 Thank you, youfu."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.bare"}, {"role": "assistant", "content": "If true this repository is assumed to be bare and has no\nworking directory associated with it.  If this is the case a\nnumber of commands that require a working directory will be\ndisabled, such as git-add or git-merge . This setting is automatically guessed by git-clone or git-init when the repository was created.  By default a\nrepository that ends in \"/.git\" is assumed to be not bare (bare =\nfalse), while all other repositories are assumed to be bare (bare\n= true)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "View git history of specific line\nI want to view the commit history related to the specific line in the file. I know we can get the history of the file. Are there any commands available to sort only the commits related to one specific line?"}, {"role": "assistant", "content": "bomz gave the right option but with wrong syntax. Fixed line would look like this:\ngit log -L '/the line from your file/,+1:path/to/your/file.txt'\n\nThe meaning of argument to -L is \"find the first occurrence of regex /the line from your file/, in path/to/your/file.txt and show the log regarding one line range starting at this point (meaning, just this line, but you could say +5 instead)\".\nThe caveat is, if the line contains characters with special meaning in regex, you need to escape them.\nHowever, it's likely much simpler to use line number, like this:\ngit log -L15,+1:'path/to/your/file.txt'\n\n(for line 15 of file path/to/your/file.txt)\nIn both cases +1 can be replaced with bigger number to get more line, or with regex to match the end of selected range.\nDetailed description from the docs:\n\n-L <start>,<end>:<file>\n-L :<funcname>:<file>\n\nTrace the evolution of the line range given by \"<start>,<end>\" (or the function name regex <funcname>) within the\n  <file>. You may not give any pathspec limiters. This is currently\n  limited to a walk starting from a single revision, i.e., you may only\n  give zero or one positive revision arguments. You can specify this\n  option more than once.\n<start> and <end> can take one of these forms:\n\nnumber\nIf <start> or <end> is a number, it specifies an absolute line number\n  (lines count from 1).\n/regex/\nThis form will use the first line matching the given POSIX regex. If\n  <start> is a regex, it will search from the end of the previous -L\n  range, if any, otherwise from the start of file. If <start> is\n  \u201c^/regex/\u201d, it will search from the start of file. If <end> is a\n  regex, it will search starting at the line given by <start>.\n+offset or -offset\nThis is only valid for <end> and will specify a number of lines before\n  or after the line given by <start>.\n\nIf \u201c:<funcname>\u201d is given in place of <start> and <end>, it is a\n  regular expression that denotes the range from the first funcname line\n  that matches <funcname>, up to the next funcname line. \u201c:<funcname>\u201d\n  searches from the end of the previous -L range, if any, otherwise from\n  the start of file. \u201c^:<funcname>\u201d searches from the start of file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gc.autoPackLimit"}, {"role": "assistant", "content": "When there are more than this many packs that are not\nmarked with *.keep file in the repository, git gc\n--auto consolidates them into one larger pack.  The\ndefault value is 50.  Setting this to 0 disables it.\nSetting gc.auto to 0 will also disable this. See the gc.bigPackThreshold configuration variable below. When in\nuse, it\u2019ll affect how the auto pack limit works."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.context"}, {"role": "assistant", "content": "Generate diffs with <n> lines of context instead of the default\nof 3. This value is overridden by the -U option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitlab-runner:Pipeling is pending infinitely\n\nI install a Specific Runners,and the status is actived.\nmy .gitlab-ci.ymi file code:\nstages:\n  - build\n\nbuild_maven:\n  stage: build\n  only:\n    - master\n  script:\n    - echo \"hello CI/CD\"\n  tags: \n    - vue-dev-pub\n\nwhen I push the master branch,the gitlab-runner is running,but it's pending infinitely\u3002\nthe job page show:\n\nThis job has not started yet\nThis job is in pending state and is waiting to be picked by a runner\n\nif I excute the runner manually,the job can pass.\nthe command of gitlab-runner verify shows:\nRuntime platform                                    arch=amd64 os=linux pid=24616 revision=d0b76032 version=12.0.2\nWARNING: Running in user-mode.                     \nWARNING: The user-mode requires you to manually start builds processing: \nWARNING: $ gitlab-runner run                       \nWARNING: Use sudo for system-mode:                 \nWARNING: $ sudo gitlab-runner...                   \n                                                   \nVerifying runner... is alive                        runner=T4iKvsT3\n\n\nI am waiting for you respond,thanks!"}, {"role": "assistant", "content": "If you run the runner manually in debug mode gitlab-runner --debug run you may see the actual error message, in my case it was:\nWARNING: Failed to process runner builds=0 error=failed to update executor: missing Machine options executor=docker+machine runner=pSUsX4yR\nThat's because on runner creation, I selected option docker+machine rather than docker.\nAfter amending /etc/gitlab-runner/config.toml to docker and running gitlab-runner restart followed by gitlab-runner verify, pipeline started running again."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to reset git authentication?\nI typed wrong ID (my mistake) and I think my computer's IP is permanently banned. I'd like to un-ban my IP so that I can git clone to my desired git repository. But when I tried to git clone my git repository, it says\nremote: HTTP Basic: Access denied\nfatal: Authentication failed for \"~~my repository\"\nHow can I access my git repository again? Or how can I reset my banned state? I think typing a wrong ID only once and be permanently banned is somewhat harsh."}, {"role": "assistant", "content": "It seems that your credential manager stored wrong authentication and reuses it. Reset it.\ngit config --system --unset credential.helper\n\nMore information:\nRemove credentials from Git\nGitLab remote: HTTP Basic: Access denied and fatal Authentication"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %cN"}, {"role": "assistant", "content": "committer name (respecting .mailmap, see git-shortlog or git-blame )"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is a \"merge bubble\"?\nI've heard of \"merge bubbles\" with regards to Git.  I'm fairly well-versed in Git, but would not consider myself an expert.  I've heard some negative things about merge bubbles; what is a \"merge bubble\" in Git, what's wrong with it, and how can I avoid it?"}, {"role": "assistant", "content": "A merge bubble is a \"trivial merge\" in Git that did not require any conflicts to be resolved.  The bubble occurs in the log where the merge is displayed when you use the --graph option.  for example, if you ran git log --graph you might see something like this:\n| |\n* |   commit d79f3c4e129356b055c659ee5be28081c1f38aa1\n|\\ \\  Merge: 09bf1ed 4ef9a23\n| | | Author: Peter <[email\u00a0protected]>\n| | | Date:   Wed Sep 17 17:21:07 2014 -0400\n| | |\n| | |     Merge branch 'master' of http://fictitiousrepo.visualstudio.com/DefaultCollection/_git/fictitiousproject\n| | |\n| * | commit 4ef9a2387f0d4db39a6cab8ff8f531815935c305\n| | | Author: Andrew <andrew@example>\n| | | Date:   Tue Sep 16 11:54:14 2014 -0500\n| | |\n| | |     updated changelog\n| | |\n* | | commit 09bf1ed0125d77c26b5760939c125998bb046e9a\n|/ /  Author: Peter <[email\u00a0protected]>\n| |   Date:   Wed Sep 17 17:20:30 2014 -0400\n| | \n| |       fixed some bugs\n\nwhere the lines \"bulge\" out is the \"merge bubble\".  This may seem innocuous; but many consider it much less readable than what could have happened, which would be like this:\n|\n* commit 09bf1ed0125d77c26b5760939c125998bb046e9a\n| Author: Peter <[email\u00a0protected]>\n| Date:   Wed Sep 17 17:20:30 2014 -0400\n|\n|     fixed some bugs\n|\n* commit 4ef9a2387f0d4db39a6cab8ff8f531815935c305\n| Author: Andrew <andrew@example>\n| Date:   Tue Sep 16 11:54:14 2014 -0500\n|\n|     updated changelog\n|\n\n...because no merge was really required.\nThis generally happens when accepting a pull request by automatically merging it.  Sometimes this was due to the how the \"Merge Pull Request\" button used to work on Github.\nTo avoid merge bubbles with pull requests, one strategy is to manually merge.  For example:\ngit checkout master\ngit remote add remoteorigin git://remotegithost.com/remotegitrepo/remotegitproject\ngit fetch remoteorigin \ngit merge remoteorigin/remoteprojectbranch\ngit push origin master\n\nTo remove a recently committed merge bubble from a pull request (when you haven't pushed), one strategy is to first stash your current changes, reset your head to the commit before the bubble, pull with rebase, then push.  For example:\ngit stash save\ngit reset --hard HEAD~1\ngit pull --rebase\ngit push origin HEAD\n\nReference:\n   http://adammonsen.com/post/1172"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  ignore-all-space"}, {"role": "assistant", "content": "Ignore whitespace when comparing lines. This ignores differences\neven if one line has whitespace where the other line has none."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Check if pull needed in Git\nHow do I check whether the remote repository has changed and I need to pull?\nNow I use this simple script:\ngit pull --dry-run | grep -q -v 'Already up-to-date.' && changed=1\n\nBut it is rather heavy.\nIs there a better way? The ideal solution would check all the remote branches, and return names of the changed branches and the number of new commits in each one."}, {"role": "assistant", "content": "First use git remote update, to bring your remote refs up to date. Then you can do one of several things, such as:\n\ngit status -uno will tell you whether the branch you are tracking is ahead, behind or has diverged. If it says nothing, the local and remote are the same.\n\ngit show-branch *master will show you the commits in all of the branches whose names end in 'master' (eg master and origin/master).\n\n\nIf you use -v with git remote update (git remote -v update) you can see which branches got updated, so you don't really need any further commands.\nHowever, it looks like you want to do this in a script or program and end up with a true/false value. If so, there are ways to check the relationship between your current HEAD commit and the head of the branch you're tracking, although since there are four possible outcomes you can't reduce it to a yes/no answer. However, if you're prepared to do a pull --rebase then you can treat \"local is behind\" and \"local has diverged\" as \"need to pull\", and the other two (\"local is ahead\" and \"same\") as \"don't need to pull\".\nYou can get the commit id of any ref using git rev-parse <ref>, so you can do this for master and origin/master and compare them. If they're equal, the branches are the same. If they're unequal, you want to know which is ahead of the other. Using git merge-base master origin/master will tell you the common ancestor of both branches, and if they haven't diverged this will be the same as one or the other. If you get three different ids, the branches have diverged.\nTo do this properly, eg in a script, you need to be able to refer to the current branch, and the remote branch it's tracking. The bash prompt-setting function in /etc/bash_completion.d has some useful code for getting branch names. However, you probably don't actually need to get the names. Git has some neat shorthands for referring to branches and commits (as documented in git rev-parse --help). In particular, you can use @ for the current branch (assuming you're not in a detached-head state) and @{u} for its upstream branch (eg origin/master). So git merge-base @ @{u} will return the (hash of the) commit at which the current branch and its upstream diverge and git rev-parse @ and git rev-parse @{u} will give you the hashes of the two tips. This can be summarized in the following script:\n#!/bin/sh\n\nUPSTREAM=${1:-'@{u}'}\nLOCAL=$(git rev-parse @)\nREMOTE=$(git rev-parse \"$UPSTREAM\")\nBASE=$(git merge-base @ \"$UPSTREAM\")\n\nif [ $LOCAL = $REMOTE ]; then\n    echo \"Up-to-date\"\nelif [ $LOCAL = $BASE ]; then\n    echo \"Need to pull\"\nelif [ $REMOTE = $BASE ]; then\n    echo \"Need to push\"\nelse\n    echo \"Diverged\"\nfi\n\nNote: older versions of git didn't allow @ on its own, so you may have to use @{0} instead.\nThe line UPSTREAM=${1:-'@{u}'} allows you optionally to pass an upstream branch explicitly, in case you want to check against a different remote branch than the one configured for the current branch. This would typically be of the form remotename/branchname. If no parameter is given, the value defaults to @{u}.\nThe script assumes that you've done a git fetch or git remote update first, to bring the tracking branches up to date. I didn't build this into the script because it's more flexible to be able to do the fetching and the comparing as separate operations, for example if you want to compare without fetching because you already fetched recently."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  -o <option>  --server-option=<option>"}, {"role": "assistant", "content": "Transmit the given string to the server when communicating using\nprotocol version 2.  The given string must not contain a NUL or LF\ncharacter.  The server\u2019s handling of server options, including\nunknown ones, is server-specific.\nWhen multiple --server-option=<option> are given, they are all\nsent to the other side in the order listed on the command line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "github linking with other repos\n\nI have a project that relies on two repos in github to function. \nWhen I submit my project to github how do I link to these two repos? \nShould I duplicate the files in my own repo or link to the other repo at a specific revision as I don't want it to update and cause incompatibility.\nI already created my github repo what should I do?"}, {"role": "assistant", "content": "You can use git submodules to \"link\" to other projects.\nSee here - https://github.blog/2016-02-01-working-with-submodules/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "The authenticity of host 'github.com (192.30.252.128)' can't be established\n\nI am trying to use\nsudo npm install\n\nto install all my dependencies for an application written in nodejs. My OS is Ubuntu 13.04\nHowever, I keep getting this warning:\nThe authenticity of host 'github.com (192.30.252.131)' can't be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:1d:52:13:1a:21:2d:bz:1d:66:a8.\nAre you sure you want to continue connecting (yes/no)?\n\nHas anyone encountered this warning before? Is it possible to authenticate and store the fingerprint locally? So I won't need to authenticate again when I enter sudo npm install another time.\nRight now, I am unable to enter anything, not even \"yes\". My terminal just gets stuck, i have to press Ctrl+C to terminate."}, {"role": "assistant", "content": "Danger ahead, unless you actually don't care about secure communication with github on your local account\nSsh rightly complains that they can't make sure you are indeed connecting to github's server through a secure channel.  That might be why github is recommending https access, which works out-of-the-box thanks to its public key infrastructure.\nNow, you can have it work, but be aware that it involves caching a public key fingerprint which, if done incorrectly, provides an attacker permanent man-in-the-middle attack.\nHow to proceed safely?\nOption 1 is use https url instead of ssh.\nOption 2 is have ssh access work.\nOkay, show me option 2\n\nDo ssh -T [email\u00a0protected] but don't just type \"yes\".\nCheck if the hash that is shown matches one of the hashed shown in https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints (in your question it does, and see, the page is fetched through https for the same public key infrastructure reasons).\n\nIf the hash matches, then connection is indeed safe you can answer \"yes\" to ssh's question.\nOkay, I checked and typed yes, how do I know it works?\nSsh will show something like:\n\nWarning: Permanently added the RSA host key for IP address\n'192.30.252.128' to the list of known hosts.\n\nAfter that, you will either see a message like\n\nPermission denied (publickey).\n\nwhich is good but shows that you need further configuration, or simply\n\nHi yourlogin! You've successfully authenticated, but GitHub does not\nprovide shell access.\n\nwhich means that all works well and you can retry your first operation.\nNotice that if you retry the same ssh command, it should no longer ask the question."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "When do you use Git rebase instead of Git merge?\nWhen is it recommended to use Git rebase vs. Git merge?\nDo I still need to merge after a successful rebase?"}, {"role": "assistant", "content": "Short Version\n\nMerge takes all the changes in one branch and merges them into another branch in one commit.\nRebase says I want the point at which I branched to move to a new starting point\n\nSo when do you use either one?\nMerge\n\nLet's say you have created a branch for the purpose of developing a single feature.  When you want to bring those changes back to master, you probably want merge.\n\nRebase\n\nA second scenario would be if you started doing some development and then another developer made an unrelated change. You probably want to pull and then rebase to base your changes from the current version from the repository.\n\nSquashing: All commits are preserved in both cases (for example: \"add feature\", then \"typo\", then \"oops typo again\"...). Commits can be combined into a single commits by squashing. Squashing can be done as part of a merge or rebase operation (--squash flag), in which case it's often called a squash-merge or a squash-rebase.\nPull Requests: Popular git servers (Bitbucket, GitLab, GitHub, etc...) allow to configure how pull requests are merged on a per-repo basis. the UI may show a \"Merge\" button by convention but the button can do any operations with any flags (keywords: merge, rebase, squash, fast-forward)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.log"}, {"role": "assistant", "content": "In addition to branch names, populate the log message with at\nmost the specified number of one-line descriptions from the\nactual commits that are being merged.  Defaults to false, and\ntrue is a synonym for 20."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Automate code deploy from Git lab to AWS EC2 instance\n\nWe're building an application for which we are using GitLab repository. Manual deployment of code to the test server which is Amazon AWS EC2 instance is tedious, I'm planning to automate deployment process, such that when we commit code, it should reflect in the test instance.\nfrom my knowledge we can use AWS code-deploy service to fetch the code from GitHub. But code deploy service does not support GitLab repository . Is there a way to automate the code deployment process to AWS Ec2 instance through GitLab. or Is there a shell scripting possibility to achieve this? Kindly educate me."}, {"role": "assistant", "content": "One way you could achieve this with AWS CodeDeploy is by using the S3 option in conjunction with Gitlab-CI: http://docs.aws.amazon.com/codepipeline/latest/userguide/getting-started-w.html\nDepending on how your project is setup, you may have the possibility to generate a distribution Zip (Gradle offers this through the application plugin). You may need to generate your \"distribution\" file manually if your project does not offer such a capability.\nGitlab does not offer a direct S3 integration, however through the gitlab-ci.yml you would be able to download it into the container and run the necessary upload commands to put the generated zip file on the S3 container as per the AWS instructions to trigger the deployment. \nHere is an example of what your brefore-script could look like in the gitlab-ci.yml file:\nbefore_script:\n  - apt-get update --quiet --yes\n  - apt-get --quiet install --yes python\n  - pip install -U pip\n  - pip install awscli\n\nThe AWS tutorial on how to use CodeDeploy with S3 is very detailed, so I will skip attempting to reproduce the contents here.\nIn regards to the actual deployment commands and actions that you are currently performing manually, AWS CodeDeploy provides the capability to run certain actions through scripts defined in the app-spec file depending on event hooks for the application: \n\nhttp://docs.aws.amazon.com/codedeploy/latest/userguide/writing-app-spec.html\nhttp://docs.aws.amazon.com/codedeploy/latest/userguide/app-spec-ref.html\nhttp://docs.aws.amazon.com/codedeploy/latest/userguide/app-spec-ref-hooks.html\n\nI hope this helps."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  -s <strategy>  --strategy=<strategy>"}, {"role": "assistant", "content": "Use the given merge strategy; can be supplied more than\nonce to specify them in the order they should be tried.\nIf there is no -s option, a built-in list of strategies\nis used instead ( ort when merging a single head, octopus otherwise)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitLab CI - avoid build when adding tag\n\nHow do I prevent a gitlab ci pipeline being triggered when I add a git tag? I'm running this command locally (as opposed to within a gitlab-ci job) \ngit tag -a \"xyz\"\n\nand then pushing the tag; and this triggers various pipelines. I want to exclude some of those pipelines from running. \nI'm trying variations on ideas from questions such as this; that question is using only, I'm wanting to exclude, so I'm trying except. The answers there have two variants, one with refs one without.\nbuild:  \n  # ... my work here ...  \n  except:\n    - tags\n\n\nbuild:  \n  # ... my work here ...  \n  except:\n    refs:\n      - tags\n\nNeither seem to have any effect; I add a tag, the build still happens.\nMy understanding may be completely awry here as there seem to be three possible meanings of the word tags and when reading docs or examples I'm not always sure which meaning is applicable:\n\nGit tags applied using git tag\nGitlab CI tags used to determine which runners pick a job\nThe ref identifier of a commit used to trigger a pipeline via the REST API. This is usually a branch name, but could be a git tag.\n\nI'm interested in controlling what happens if the first case. It does seem clear from comments so far that \"except: -tags\" is not relevant to my case, so is there any approach that does work?"}, {"role": "assistant", "content": "It looks like GitLab recommends using rules instead of except as per the documentation\n\nonly and except are not being actively developed. rules is the\npreferred keyword to control when to add jobs to pipelines.\n\nSo it'd be\nyour_job:\n  stage: your_stage\n  script:\n    - echo \"Hello\"\n  rules:\n    - if: $CI_COMMIT_TAG\n      when: never \n    - when: always"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rm - Remove files from the working tree and from the index  -f  --force"}, {"role": "assistant", "content": "Override the up-to-date check."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Get changes from master into branch in Git\nIn my repository I have a branch called aq which I'm working on.\nI then committed new work and bugs in master. \nWhat is the best way to get those commits into the aq branch? Create another new branch out of master and merge it with aq?"}, {"role": "assistant", "content": "Check out the aq branch, and rebase from master.\ngit checkout aq\ngit rebase master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Change git email for previous commits\nSo I read a lot about how to change previous commit's email address but for some reason mine is not updating.\nI did like 40 commits to my private repo with my local email ([email\u00a0protected]) which is bad since this email is not associated(and it can't be) with Github.\nI then remembered that I needed to set the git.config before and so I did:\n git config user.email \"[email\u00a0protected]\"\n\nand did a test commit and it worked perfectly.\nIs there a way I can revert all my previous commits to this new email?\nI read this question on SO How do I change the author and committer name/email for multiple commits? and used this\n git filter-branch -f --env-filter \"                         \n                    GIT_AUTHOR_EMAIL='[email\u00a0protected]'; \n                    GIT_COMMITTER_EMAIL='[email\u00a0protected]';\n                    \" \n                HEAD\n\nBut it DID NOT work... I can still see the email of my previous commits with the .patch extension as the .local email address"}, {"role": "assistant", "content": "You can indeed do his for many commits at once like this:\ngit rebase -i HEAD~40 -x \"git commit --amend --author 'Author Name <[email\u00a0protected]>' --no-edit\"\n\nI worked this out better in this answer."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a way to trigger a hook after a new branch has been checked out in Git?\nIs there a way to trigger a hook after a new branch has been checked out in Git?"}, {"role": "assistant", "content": "A git hook is a script placed in a special location of your repository, that location is:\n\n.git/hooks\n\nThe script can be any kind that you can execute in your environment i.e. bash, python, ruby etc.\nThe hook that is executed after a checkout is post-checkout. From the docs:\n\n...The hook is given three parameters...\n\nExample:\n\nCreate the hook (script):\ntouch .git/hooks/post-checkout\nchmod u+x .git/hooks/post-checkout\n\nHook sample content:\n\n#!/bin/bash                                                                      \n\nset -e                                                                           \n\nprintf '\\npost-checkout hook\\n\\n'                                                \n\nprevHEAD=$1                                                                      \nnewHEAD=$2                                                                       \ncheckoutType=$3                                                                  \n\n[[ $checkoutType == 1 ]] && checkoutType='branch' ||                             \n                            checkoutType='file' ;                                \n\necho 'Checkout type: '$checkoutType                                              \necho '    prev HEAD: '`git name-rev --name-only $prevHEAD`                       \necho '     new HEAD: '`git name-rev --name-only $newHEAD`\n\nNote: The shebang in the first line indicates the type of script.\nThis script (git hook) will only capture the three parameters passed and print them in a human-friendly format."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do you organise multiple git repositories, so that all of them are backed up together?\nWith SVN, I had a single big repository I kept on a server, and checked-out on a few machines. This was a pretty good backup system, and allowed me easily work on any of the machines. I could checkout a specific project, commit and it updated the 'master' project, or I could checkout the entire thing.\nNow, I have a bunch of git repositories, for various projects, several of which are on github. I also have the SVN repository I mentioned, imported via the git-svn command..\nBasically, I like having all my code (not just projects, but random snippets and scripts, some things like my CV, articles I've written, websites I've made and so on) in one big repository I can easily clone onto remote machines, or memory-sticks/harddrives as backup.\nThe problem is, since it's a private repository, and git doesn't allow checking out of a specific folder (that I could push to github as a separate project, but have the changes appear in both the master-repo, and the sub-repos)\nI could use the git submodule system, but it doesn't act how I want it too (submodules are pointers to other repositories, and don't really contain the actual code, so it's useless for backup)\nCurrently I have a folder of git-repos (for example, ~/code_projects/proj1/.git/ ~/code_projects/proj2/.git/), and after doing changes to proj1 I do git push github, then I copy the files into ~/Documents/code/python/projects/proj1/ and do a single commit (instead of the numerous ones in the individual repos). Then do git push backupdrive1, git push mymemorystick etc\nSo, the question: How do your personal code and projects with git repositories, and keep them synced and backed-up?"}, {"role": "assistant", "content": "I would strongly advise against putting unrelated data in a given\nGit repository.  The overhead of creating new repositories is quite\nlow, and that is a feature that makes it possible to keep\ndifferent lineages completely separate.\nFighting that idea means ending up with unnecessarily tangled history,\nwhich renders administration more difficult and--more\nimportantly--\"archeology\" tools less useful because of the resulting\ndilution.  Also, as you mentioned, Git assumes that the \"unit of\ncloning\" is the repository, and practically has to do so because of\nits distributed nature.\nOne solution is to keep every project/package/etc. as its own bare\nrepository (i.e., without working tree) under a blessed hierarchy,\nlike:\n/repos/a.git\n/repos/b.git\n/repos/c.git\n\nOnce a few conventions have been established, it becomes trivial to\napply administrative operations (backup, packing, web publishing) to\nthe complete hierarchy, which serves a role not entirely dissimilar to\n\"monolithic\" SVN repositories.  Working with these repositories also\nbecomes somewhat similar to SVN workflows, with the addition that one\ncan use local commits and branches:\nsvn checkout   --> git clone\nsvn update     --> git pull\nsvn commit     --> git push\n\nYou can have multiple remotes in each working clone, for the ease of\nsynchronizing between the multiple parties:\n$ cd ~/dev\n$ git clone /repos/foo.git       # or the one from github, ...\n$ cd foo\n$ git remote add github ...\n$ git remote add memorystick ...\n\nYou can then fetch/pull from each of the \"sources\", work and commit\nlocally, and then push (\"backup\") to each of these remotes when you\nare ready with something like (note how that pushes the same commits\nand history to each of the remotes!):\n$ for remote in origin github memorystick; do git push $remote; done\n\nThe easiest way to turn an existing working repository ~/dev/foo\ninto such a bare repository is probably:\n$ cd ~/dev\n$ git clone --bare foo /repos/foo.git\n$ mv foo foo.old\n$ git clone /repos/foo.git\n\nwhich is mostly equivalent to a svn import--but does not throw the\nexisting, \"local\" history away.\nNote: submodules are a mechanism to include shared related\nlineages, so I indeed wouldn't consider them an appropriate tool for\nthe problem you are trying to solve."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to disable git gpg signing\nI'm using git gpg signing. I want to disable it. I've set .gitconfig\n[user]\n    name = NAME\n    email = EMAIL\n    signingkey = KEY\n...\n[commit]\n    gpgsign = false\n\nMy commits are still signing by default. \nPS: I also disabled from Sourcetree Repository/ Repository Settings/Security tab. Both Sourcetree and terminal forces to use gpg."}, {"role": "assistant", "content": "You can disable this by running git config commit.gpgsign false This sets the configuration locally instead of globally.\nPutting this setting in .gitconfig worked for me with what you had, without the [user] configuration:\n[commit]\n    gpgsign = false"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to use git flow in GitLab\n\nWe're using GitLab for our project and we think it's great.\nWe're also using git flow to manage the changes in feature, develop, master branches.\nCan you use the Merge Request build in GitLab to manage the branches in git flow style? \nMeaning when accepting a Merge Request for a release branch, it will merge the release branch into master AND into develop.. \nOr should we always use git flow on our local machines to accept the Merge Requests."}, {"role": "assistant", "content": "Like this issue 1628 illustrates, it is best to use GitLab to publish (push) branches, then to rely on a specific GitLab feature related to a particular workflow like git-flow.\nSo the natural approach is to limit those git-flow features to the local clones, and push to GitLab any branch you want, once the merge request is resolved."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --topo-order"}, {"role": "assistant", "content": "Show no parents before all of its children are shown, and\navoid showing commits on multiple lines of history\nintermixed. For example, in a commit history like this: ---1----2----4----7\n\t\\\t       \\\n\t 3----5----6----8--- where the numbers denote the order of commit timestamps, git\nrev-list and friends with --date-order show the commits in the\ntimestamp order: 8 7 6 5 4 3 2 1. With --topo-order , they would show 8 6 5 3 7 4 2 1 (or 8 7 4 2 6 5\n3 1); some older commits are shown before newer ones in order to\navoid showing the commits from two parallel development track mixed\ntogether."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "ExecJS::ProgramError: Unexpected token punc \u00ab(\u00bb, expected punc \u00ab:\u00bb when running rake assets:precompile on production\nWhen deploying my Rails app I get the following error:\nrake aborted!\n   ExecJS::ProgramError: Unexpected token punc \u00ab(\u00bb, expected punc \u00ab:\u00bb (line: 15, col: 14, pos: 265)\n\n   Error\n   at new JS_Parse_Error (/tmp/execjs20150524-4411-1p45n63js:2359:10623)\n   at js_error (/tmp/execjs20150524-4411-1p45n63js:2359:10842)\n   at croak (/tmp/execjs20150524-4411-1p45n63js:2359:19086)\n   at token_error (/tmp/execjs20150524-4411-1p45n63js:2359:19223)\n   at expect_token (/tmp/execjs20150524-4411-1p45n63js:2359:19446)\n   at expect (/tmp/execjs20150524-4411-1p45n63js:2359:19584)\n   at /tmp/execjs20150524-4411-1p45n63js:2359:28513\n   at /tmp/execjs20150524-4411-1p45n63js:2359:19957\n   at expr_atom (/tmp/execjs20150524-4411-1p45n63js:2359:27269)\n   at maybe_unary (/tmp/execjs20150524-4411-1p45n63js:2359:30019)new JS_Parse_Error ((execjs):2359:10623)\n   js_error ((execjs):2359:10842)\n   croak ((execjs):2359:19086)\n   token_error ((execjs):2359:19223)\n   expect_token ((execjs):2359:19446)\n   expect ((execjs):2359:19584)\n   (execjs):2359:28513\n   (execjs):2359:19957\n   expr_atom ((execjs):2359:27269)\n   maybe_unary ((execjs):2359:30019)\n\nThe file in question is valid, it works on localhost. I also tried running rake assests:precompile on localhost, it all passes. Finally, I tried to remove the content from the file, git push and redeploy - still got the same error. Only completely removing the file and re-deploying helps.\nWould appreciate any ideas."}, {"role": "assistant", "content": "Here I found help for the same problem you had.\nRun rails console and:\nJS_PATH = \"app/assets/javascripts/**/*.js\"; \nDir[JS_PATH].each do |file_name|\n  puts \"\\n#{file_name}\"\n  puts Uglifier.compile(File.read(file_name), harmony: true)\nend\n\nIt will show you the file and the line where the Uglifier is making the problem."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Renaming remote git branch\nI have 2 git branches: master and experimental.\nExperimental became good, I want to make it the master. I figured I would rename to shuffle things around, but here is what I got:\nnutebook:Stuff nathan$ git remote rename master old\nerror: Could not rename config section 'remote.master' to 'remote.old'\n\nI use GitHub and Git-Tower."}, {"role": "assistant", "content": "The following is a guide to rename your master branch. It will work just as easily to rename your experimental branch.\n\nHere's how I did the renaming.\nFirst, in your working tree, locally rename master to something\n  else.\ngit branch -m master old-dev\n\nRenaming a branch does work while you are on the branch, so\n  there's no need to checkout something else.\nThen, locally rename the maintenance branch (2.63-branch) to\n  master:\ngit branch -m 2.63-branch master\n\nNow, time to mess with the remote. Just in case you screw up, you\n  might want to make sure you have a current backup. First, delete the\n  remote's master:\ngit push origin :master\n\nAnd now, give the remote your new master:\ngit push origin master:refs/heads/master\n\nUpdate: When creating a new branch, the refs/heads/ prefix is\n  needed on the remote side. If the branch already exists (as master did\n  above) only the branch name is required on the remote side.\n... and your now-renamed old master:\ngit push origin old-dev:refs/heads/old-dev\n\nFinally, delete the old name of your maintenance branch to prevent\n  confusion:\ngit push origin :2.63-branch\n\nClients will now get the 'new' master branch when they pull.\n\nsee this site."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  stash.showStat"}, {"role": "assistant", "content": "If this is set to true, the git stash show command without an\noption will show a diffstat of the stash entry.  Defaults to true.\nSee the description of the show command in git-stash ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do you copy and paste into Git Bash\nI'm using msysgit running on Windows XP.\nTried Ctrl+V, Right click, Middle click, google... no luck."}, {"role": "assistant", "content": "Press Insert.\nAlso, to copy from the window, try clicking the console's window icon (topleft) and choosing Edit -> Mark, then drag a box on the text, then press Enter. (You can also paste via the window icon menu, but the key is faster.)\nUPDATE\nStarting from Windows 10 the CTRL + C, CTRL + V and a lot of other feature are implemented in conhost.exe so they should work with every console utility on Windows. (You have to enable Properties -> Option tab -> Quick Edit Mode)\nRef: http://blogs.windows.com/buildingapps/2014/10/07/console-improvements-in-the-windows-10-technical-preview/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git reflog a specific branch?\nCan I reflog a specific branch?\ngit reflog shows all history on the repo. But I want to check the history of one specific branch, say production. Is there a way to do that?"}, {"role": "assistant", "content": "As noted in the documentation, git reflog takes an action verb (called <subcommand>) and optional modifiers.  The action defaults to show, and its optional modifier is the reference name to show.\nThe default is to show operations on HEAD.  (Most, but not all, \"everyday\" commands operate on and/or through HEAD in order to operate on any other reference.  Therefore the claim that git reflog shows all history is in fact false\u2014but it does show most, which might be close enough.)  This gives you an immediate and obvious answer to the question of showing operations applied to the specific branch-name production:\ngit reflog show production\n\nAs the documentation notes, git reflog show is an alias for git log -g --abbrev-commit --pretty=oneline, so you can also run:\ngit log -g --abbrev-commit --pretty=oneline production\n\nto get the exact same output.  The key switch here is -g, which directs git log to walk the given ref's reflog, rather than commits reachable from the commit to which the ref points.\n(You can continue to leave out the show verb, since it's still the default, though for this case I would advise including it\u2014for instance, if your branch is named show or expire the name will be mistaken for the verb!)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to get Git to clone into current directory\nI'm doing:\ngit clone ssh://[email\u00a0protected]/home/user/private/repos/project_hub.git ./\n\nI'm getting:\n\nFatal: destination path '.' already exists and is not an empty\n  directory.\n\nI know path . already exists.\nAnd I can assure that directory IS empty. (I do ls inside and I see nothing!)\nWhat am I missing here in order to clone that project into the current directory ?"}, {"role": "assistant", "content": "simply put a dot next to it\ngit clone [email\u00a0protected]:user/my-project.git .\n\nFrom git help clone:\n\nCloning into an existing directory is only allowed if the directory is empty.\n\nSo make sure the directory is empty (check with ls -a), otherwise the command will fail."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Login to Gitlab with username and password using cURL\n\nFor testing a command line tool against a Gitlab instance in Docker, I would like to login to Gitlab using username and password and grab the created session to authenticate my API requests.\nTherefore I do the following:\n\ncurl the user login page with curl -i http://localhost:8080/users/sign_in -s\nget me the _gitlab_session from the headers\nget me the authenticity_token from the login form\nsend a second curl request with\n\n\ncurl 'http://localhost:8080/users/sign_in' \\\n  -H \"_gitlab_session=${cookie}\" \\\n  -H 'Origin: http://localhost:8080' \\\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\n  -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8' \\\n  -H 'Referer: http://localhost:8080/users/sign_in' \\\n  -H 'Connection: keep-alive' \\\n  --data-urlencode \"authenticity_token=${token}\" \\\n  --data-urlencode \"user[login]=root\" \\\n  --data-urlencode \"user[password]=12341234\" \\\n  --data-urlencode \"user[remember_me]=0\"\n\nBut instead of a valid user login, I get a \n422 - The change you requested was rejected.\n\nAnd in the logfiles, I see\n==> gitlab-rails/production.log <==\nStarted POST \"/users/sign_in\" for 172.17.0.1 at 2017-12-23 00:22:16 +0000\nProcessing by SessionsController#create as HTML\nParameters: {\"authenticity_token\"=>\"[FILTERED]\", \"user\"=>{\"login\"=>\"root\", \"password\"=>\"[FILTERED]\", \"remember_me\"=>\"0\"}}\nCan't verify CSRF token authenticity\nCompleted 422 Unprocessable Entity in 125ms (ActiveRecord: 7.8ms)\n\n==> gitlab-rails/production_json.log <==\n{\"method\":\"POST\",\"path\":\"/users/sign_in\",\"format\":\"html\",\"controller\":\"SessionsController\",  \n\"action\":\"create\",\"status\":422,\"error\":\" \nActionController::InvalidAuthenticityToken:ActionController::InvalidAuthenticityToken\",\n\"duration\":126.29,\"view\":0.0,\"db\":7.78,\"time\":\"2017-12-23T00:22:16.039Z\",\n\"params\":{\"authenticity_token\":\"[FILTERED]\",\"user\":{\"login\":\"root\",\"password\":\"\n[FILTERED]\",\"remember_me\":\"0\"}},\"remote_ip\":\"172.17.0.1\",\n\"user_id\":1,\"username\":\"root\"}\n\n==> gitlab-rails/production.log <==\n\nActionController::InvalidAuthenticityToken (ActionController::InvalidAuthenticityToken):\n  lib/gitlab/middleware/multipart.rb:93:in `call'\n  lib/gitlab/request_profiler/middleware.rb:14:in `call'\n  lib/gitlab/middleware/go.rb:18:in `call'\n  lib/gitlab/etag_caching/middleware.rb:11:in `call'\n  lib/gitlab/middleware/read_only.rb:31:in `call'\n  lib/gitlab/request_context.rb:18:in `call'\n  lib/gitlab/metrics/requests_rack_middleware.rb:27:in `call'\n\nI assume that I forgot to pass a necessary ingredient in the second request - but I can't figure out, which one."}, {"role": "assistant", "content": "With some helpful tips by other answers and comments, I finally came up with this solution:\ngitlab_host=\"http://localhost:8080\"\ngitlab_user=\"root\"\ngitlab_password=\"12341234\"\n\n# curl for the login page to get a session cookie and the sources with the auth tokens\nbody_header=$(curl -c cookies.txt -i \"${gitlab_host}/users/sign_in\" -s)\n\n# grep the auth token for the user login for\n#   not sure whether another token on the page will work, too - there are 3 of them\ncsrf_token=$(echo $body_header | perl -ne 'print \"$1\\n\" if /new_user.*?authenticity_token\"[[:blank:]]value=\"(.+?)\"/' | sed -n 1p)\n\n# send login credentials with curl, using cookies and token from previous request\ncurl -b cookies.txt -c cookies.txt -i \"${gitlab_host}/users/sign_in\" \\\n    --data \"user[login]=${gitlab_user}&user[password]=${gitlab_password}\" \\\n    --data-urlencode \"authenticity_token=${csrf_token}\"\n\n# send curl GET request to personal access token page to get auth token\nbody_header=$(curl -H 'user-agent: curl' -b cookies.txt -i \"${gitlab_host}/profile/personal_access_tokens\" -s)\ncsrf_token=$(echo $body_header | perl -ne 'print \"$1\\n\" if /authenticity_token\"[[:blank:]]value=\"(.+?)\"/' | sed -n 1p)\n\n# curl POST request to send the \"generate personal access token form\"\n# the response will be a redirect, so we have to follow using `-L`\nbody_header=$(curl -L -b cookies.txt \"${gitlab_host}/profile/personal_access_tokens\" \\\n    --data-urlencode \"authenticity_token=${csrf_token}\" \\\n    --data 'personal_access_token[name]=golab-generated&personal_access_token[expires_at]=&personal_access_token[scopes][]=api')\n\n# Scrape the personal access token from the response HTML\npersonal_access_token=$(echo $body_header | perl -ne 'print \"$1\\n\" if /created-personal-access-token\"[[:blank:]]value=\"(.+?)\"/' | sed -n 1p)\n\nAccording to the GitLab API documentation you can now use the session cookie to authenticate API requests:\ncurl --header \"Private-Token: ${personal_access_token}\" https://gitlab.example.com/api/v4/projects\n\nSome hints:\n\nI first got confused with the curl -c file (which reads cookies from the headers and writes them to the file) vs. the curl -b file (which uses the cookies in the file and sends them with the request)\nUnfortunately I did not find a regex that worked with sed so I have to use perl here.\nUsing the developer console in Chrome and copying a POST request as curl command was very helpful: https://www.alexkras.com/copy-any-api-call-as-curl-request-with-chrome-developer-tools/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "List of remotes for a Git repository?\nI have a Git repository. This repository has multiple remote repositories (I think). How can I get a list of the remote repositories that belong to said repository?\nLike git list --remotes or something like that?"}, {"role": "assistant", "content": "You can get a list of any configured remote URLs with the command:\ngit remote -v\n\n\nThis will give you something like the following:\nbase    /home/***/htdocs/base (fetch)\nbase    /home/***/htdocs/base (push)\norigin  [email\u00a0protected]:*** (fetch)\norigin  [email\u00a0protected]:*** (push)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  sendemail.multiEdit"}, {"role": "assistant", "content": "If true (default), a single editor instance will be spawned to edit\nfiles you have to edit (patches when --annotate is used, and the\nsummary when --compose is used). If false, files will be edited one\nafter the other, spawning a new editor each time."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git flow command error: 'flow' is not a git command\n\nI am very new to Git and am starting to learn the command line version. I believe my git flow is not installed correctly. I am running this from a pc. \nWhen i run following command:\ngit flow feature start JamesTest\n\nI get the following error:\n\ngit: 'flow' is not a git command. See 'git --help'\n  Did you mean any of these?\n\nLooks like the git flow command is not being recognized from all paths? How do I fix this?"}, {"role": "assistant", "content": "The git flow is not installed in your machine. Just run this command,\nmacOS:\n$ brew install git-flow-avh\n\nLinux:\n$ apt-get install git-flow\n\nWindows:\n$ wget -q -O - --no-check-certificate https://raw.github.com/petervanderdoes/gitflow-avh/develop/contrib/gitflow-installer.sh install stable | bash\n\n\nSource git-flow cheatsheet by Daniel Kummer\n\nAfter successful installation run git flow init in your project and then follow the instructions to configure the git flow."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  notes.<name>.mergeStrategy"}, {"role": "assistant", "content": "Which merge strategy to choose when doing a notes merge into\nrefs/notes/<name>.  This overrides the more general\n\"notes.mergeStrategy\".  See the \"NOTES MERGE STRATEGIES\" section in git-notes for more information on the available strategies."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Using GitHub Actions to automatically update the repo's submodules\nTitle says it all. I tried using a bunch of different git commands like git submodule update --remote --merge and git submodule foreach git pull origin master which work fine on my computer, but not when it's run on GitHub actions.\nI tried adding git status to the workflow and the status just shows \"Up to date with origin/master, nothing to commit\" or something like that."}, {"role": "assistant", "content": "If you need to auto update references to your submodules via GitHub actions:\nCreate a new workflow in your parent repository that will synchronize references:\nname: 'Submodules Sync'\n\non:\n  # Allows you to run this workflow manually from the Actions tab or through HTTP API\n  workflow_dispatch:\n\njobs:\n  sync:\n    name: 'Submodules Sync'\n    runs-on: ubuntu-latest\n\n    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest\n    defaults:\n      run:\n        shell: bash\n\n    steps:\n    # Checkout the repository to the GitHub Actions runner\n    - name: Checkout\n      uses: actions/checkout@v2\n      with:\n        token: ${{ secrets.CI_TOKEN }}\n        submodules: true\n\n    # Update references\n    - name: Git Submodule Update\n      run: |\n        git pull --recurse-submodules\n        git submodule update --remote --recursive\n\n    - name: Commit update\n      run: |\n        git config --global user.name 'Git bot'\n        git config --global user.email '[email\u00a0protected]'\n        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}\n        git commit -am \"Auto updated submodule references\" && git push || echo \"No changes to commit\"\n\nwhere\n\nCI_TOKEN is a security token variable in GitHub that have 'Read-Write' access to the parent repository, and 'Read' access to submodule repositories.\n\n\nIn the child (submodule) GitHub action notify the parent about changes.\nname: 'Submodule Notify Parent'\n\non:\n  push:\n    branches:\n      - main    \n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\njobs:\n  notify:\n    name: 'Submodule Notify Parent'\n    runs-on: ubuntu-latest\n\n    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest\n    defaults:\n      run:\n        shell: bash\n\n    steps:\n    - name: Github REST API Call\n      env:\n        CI_TOKEN: ${{ secrets.CI_TOKEN }}\n        PARENT_REPO: <my_organization/my-app>\n        PARENT_BRANCH: develop\n        WORKFLOW_ID: <9999999>\n      run: |\n        curl -fL --retry 3 -X POST -H \"Accept: application/vnd.github.v3+json\" -H \"Authorization: token ${{ env.CI_TOKEN }}\" https://api.github.com/repos/${{ env.PARENT_REPO }}/actions/workflows/${{ env.WORKFLOW_ID }}/dispatches -d '{\"ref\":\"${{ env.PARENT_BRANCH }}\"}'\n\nwhere\n\nPARENT_REPO - name of the parent repository as it is in Github (my_org/my_app or just my_app if there is no organization).\nWORKFLOW_ID - parent Wofklow ID to call via rest API. To find it run curl using your CI_TOKEN:\ncurl -X GET -H \"Authorization: token $CI_TOKEN\" https://api.github.com/repos/$PARENT_REPO/actions/workflows\n\n\n\nRepeat the workflow creation for every submodule.\n\nP.S. For me it works very stable. Please add information about existing github actions with the above logic if there is any."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Hg: How to do a rebase like git's rebase\nIn Git I can do this:\n\n1. Start working on new feature:\n$ git co -b newfeature-123  # (a local feature development branch)\ndo a few commits (M, N, O)\n\nmaster A---B---C\n                \\\nnewfeature-123   M---N---O\n\n2. Pull new changes from upstream master:\n$ git pull\n(master updated with ff-commits)\n\nmaster A---B---C---D---E---F\n                \\\nnewfeature-123   M---N---O\n\n3. Rebase off master so that my new feature \ncan be developed against the latest upstream changes:\n(from newfeature-123)\n$ git rebase master\n\nmaster A---B---C---D---E---F\n                            \\\nnewfeature-123               M---N---O\n\n\nI want to know how to do the same thing in Mercurial, and I've scoured the web for an answer, but the best I could find was: git rebase - can hg do that\nThat link provides 2 examples:\n1. I'll admit that this: (replacing the revisions from the example with those from my own example)\n\nhg up -C F  \nhg branch -f newfeature-123  \nhg transplant -a -b newfeature-123 \n\nis not too bad, except that it leaves behind the pre-rebase M-N-O as an unmerged head and creates 3 new commits M',N',O' that represent them branching off the updated mainline.\nBasically the problem is that I end up with this:\n\nmaster A---B---C---D---E---F\n                \\           \\\nnewfeature-123   \\           M'---N'---O'\n                  \\\nnewfeature-123     M---N---O\n\nthis is not good because it leaves behind local, unwanted commits that should be dropped.\n\nThe other option from the same link is \n\n\nhg qimport -r M:O\nhg qpop -a\nhg up F\nhg branch newfeature-123\nhg qpush -a\nhg qdel -r qbase:qtip\n\nand this does result in the desired graph:\n\nmaster A---B---C---D---E---F\n                            \\\nnewfeature-123               M---N---O\n\nbut these commands (all 6 of them!) seem so much more complicated than \n\n$ git rebase master\n\nI want to know if this is the only equivalent in Hg or if there is some other way available that is simple like Git."}, {"role": "assistant", "content": "VonC has the answer you're looking for, the Rebase Extension.  It is, however, worth spending a second or two thinking about why neither mq nor rebase are enabled by default in mercurial: because mercurial is all about indelible changesets.  When I work in the manner you're describing, which is nearly daily, here's the pattern I take:\n1. Start working on a new feature:\n$ hg clone mainline-repo newfeature-123\ndo a few commits (M, N, O)\n\nmaster A---B---C\n                \\\nnewfeature-123   M---N---O\n\n2. Pull new changes from upstream mainline:\n$ hg pull\n\nmaster A---B---C---D---E---F\n                \\\nnewfeature-123   M---N---O\n\n3. merge master into my clone so that my new feature \ncan be developed against the latest upstream changes:\n(from newfeature-123)\n$ hg merge F\n\nmaster A---B---C---D---E---F\n                \\           \\\nnewfeature-123   M---N---O---P\n\nand that's really all that's necessary.  I end up with a newfeature-123 clone I can easily push back to the mainline when I'm happy with it.  Most importantly, however, I never changed history.  Someone can look at my csets and see what they were originally coded against and how I reacted to changes in the mainline throughout my work.  Not everyone thinks that has value, but I'm a firm believer that it's the job of source control to show us not what we wished had happened, but what actually happened -- every deadend and every refactor should leave an indelible trace, and rebasing and other history editing techniques hide that.\nNow go pick VonC's answer while I put my soapbox away. :)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git with IntelliJ IDEA: Could not read from remote repository\nSince a few weeks, I'm not able to pull or push from or to the remote repository. I thought it happend when upgrading to IntelliJ IDEA 14, but I can reproduce the problem with IDEA 13.1.5 as well.\nThe tooltip says\n\"Fetch failed\nfatal: Could not read from remote repository.\"\nand the exception in the Version Control tab reads\n14:02:37.737: cd C:\\dev\\project\n14:02:37.737: git -c core.quotepath=false fetch origin --progress --prune\njava.io.IOException: Padding in RSA public key!\n    at com.trilead.ssh2.signature.RSASHA1Verify.decodeSSHRSAPublicKey(RSASHA1Verify.java:37)\n    at com.trilead.ssh2.KnownHosts.addHostkey(KnownHosts.java:98)\n    at com.trilead.ssh2.KnownHosts.initialize(KnownHosts.java:414)\n    at com.trilead.ssh2.KnownHosts.initialize(KnownHosts.java:440)\n    at com.trilead.ssh2.KnownHosts.addHostkeys(KnownHosts.java:137)\n    at org.jetbrains.git4idea.ssh.SSHMain.configureKnownHosts(SSHMain.java:462)\n    at org.jetbrains.git4idea.ssh.SSHMain.start(SSHMain.java:155)\n    at org.jetbrains.git4idea.ssh.SSHMain.main(SSHMain.java:137)\nfatal: Could not read from remote repository.\nPlease make sure you have the correct access rights\nand the repository exists.\n\nUsing the built-in terminal of IntelliJ, executing git -c core.quotepath=false fetch origin --progress --prune, it works just as it should.\nAccording to the stacktrace, there seems to be a problem with my KnownHosts, so I deleted our git server from ~/.ssh/known_hosts, hoping IntelliJ would insert it again. But the problem still appears when updating via the UI, and there is no new entry written in known_hosts; thinking about some caching of the file, I restarted IntelliJ, without success.\nWhen doing another git fetch from the terminal, now I'm getting asked if I want to permanently add the server. After that, it has been written to known_hosts again, but IntelliJ still won't let me update my project.\nI haven't found anything about this behavior online, so I guess it's not a known bug with the new IntelliJ version. Nevertheless, I updated to 14.0.2, but the problem still exists.\nIntelliJ is configured to use the built-in SSH executable.\nDoes anybody have a clue what could be the problem here?"}, {"role": "assistant", "content": "Settings --> Version Control --> Git, and then, in the SSH executable dropdown, choose Native\n\nIf this doesn't help, ensure that your native ssh and git clients are of a sufficiently recent version."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "error: cannot run ssh: No such file or directory when trying to clone on windows\nI am trying to clone a remote repository on Windows, but when I did this:\ngit clone [email\u00a0protected]:organization/xxx.git\n\nI got this error:\nerror: cannot run ssh: No such file or directory\nfatal: unable to fork\n\nAm I missing something?"}, {"role": "assistant", "content": "Check if you have installed ssh-client. This solves the problem on docker images, even when ssh keys are present.\nOn Debian images:\napt-get install openssh-client\n\nOn Alpine images:\napk add openssh-client"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git"}, {"role": "assistant", "content": "CAVEATS For the sake of simplicity and interoperating with Subversion,\nit is recommended that all git svn users clone, fetch and dcommit\ndirectly from the SVN server, and avoid all git clone / pull / merge / push operations between Git repositories and branches.  The recommended\nmethod of exchanging code between Git branches and users is git format-patch and git am , or just 'dcommit\u2019ing to the SVN repository. Running git merge or git pull is NOT recommended on a branch you\nplan to dcommit from because Subversion users cannot see any\nmerges you\u2019ve made.  Furthermore, if you merge or pull from a Git branch\nthat is a mirror of an SVN branch, dcommit may commit to the wrong\nbranch. If you do merge, note the following rule: git svn dcommit will\nattempt to commit on top of the SVN commit named in git log --grep=^git-svn-id: --first-parent -1 You must therefore ensure that the most recent commit of the branch\nyou want to dcommit to is the first parent of the merge.  Chaos will\nensue otherwise, especially if the first parent is an older commit on\nthe same SVN branch. git clone does not clone branches under the refs/remotes/ hierarchy or\nany git svn metadata, or config.  So repositories created and managed with\nusing git svn should use rsync for cloning, if cloning is to be done\nat all. Since dcommit uses rebase internally, any Git branches you git push to\nbefore dcommit on will require forcing an overwrite of the existing ref\non the remote repository.  This is generally considered bad practice,\nsee the git-push documentation for details. Do not use the --amend option of git-commit on a change you\u2019ve\nalready dcommitted.  It is considered bad practice to --amend commits\nyou\u2019ve already pushed to a remote repository for other users, and\ndcommit with SVN is analogous to that. When cloning an SVN repository, if none of the options for describing\nthe repository layout is used (--trunk, --tags, --branches,\n--stdlayout), git svn clone will create a Git repository with\ncompletely linear history, where branches and tags appear as separate\ndirectories in the working copy.  While this is the easiest way to get a\ncopy of a complete repository, for projects with many branches it will\nlead to a working copy many times larger than just the trunk. Thus for\nprojects using the standard directory structure (trunk/branches/tags),\nit is recommended to clone with option --stdlayout . If the project\nuses a non-standard structure, and/or if branches and tags are not\nrequired, it is easiest to only clone one directory (typically trunk),\nwithout giving any repository layout options.  If the full history with\nbranches and tags is required, the options --trunk / --branches / --tags must be used. When using multiple --branches or --tags, git svn does not automatically\nhandle name collisions (for example, if two branches from different paths have\nthe same name, or if a branch and a tag have the same name).  In these cases,\nuse init to set up your Git repository then, before your first fetch , edit\nthe $GIT_DIR/config file so that the branches and tags are associated\nwith different name spaces.  For example: branches = stable/*:refs/remotes/svn/stable/*\nbranches = debug/*:refs/remotes/svn/debug/*"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can Git hook scripts be managed along with the repository?\nWe'd like to make a few basic hook scripts that we can all share -- for things like pre-formatting commit messages.  Git has hook scripts for that that are normally stored under <project>/.git/hooks/.  However, those scripts are not propagated when people do a clone and they are not version controlled.  \nIs there a good way to help everyone get the right hook scripts?  Can I just make those hook scripts point to version controlled scripts in my repo?"}, {"role": "assistant", "content": "In Git 2.9, the \nconfiguration option core.hooksPath specifies a custom hooks directory.\nMove your hooks to a hooks tracked directory in your repository. Then, configure each instance of the repository to use the tracked hooks instead of $GIT_DIR/hooks:\ngit config core.hooksPath hooks\n\nIn general, the path may be absolute, or relative to the directory where the hooks are run (usually the working tree root; see DESCRIPTION section of man githooks)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to 'git pull' without switching branches (git checkout)?\nI'm used to running git pull and other commands from within a branch I'm working on.  But I have set up a development server that several people work on, so I don't want to have to switch branches when I do it.\nIf I want to update an existing branch on the dev server from the github repository we all use, what would be the right way to do that?\nIf I run the command git pull github branchname will that simply pull the branch into the current branch?\nAll of the git examples I can find seem to indicate that you run checkout branchname first, then do the pull.  I'm trying to avoid that.  As I said, this is an existing branch and I just want to update to the latest version."}, {"role": "assistant", "content": "I was looking for the same thing and finally found the answer that worked for me in another stackoverflow post: Merge, update, and pull Git branches without using checkouts\nBasically:\ngit fetch <remote> <srcBranch>:<destBranch>\n\nExample: git fetch origin branchname:branchname\nUse the pull command\ngit pull <remote> <srcBranch>:<destBranch>\n\nExample: git pull origin branchname:branchname"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Amend the second to last commit\nIf you found a bug in your last commit, you can simply recommit the last commit with\ngit commit --amend\n\nBut if you already committed another commit, how do you resubmit the commit before that one?\n\nNote: I assume, you are aware, that you should only use --amend if you are sure no other developer already used your commit upstream"}, {"role": "assistant", "content": "commit your fixup with \ngit commit -a -m \"fix commit (this one will be shifted up one line)\"\n(the commit message is not important, it will be obsolete once you are finished)\nNow the magic:\nrebase the HEAD to the second last commit but edit the commit message before in that way, that you swap the last and the last but one line in the message editor:\ngit rebase -i HEAD~3\nThe editor will show the last 3 comits like this:    \n pick 2a06f16 this was the last commit\n pick 0dbc5ce the last-but-one commit\n pick 2e30418 fix commit (this one will be shifted up one line)\n\n # Rebase 011f3d0..2e30418 onto 011f3d0\n # \u2026\n\nswap the last two lines so the commit message will look for example like this:    \n pick 2a06f16 this was the last commit\n fixup 2e30418 fix commit (this one will be shifted up one line)\n pick 0dbc5ce the last-but-one commit\n\n # Rebase 011f3d0..2e30418 onto 011f3d0\n # \u2026\n\nCheck your log with\ngit log HEAD~3\npush the corrected commit-line with + to force a new push to the already existing branch with\ngit push origin +branchname"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_OBJECT_DIRECTORY"}, {"role": "assistant", "content": "If the object storage directory is specified via this\nenvironment variable then the sha1 directories are created\nunderneath - otherwise the default $GIT_DIR/objects directory is used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Do I need to publish to npm every time I update a package available via git?\nSay I maintain an incredible crab-season package.  I've npm published version 0.1.0 with a package.json containing:\n\"repository\": {\n  \"type\": \"git\",\n  \"url\": \"https://github.com/example/crab-season.git\"\n}\n\nWhen I add awesome new features, bump the version to 0.2.0, and push to github will the npmjs registry notice my new version or do I need to npm publish each time?"}, {"role": "assistant", "content": "Travis CI can publish to npm when you push a version tag to reduce the overhead of releasing a change.  Enable in your .travis.yml with:\ndeploy: \n  provider: npm\n  api_key: \"YOUR API KEY\"\n  on:\n    - tags: true\n\nCheck the travis docs for details.  There's also a step-by-step guide in this post."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.renames"}, {"role": "assistant", "content": "Whether and how Git detects renames.  If set to \"false\",\nrename detection is disabled. If set to \"true\", basic rename\ndetection is enabled.  If set to \"copies\" or \"copy\", Git will\ndetect copies, as well.  Defaults to true.  Note that this\naffects only git diff Porcelain like git-diff and git-log , and not lower level commands such as git-diff-files ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Setting different config for different repositories [duplicate]\nThis question already has answers here:\n                                \n                            \n\n\n\n\nCan I specify multiple users for myself in .gitconfig?\n\n                                (25 answers)\n                            \n\nClosed 10 years ago.\n\n\n\nI was wondering how am I going to change the contents of the command git config --list? I am going to pull/fork a repository from GitHub. I am going to configure such repositories on both of my Windows, Linux and Mac workstations."}, {"role": "assistant", "content": "If you want to set up configurations that are specific for a particular repository, you have two options, to configure it from the command line, or edit the repo's config file in an editor.\nOption 1: Configure via command line\nSimply use the command line, cd into the root of your Git repo, and run git config, without the --system and the --global flags, which are for configuring your machine and user Git settings, respectively:\ncd <your-repo>\ngit config <setting-name> <setting-value>\ngit config <setting-name>=<setting-value> # alternate syntax\n\nOption 2: Edit config file directly\nYour other option is to edit the repo config file directly. With a default Git clone, it's usually the .git/config file in your repo's root folder.  Just open that file in an editor and starting adding your settings, or invoke an editor for it at the command line using git config --edit.\nResources\nYou can learn more about configuring Git at the official Linux Kernel Git documentation for git config. In particular, you may be interested in seeing an example Git config:\n# Core variables\n[core]\n        ; Don't trust file modes\n        filemode = false\n# Our diff algorithm\n[diff]\n        external = /usr/local/bin/diff-wrapper\n        renames = true\n[branch \"devel\"]\n        remote = origin\n        merge = refs/heads/devel\n# Proxy settings\n[core]\n        gitProxy=\"ssh\" for \"kernel.org\"\n        gitProxy=default-proxy ; for the rest\n[include]\n        path = /path/to/foo.inc ; include by absolute path\n        path = foo ; expand \"foo\" relative to the current file\n        path = ~/foo ; expand \"foo\" in your $HOME directory\n\nEdit\nAddressing the original poster's question about how to change user.name and user.email per repository, here is how to do it via the command line. Switch to each repository, and run the following:\ngit config user.name \"<name>\"\ngit config user.email \"<email>\"\n\nSince you're not using the --system or the --global flags, the above commands will apply to whichever repo you have in your terminal working directory only."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git svn rebase : checksum mismatch\nI have a problem when I try to do a git svn rebase on my repository. It displays :\nChecksum mismatch: code/app/meta_appli/app_info.py\nexpected: d9cefed5d1a630273aa3742f7f414c83\n     got: 4eb5f3506698bdcb64347b5237ada19f\n\nI searched a lot but haven't found a way to solve this problem.\nIf anybody knows, please share your knowledge.\nThanks in advance."}, {"role": "assistant", "content": "This solution was the only one that worked for me:\n\nSee what was the revision number of the last change on the file:\ngit svn log chrome/test/functional/search_engines.py\nReset svn to be closest parent before that revision:\ngit svn reset -r62248 -p\nDo a git svn fetch!\nDance at your success."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can't ignore .suo file\nI'm trying to work using Git with a colleague, in an application written in C#.\nWe have added the entry \"project1.suo\" to the .gitignore file  but every time one of us has to commit the project, Git seems to tell us to commit the file \"project1.suo\" as well.\nWe have tried many methods to add the file in .gitignore like that:\n*.suo\nproject1.suo\nc:\\project\\project1.suo\n\nHow can we ignore the SUO file during the commit?"}, {"role": "assistant", "content": "git doesn't ignore files that have been added to the repository. If you want to get it ignored, you have to delete the file from the repository:\ngit rm --cached project1.suo\ngit commit -m \"Delete suo file from repository\"\n\nThis will delete the file from the repository, while it's still on your harddrive."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  cumulative"}, {"role": "assistant", "content": "Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-prune"}, {"role": "assistant", "content": "Prune all unreachable objects from the object database"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show-ref - List references in a local repository"}, {"role": "assistant", "content": "FILES .git/refs/* , .git/packed-refs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is it possible to create merge requests in pure Git from the command line?\nI'm using a behind-firewall install of Gitorious.\nI can go into the web application and create a pull request from a clone and target the master repo from which it was cloned.\nI'd like to be able to do this on the command line. More specifically, I'd like to be able to open merge requests from the command line from one branch to another (rather than from clone to seed repo). \nSince I'm not using Github, I can't use Github specific tools or libraries. Is this possible?"}, {"role": "assistant", "content": "The answer given by svick is not correct. It is possible.\nThere's git request-pull which is part of the Git suite. Using that command line tool, you could create a pull request that could be sent per E-Mail.\nExample:\nyour origin holds a branch master. Now you create a local bugfix branch fix, implement the bug fix and push that fix branch to origin:\ngit push origin fix:fix\n\nThen, you want someone to merge the changes made in the fix branch into master. Create the pull request with\ngit request-pull master origin\n\nThis will create a text formatted as follows:\nThe following changes since commit <SHA of master>:\n\n  <commit message of SHA of mster>\n\nare available in the git repository at:\n  <repo location> fix\n\n<User Name> (<Number of Commits>):\n      <messages of the commits>\n      ...\n\n <changed files>\n ...\n <file statistics>\n\n\nIf the merge request shall go to somebody that cannot access your repo where you pushed your changes, there's always the opportunity of doing it with git format-patch.\nAfter pushing your fix branch to origin (you don't even need to do that), while being on the fix branch create the patch using\ngit format-patch master..\n\nThis will create a patch file for each commit you did in fix since branching off master. You could bundle the generated .patch files with\ntar czf fix.tgz *.patch\n\nand then send to someone e.g. via E-Mail to review and apply.\nFor the sake of completeness: applying the patches could be done with git am."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  -I"}, {"role": "assistant", "content": "Don\u2019t match the pattern in binary files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-switch"}, {"role": "assistant", "content": "Switch branches"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Getting GitLab CI to clone private repositories\n\nI have GitLab & GitLab CI set up to host and test some of my private repos. For my composer modules under this system, I have Satis set up to resolve my private packages.\nObviously these private packages require an ssh key to clone them, and I have this working in the terminal - I can run composer install and get these packages, so long as I have the key added with ssh-add in the shell.\nHowever, when running my tests in GitLab CI, if a project has any of these dependencies the tests will not complete as my GitLab instance needs authentication to get the deps (obviously), and the test fails saying Host key verification failed.\nMy question is how do I set this up so that when the runner runs the test it can authenticate to gitlab without a password? I have tried putting a password-less ssh-key in my runners ~/.ssh folder, however the build wont even add the key, \"eval ssh-agent -s\" followed by ssh-add seems to fail saying the agent isn't running..."}, {"role": "assistant", "content": "See also other solutions:\n\ngit submodule permission (see Marco A.'s answer)\njob token and override repo in git config (see a544jh's answer)\n\n\nHere a full howto with SSH keys:\nGeneral Design\n\ngenerating a pair of SSH keys\nadding the private one as a secure environment variable of your project\nmaking the private one available to your test scripts on GitLab-CI\nadding the public one as a deploy key on each of your private dependencies\n\nGenerating a pair of public and private SSH keys\nGenerate a pair of public and private SSH keys without passphrase:\nssh-keygen -b 4096 -C \"<name of your project>\" -N \"\" -f /tmp/name_of_your_project.key\n\nAdding the private SSH key to your project\nYou need to add the key as a secure environment variable to your project as\nfollowing:\n\nbrowse https://<gitlab_host>/<group>/<project_name>/variables\nclick on \"Add a variable\"\nfill the text field Key with SSH_PRIVATE_KEY\nfill the text field Value with the private SSH key itself\nclick on \"Save changes\"\n\nExposing the private SSH key to your test scripts\nIn order to make your private key available to your test scripts you need to add\nthe following to your .gitlab-ci.yml file:\nbefore_script:\n  # install ssh-agent\n  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'\n  # run ssh-agent\n  - eval $(ssh-agent -s)\n  # add ssh key stored in SSH_PRIVATE_KEY variable to the agent store\n  - ssh-add <(echo \"$SSH_PRIVATE_KEY\")\n  # disable host key checking (NOTE: makes you susceptible to man-in-the-middle attacks)\n  # WARNING: use only in docker container, if you use it with shell you will overwrite your user's ssh config\n  - mkdir -p ~/.ssh\n  - echo -e \"Host *\\n\\tStrictHostKeyChecking no\\n\\n\" > ~/.ssh/config\n\nCode Snippet comes from GitLab documentation\nAdding the public SSH key as a deploy key to all your private dependencies\nYou need to register the public SSH key as deploy key to all your private\ndependencies as following:\n\nbrowse https://<gitlab_host>/<group>/<dependency_name>/deploy_keys\nclick on \"New deploy key\"\nfill the text field Title with the name of your project\nfill the text field Key with the public SSH key itself\nclick on \"Create deploy key\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --filter=<filter-spec>"}, {"role": "assistant", "content": "Only useful with one of the --objects* ; omits objects (usually\nblobs) from the list of printed objects.  The <filter-spec> may be one of the following: The form --filter=blob:none omits all blobs. The form --filter=blob:limit=<n>[kmg] omits blobs of size at least n\nbytes or units.  n may be zero.  The suffixes k, m, and g can be used\nto name units in KiB, MiB, or GiB.  For example, blob:limit=1k is the same as blob:limit=1024 . The form --filter=object:type=(tag|commit|tree|blob) omits all objects\nwhich are not of the requested type. The form --filter=sparse:oid=<blob-ish> uses a sparse-checkout\nspecification contained in the blob (or blob-expression) <blob-ish> to omit blobs that would not be required for a sparse checkout on\nthe requested refs. The form --filter=tree:<depth> omits all blobs and trees whose depth\nfrom the root tree is >= <depth> (minimum depth if an object is located\nat multiple depths in the commits traversed). <depth>=0 will not include\nany trees or blobs unless included explicitly in the command-line (or\nstandard input when --stdin is used). <depth>=1 will include only the\ntree and blobs which are referenced directly by a commit reachable from\n<commit> or an explicitly-given object. <depth>=2 is like <depth>=1\nwhile also including trees and blobs one more level removed from an\nexplicitly-given commit or tree. Note that the form --filter=sparse:path=<path> that wants to read\nfrom an arbitrary path on the filesystem has been dropped for security\nreasons. Multiple --filter= flags can be specified to combine filters. Only\nobjects which are accepted by every filter are included. The form --filter=combine:<filter1>+<filter2>+\u2026\u200b<filterN> can also be\nused to combined several filters, but this is harder than just repeating\nthe --filter flag and is usually not necessary. Filters are joined by + and individual filters are %-encoded (i.e. URL-encoded).\nBesides the + and % characters, the following characters are\nreserved and also must be encoded: ~!@#$^&*()[]{}\\;\",<>? '` as well as all characters with ASCII code <= 0x20 , which includes\nspace and newline. Other arbitrary characters can also be encoded. For instance, combine:tree:3+blob:none and combine:tree%3A3+blob%3Anone are\nequivalent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to install Python on Gitlab-CI\n\nHow do you install various versions of Python on Gitlab-CI?\nIn my previous experience with Travis-CI, I simply run the normal Ubuntu/Debian commands to install the deadsnakes repo and then install whatever version I need like:\nsudo add-apt-repository -y ppa:fkrull/deadsnakes\nsudo apt-get -yq update\nsudo apt-get -yq install python2.7 python2.7-dev python3.4 python3.4-dev python3.6 python3.6-dev python3.7 python3.7-dev\n\nI've tried this similar configuration with Gitlab-CI:\nimage: ubuntu:latest\n\nbefore_script:\n  - add-apt-repository -y ppa:fkrull/deadsnakes\n  - apt-get -yq update\n  - apt-get -yq install python2.7 python2.7-dev python3.4 python3.4-dev python3.6 python3.6-dev python3.7 python3.7-dev\n  - python -V\n\ntest:\n  script:\n  - ./run_my_tests.sh\n\nbut this fails with:\n/bin/bash: line 82: add-apt-repository: command not found\n\nI can only assume that even though I'm running an Ubuntu image, Gitlab restricts the commands available. What's the equivalent way to install Python in Gitlab-CI?"}, {"role": "assistant", "content": "You should use a base image containing everything you need. Installing something by hand should work in principle, but will unnecessarily cost you GitLab CI pipeline minutes.\nFor python 3.7 you could do the following:\nimage: python:3.7-alpine3.9\n\nCheck DockerHub for a list of all available python images: https://hub.docker.com/_/python\nIf you need to test with different python versions, I recommend to split your tasks into different GitLab CI jobs, each using a different python base image:\ntest-python-3-7:\n  image: python:3.7-alpine3.9\n  script:\n  - ./run_my_tests.sh\n\ntest-python-2.7:\n  image: python:2.7.16-alpine3.8\n  script:\n  - ./run_my_tests.sh\n\nIf you absolutely need to install stuff by yourself, because there is no appropriate image, I would still suggest you create an image with everything you need, upload it to DockerHub or your own GitLab container registry, and then use it in your CI pipelines."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --since-as-filter=<date>"}, {"role": "assistant", "content": "Show all commits more recent than a specific date. This visits\nall commits in the range, rather than stopping at the first commit which\nis older than a specific date."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.protectHFS"}, {"role": "assistant", "content": "If set to true, do not allow checkout of paths that would\nbe considered equivalent to .git on an HFS+ filesystem.\nDefaults to true on Mac OS, and false elsewhere."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is a \"grafted\" commit in a shallow clone?\nWhen doing a shallow clone in git (using the --depth option), the root commit is marked as grafted.\n\nGoogling didn't lead to any satisfacting documentation.\nIt doesn't seem to have anything to do with git grafts, which the similar terminology would imply.\nIs it just a flag to signal that this commit actually has more parents and isn't the \"real\" root commit? Or is there something more special about it?"}, {"role": "assistant", "content": "From your link:\n\nIt works by letting users record fake ancestry information for commits. This way you can make git pretend the set of parents a commit has is different from what was recorded when the commit was created.\n\nIn a shallow clone, your root commit is one that should have parents, but not in your repo. So it seems a good use case for grafting.\nIn effect:\n\nDef.: Shallow commits do have parents, but not in the shallow\nrepo, and therefore grafts are introduced pretending that\nthese commits have no parents."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git: a quick command to go to root of the working tree\nI wanted a simple git command to go up to the \"root\" of the repository.\nI started with a script, but figured that I cannot change active directory of the shell, I had to do a function. Unfortunately, I cannot call it directly with the non-dash form \"git root\", for instance.\nfunction git-root() {\n if [ -d .git ]; then\n  return 0\n fi\n\n A=..\n while ! [ -d $A/.git ]; do \n  A=\"$A/..\"\n done\n cd $A\n}\n\nDo you have a better solution? (the function has been written quickly, suggestions are welcome)"}, {"role": "assistant", "content": "Simpler still, steal from Is there a way to get the git root directory in one command? , and make an alias (as suggested by Peter) from\ncd \"$(git rev-parse --show-toplevel)\"\n\nThis works whether you're in the root directory or not."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do you display a section of plain text in GitHub markdown?\n\nI'm having a hard time finding any real answer to this (really simple?) question on Google, and I'm starting to worry that there is no solution.\nI am learning GitHub markdown. I would like to show some example code that contains fake email address like [email\u00a0protected]. But GitHub insists on auto-linking this text. I also have a large chunk of text that has many special characters.\nIs there a way to escape blocks or sections so that no special characters are processed, and no auto-links are generated?"}, {"role": "assistant", "content": "Wrap the block in backticks:\n```text\ncode();\n[email\u00a0protected]\n```"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs"}, {"role": "assistant", "content": "Generating patch text with -p Running git-diff , git-log , git-show , git-diff-index , git-diff-tree , or git-diff-files with the -p option produces patch text.\nYou can customize the creation of patch text via the GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS environment variables\n(see git ), and the diff attribute (see gitattributes ). What the -p option produces is slightly different from the traditional\ndiff format: It is preceded by a \"git diff\" header that looks like this: diff --git a/file1 b/file2 The a/ and b/ filenames are the same unless rename/copy is\ninvolved.  Especially, even for a creation or a deletion, /dev/null is not used in place of the a/ or b/ filenames. When a rename/copy is involved, file1 and file2 show the\nname of the source file of the rename/copy and the name of\nthe file that the rename/copy produces, respectively. It is followed by one or more extended header lines: old mode <mode>\nnew mode <mode>\ndeleted file mode <mode>\nnew file mode <mode>\ncopy from <path>\ncopy to <path>\nrename from <path>\nrename to <path>\nsimilarity index <number>\ndissimilarity index <number>\nindex <hash>..<hash> <mode> File modes are printed as 6-digit octal numbers including the file type\nand file permission bits. Path names in extended headers do not include the a/ and b/ prefixes. The similarity index is the percentage of unchanged lines, and\nthe dissimilarity index is the percentage of changed lines.  It\nis a rounded down integer, followed by a percent sign.  The\nsimilarity index value of 100% is thus reserved for two equal\nfiles, while 100% dissimilarity means that no line from the old\nfile made it into the new one. The index line includes the blob object names before and after the change.\nThe <mode> is included if the file mode does not change; otherwise,\nseparate lines indicate the old and the new mode. Pathnames with \"unusual\" characters are quoted as explained for\nthe configuration variable core.quotePath (see git-config ). All the file1 files in the output refer to files before the\ncommit, and all the file2 files refer to files after the commit.\nIt is incorrect to apply each change to each file sequentially.  For\nexample, this patch will swap a and b: diff --git a/a b/b\nrename from a\nrename to b\ndiff --git a/b b/a\nrename from b\nrename to a Hunk headers mention the name of the function to which the hunk\napplies.  See \"Defining a custom hunk-header\" in gitattributes for details of how to tailor this to\nspecific languages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I remove deleted branch names from autocomplete?\nI used git branch -d myBranch to delete a branch. However, when I am on master and try to checkout a new branch with git checkout, myBranch still appears in the tab-autocomplete.\nHow do I remove the name myBranch from tab-autocomplete for git checkout?"}, {"role": "assistant", "content": "git fetch --prune --all\nPosting this as its own answer since it's a one-line fix, but if you vote be sure to vote for twalberg's answer.\ntwalberg's suggestion to git branch -a led me on the right track; my coworker suggested git fetch --prune --all to prune all the dead branches from all the remotes, which is useful when working with lots of devs with lots of forks."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Gitlab merge two branches\n\nWe have created 'dev' branch from the 'master' and have been working on the 'dev' branch. We have not merged the 'dev' to 'master' yet. Also at the same time we have created 'preprod' branch from the 'master' and working on the 'preprod' branch changes. We have not merged the 'preprod' to 'master' yet. \nNow what we are trying to achieve is to merge the 'preprod' changes alone to 'dev'. I tried this by creating a merge request through Gitlab and approved it. What I found is the changes in the 'dev' code was also moved to 'preprod' and vice versa. I do not want the 'dev' changes to be moved to the 'preprod' by any chance. How can i accomplish this ?"}, {"role": "assistant", "content": "If you got changes on both, it is likely that your merge request told gitlab to merge the two branches into each other, which is sometimes desirable. Depending on your development process, you may find it easier to use git itself (or a gui for it, for example git extensions or sourcetree) to do your merges. GUI versions do a good job of visually showing your branches and past merges, which makes it a lot easier to figure out which commands to run.\nFrom the command line, after you revert to a commit before the gitlab merge, check out the dev branch and merge preprod into it:\ngit checkout dev\ngit merge preprod\n\nThe preprod changes will be made on dev but not vice versa (don't forget to push dev). The git merge command's effect is to merge changes from the named branch in the command (preprod) INTO the CURRENT branch (in this case dev, but you can verify the current branch running \"git branch\" or \"git status\").\nLinks to the git tools I mentioned:\ngit extensions: https://sourceforge.net/projects/gitextensions/\nSourceTree: https://www.sourcetreeapp.com/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is the public URL for the Github public keys\nI heard that there was a public URL for all users on github where you can access their public keys or they can supply that URL of all their public keys. Is this true? If so what is that URL. Does it exist for bitbucket as well?"}, {"role": "assistant", "content": "You can get with:\ncurl https://github.com/<username>.keys\n\nReplace <username> with the actual username of the GitHub user.\nThis is useful when you set login permission to other servers. Just save its output into ~/.ssh/authorized_keys. To append it to the end from the command line:\ncurl https://github.com/<username>.keys | tee -a ~/.ssh/authorized_keys\n\nIt can also be done using Github API\ncurl -i https://api.github.com/users/<username>/keys\n\nFor bit bucket you can use the following: (This call requires authentication.)\ncurl -i https://bitbucket.org/api/1.0/users/<accountname>/ssh-keys"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Configure Gitlab account in Pycharm\n\nCan anyone explain how to configure a Gitlab account on PyCharm 3.4?\nIn the options I can see Github, but nothing about how to configure a Gitlab account."}, {"role": "assistant", "content": "Install gitlab Integration plugin from settings menu"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git still shows files as modified after adding to .gitignore\ni'm adding this to .gitignore file\n.idea/*\n\nbut anyway the status is:\n#       modified:   .gitignore\n#       modified:   .idea/.generators\n#       modified:   .idea/dovezu.iml\n#       modified:   .idea/misc.xml\n#       modified:   .idea/workspace.xml\n\nwhat am i doing wrong ?\ni even added .idea/* to the global ~/.gitignore_global\nbut git status, anyway shows me:\n#       modified:   .gitignore\n#       modified:   .idea/.generators\n#       modified:   .idea/dovezu.iml\n#       modified:   .idea/misc.xml\n#       modified:   .idea/workspace.xml"}, {"role": "assistant", "content": "Your .gitignore is working, but it still tracks the files because they were already in the index.  \nTo stop this you have to do : git rm -r --cached .idea/\nWhen you commit the .idea/ directory will be removed from your git repository and the following commits will ignore the .idea/ directory.\nPS: You could use .idea/ instead of .idea/* to ignore a directory. You can find more info about the patterns on the .gitignore man page.\n\nHelpful quote from the git-rm man page\n--cached\n    Use this option to unstage and remove paths only from the index. \n    Working tree files, whether modified or not, will be left alone."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  ignore-space-change"}, {"role": "assistant", "content": "Ignore changes in amount of whitespace.  This ignores whitespace\nat line end, and considers all other sequences of one or\nmore whitespace characters to be equivalent."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitweb.category  gitweb.description  gitweb.owner  gitweb.url"}, {"role": "assistant", "content": "See gitweb for description."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gpg.ssh.revocationFile"}, {"role": "assistant", "content": "Either a SSH KRL or a list of revoked public keys (without the principal prefix).\nSee ssh-keygen(1) for details.\nIf a public key is found in this file then it will always be treated\nas having trust level \"never\" and signatures will show as invalid."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "A Gitlab \"import in progress\" never ends\n\nI was importing a Gitlab project from another repository to this new one, but for three days I see a message \"Import in progress\" and it never ends. I am not able to find any options to delete this repo as well. Has anyone come across a similar situation and knows how to delete this repo?"}, {"role": "assistant", "content": "(Answer added on behalf of the OP).\nJust click on the project and select the other settings from the left hand panel at the bottom. (Note: the usual settings available on the right top corner of the page will not be visible since the project is broken due to a bug in importing in gitlab). Then you can delete the project and recreate it again."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  fullPathname"}, {"role": "assistant", "content": "(WARN) A path contains the full path starting with \"/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to \"unversion\" a file in either svn and/or git\nIt happens to me all the time. I accidentally version a file, I do not want to be versioned (i.e. developer/machine specific config-files).\nIf I commit this file, I will mess up the paths on all the other developer machines - they will be unhappy.\nIf I do delete the file from versioning, it will be deleted from the other developers machines - they will be unhappy.\nIf I choose to never commit the file, I always have a \"dirty\" checkout - I am unhappy.\nIs a clean way to \"unversion\" a file from revision-control, that will result in no-one being unhappy?\nedit: trying to clarify a bit: I have already commited the file to the repository and I want to only remove it from versioning - I specifically do not want it to be physically deleted from everyone doing a checkout. I initially wanted it to be ignored.\nAnswer: If I could accept a second answer, it would be this. It answers my question with respect to git - the accepted answer is about svn."}, {"role": "assistant", "content": "In Git, in order to delete it from the tree, but NOT from the working directory, which I think is what you want, you can use the --cached flag, that is:\ngit rm --cached <filename>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to use Go with a private GitLab repo\n\nGitLab is a free, open-source way to host private .git repositories but it does not seem to work with Go. When you create a project it generates a URL of the form:\n[email\u00a0protected]:private-developers/project.git\n\nwhere:\n\n1.2.3.4 is the IP address of the gitlab server\nprivate-developers is a user group which has access to the private repo\n\nGolang 1.2.1 doesn't seem to understand this syntax.\ngo get [email\u00a0protected]:private-developers/project.git\n\nresults in:\npackage [email\u00a0protected]/project.git: unrecognized import path \"[email\u00a0protected]/project.git\"\n\nIs there a way to get this to work?"}, {"role": "assistant", "content": "Run this command:\ngit config --global url.\"[email\u00a0protected]:\".insteadOf \"https://1.2.3.4/\"\n\nAssuming you have the correct privileges to git clone the repository, this will make go get work for all repos on server 1.2.3.4. \nI tested this with go version 1.6.2, 1.8, and 1.9.1."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  worktree"}, {"role": "assistant", "content": "A repository can have zero (i.e. bare repository) or one or\nmore worktrees attached to it. One \"worktree\" consists of a\n\"working tree\" and repository metadata, most of which are\nshared among other worktrees of a single repository, and\nsome of which are maintained separately per worktree\n(e.g. the index, HEAD and pseudorefs like MERGE_HEAD,\nper-worktree refs and per-worktree configuration file)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git pull from another repository\nI have a repository called Generic, which is a generic application. I have forked it into a repository called Acme, which just builds upon the application stored Generic repository and adds Acme Co branding to it.\nIf I make changes to the core functionality in Generic, I want to update the Acme repository with the latest changes I have made to the core functionality in Generic. How would I do that?\nAs far as I can tell, I am essentially trying to merge the changes made in an upstream repository into the current fork.\nIf it means anything, I'm trying to do this because I have a generic application that I then build upon and brand for individual clients (like Acme in this example). If there is a cleaner way of doing this, let me know."}, {"role": "assistant", "content": "Issue the following command in your Acme repo. It adds a new remote repository named upstream that points to the Generic repo.\ngit remote add upstream https://location/of/generic.git\n\nYou can then merge any changes made to Generic into the current branch in Acme with the following command:\ngit pull upstream\n\nIf you just want it to download the changes without automatically merging, use git fetch instead of git pull.\nIf you want to disable pushing to that repository, set the push URL to an invalid URL using something like\ngit config remote.upstream.pushurl \"NEVER GONNA GIVE YOU UP\"\n\nGit will now yell at you about not being able to find a repo if you try to push to upstream (and sorry about the Rickroll, but it was the first random string that popped into my head)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to cherry-pick the last sha from another branch in Git with 1 command?\nI find myself doing this a lot when cherry-picking a commit from another branch.\n$ git log -1 another_branch\ncommit <commit_sha>\n// copy <commit_sha>\n$ git cherry-pick <commit_sha>\n\nCan I do all of this in one command, if so, what is it?"}, {"role": "assistant", "content": "Just go with:\n$ git cherry-pick another_branch\n\nThis will cherry-pick the last commit from another_branch.\nBranches in git are just references to the last commit in that branch, you can use them instead of commit SHAs in your commands."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  -S[<keyid>]  --gpg-sign[=<keyid>]  --no-gpg-sign"}, {"role": "assistant", "content": "GPG-sign commits. The keyid argument is optional and\ndefaults to the committer identity; if specified, it must be\nstuck to the option without a space. --no-gpg-sign is useful to\ncountermand both commit.gpgSign configuration variable, and\nearlier --gpg-sign ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  --src-prefix=<prefix>"}, {"role": "assistant", "content": "Show the given source prefix instead of \"a/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Force Git submodules to always stay current\nI love git submodules.  Also, I hate git submodules.  What I love about them is how it enables to you to cleanly compartmentalize dependencies etc.  I get the point of having them point to a specific commit on a repo, I do.  But in my case, I'm building a library that will be used in another project, so I want to keep it in that seperate repo.\nHowever, the annoyance comes when I'm working on a daily basis on this library and I constantly have to switch back to the app using my library to commit the pointer update.\nSo, is it possible to have a git submodule just always be on the head of the repo it's pointing at while I'm constantly updating and adding to this library?"}, {"role": "assistant", "content": "As I mention in \"git submodule tracking latest\", you can since git 1.8.2 (March 2013) make a submodule track the HEAD of branch:\ngit submodule add -b <branch> <repository> [<path>]\n\nA submodule SHA1 is still recorded in the parent repo as a gitlink (special entry in the index)\nBut a git submodule update --remote will update that entry to the SHA1 matching the HEAD of a branch of the submodule remote repo.\nIf you have an existing submodule, you can make it follow a branch with:\ncd /path/to/your/parent/repo\ngit config -f .gitmodules submodule.<path>.branch <branch>\n\ncd path/to/your/submodule\ngit checkout -b <branch> --track origin/<branch>\n  # if the master branch already exist:\n  git branch -u origin/<branch> <branch>\n\ncd /path/to/your/parent/repo\ngit add path/to/your/submodule\ngit commit -m \"Make submodule tracking <branch>\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  git checkout [<branch>]"}, {"role": "assistant", "content": "To prepare for working on <branch> , switch to it by updating\nthe index and the files in the working tree, and by pointing HEAD at the branch. Local modifications to the files in the\nworking tree are kept, so that they can be committed to the <branch> . If <branch> is not found but there does exist a tracking branch in\nexactly one remote (call it <remote> ) with a matching name and --no-guess is not specified, treat as equivalent to $ git checkout -b <branch> --track <remote>/<branch> You could omit <branch> , in which case the command degenerates to\n\"check out the current branch\", which is a glorified no-op with\nrather expensive side-effects to show only the tracking information,\nif it exists, for the current branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  git diff HEAD:file1 file2"}, {"role": "assistant", "content": "compares an (o)bject and a (w)ork tree entity;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: How do I pull a tagged revision into my fork?\n\nI have a fork of a project on github where the main trunk was recently tagged.  I want to pull the code from the tagged revision into my fork.  How would I do that?"}, {"role": "assistant", "content": "Once you have the tag in local repository you can do something like\n\ngit merge tags/yourtag\n\nIf you don't have the \"trunk\" tags locally, you can fetch it using\n\ngit fetch remote-url \"refs/tags/*:refs/tags/*\"\n\nOr by setting up the remote\n\ngit remote add upstream remote-url\n\nand fetching the stuff using\n\ngit fetch -t upstream\n\nI think, though, using\n\ngit remote update\n\nwill have similar effect."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to know if there is a git rebase in progress?\nWhen I start a git rebase -i, I can issue commands like git rebase --continue, or git rebase --abort. Those commands only work if a rebase is in progress.\nHow can I know if there is a rebase in progress?\n(I would greatly appreciate some details on how rebase works internally; what does git do to a repo that gives it the \"rebase in progress\" status,?)"}, {"role": "assistant", "content": "Update 2021:\nAs I mentioned in \"git stash is slow on windows\", with Git for Windows 2.19 (Sept. 2018), git stash (and git rebase) are no longer script-only, but actually a binary compiled with git.exe.\nTim's answer illustrates how it is still difficult to ascertain if a rebase is in progress.\nThat was discussed in the mailing list, leading to patch like \"status: rebase and merge can be in progress at the same time\":\n\nSince git rebase -r was introduced, that is possible.\nBut our machinery did not think that possible, and failed to say anything about the rebase in progress when in the middle of a merge.\n\nThere was a case of \"rebase in progress\" detection before that (2016), with \"worktree.c: check whether branch is rebased in another worktree\"\nThis function find_shared_symref() is used in a couple places:\n\n\nin builtin/branch.c: it's used to detect if a branch is checked out elsewhere and refuse to delete the branch.\nin builtin/notes.c: it's used to detect if a note is being merged in another worktree\nin branch.c, the function die_if_checked_out() is actually used by \"git checkout\" and \"git worktree add\" to see if a branch is already checked out elsewhere and refuse the operation.\n\nIn cases 1 and 3, if a rebase is ongoing \"HEAD\" will be in detached mode.\nfind_shared_symref() fails to detect it and declares \"no branch is checked out here\", which is not really what we want.\n\n\nOriginal answer: 2010\nFor one thing, there is a ORIG_HEAD in place during a rebase (but that is not limited to the rebase command)\nBut you can also look at the 2010 Git 1.7.0 git-rebase.sh script itself (which is as \"internal\" as you can get ;) ).\nLines like those can give you another clue:\ndotest=\"$GIT_DIR\"/rebase-merge\ntest -d \"$dotest\" -o -d \"$GIT_DIR\"/rebase-apply || die \"No rebase in progress?\"\n\nsabgenton comments:\n\nThe folder rebase-apply seems to appear with rebase,\nbut a folder rebase-merge shows up only with with rebase -i.\n\nAnd hippy also comments, in 2017, that:\n\nThe coding guidelines discourage the usage of -o (see Documentation/CodingGuidelines), so the correct way now (2017, but also since 2011, Git 1.7.6) is:\n(test -d \".git/rebase-merge\" || test -d \".git/rebase-apply\") || die \"No rebase in progress?\"\n\n\nJelaby suggests in the comments:\n\n(test -d \"$(git rev-parse --git-path rebase-merge)\" || \\\n test -d \"$(git rev-parse --git-path rebase-apply)\" )\n\nThis correctly handles worktrees and unusual or non-standard layouts that don't have a .git directory, and also allows you to run this test from a subdir of the working directory.\n\nThat is because the git rev-parse --git-path <path>: does resolve \"$GIT_DIR/<path>\".\nAnd Elizandro - SparcBR adds in the comments:\n\nCould also redirect the error to null:\n(test -d \"$(git rev-parse --git-path rebase-merge)\" || test -d \"$(git rev-parse --git-path rebase-apply) 2>/dev/null\"\n\n\n\nGit 2.6+  (Q3 2015) will print more information during a rebase:\nSee commit 592e412, commit 84e6fb9 (06 Jul 2015), commit 84e6fb9 (06 Jul 2015), and commit df25e94, commit 05eb563 (30 Jun 2015) by Guillaume Pag\u00e8s (gitster).\n(Merged by Junio C Hamano -- gitster -- in commit 178d2c7, 03 Aug 2015)\n\nstatus: give more information during rebase -i\n\n\ngit status gives more information during rebase -i, about the list of commands that are done during the rebase.\nIt displays:\n\nthe last two commands executed and\nthe next two lines to be executed.\n\nIt also gives hints to find the whole files in .git directory.\n\n\nTrying and detect the prompt won't work with Git 2.26+, as shown in commit 6d04ce7\n\"git rebase\" has learned to use the merge backend (i.e. the machinery that drives \"rebase -i\") by default, while allowing \"--apply\" option to use the \"apply\" backend (e.g. the moral equivalent of \"format-patch piped to am\").\n(The rebase.backend configuration variable can be set to customize.)\nSee commit 10cdb9f, commit 2ac0d62, commit 8295ed6, commit 76340c8, commit 980b482, commit c2417d3, commit 6d04ce7, commit 52eb738, commit 8af14f0, commit be50c93, commit befb89c, commit 9a70f3d, commit 93122c9, commit 55d2b6d, commit 8a997ed, commit 7db00f0, commit e98c426, commit d48e5e2 (15 Feb 2020), and commit a9ae8fd, commit 22a69fd (16 Jan 2020) by Elijah Newren (newren).\n(Merged by Junio C Hamano -- gitster -- in commit 8c22bd9, 02 Mar 2020)\n\ngit-prompt: change the prompt for interactive-based rebases\n\n\nIn the past, we had different prompts for different types of rebases:\nREBASE: for am-based rebases\nREBASE-m: for merge-based rebases\nREBASE-i: for interactive-based rebases\n\nIt's not clear why this distinction was necessary or helpful; when the\nprompt was added in commit e752019 (\"Improve bash prompt to detect\nvarious states like an unfinished merge\", 2007-09-30, Git v1.5.5-rc0), it simply added these three different types.\nPerhaps there was a useful purpose back then, but there have been some changes:\n\nThe merge backend was deleted after being implemented on top of the interactive backend, causing the prompt for merge-based rebases to change from REBASE-m to REBASE-i.\nThe interactive backend is used for multiple different types of non-interactive rebases, so the \"-i\" part of the prompt doesn't really mean what it used to.\nRebase backends have gained more abilities and have a great deal of overlap, sometimes making it hard to distinguish them.\nBehavioral differences between the backends have also been ironed out.\nWe want to change the default backend from am to interactive, which means people would get \"REBASE-i\" by default if we didn't change the prompt, and only if they specified --am or --whitespace or -C would they get the \"REBASE\" prompt.\nIn the future, we plan to have \"--whitespace\", \"-C\", and even \"--am\"   run the interactive backend once it can handle everything the am-backend can.\n\nFor all these reasons, make the prompt for any type of rebase just be \"REBASE\".\n\n\nSince Git 2.17 (March 2018), you also have:\ngit rebase --show-current-patch\n\nIt shows the content of .git/REBASE_HEAD during an interactive rebase which can be paused during conflict."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Where do the settings in my Git configuration come from?\nI've noticed that I have two listings for core.autocrlf when I run git config -l\n$ git config -l\ncore.symlinks=false\ncore.autocrlf=false\ncolor.diff=auto\ncolor.status=auto\ncolor.branch=auto\ncolor.interactive=true\npack.packsizelimit=2g\nhelp.format=html\nhttp.sslcainfo=/bin/curl-ca-bundle.crt\nsendemail.smtpserver=/bin/msmtp.exe\ndiff.astextplain.textconv=astextplain\nrebase.autosquash=true\nuser.name=name\n[email\u00a0protected]\ncore.autocrlf=true\n\nThose last three (from user.name down) are the only ones in my C:\\users\\username\\.gitconfig file. Where are all of the other ones coming from?  Why is core.autocrlf listed twice?\nThis is with MSysGit 1.8.3, and I also have Sourcetree installed (Windows\u00a07). In Sourcetree I have unchecked the \"Allow Sourcetree to modify your global Git config files\""}, {"role": "assistant", "content": "Git checks four places for a configuration file:\n\nYour machine's system .gitconfig file.\nYour user .gitconfig file located at ~/.gitconfig.\nA second user-specific configuration file located at $XDG_CONFIG_HOME/git/config or $HOME/.config/git/config.\nThe local repository's configuration file .git/config.\n\nThe settings cascade in the following order, with each file adding or overriding settings defined in the file above it.\n\nSystem configuration.\nUser configuration.\nRepository-specific configuration.\n\nYou can see what each file has defined using the following commands:\n# System, applies to entire machine and all users\n$ git config --system --list\n$ git config --system --edit\n\n# User defined\n$ git config --global --list\n$ git config --global --edit\n\nYou can see what just the repository-specific file has defined by opening up the file .git/config for that repository.\nIf you're using MSysGit on Windows, you'll probably find your user ~/.gitconfig file where ever %homepath% points to if you use echo %homepath% from a Windows command prompt.\nFrom the documentation for git config:\n\nIf not set explicitly with --file, there are four files where git config will search for configuration options:\n\n$(prefix)/etc/gitconfig\nSystem-wide configuration file.\n$XDG_CONFIG_HOME/git/config\n\nSecond user-specific configuration file. If $XDG_CONFIG_HOME is\n  not set or empty, $HOME/.config/git/config will be used. Any\n  single-valued variable set in this file will be overwritten by\n  whatever is in ~/.gitconfig. It is a good idea not to create this\n  file if you sometimes use older versions of Git, as support for this\n  file was added fairly recently.\n\n~/.gitconfig\n\nUser-specific configuration file. Also called \"global\" configuration\n  file.\n\n$GIT_DIR/config\nRepository specific configuration file.\n\nIf no further options are given, all reading options will read all of\n  these files that are available. If the global or the system-wide\n  configuration file are not available they will be ignored. If the\n  repository configuration file is not available or readable, git config will exit with a non-zero error code. However, in neither case\n  will an error message be issued.\nThe files are read in the order given above, with last value found\n  taking precedence over values read earlier. When multiple values are\n  taken then all values of a key from all files will be used.\nAll writing options will per default write to the repository specific\n  configuration file. Note that this also affects options like\n  --replace-all and --unset. git config will only ever change\n  one file at a time.\nYou can override these rules either by command-line options or by\n  environment variables. The --global and the --system options will\n  limit the file used to the global or system-wide file respectively.\n  The GIT_CONFIG environment variable has a similar effect, but you\n  can specify any filename you want."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "'receive-pack': service not enabled for './.git'\n(Solved already, I'm writing this for the next guy)\nI was running git daemon on one computer and tried synchronizing with another.\nOn computer A, I ran:\ngit daemon --reuseaddr --base-path=. --export-all --verbose\n\nOn computer B, I ran:\ngit clone git://computerA/.git source # worked\ncd source\ngit pull # worked\ngit push # failed with \"fatal: The remote end hung up unexpectedly\"\n\nOn computer A, the daemon output is:\n[5596] Connection from 127.0.0.1:2476\n[5596] Extended attributes (16 bytes) exist <host=localhost>\n[5596] Request receive-pack for '/.git'\n[5596] 'receive-pack': service not enabled for './.git'\n[5444] [5596] Disconnected (with error)\n\nI'm going to post the soultion I found. If you have a more complete answer, please go ahead and add it."}, {"role": "assistant", "content": "Simply run\ngit daemon --reuseaddr --base-path=. --export-all --verbose --enable=receive-pack\n\n(on computer A, instead of the original git daemon command), and the push works.\nNote that you have to then run\ngit reset --hard\n\non computer A to make it \"see\" the changes from computer B.\nPost Script\nThe problem with doing a hard reset is that it overwrites whatever local changes you had on computer A.\nEventually I realized it would make much more sense to have a separate repository (a bare clone) that doesn't have any files in it, then have computer B push to it and computer A pull from it. This way it can work both ways and merge all the changes in a smooth fashion. You can even have two bare clones, one on each computer, and push-pull between them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Remove releases in GitLab\n\nI have a problem with my releases in GitLab.\nI created them in my project with tags. Now I want to remove them, so I deleted the associated tags but my releases are always displayed. I searched on Google and Stack Overflow but I can't find any solutions.\nHow can I remove these releases without their tags?"}, {"role": "assistant", "content": "Go to Project Overview -> Releases\nClick the release you want to delete\nScroll to the bottom. Find the tag icon. Click on the tag.\nThere is a trash can button for the tag. Deleting the tag will delete the release as well."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  --skip-to=<file>"}, {"role": "assistant", "content": "Start showing the diff for the given path, skipping all\nthe paths before it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Easy way to add 'copy to clipboard' to GitHub markdown?\n\nSpecifically, I have blocks of code for install that I want the user to be able to quickly copy and paste into a terminal. I'd like a button to 'copy to clipboard' for the code block. Since there's a 'copy to clipboard' button for the git clone URLs, I was wondering if I could piggy back off that or if not whether there was some relatively simple I could add to the MD to make this happen. Or is this simply not possible with the processing and 'safication' the MD text goes through?"}, {"role": "assistant", "content": "The copy button is now a reality (May 2021), as tweeted by Nat Friedman\n\nWe just added a \"Copy\" button to all code blocks on GitHub.\n\n\nTo create a copy button, make a Fenced code block as shown here, in a markdown document\n```\nfunction test() {\n  console.log(\"This code will have a copy button to the right of it\");\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --check"}, {"role": "assistant", "content": "Warn if changes introduce conflict markers or whitespace errors.\nWhat are considered whitespace errors is controlled by core.whitespace configuration.  By default, trailing whitespaces (including\nlines that consist solely of whitespaces) and a space character\nthat is immediately followed by a tab character inside the\ninitial indent of the line are considered whitespace errors.\nExits with non-zero status if problems are found. Not compatible\nwith --exit-code."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -B[<n>][/<m>]  --break-rewrites[=[<n>][/<m>]]"}, {"role": "assistant", "content": "Break complete rewrite changes into pairs of delete and\ncreate. This serves two purposes: It affects the way a change that amounts to a total rewrite of a file\nnot as a series of deletion and insertion mixed together with a very\nfew lines that happen to match textually as the context, but as a\nsingle deletion of everything old followed by a single insertion of\neverything new, and the number m controls this aspect of the -B\noption (defaults to 60%). -B/70% specifies that less than 30% of the\noriginal should remain in the result for Git to consider it a total\nrewrite (i.e. otherwise the resulting patch will be a series of\ndeletion and insertion mixed together with context lines). When used with -M, a totally-rewritten file is also considered as the\nsource of a rename (usually -M only considers a file that disappeared\nas the source of a rename), and the number n controls this aspect of\nthe -B option (defaults to 50%). -B20% specifies that a change with\naddition and deletion compared to 20% or more of the file\u2019s size are\neligible for being picked up as a possible source of a rename to\nanother file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Speeding up the initial git-svn fetch\nI have a big repository, 100,000+ revisions with a very high branching factor.  The initial fetch of the full SVN repository using git-svn has been running for around 2 months and it's only up to revision 60,000.  Is there any way to speed this thing up?\nI'm already regularly killing and restarting the fetch due to git-svn leaking memory like a sieve.  The transfer is occurring over the local LAN, so link speed shouldn't be an issue.  The repository is on a dedicated machine backed by dedicated fiber channel arrays so the server should have plenty of oomph.  The only other thing that I can think of is do the clone from a local copy of the SVN repository.  \nWhat have other people done in similar circumstances?"}, {"role": "assistant", "content": "At work I use git-svn against a ~170000 revision SVN repo.  What I did was use git-svn init + git-svn fetch -r... to limit my initial fetch to a reasonable number of revisions.  You must be careful to choose a revision that is actually in the branch you want.  Everything is fully functional even with truncated history except git-blame, which obviously attributes all the lines older than your starting rev to the first rev.\nYou can further speed this up with ignore-paths to prune out subtrees that you don't want.\nYou can add more revisions later, but it will be painful.  You will have to reset the rev-map (sadly I even wrote git-svn reset and I can't say offhand if it will remove all revisions, so it may be by hand).  Then git-svn fetch more revisions and git-filter-branch to reparent your old root to the new tree.  That will rewrite every commit but it won't affect the source blobs themselves.  You have to do similar surgery when people undertake big reorgs of the svn repo.\nIf you actually need all of the revisions (for example for a migration) then you should be looking at some flavor of svn-fast-export + git-fast-import.  There may be one that adds rev tags to match git-svn, in which case you could fast-import and then just graft in the svn remote.  Even if the existing svn-fast-export options don't have that feature, you can probably add it before your original clone completes!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Bash in Git for Windows: Weirdness when running a command with CMD.exe /C with args\nThis is more of an annoyance rather than a problem but I would very much like to understand the semantics here. \nAll I want to do is to run an arbitrary command on a temporary command-prompt session which itself running under a bash session. \nMy success rate is 50/50 as some command works as expected whereas others not so much. \nI think the problem may lie around arguments not lining up properly (i.e. missing or merged arguments)\nI'll try to explain what I mean by weird by a series of commands and responses. (I'm trying to get the word test to be printed on the screen.)\nI'm running these under GNU bash, version 3.1.0(1)-release (i686-pc-msys) Bundled with Git-1.8.4:\nFirst attempt:\n$ cmd /c echo test\nMicrosoft Windows [Version 6.1.7601]\nCopyright (c) 2009 Microsoft Corporation.  All rights reserved.\nc:\\>\n\nSecond attempt:\n$ cmd '/c echo test'\ntest\"\n\nThird attempt:\n$ cmd \"/c echo test\"\ntest\"\n\nFourth attempt:\n$ cmd /c\\ echo\\ test\ntest\"\n\nFifth attempt:\n$ cmd \"/c echo\" test\n'echo\" test' is not recognized as an internal or external command,\noperable program or batch file.\n\nI'd really appreciate any pointers or insights into the behaviors above as this is unintuitional to me and driving me crazy!\nEdit:\nThere is another question that appears similar to this, but it really isn't, mainly because it's about running batch files through CMD /C that doesn't require any arguments. \nIt doesn't really answer my question about how to provide arguments properly to windows command line apps, and even though the examples are about CMD /C, the answer here can be applied to many other Windows command line apps as well."}, {"role": "assistant", "content": "This is actually documented in the ReleaseNotes file (in the top level folder of your installed Git for Windows)\n\nAlso, extra care has to be paid to pass Windows programs Windows paths, as they have no clue about MSys style POSIX paths -- You can use something like $(cmd //c echo \"$POSIXPATH\").\n\nIf you use cmd //c echo test it works as expected.\n$ cmd //c echo test\ntest\n\nThe cause is to do with trying to ensure that posix paths end up being passed to the git utilities properly. For this reason, Git for Windows includes a modified MSYS layer that affects command arguments. You should note that it is not intended that the bash shell and tools provided with Git for Windows be used as general purpose unix tools for Windows. If you want a general purpose unix-style toolset then you should install MSYS or cygwin. The Git Bash shell is setup for working with git and sometimes that shows."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Post Commit Hook Not Running\n\nMy post commit hook is not running after git.  I have verified that the hook does work if I just run it from the terminal.  The code in the hook is:\n#!/bin/sh\n#.git/hooks/post-commit\n# An example hook script that is called after a successful\n# commit is made.\n#\n# To enable this hook, rename this file to \"post-commit\".\n\nperl -pi -e 's/([a-f0-9]+)$/'$( git rev-parse HEAD )/ ../../config/commit.git\n\nI did rename the file to post-commit in ./.git/hooks/ and the permissions are -rwxr-x-r-x so I am not sure why it doesn't work."}, {"role": "assistant", "content": "I'll leave this here as an answer because I stumbled upon my own answer for when my post-commit hook wasn't running: \nchmod +x .git/hooks/post-commit\nProbably applies to any kind of hook. \nIn fact, probably applies to any kind of script."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  dangling object"}, {"role": "assistant", "content": "An unreachable object which is not reachable even from other unreachable objects; a\ndangling object has no references to it from any\nreference or object in the repository ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Cannot determine the organization name for this 'dev.azure.com' remote URL\nSo I just updated to a new Visual Studio version and I am no longer able to push/pull from/to my Azure Repo (cloning works fine). The exact error I get is\n\nCannot determine the organization name for this 'dev.azure.com' remote\nurl. ensure the credential.usehttppath configuration value is set,\nor set the organization name as the user in the remote url\n'{org}@dev.azure.com'.\n\nand only the pull command shows me this error, all the others are failing with git fatal error. I messed with my Credentials Manager cos I suspected it might be the one causing the problem but no luck."}, {"role": "assistant", "content": "What fixed the issue for me is going to Tools > Options > Source Control > Git Global Settings, there I changed all 4 dropdowns which were still selected as \"Unset\":\n\nPrune remote branches during fetch - False\nRebase local branch when pulling - False\nCryptographic network provider - OpenSSL\nCredential helper - GCM Core\n\nSource: https://learn.microsoft.com/en-us/visualstudio/ide/git-with-visual-studio?view=vs-2019#personalize-your-git-settings\nNote: These are the settings my organization requires. You might have to tweak them around according to your exact issue."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Merge conflict marker encountered\nSourceTree Merge Conflict\nI have created a local \"Test\" branch in SourceTree for testing some new features and everything seemed to work fine. Then I merged the \"master\" branch into my local \"Test\" branch and unfortunately, pushed it. But since then by running \"ng serve\" I'm getting the following error:    \n\n52 <<<<<<< HEAD\napp/app.module.ts:54:1 - error TS1185: Merge conflict marker encountered.\n\n54 =======\napp/app.module.ts:56:1 - error TS1185: Merge conflict marker encountered.\n\n56 >>>>>>> master\napp/example/example.module.ts:9:1 - error TS1185: Merge conflict marker encountered.\n\n9 <<<<<<< HEAD\n\nI have no idea what's going on here. Is there any way to solve this issue easily?"}, {"role": "assistant", "content": "For anyone coming from Google, I had a similar issue in React, but I was 100% confident that I had already resolved all conflicts.\nI fixed it by switching to another branch, then switching back to the original.\n\nIf this still does not fix the issue, remove the Node Modules cache with rm -Rf node_modules/.cache"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --[no-]fsmonitor-valid"}, {"role": "assistant", "content": "When one of these flags is specified, the object names recorded\nfor the paths are not updated. Instead, these options\nset and unset the \"fsmonitor valid\" bit for the paths. See\nsection \"File System Monitor\" below for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  zebra"}, {"role": "assistant", "content": "Blocks of moved text are detected as in blocks mode. The blocks\nare painted using either the color.diff.{old,new}Moved color or color.diff.{old,new}MovedAlternative . The change between\nthe two colors indicates that a new block was detected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Deleting SSH keys terminal\n\nHow would I delete github_rsa.pub and id_rsa.pub SSH certificates from my mac computer using mac terminal?"}, {"role": "assistant", "content": "Depending on where they are located:\nrm github_rsa.pub\n\nand\nrm id_rsa.pub\n\nIf they are in the default location then you can do\nrm ~/.ssh/github_rsa.pub\n\nand\nrm ~/.ssh/id_rsa.pub\n\nHowever this is likely answered already elsewhere."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I tell who forked my repository on GitHub?\n\nIs there a way to know who has forked my repository on GitHub? I can see the number of forks, but I'd like to know who forked my repository and what kind of changes they made to it.\nI know they can send me a pull request if they're interested in contributing back to my repository, but is there some other way for me to find out who forked my repository?"}, {"role": "assistant", "content": "Clicking the number of forks shows you the full network. From there you can click \"members\" to see who forked the repo. Example for ExpressJS: https://github.com/expressjs/express/network/members."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -S<string>"}, {"role": "assistant", "content": "Look for differences that change the number of occurrences of\nthe specified string (i.e. addition/deletion) in a file.\nIntended for the scripter\u2019s use. It is useful when you\u2019re looking for an exact block of code (like a\nstruct), and want to know the history of that block since it first\ncame into being: use the feature iteratively to feed the interesting\nblock in the preimage back into -S , and keep going until you get the\nvery first version of the block. Binary files are searched as well."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I push amended commit to the remote Git repository?\nWhen I've worked a bit with my source code, I did my usual thing commit and then I pushed to a remote repository. But then I noticed I forgot to organize my imports in the source code. So I do the amend command to replace the previous commit:\n> git commit --amend\n\nUnfortunately the commit can't be pushed back to the repository. It is rejected like this:\n> git push origin\nTo //my.remote.repo.com/stuff.git/\n ! [rejected]        master -> master (non-fast forward)\nerror: failed to push some refs to '//my.remote.repo.com/stuff.git/'\n\nWhat should I do? (I can access the remote repository.)"}, {"role": "assistant", "content": "I actually once pushed with --force and .git repository and got scolded by Linus BIG TIME.  In general this will create a lot of problems for other people. A simple answer is \"Don't do it\".\nI see others gave the recipe for doing so anyway, so I won't repeat them here. But here is a tip to recover from the situation after you have pushed out the amended commit with --force (or +master).\n\nUse git reflog to find the old commit that you amended (call it old, and we'll call the new commit you created by amending new).\nCreate a merge between old and new, recording the tree of new, like git checkout new && git merge -s ours old.\nMerge that to your master with git merge master\nUpdate your master with the result with git push . HEAD:master\nPush the result out.\n\nThen people who were unfortunate enough to have based their work on the commit you obliterated by amending and forcing a push will see the resulting merge will see that you favor new over old. Their later merges will not see the conflicts between old and new that resulted from your amending, so they do not have to suffer."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-filter-branch - Rewrite branches"}, {"role": "assistant", "content": "PERFORMANCE The performance of git-filter-branch is glacially slow; its design makes it\nimpossible for a backward-compatible implementation to ever be fast: In editing files, git-filter-branch by design checks out each and\nevery commit as it existed in the original repo.  If your repo has 10^5 files and 10^5 commits, but each commit only modifies five\nfiles, then git-filter-branch will make you do 10^10 modifications,\ndespite only having (at most) 5*10^5 unique blobs. If you try and cheat and try to make git-filter-branch only work on\nfiles modified in a commit, then two things happen you run into problems with deletions whenever the user is simply\ntrying to rename files (because attempting to delete files that\ndon\u2019t exist looks like a no-op; it takes some chicanery to remap\ndeletes across file renames when the renames happen via arbitrary\nuser-provided shell) even if you succeed at the map-deletes-for-renames chicanery, you\nstill technically violate backward compatibility because users\nare allowed to filter files in ways that depend upon topology of\ncommits instead of filtering solely based on file contents or\nnames (though this has not been observed in the wild). Even if you don\u2019t need to edit files but only want to e.g. rename or\nremove some and thus can avoid checking out each file (i.e. you can\nuse --index-filter), you still are passing shell snippets for your\nfilters.  This means that for every commit, you have to have a\nprepared git repo where those filters can be run.  That\u2019s a\nsignificant setup. Further, several additional files are created or updated per commit\nby git-filter-branch.  Some of these are for supporting the\nconvenience functions provided by git-filter-branch (such as map()),\nwhile others are for keeping track of internal state (but could have\nalso been accessed by user filters; one of git-filter-branch\u2019s\nregression tests does so).  This essentially amounts to using the\nfilesystem as an IPC mechanism between git-filter-branch and the\nuser-provided filters.  Disks tend to be a slow IPC mechanism, and\nwriting these files also effectively represents a forced\nsynchronization point between separate processes that we hit with\nevery commit. The user-provided shell commands will likely involve a pipeline of\ncommands, resulting in the creation of many processes per commit.\nCreating and running another process takes a widely varying amount\nof time between operating systems, but on any platform it is very\nslow relative to invoking a function. git-filter-branch itself is written in shell, which is kind of slow.\nThis is the one performance issue that could be backward-compatibly\nfixed, but compared to the above problems that are intrinsic to the\ndesign of git-filter-branch, the language of the tool itself is a\nrelatively minor issue. Side note: Unfortunately, people tend to fixate on the\nwritten-in-shell aspect and periodically ask if git-filter-branch\ncould be rewritten in another language to fix the performance\nissues.  Not only does that ignore the bigger intrinsic problems\nwith the design, it\u2019d help less than you\u2019d expect: if\ngit-filter-branch itself were not shell, then the convenience\nfunctions (map(), skip_commit(), etc) and the --setup argument\ncould no longer be executed once at the beginning of the program\nbut would instead need to be prepended to every user filter (and\nthus re-executed with every commit). The git filter-repo tool is\nan alternative to git-filter-branch which does not suffer from these\nperformance problems or the safety problems (mentioned below). For those\nwith existing tooling which relies upon git-filter-branch, git\nfilter-repo also provides filter-lamely ,\na drop-in git-filter-branch replacement (with a few caveats).  While\nfilter-lamely suffers from all the same safety issues as\ngit-filter-branch, it at least ameliorates the performance issues a\nlittle."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do you hide .git project directories?\nNow that I have nginx setup I need to be able to hide my .git directories. What kind of rewrite would I need to stop prying eyes? And where in the server {} or http {} block would it go?"}, {"role": "assistant", "content": "http {\n  server {\n    location ~ /\\.git {\n      deny all;\n    }\n  }\n}\n\nThis location directive will deny access to any .git directory in any subdirectory.\nNote: This location block must be before your main location block, so that it can be evaluated first."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I update the password for Git?\nI'm using BitBucket with Xcode and Git for version control, and recently I changed all of my passwords (thanks Adobe!).\nUnsurprisingly, I'm no longer able to push my local commits to my repository on BitBucket (Authentication failed for 'https://______.git'), but I'm forgetting how to update the cached password on my iMac. Somehow I've been unable to find it on Google or Stack\u00a0Overflow, though it seems to me it should be rather straightforward..."}, {"role": "assistant", "content": "To fix this on macOS, you can use \ngit config --global credential.helper osxkeychain\n\nA username and password prompt will appear with your next Git action (pull, clone, push, etc.).\nFor Windows, it's the same command with a different argument:\ngit config --global credential.helper wincred"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_AUTHOR_NAME"}, {"role": "assistant", "content": "The human-readable name used in the author identity when creating commit or\ntag objects, or when writing reflogs. Overrides the user.name and author.name configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-check-ignore - Debug gitignore / exclude files  1"}, {"role": "assistant", "content": "None of the provided paths are ignored."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git Error : 'upstream' does not appear to be a git repository\nI'm very new to Git, so facing some issues with it correct usage.\nHere is my scenario.\nI have a fork of my master repository and cloned it into my local.\nIn that, I have 2 branches for different fixes.\nWhen I commit, I saw a statement in the git-we saying that I'm 3 commits ahead and around 20 commits behind.\nI understand that my fork is not in sync with master. Also I need to merge the two branches too (or should i do it?)\nI used the windows client to syncing. But seems I'm not following the Git way. So, I tried to follow the steps described in https://help.github.com/articles/syncing-a-fork/ which is giving me an error as follows  (I'm using windows).\n $>git fetch upstream\n fatal: 'upstream' does not appear to be a git repository\n fatal: Could not read from remote repository.\n\n Please make sure you have the correct access rights\n and the repository exists.\n\nI'm a bit confused.\nPlease help me with steps I should follow in this scenario.\n@HuStmpHrrr\nSorry for adding the details in comments\nI'll modify the question for readability\nBy executing the command:\n  $>git remote  returning two values\n  acme-development (which the name of my actual/main repository, from where I forked) and\n  origin\n\n\nAdding some more info.\n\nAfter making a fetch, I tried a origin/master merge on to my master\nPlease see the screenshot\n\nBut, if I login to my Github online account, it is saying a different story.\n\nMy git client says that the local repo is up to date.\nBut the online git says that we are 42 commits behind and 7 commits ahead."}, {"role": "assistant", "content": "The article you link to (though it may have changed since you asked) starts with a reference to https://help.github.com/articles/configuring-a-remote-for-a-fork/. If you complete this you will have a new remote repository named upstream pointing to the original repository which you forked, and git fetch upstream will work."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --inter-hunk-context=<lines>"}, {"role": "assistant", "content": "Show the context between diff hunks, up to the specified number\nof lines, thereby fusing hunks that are close to each other.\nDefaults to diff.interHunkContext or 0 if the config option\nis unset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why does Git have a tea time?\nIn the date.c file in Git's source code, I note the following structure of special time names:\nstatic const struct special {\n    const char *name;\n    void (*fn)(struct tm *, struct tm *, int *);\n} special[] = {\n    { \"yesterday\", date_yesterday },\n    { \"noon\", date_noon },\n    { \"midnight\", date_midnight },\n    { \"tea\", date_tea },\n    { \"PM\", date_pm },\n    { \"AM\", date_am },\n    { \"never\", date_never },\n    { \"now\", date_now },\n    { NULL }\n};\n\nI understand the utility (somewhat) of most of these, but why have a \"tea\" time (it evaluates to 17:00 hours)? Is this just an Easter egg of sorts?"}, {"role": "assistant", "content": "This commit might give you a clue as to why it was included:\nhttps://github.com/git/git/commit/a8aca418d6484400d6804e22717bd49ca06c28e9\nI think it was suggested initially as a joke, but actually implemented to demonstrate the ability for users to include their own custom time/date periods:\nOn Fri, 18 Nov 2005, David Roundy wrote:\n> Don't forget \"high noon\"!  (and perhaps \"tea time\"?)  :)\n\n\nDone.\n\n    [torvalds@g5 git]$ ./test-date \"now\" \"midnight\" \"high noon\" \"tea-time\"\n    now -> bad -> Wed Dec 31 16:00:00 1969\n    now -> Fri Nov 18 08:50:54 2005\n\n    midnight -> bad -> Wed Dec 31 16:00:00 1969\n    midnight -> Fri Nov 18 00:00:00 2005\n\n    high noon -> bad -> Wed Dec 31 16:00:00 1969\n    high noon -> Thu Nov 17 12:00:00 2005\n\n    tea-time -> bad -> Wed Dec 31 16:00:00 1969\n    tea-time -> Thu Nov 17 17:00:00 2005\n\nThanks for pointing out tea-time.\n\nThis is also written to easily extended to allow people to add their own\nimportant dates like Christmas and their own birthdays.\n\nSigned-off-by: Linus Torvalds <[email\u00a0protected]>\nSigned-off-by: Junio C Hamano <[email\u00a0protected]>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-bundle"}, {"role": "assistant", "content": "The bundle file format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GIT get the commit hash prior to a specific commit\ngit 1.7.1\ngit show <hash>:<file> gives me the file based on the commit hash provided\nI am trying to figure out how to bet the file of the previous commit before the one who's hash I have.\nI know I can always use the log to get all hashes and figure out the one i need but that's not a good solution in my case as I am trying to minimise the number of commands I need to do for performance issues.\nWas wondering if there is a simple way."}, {"role": "assistant", "content": "Use git show HEAD^1. You can replace HEAD with your commit-hash\nEdit to take multiple parents into account:\nIn case you want to see all the parents for a commit hash, you can use git rev-list --parents -n 1 <commithash> or use git show as @Bhaskar suggested in the comments to the question.\nThere are other ways as well as explained here."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git how to checkout a commit of a branch\nHow can I check out a commit version of a branch in git? \nFor example, my branch, Dev, has a commit ad4f43af43e. How can I check out that commit? Not just a single file, but a whole branch. \nI searched online and found: git checkout <commit>, but it didn't specify branch name"}, {"role": "assistant", "content": "git checkout <hash>         # non named commit\ngit checkout <branch_name>  # named commit\n\nThe two lines above will place the HEAD pointer on the given commit. You should know that a branch name is a commit, except it can evolve if a new commit is added when you're on that branch.\nIf you want to place your branch Dev on the commit ad4f43af43e you can do this\ngit branch -f Dev ad4f43af43e\n\nBe careful! This is dangerous because you may lose commits."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --parents"}, {"role": "assistant", "content": "Create parent folders. This parameter is equivalent to the parameter\n--parents on svn cp commands and is useful for non-standard repository\nlayouts."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-revert - Revert some existing commits  -e  --edit"}, {"role": "assistant", "content": "With this option, git revert will let you edit the commit\nmessage prior to committing the revert. This is the default if\nyou run the command from a terminal."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-check-ignore"}, {"role": "assistant", "content": "Debug gitignore / exclude files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Cannot connect to the Docker daemon at tcp://localhost:2375/. Is the docker daemon running. On GitLab\n\nI'm trying to build the CI pipeline in GitLab. I'd like to ask about making the docker work in GitLab CI.\nFrom this issue: https://gitlab.com/gitlab-org/gitlab-runner/issues/4501#note_195033385\nI'm follow the instruction for both ways. With TLS and not used TLS.\nBut It's still stuck. Which in same error\nCannot connect to the Docker daemon at tcp://localhost:2375/. Is the docker daemon running\n\nI've try to troubleshooting this problem. follow by below,\n\nenable TLS\n\nWhich used .gitlab-ci.yml and config.toml for enable TLS in Runner.\nThis my .gitlab-ci.yml:\nimage: docker:19.03\nvariables:\n  DOCKER_HOST: tcp://localhost:2375/\n  DOCKER_DRIVER: overlay2\n  DOCKER_TLS_CERTDIR: \"/certs\"\n  IMAGE_NAME: image_name\n\nservices:\n  - docker:19.03-dind\n\nstages:\n  - build\n\npublish:\n  stage: build\n  script:\n    - docker build -t$IMAGE_NAME:$(echo $CI_COMMIT_SHA | cut -c1-10) .\n    - docker push $IMAGE_NAME:$(echo $CI_COMMIT_SHA | cut -c1-10)\n  only:\n    - master   \n\nAnd this my config.toml:\n[[runners]]\n  name = MY_RUNNER\n  url = MY_HOST\n  token = MY_TOKEN_RUNNER\n  executor = \"docker\"\n  [runners.custom_build_dir]\n  [runners.docker]\n    tls_verify = false\n    image = \"docker:stable\"\n    privileged = true\n    disable_entrypoint_overwrite = false\n    oom_kill_disable = false\n    disable_cache = false\n    volumes = [\"/certs/client\", \"/cache\"]                      \n    shm_size = 0\n\n\nDisable TLS\n\n.gitlab-ci.yml:\nimage: docker:18.09\nvariables:\n  DOCKER_HOST: tcp://localhost:2375/\n  DOCKER_DRIVER: overlay2\n  DOCKER_TLS_CERTDIR: \"\"\n  IMAGE_NAME: image_name\n\nservices:\n  - docker:18.09-dind\n\nstages:\n  - build\n\npublish:\n  stage: build\n  script:\n    - docker build -t$IMAGE_NAME:$(echo $CI_COMMIT_SHA | cut -c1-10) .\n    - docker push $IMAGE_NAME:$(echo $CI_COMMIT_SHA | cut -c1-10)\n  only:\n    - master   \n\nAnd this my config.toml:\n[[runners]]\n  environment = [\"DOCKER_TLS_CERTDIR=\"]\n\nAnyone have idea?\n\nSolution\nYou can see at the accepted answer.     Moreover, In my case and\nanother one. Looks like the root cause it from the Linux server that\nGitLab hosted doesn't has permission to connect Docker. Let's check\nthe permission connectivity between GitLab and Docker on your server."}, {"role": "assistant", "content": "You want to set DOCKER_HOST to tcp://docker:2375. It's a \"service\", i.e. running in a separate container, by default named after the image name, rather than localhost.\nHere's a .gitlab-ci.yml snippet that should work:\n# Build and push the Docker image off of merges to master; based off\n# of Gitlab CI support in https://pythonspeed.com/products/pythoncontainer/\ndocker-build:\n  stage: build\n\n  image:\n    # An alpine-based image with the `docker` CLI installed.\n    name: docker:stable\n\n  # This will run a Docker daemon in a container (Docker-In-Docker), which will\n  # be available at thedockerhost:2375. If you make e.g. port 5000 public in Docker\n  # (`docker run -p 5000:5000 yourimage`) it will be exposed at thedockerhost:5000.\n  services:\n   - name: docker:dind\n     alias: thedockerhost\n\n  variables:\n    # Tell docker CLI how to talk to Docker daemon; see\n    # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker-executor\n    DOCKER_HOST: tcp://thedockerhost:2375/\n    # Use the overlayfs driver for improved performance:\n    DOCKER_DRIVER: overlay2\n    DOCKER_TLS_CERTDIR: \"\"\n\n  script:\n    # Download bash:\n    - apk add --no-cache bash python3\n    # GitLab has a built-in Docker image registry, whose parameters are set automatically.\n    # See https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#using-the-gitlab-contai\n    #\n    # CHANGEME: You can use some other Docker registry though by changing the\n    # login and image name.\n    - docker login -u \"$CI_REGISTRY_USER\" -p \"$CI_REGISTRY_PASSWORD\" \"$CI_REGISTRY\"\n    - docker build -t \"$CI_REGISTRY_IMAGE\" .\n    - docker push \"$CI_REGISTRY_IMAGE\"\n\n  # Only build off of master branch:\n  only:\n    - master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %gs"}, {"role": "assistant", "content": "reflog subject"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Select Git branch for TeamCity Build\nI'm wondering how to select the branch to build against using Team City 8.1.\nMy VCS root (Git) is set to Default:  \"master\" and Branch specifications are\n+:refs/heads/develop\n+:refs/heads/feature/*\n+:refs/heads/hotfix/*\n+:refs/heads/master\n+:refs/heads/release/*\n\nI have a CI build set up that automatically builds anything that is checked in, which is working exactly how I want.\nWhat I'd like to do is create a scheduled QA build/deployment against the \"develop\" branch.   I see that if I click the ellipsis next to the run button, I can choose the branch on the \"Changes\" tab, but I'm unable to determine how to make this \"stick\".  Is this possible, or am I going about this wrong?\nThanks,\nJoe"}, {"role": "assistant", "content": "Based on @biswajit-86 's feedback and some other information I found while googling this, I was able to get this to work.   Here's what I did (image-heavy, sorry).  It's based on Team City 8.2 which seems to be set up a little differently than the examples I came across.\n1)  Set up a VCS root.  Key here is the %BranchName% parameter.\n\n2)  Create a Build template and use the VCS root that was just created.  I also added an MSBuild step as all of my builds need to run this.\n\n3)  Create a new build, based on the template.   As you can see here, the %BrachName% parameter that was created in step 1 is available.\n\n4) If you need to change this later, it's available here\n\nAnd that's pretty much it.  For my CI build, I left the branch name empty so any branch that is checked in triggers the MSBuild step.  For my QA build, I pass in \"develop\" as shown here and I have this set up on a daily schedule.   I also have a \"release\" build set up, but based on our naming conventions it looks like I need to update the build to point to the specific branch per release."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_AUTHOR_EMAIL"}, {"role": "assistant", "content": "The email address used in the author identity when creating commit or\ntag objects, or when writing reflogs. Overrides the user.email and author.email configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Remote branch on Visual Studio online doesn't appear on Visual Studio 2015 Team Explorer\nI have created a new Git repository on Visual Studio online. I have cloned on my computer and I have added it a project. After that, I have created a new branch called develop on Visual Studio online, and I have tried to check it out creating a new local branch but it doesn't appear on Team Explorer.\nThis is my Visual Studio online:\n\nAnd this is Visual Studio 2015 Team Explorer:\n\nWhy develop branch doesn't appear on Team Explorer?"}, {"role": "assistant", "content": "You can now do this in Visual Studio by going to the Synchronisation tab (Sync in the Team drop down menu) and clicking Fetch at the top."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git Checkout warning: unable to unlink files, permission denied\nI am aware that there are similar issues about git relating to the 'unable to unlink' warning, but I have not been able to use them.\nThe main difference is that this happened when I have not been dealing with submodules in any way (I have never dealt with them before).  I created a branch called 'upgrade', deleted my old framework files, and copied in the new ones.  I used git add -A, then committed everything.  When I tried to checkout the trunk branch, it responded with the following errors:\nwarning: unable to unlink requirements/views/sk/index.php: Permission denied\nwarning: unable to unlink requirements/views/sv/index.php: Permission denied\nwarning: unable to unlink requirements/views/zh/index.php: Permission denied\nwarning: unable to unlink requirements/views/zh_cn/index.php: Permission denied\nwarning: unable to unlink requirements/views/zh_tw/index.php: Permission denied\n\n...etc.  There are hundreds of them.\nAt first I thought this was simply a permissions problem, and so I added group write permissions to the entire requirements directory recursively, but there was no change.\nEdit: As suggested in an answer below, I attempted to do the same thing but with everything else closed.  I had no more luck than before.\nThis issue is particularly debilitating as I cannot move to trunk to get back to normal development."}, {"role": "assistant", "content": "In my first encounter with this error my user had rights to \"write\" to the file but not the containing directory. Check the permissions of the directory containing the file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-index-pack"}, {"role": "assistant", "content": "Build pack index file for an existing packed archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Unsupported URL protocol in git provider error\n\nI have two separate PCs that connect to the same Gitlab repo. Both running Visual Studio Update 3 and using Team Explorer with Git. On one PC, I have no problem updating the project and then pushing the commits to the remote repo. On the other PC however any operation (push or fetch or sync) will fail with an Unsupported URL protocol error, although originally I managed to clone the repo. I suspect it doesn't like something in the connection string, since I can commit and sync the repo using command line git (version 2.9.2 so fairly recent). What is the cause of this error and is there a workaround?"}, {"role": "assistant", "content": "I have checked the difference between the two local repos, and git remote -v on PC1 gives:  \n\norigin https://gitlab.com/ ...\n\nwhile on PC2:\n\norigin [email\u00a0protected]: ...\n\nAfter further investigation it appears that the old version of LibGit2 which VS2015 Update3 uses lacks SSH support. The first repo was the original and created in VS, the second repo was cloned via a command-line, hence the SSH connection string. \nThe workaround is to change the connection string in .git/config to  \n\nurl = https://gitlab.com/ ...\n\nIf one absolutely needs SSH than it is possible to recompile gitlib2, or use command line git which works. It might be possible to use other Git Source Providers in VS2015, however I haven't tested it. (for example Git Source Control Provider 2015)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  http.schannelCheckRevoke"}, {"role": "assistant", "content": "Used to enforce or disable certificate revocation checks in cURL\nwhen http.sslBackend is set to \"schannel\". Defaults to true if\nunset. Only necessary to disable this if Git consistently errors\nand the message is about checking the revocation status of a\ncertificate. This option is ignored if cURL lacks support for\nsetting the relevant SSL option at runtime."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  --verify-signatures  --no-verify-signatures"}, {"role": "assistant", "content": "Verify that the tip commit of the side branch being merged is\nsigned with a valid key, i.e. a key that has a valid uid: in the\ndefault trust model, this means the signing key has been signed by\na trusted key.  If the tip commit of the side branch is not signed\nwith a valid key, the merge is aborted. Only useful when merging."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-reset"}, {"role": "assistant", "content": "Reset current HEAD to the specified state"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Multiple GitHub Accounts & SSH Config\n\nI'm having some trouble getting two different SSH keys/GitHub accounts to play well together.  I have the following setup:\nRepos accessible from one account using [email\u00a0protected]:accountname\nRepos accessible from another account using [email\u00a0protected]:anotheraccount\nEach account has its own SSH key.  Both SSH keys have been added and I have created a config file.  I don't believe the config file is correct though.  I'm not quite sure how to specify that repos accessed using [email\u00a0protected]:accountname should use id_rsa and [email\u00a0protected]:anotheraccount should use id_rsa_anotheraccount."}, {"role": "assistant", "content": "Andy Lester's response is accurate but I found an important extra step I needed to make to get this to work. In trying to get two profiles set up, one for personal and one for work, my ~/.ssh/config was roughly as follows:\nHost me.github.com\n    HostName github.com\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/me_rsa\n\nHost work.github.com\n    HostName github.com\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/work_rsa\n\nMy work profile didn't take until I did a ssh-add ~/.ssh/work_rsa. After that connections to github used the correct profile. Previously they defaulted to the first public key.\nFor Could not open a connection to your authentication agent when using ssh-add,check:\nhttps://stackoverflow.com/a/17695338/1760313"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I fork another persons repo twice into my own account?\n\nOn GitHub, I can't seem to figure out how I can fork a repo twice into one account.\nSo there is a repo from Bob/CoolFramework\nI fork it to Jeremy/MyShooter and start to build a game\nNow I also want to fork it to Jeremy/MyRPG to build another new game\nWhen I try to fork CoolFramework a second time, it just takes me to MyShooter.\nSo the options I can think of:\nA) I'm not using Git in the right way\nB) It's not possible on Git\nC) I just couldn't see the option on Github"}, {"role": "assistant", "content": "In your case, I would suggest going with submodules. However to answer your exact question, here's how you should proceed.\n\nStart by creating Jeremy/MyShooter and Jeremy/MyRPG on Github. Keep them empty.\nClone your origin project on your system, twice, giving it different names\n$ git clone http://github.com/Bob/CoolFramework MyShooter\n$ git clone http://github.com/Bob/CoolFramework MyRPG\n\nYou now have 2 different local repos pointing to the same origin. You should remove the origin and point to yours as a remote:\n$ cd MyShooter\n$ git remote remove origin\n$ git remote add origin http://github.com/Jeremy/MyShooter.git\n$ git push -u origin master\n\nDon't forget to do the same for MyRPG"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git status (nothing to commit, working directory clean), however with changes commited\nI found many questions with similar subject, but I didn't found any practical guidance about this issue: why git status informs me nothing to commit, working directory clean, even tough I have made a modification at my local branch?\nHere are the steps which I followed:\n\ngit init [On branch master - Initial commit, nothing to commit (create/copy files and use \"git add\" to track)]\ngit remote add https://github.com/username/project.git\ngit pull origin master\ntouch test\ngit add test\ngit commit -m \"Adding file for test purposes only.\"\ngit status [On branch master - nothing to commit, working directory clean]\n\nIf I do a git push, the modification is committed to the remote branch. I just want to perform \"git status\" after my modifications, and receive the information that I have changes on my local branch that must be pushed to the remote branch of the project.\nWhat's going on?"}, {"role": "assistant", "content": "Your local branch doesn't know about the remote branch. If you don't tell git that your local branch (master) is supposed to compare itself to the remote counterpart (origin/master in this case); then git status won't tell you the difference between your branch and the remote one. So you should use:\ngit branch --set-upstream-to origin/master\n\nor with the short option:\ngit branch -u origin/master\n\nThis options --set-upstream-to (or -u in short) was introduced in git 1.8.0.\nOnce you have set this option; git status will show you something like:\n# Your branch is ahead of 'origin/master' by 1 commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Update a submodule to the latest commit\nI have a project A which is a library and it is used in a project B.\nBoth projects A and B have a separate repository on github BUT inside B we have a submodule of A.\nI edited some classes on the library, which is in the repo A, I pushed on the remote repo, so the library (repo A) is updated.\nThese updates do not reflect on the \"reference\" (the submodule) the submodule refers to a previous commit.... what should I do in order to update the submodule on git?"}, {"role": "assistant", "content": "Enter the submodule directory:  \ncd projB/projA\n\nPull the repo from you project A (will not update the git status of your parent, project B):  \ngit pull origin master\n\nGo back to the root directory & check update:\ncd ..\ngit status\n\nIf the submodule updated before, it will show something like below:  \n# Not currently on any branch.\n# Changed but not updated:\n#   (use \"git add ...\" to update what will be committed)\n#   (use \"git checkout -- ...\" to discard changes in working directory)\n#\n#       modified:   projB/projA (new commits)\n#\n\nThen, commit the update:  \ngit add projB/projA\ngit commit -m \"projA submodule updated\"\n\n\nUPDATE\nAs @paul pointed out, since git 1.8, we can use\ngit submodule update --remote --merge\n\nto update the submodule to the latest remote commit. It'll be convenient in most cases."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-symbolic-ref - Read, modify and delete symbolic refs  -d  --delete"}, {"role": "assistant", "content": "Delete the symbolic ref <name>."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-restore - Restore working tree files  -q  --quiet"}, {"role": "assistant", "content": "Quiet, suppress feedback messages. Implies --no-progress ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --name-status"}, {"role": "assistant", "content": "Show only names and status of changed files. See the description\nof the --diff-filter option on what the status letters mean.\nJust like --name-only the file names are often encoded in UTF-8."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I choose to overwrite remote repository with local commits?\nBasically, due to events beyond my control, my remote repo was moved - I did a lot of work on my local copy in the meantime and now I really just want to overwrite everything in the remote repo with my local files.\nHowever, I don't seem to be able to do this. The closest I can get is to pull and merge, but then it wants to walk me through some convoluted process for merging. I don't want to merge. I want to overwrite. I don't need a new branch - basically, I just want a fresh start.\nThe remote repo is on unfuddle."}, {"role": "assistant", "content": "You can remove the branch and recreate it, let's say the branch that you want to overwrite is dev:\nRemove the branch in your remote host(github)\ngit push origin :dev  \n\nThen just push your dev again:  \ngit push origin dev\n\nI use Github for hosting, not familiar with unfuddle, but I think it'll works for the unfuddle, too. :)\n\nJust as @melee mentioned, you can also use  \ngit push origin dev -f\n\n(not sure whether the -f is valid, but --force is OK)\ngit push origin dev --force\n\nto force overwrite the branch. I remember I did it before. Thanks @melee. :)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to handle git gc fatal: bad object refs/remotes/origin/HEAD error?\nI randomly hit this today while trying to run Git garbage collect:\n$ git gc\nfatal: bad object refs/remotes/origin/HEAD\nerror: failed to run repack\n\nHow do I deal with this?"}, {"role": "assistant", "content": "I don't understand the ramifications of this, but as suggested in this thread, when I encountered this I just did\n$ mv .git/refs/remotes/origin/HEAD /tmp\n\n(keeping it around just in case) and then\n$ git gc\n\nworked without complaining; I haven't run into any problems."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %G?"}, {"role": "assistant", "content": "show \"G\" for a good (valid) signature,\n\"B\" for a bad signature,\n\"U\" for a good signature with unknown validity,\n\"X\" for a good signature that has expired,\n\"Y\" for a good signature made by an expired key,\n\"R\" for a good signature made by a revoked key,\n\"E\" if the signature cannot be checked (e.g. missing key)\nand \"N\" for no signature"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I connect a local folder to an existing github repo?\nI made a repo on my laptop. It has a project page on github.com.\nI'm now working on my desktop computer. I manually copied over some files because I didn't think I would need every file from the repo (so I didn't clone the repo onto my desktop). How can I connect my desktop local folder with the existing repo so that I can push the files on my desktop to the repo (the desktop files are now the most recent versions of those files, since I stopped working from my laptop)"}, {"role": "assistant", "content": "Adding an existing project to GitHub using the command line:\n# Initialize the local directory as a Git repository.\ngit init\n\n# Add files\ngit add .\n\n# Commit your changes\ngit commit -m \"First commit\"\n\n# Add remote origin\ngit remote add origin <Remote repository URL>\n# <Remote repository URL> looks like: https://github.com/user/repo.git\n\n# Verifies the new remote URL\ngit remote -v\n\n# Push your changes\ngit push origin master\n\nAnd 2nd way as @evolutionxbox suggest you:\n\nClone git repo\nCopy and paste into it\nPush your change at origin\n\nIf in any case git reject your push you can use git push origin master --force\nUPDATE (10-23-2020):\nBear in mind that since October 1st, 2020, Github renamed the default repository from master to main https://github.com/github/renaming"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "'gh' is not recognized... error while trying to create GitHub repo from command prompt\nI'm following the instructions on how to add an existing project to GitHub from GitHub docs. However, I get an 'gh' is not recognized as an internal or external command, operable program or batch file. error message when I try to use gh repo create fs1 command in the project root directory as instructed. Here fs1 is my project name. I browsed StackOverflow but couldn't find any help yet. What am I missing?"}, {"role": "assistant", "content": "The page you are following doesn't include the instructions to install the GitHub CLI, so it is likely you don't have it installed (it doesn't come with git as far as I know).\nInstallation instructions can be found here: https://cli.github.com/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch"}, {"role": "assistant", "content": "DEFAULT BEHAVIOUR Often people use git pull without giving any parameter.\nTraditionally, this has been equivalent to saying git pull\norigin .  However, when configuration branch.<name>.remote is\npresent while on branch <name> , that value is used instead of origin . In order to determine what URL to use to fetch from, the value\nof the configuration remote.<origin>.url is consulted\nand if there is not any such variable, the value on the URL: line\nin $GIT_DIR/remotes/<origin> is used. In order to determine what remote branches to fetch (and\noptionally store in the remote-tracking branches) when the command is\nrun without any refspec parameters on the command line, values\nof the configuration variable remote.<origin>.fetch are\nconsulted, and if there aren\u2019t any, $GIT_DIR/remotes/<origin> is consulted and its Pull: lines are used.\nIn addition to the refspec formats described in the OPTIONS\nsection, you can have a globbing refspec that looks like this: refs/heads/*:refs/remotes/origin/* A globbing refspec must have a non-empty RHS (i.e. must store\nwhat were fetched in remote-tracking branches), and its LHS and RHS\nmust end with /* .  The above specifies that all remote\nbranches are tracked using remote-tracking branches in refs/remotes/origin/ hierarchy under the same name. The rule to determine which remote branch to merge after\nfetching is a bit involved, in order not to break backward\ncompatibility. If explicit refspecs were given on the command\nline of git pull , they are all merged. When no refspec was given on the command line, then git pull uses the refspec from the configuration or $GIT_DIR/remotes/<origin> .  In such cases, the following\nrules apply: If branch.<name>.merge configuration for the current\nbranch <name> exists, that is the name of the branch at the\nremote site that is merged. If the refspec is a globbing one, nothing is merged. Otherwise the remote branch of the first refspec is merged."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Are git hooks pushed to the remote when I 'git push'?\nIf I create a new hook script in my local repository in repo/.git/hooks/post-commit and then I run \"git push\" are the hooks pushed to the remote?  Then, when the other developers run \"git pull\" from the same origin will they get my new hooks?"}, {"role": "assistant", "content": "No. Hooks are per-repository and are never pushed. Similarly, the repo config isn't pushed either, nor is anything in .git/info, or a number of other things.\nPushing and pulling only exchanges branches/tags and commit objects (and anything reachable from a commit, e.g. trees, blobs)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to merge branch to master?\nI do have a local branch with some changes, and I want to merge it to remote master. When I run: git merge master I get: \n\nAlready up-to-date\n\nbut I still can see that the master doesn't contain the new changes. \nI checked the following issue Git merge reports \u201cAlready up-to-date\u201d though there is a difference Ask, but it seems in one hand to be outdated, and on the other hand, none of the hints there were helpful.\nAny idea or hint?"}, {"role": "assistant", "content": "If you want to merge your branch to master on remote, follow the below steps:\n\npush your branch say 'br-1' to remote using git push origin br-1.\nswitch to master branch on your local repository using git checkout master.\nupdate local master with remote master using git pull origin master.\nmerge br-1 into local master using git merge br-1. This may give you conflicts which need to be resolved and changes committed before moving further.\nOnce merge of br-1 to master on local is committed, push local master to remote master using git push origin master."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -U<n>  --unified=<n>"}, {"role": "assistant", "content": "Generate diffs with <n> lines of context instead of\nthe usual three.\nImplies --patch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to write setup.py to include a Git repository as a dependency\nI am trying to write setup.py for my package. My package needs to specify a dependency on another Git repository.\nThis is what I have so far:\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='abc',\n    packages=find_packages(),\n    url='https://github.abc.com/abc/myabc',\n    description='This is a description for abc',\n    long_description=open('README.md').read(),\n    install_requires=[\n        \"requests==2.7.0\",\n        \"SomePrivateLib>=0.1.0\",\n        ],\n    dependency_links = [\n     \"git+git://github.abc.com/abc/SomePrivateLib.git#egg=SomePrivateLib\",\n    ],\n    include_package_data=True,\n)\n\nWhen I run:\npip install -e https://github.abc.com/abc/myabc.git#egg=analyse\n\nI get\n\nCould not find a version that satisfies the requirement\nSomePrivateLib>=0.1.0 (from analyse) (from versions: ) No matching\ndistribution found for SomePrivateLib>=0.1.0 (from analyse)\n\nWhat am I doing wrong?"}, {"role": "assistant", "content": "Note: this answer is now outdated. Have a look at this answer for up-to-date instructions: https://stackoverflow.com/a/54701434/212774\n\nAfter digging through the pip issue 3939 linked by @muon in the comments above and then the PEP-508 specification, I found success getting my private repo dependency to install via setup.py using this specification pattern in install_requires (no more dependency_links):\ninstall_requires = [\n  'some-pkg @ git+ssh://[email\u00a0protected]/someorgname/[email\u00a0protected]#egg=some-pkg',\n]\n\nThe @v1.1 indicates the release tag created on github and could be replaced with a branch, commit, or different type of tag."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts  mergetool.meld.hasOutput"}, {"role": "assistant", "content": "Older versions of meld do not support the --output option.\nGit will attempt to detect whether meld supports --output by inspecting the output of meld --help .  Configuring mergetool.meld.hasOutput will make Git skip these checks and\nuse the configured value instead.  Setting mergetool.meld.hasOutput to true tells Git to unconditionally use the --output option,\nand false avoids using --output ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What makes merging in DVCS easy?\nI read at Joel on Software:\n\nWith distributed version control, the\n  distributed part is actually not the\n  most interesting part.\nThe interesting part is that these\n  systems think in terms of changes, not\n  in terms of versions.\n\nand at HgInit:\n\nWhen we have to merge, Subversion\n  tries to look at both revisions\u2014my\n  modified code, and your modified\n  code\u2014and it tries to guess how to\n  smash them together in one big unholy\n  mess. It usually fails, producing\n  pages and pages of \u201cmerge conflicts\u201d\n  that aren\u2019t really conflicts, simply\n  places where Subversion failed to\n  figure out what we did.\nBy contrast, while we were working\n  separately in Mercurial, Mercurial was\n  busy keeping a series of changesets.\n  And so, when we want to merge our code\n  together, Mercurial actually has a\n  whole lot more information: it knows\n  what each of us changed and can\n  reapply those changes, rather than\n  just looking at the final product and\n  trying to guess how to put it\n  together.\n\nBy looking at the SVN's repository folder, I have the impression that Subversion is maintaining each revisions as changeset. And from what I know, Hg is using both changeset and snapshot while Git is purely using snapshot to store the data.\nIf my assumption is correct, then there must be other ways that make merging in DVCS easy. What are those?\n* Update: \n\nI am more interested in the technical perspective, but answers from non-technical perspective are acceptable\nCorrections:\n\n\nGit's conceptual model is purely based on snapshots. The snapshots can be stored as diffs of other snapshots, it's just that the diffs are purely for storage optimization. \u2013 Rafa\u0142 Dowgird's comment \n\nFrom non-technical perspective:\n\n\nIt's simply cultural: a DVCS wouldn't work at all if merging were hard, so DVCS developers invest a lot of time and effort into making merging easy. CVCS users OTOH are used to crappy merging, so there's no incentive for the developers to make it work. (Why make something good when your users pay you equally well for something crap?)\n...\nTo recap: the whole point of a DVCS is to have many decentralized repositories and constantly merge changes back and forth. Without good merging, a DVCS simply is useless. A CVCS however, can still survive with crappy merging, especially if the vendor can condition its users to avoid branching. \u2013 J\u00f6rg W Mittag's answer\n\nFrom technical perspective:\n\n\nrecording a real DAG of the history does help! I think the main difference is that CVCS didn't always record a merge as a changeset with several parents, losing some information. \u2013 tonfa's comment\nbecause of merge tracking, and the more fundamental fact that each revisions knows its parents. ... When each revision (each commit), including merge commits, know its parents (for merge commits that means having/remembering more than one parent, i.e. merge tracking), you can reconstruct diagram (DAG = Direct Acyclic Graph) of revision history. If you know graph of revisions, you can find common ancestor of the commits you want to merge. And when your DVCS knows itself how to find common ancestor, you don't need to provide it as an argument, as for example in CVS.\n.\nNote that there might be more than one common ancestor of two (or more) commits. Git makes use of so called \"recursive\" merge strategy, which merges merge bases (common ancestor), till you are left with one virtual / effective common ancestor (in some simplification), and can the do simple 3-way merge. \u2013 Jakub Nar\u0119bski's answer\n\n\nCheck as well How and/or why is merging in Git better than in SVN?"}, {"role": "assistant", "content": "There's nothing in particular in DVCSs that makes merging easier. It's simply cultural: a DVCS wouldn't work at all if merging were hard, so DVCS developers invest a lot of time and effort into making merging easy. CVCS users OTOH are used to crappy merging, so there's no incentive for the developers to make it work. (Why make something good when your users pay you equally well for something crap?)\nLinus Torvalds said in one of his Git talks that when he was using CVS at Transmeta, they set aside an entire week during a development cycle for merging. And everybody just accepted this as the normal state of affairs. Nowadays, during a merge window, Linus does hundreds of merges within just a few hours.\nCVCSs could have just as good merging capabilities as DVCSs, if CVCS users simply went to their vendors and said that this crap is unacceptable. But they are caught in the Blub paradox: they simply don't know that it is unacceptable, because they have never seen a working merge system. They don't know that there is something better out there.\nAnd when they do try out a DVCS, they magically attribute all the goodness to the \"D\" part.\nTheoretically, due to the centralized nature, a CVCS should have better merge capabilities, because they have a global view of the entire history, unlike DVCS were every repository only has a tiny fragment.\nTo recap: the whole point of a DVCS is to have many decentralized repositories and constantly merge changes back and forth. Without good merging, a DVCS simply is useless. A CVCS however, can still survive with crappy merging, especially if the vendor can condition its users to avoid branching.\nSo, just like with everything else in software engineering, it's a matter of effort."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --full-index"}, {"role": "assistant", "content": "Instead of the first handful of characters, show the full\npre- and post-image blob object names on the \"index\"\nline when generating patch format output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to remove a forked project in Gitlab\n\nI forked a project to a group. But there is no option to delete that forked project. I saw danger zone in Github. Is there any option available to delete forked project from Gitlab?"}, {"role": "assistant", "content": "login with master role in the repository.\ngo to forked project. then from left panel, go to Settings => General.\nlike this:\n\nclick the Expand from Advance settings panel.\n\ngo to bottom page and click Remove project.\n\nthen type your projectName and click Confirm.\n\nI hope is useful."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --show-origin"}, {"role": "assistant", "content": "Augment the output of all queried config options with the\norigin type (file, standard input, blob, command line) and\nthe actual origin (config file path, ref, or blob id if\napplicable)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PAGER"}, {"role": "assistant", "content": "This environment variable overrides $PAGER . If it is set\nto an empty string or to the value \"cat\", Git will not launch\na pager.  See also the core.pager option in git-config ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  edit"}, {"role": "assistant", "content": "Edit the notes for a given object (defaults to HEAD)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why does git revert complain about a missing -m option?\n\nSo I'm working on a project with other people, and there's multiple github forks being worked on. Someone just made a fix for a problem and I merged with his fork, but then I realized that I could find a better solution. I want to revert the commit I just made. I tried doing this with git revert HEAD but it gave me this error: \nfatal: Commit <SHA1> is a merge but no -m option was given.\nWhat does that mean? When I merged and committed, I did use the -m option to say \"Merged with <username>\".\nWhat am I doing wrong here?"}, {"role": "assistant", "content": "By default git revert refuses to revert a merge commit as what that actually means is ambiguous. I presume that your HEAD is in fact a merge commit.\nIf you want to revert the merge commit, you have to specify which parent of the merge you want to consider to be the main trunk, i.e. what you want to revert to.\nOften this will be parent number one, for example if you were on master and did git merge unwanted and then decided to revert the merge of unwanted. The first parent would be your pre-merge master branch and the second parent would be the tip of unwanted.\nIn this case you could do:\ngit revert -m 1 HEAD\n\ngit cat-file -p [MERGE_COMMIT_ID] will show the parent branches in order. The first one listed would be -m 1, the second -m 2."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  badTreeSha1"}, {"role": "assistant", "content": "(ERROR) A tree has an invalid format."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I recover a lost commit in Git?\nFirst, got \"your branch is ahead of origin/master by 3 commits\" then my app has reverted to an earlier time with earlier changes. \nHow can I get what I spent the last 11 hours doing back?"}, {"role": "assistant", "content": "git reflog is your friend. Find the commit that you want to be on in that list and you can reset to it (for example:git reset --hard e870e41).\n(If you didn't commit your changes... you might be in trouble - commit early, and commit often!)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I merge two commits into one if I already started rebase?\nI am trying to merge 2 commits into 1, so I followed \u201csquashing commits with rebase\u201d from git ready.\nI ran\ngit rebase --interactive HEAD~2\n\nIn the resulting editor, I change pick to squash and then save-quit, but the rebase fails with the error\n\nCannot 'squash' without a previous commit\n\nNow that my work tree has reached this state, I\u2019m having trouble recovering.   \nThe command git rebase --interactive HEAD~2 fails with:\n\nInteractive rebase already started\n\nand git rebase --continue fails with\n\nCannot 'squash' without a previous commit"}, {"role": "assistant", "content": "Summary\nThe error message\n\nCannot 'squash' without a previous commit\n\nmeans you likely attempted to \u201csquash downward.\u201d Git always squashes a newer commit into an older commit or \u201cupward\u201d as viewed on the interactive rebase todo list, that is into a commit on a previous line. Changing the command on your todo list\u2019s very first line to squash will always produce this error as there is nothing for the first commit to squash into.\nThe Fix\nFirst get back to where you started with\n$ git rebase --abort\n\nSay your history is\n$ git log --pretty=oneline\na931ac7c808e2471b22b5bd20f0cad046b1c5d0d c\nb76d157d507e819d7511132bdb5a80dd421d854f b\ndf239176e1a2ffac927d8b496ea00d5488481db5 a\n\nThat is, a was the first commit, then b, and finally c. After committing c we decide to squash b and c together:\n(Note: Running git log pipes its output into a pager, less by default on most platforms. To quit the pager and return to your command prompt, press the q key.)\nRunning git rebase --interactive HEAD~2 gives you an editor with\npick b76d157 b\npick a931ac7 c\n\n# Rebase df23917..a931ac7 onto df23917\n#\n# Commands:\n#  p, pick = use commit\n#  r, reword = use commit, but edit the commit message\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#  f, fixup = like \"squash\", but discard this commit's log message\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n# However, if you remove everything, the rebase will be aborted.\n#\n\n(Notice that this todo list is in the reverse order as compared with the output of git log.)\nChanging b\u2019s pick to squash will result in the error you saw, but if instead you squash c into b (newer commit into the older or \u201csquashing upward\u201d) by changing the todo list to\npick   b76d157 b\nsquash a931ac7 c\n\nand save-quitting your editor, you'll get another editor whose contents are\n# This is a combination of 2 commits.\n# The first commit's message is:\n\nb\n\n# This is the 2nd commit message:\n\nc\n\nWhen you save and quit, the contents of the edited file become commit message of the new combined commit:\n$ git log --pretty=oneline\n18fd73d3ce748f2a58d1b566c03dd9dafe0b6b4f b and c\ndf239176e1a2ffac927d8b496ea00d5488481db5 a\n\nNote About Rewriting History\nInteractive rebase rewrites history. Attempting to push to a remote that contains the old history will fail because it is not a fast-forward.\nIf the branch you rebased is a topic or feature branch in which you are working by yourself, no big deal. Pushing to another repository will require the --force option, or alternatively you may be able, depending on the remote repository\u2019s permissions, to first delete the old branch and then push the rebased version. Examples of those commands that will potentially destroy work is outside the scope of this answer.\nRewriting already-published history on a branch in which you are working with other people without very good reason such as leaking a password or other sensitive details forces work onto your collaborators and is antisocial and will annoy other developers. The \u201cRecovering From an Upstream Rebase\u201d section in the git rebase documentation explains, with added emphasis.\n\nRebasing (or any other form of rewriting) a branch that others have based work on is a bad idea: anyone downstream of it is forced to manually fix their history. This section explains how to do the fix from the downstream\u2019s point of view. The real fix, however, would be to avoid rebasing the upstream in the first place. \u2026"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --word-diff-regex=<regex>"}, {"role": "assistant", "content": "Use <regex> to decide what a word is, instead of considering\nruns of non-whitespace to be a word.  Also implies --word-diff unless it was already enabled. Every non-overlapping match of the\n<regex> is considered a word.  Anything between these matches is\nconsidered whitespace and ignored(!) for the purposes of finding\ndifferences.  You may want to append |[^[:space:]] to your regular\nexpression to make sure that it matches all non-whitespace characters.\nA match that contains a newline is silently truncated(!) at the\nnewline. For example, --word-diff-regex=. will treat each character as a word\nand, correspondingly, show differences character by character. The regex can also be set via a diff driver or configuration option, see gitattributes or git-config .  Giving it explicitly\noverrides any diff driver or configuration setting.  Diff drivers\noverride configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout older revision of a file under a new name\nI have the file \"main.cpp\" open in my editor.\nI want to see the previous revision of \"main.cpp\" in the editor too.\nThe way I do it now is like this.\nclose \"main.cpp\" in the editor\n\nprompt> mv main.cpp tmp\nprompt> git checkout HEAD^ main.cpp\nprompt> mv main.cpp old_main.cpp\nprompt> mv tmp main.cpp\nprompt>\n\nopen \"main.cpp\" and \"old_main.cpp\" in the editor\n\nCan it be simplified, so I don't have to close \"main.cpp\" in the editor? \nWhat I'm hoping for is a variant of git-checkout that can do this.\n\nUPDATE: im using git on mac osx 10.5.7\nprompt> git --version\ngit version 1.6.0.4\nprompt> \n\n\nUPDATE2: Jakub Nar\u0119bski answer is:\nprompt> git show HEAD^:dir1/dir2/dir3/main.cpp > old_main.cpp\nprompt>\n\n\nUPDATE3: Karmi's answer, for a specific revision:\nprompt> git show 4c274dd91dc:higgs/Higgs.xcodeproj/project.pbxproj > old_project.pbxproj\nprompt>"}, {"role": "assistant", "content": "You can use git show for that:\ngit show HEAD^:main.cpp > old_main.cpp\n\n(Note that there is colon [:] character between HEAD^ and main.cpp.)  The <revision>:<path> syntax is described in git rev-parse manpage, next to last point in the \"Specifying revisions\" section:\n\n<rev>:<path>, e.g. HEAD:README, :README, master:./README\nA suffix : followed by a path names the blob or tree at the given path in the tree-ish\nobject named by the part before the colon.  :path (with an empty part before the colon)\nis a special case of the syntax described next: content recorded in the index at the\ngiven path. A path starting with ./ or ../ is relative to the current working directory.\nThe given path will be converted to be relative to the working tree\u2019s root directory.\nThis is most useful to address a blob or tree from a commit or tree that has the same\ntree structure as the working tree.\n\nNote that <path> here is FULL path relative to the top directory of your project, i.e. the directory with .git/ directory. (Or, to be more exact, to \"<revision>\", which in general can be any <tree-ish>, i.e. something that represents tree.)\nIf you want to use path relative to the current directory, you need to use ./<path> syntax (or ../path to go up from current directory).\nEdit 2015-01-15: added information about relative path syntax\n\nYou can get in most cases the same output using low-level (plumbing) git cat-file command:\ngit cat-file blob HEAD^:main.cpp > old_main.cpp"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to increase the width of the horizontal line using Markdown on GitHub\n\nI am using the below code for drawing the horizontal line\n\"-----\"\n\"***\"\nI want to change the color of the horizontal line plus change the height also.\nHow can I do this?"}, {"role": "assistant", "content": "Instead of using *** or ---, try:\n<hr style=\"border:2px solid gray\">"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --relative[=<path>]  --no-relative"}, {"role": "assistant", "content": "When run from a subdirectory of the project, it can be\ntold to exclude changes outside the directory and show\npathnames relative to it with this option.  When you are\nnot in a subdirectory (e.g. in a bare repository), you\ncan name which subdirectory to make the output relative\nto by giving a <path> as an argument. --no-relative can be used to countermand both diff.relative config\noption and previous --relative ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Resolving a merge request locally with a protected branch\n\nI am using Gitlab, and I have a conflict on my merge request that I cannot resolve with the online tool. I checkout the target branch and resolve the conflict, then ... Then what ?\n\nThe branch is protected, so no one is allowed to push on it.\nNo option available on Gitlab to do something like this.\n\nWhat is supposed to be the correct \"way\" of doing in those cases ? Are we supposed to create another branch to solve the conflict, then another merge request ? Or is there a commmand line / an alternative I failed to see when searching for a solution, like \"push the result of the solving conflict which is not a commit per se\" ?"}, {"role": "assistant", "content": "Are we supposed to create another branch to solve the conflict, then\n  another merge request ?\n\nYes, I'd suggest doing this.\n1) Create a new branch off the destination branch\n2) Merge your feature branch in it\n3) Solve conflicts, add them, and commit the merge\n4) Push that new branch to remote\n5) Create a new PR from the new branch to the destination one"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git equivalent of svn status -u\nWhat's the git equivalent of svn status -u or more verbose svn status --show-updates. \nThe svn status --show-updates command shows the updates that the svn update command will bring from the server.\nThanks!"}, {"role": "assistant", "content": "I can't think of a way to do it without actually fetching the updates (maybe someone else will). Assuming you are on the default branch \"master\" and the upstream from which these hypothetical updates will come is the default remote \"origin\", try....\ngit fetch\ngit log --name-only ..origin/master\n\nNote the double dots .. not a single dot or an elipsis1.\nThis will give you a list of log entries for changes that are only upstream, with the filenames affected, you can alter the parameters to git log to get more or less information.\nNB in git \"fetching\" these updates isn't the same as applying them to your local branch. You no doubt already know how to do that with git pull.\n\n1 As for where do the double dots come from, name1..name2 indicates a range. If name1 is omitted, HEAD is used in its place. This syntax refers to all commits reachable from name2 back to, but not including, HEAD. [\"Git from the bottom up\"]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Should we gitignore the .python-version file?\n\nI have a .python-version file, and when I create a Python repo with github and specify that it should have a .gitignore, it adds the .python-version file to it. It seems to me that that file should NOT be ignored since other people running the code on different machines would want to know what version of Python they need.\nSo why is it .gitignored?"}, {"role": "assistant", "content": "While being too specific, you can still version that file (meaning: not include it in the default .gitignore), as :\n\nit will be used only by pyenv\n(and, as noted by diavol in the comments, setup-python GitHub Action uses this file to set the python version of the build environment)\nit is a good addition to the README, in order to illustrate what version of python is recommended for the specific project,\nit can be overridden easily (if you are using pyenv), or simply ignored (if you don't have pyenv).\n\nAs the article \"How to manage multiple Python versions and virtual environments\" states:\n\nWhen setting up a new project that is to use Python 3.6.4 then pyenv local 3.6.4 would be ran in its root directory.\nThis would both set the version, and create a .python-version file, so that other contributors\u2019 machines would pick it up.\n\nBut:\n\npyenv looks in four places to decide which version of Python to use, in priority order:\n\nThe PYENV_VERSION environment variable (if specified).\nYou can use the pyenv shell command to set this environment variable in your current shell session.\nThe application-specific .python-version file in the current directory (if present).\nYou can modify the current directory's .python-version file with the pyenv local command.\nThe first .python-version file found (if any) by searching each parent directory, until reaching the root of your filesystem.\nThe global version file. You can modify this file using the pyenv global command.\nIf the global version file is not present, pyenv assumes you want to use the \"system\" Python. (In other words, whatever version would run if pyenv weren't in your PATH.)\n\n\n\n\nNone of these listed reasons indicate why .python-version should not be stored in source control.\nYou can still have a section in the README saying that the version to be used is specified in the .python-version file.\n\nIf someone is using pyenv it works automatically for them.\nIf not, then they're in no worse of a position than they were if .python-version was not under source control.\n\n\nTrue: Keeping the .python-version file under source control does ensure that pyenv users have an automatic reference point for the Python version to be used, which could streamline the setup process for them. Moreover, it serves as a documented specification of the Python version for those who do not use pyenv, assuming they are informed via the README or other documentation that they should refer to this file for the Python version information.\nHowever, one potential issue with storing the .python-version file in source control could be the risk of unwanted modifications. Developers might accidentally commit changes to the .python-version file as they switch between different Python versions in their local development environment, potentially leading to conflicts or confusion among the team.\nTo mitigate this risk, a possible strategy would be to include clear guidelines in the README on how to handle the .python-version file. That might include instructions to avoid committing changes to the file unless a deliberate decision has been made to update the Python version used by the project.\nBut if you have to rely on README, I would instead put in that file instructions to activate a content filter driver, using a .gitattributes declaration.\n\n(image from \"Customizing Git - Git Attributes\", from \"Pro Git book\")\n\n.gitignore\n.python-version\n\n\n.gitattributes\n.python-version filter=smudgeScript\n\n\ninstructions to activate the content filter driver:\ngit config filter.smudgeScript.smudge /path/to/your/smudgeScript\ngit config filter.smudgeScript.clean \"cat python-version.tpl\"\n\n\n\nAnd now, any checkout/clone would restore the right .python-version while avoiding any unwanted modification in it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: Remove committed file after push\nIs there a possibility to revert a committed file in Git? I've pushed a commit to GitHub and then I realized that there's a file which I didn't want to be pushed (I haven't finished the changes)."}, {"role": "assistant", "content": "update: added safer method\npreferred method:\n\ncheck out the previous (unchanged) state of your file; notice the double dash \ngit checkout HEAD^ -- /path/to/file\n\ncommit it:\ngit commit -am \"revert changes on this file, not finished with it yet\"\n\npush it, no force needed:\ngit push\n\nget back to your unfinished work, again do (3 times arrow up):\ngit checkout HEAD^ -- /path/to/file\n\n\neffectively 'uncommitting':\nTo modify the last commit of the repository HEAD, obfuscating your accidentally pushed work, while potentially running into a conflict with your colleague who may have pulled it already, and who will grow grey hair and lose lots of time trying to reconcile his local branch head with the central one:\nTo remove file change from last commit:\n\nto revert the file to the state before the last commit, do:\ngit checkout HEAD^ /path/to/file\n\nto update the last commit with the reverted file, do:\ngit commit --amend\n\nto push the updated commit to the repo, do:\ngit push -f\n\n\nReally, consider using the preferred method mentioned before."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Push to origin from GitHub action\nI'm trying to push to origin remote from GitHub action. The logic of my action is:\n\nhandle pull_request_review events and filter by comment message\ncheckout to master, merge PR branch, run some checks and push it to origin\n\nThe script is:\nif [[ \"${GITHUB_EVENT_NAME}\" != \"pull_request_review\" ]]; then\n  echo \"unsupported event: ${GITHUB_EVENT_NAME}\"\n  exit 1\nfi\n\nuser=$(jq -r .review.user.login ${GITHUB_EVENT_PATH})\ncmd=$(jq -r .review.body ${GITHUB_EVENT_PATH})\necho \"reviewer is ${user}, command is ${cmd}\"\n\nif [[ \"${cmd}\" == \"merge\" ]]; then\n  head=$(jq -r .pull_request.head.ref ${GITHUB_EVENT_PATH})\n  git config user.email [email\u00a0protected]\n  git config user.name test\n  git checkout -B _tmp origin/${head}\n  git checkout -B master origin/master\n  git merge --no-ff _tmp\n  git push origin master\nfi\n\nI'm running this script from alpine:3.10 Docker container:\nFROM alpine:3.10\n\nLABEL \"com.github.actions.name\"=\"Hello world action\"\nLABEL \"com.github.actions.icon\"=\"shield\"\nLABEL \"com.github.actions.color\"=\"green\"\n\nWORKDIR /app\nCOPY action.sh action.sh\nRUN apk --update add bash git jq\nCMD [\"bash\", \"/app/action.sh\"]\n\nFirst steps are working fine (checkout and merge), but action failed to push the merge to origin because of the error:\n\n+ git push origin master\n  fatal: could not read Username for 'https://github.com': No such device or address\n\nIt looks like GitHub-action Docker container is not configured to push to GitHub. How can I configure it? Is it possible to use some of the env variables provided by GitHub or maybe some mounted files (like in /github/* path)?"}, {"role": "assistant", "content": "actions/checkout@v2 onwards\nFrom version 2 of checkout, the detached HEAD state issue is resolved and simplifies pushing to origin.\nname: Push commit\non: push\npermissions:\n  contents: write\njobs:\n  report:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Create report file\n        run: date +%s > report.txt\n      - name: Commit report\n        run: |\n          git config --global user.name 'Your Name'\n          git config --global user.email '[email\u00a0protected]'\n          git commit -am \"Automated report\"\n          git push\n\nIf you need the push event to trigger other workflows, use a repo scoped Personal Access Token.\n      - uses: actions/checkout@v3\n        with:\n          token: ${{ secrets.PAT }}\n\nactions/checkout@v1 (original answer)\nTo add some further detail to the excellent answer by @rmunn. The problem is that the actions/checkout@v1 action leaves the git repository in a detached HEAD state. See this issue about it for more detailed information: https://github.com/actions/checkout/issues/6\nHere is a complete example to demonstrate how to get the checked out repository to a usable state and push to the remote.\nname: Push commit\non: push\njobs:\n  report:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - name: Create report file\n        run: date +%s > report.txt\n      - name: Commit report\n        run: |\n          git config --global user.name 'Your Name'\n          git config --global user.email '[email\u00a0protected]'\n          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY\n          git checkout \"${GITHUB_REF:11}\"\n          git commit -am \"Automated report\"\n          git push\n\nTo include untracked (new) files change the workflow to use the following.\n          git add -A\n          git commit -m \"Automated report\"\n\nThe above workflow should work for the majority of events. For on: pull_request workflows the merging branch (GITHUB_HEAD_REF) should be checked out to replace the default merge commit.\nImportant: If you have other pull request checks besides the following workflow then you must use a Personal Access Token instead of the default GITHUB_TOKEN.\nThis is due to a deliberate limitation imposed by GitHub Actions that events raised by a workflow (such as push) cannot trigger further workflow runs.\nThis is to prevent accidental \"infinite loop\" situations, and as an anti-abuse measure.\nUsing a repo scoped Personal Access Token is an approved workaround. See this GitHub issue for further detail on the workaround.\nname: Push commit on pull request\non: pull_request\njobs:\n  report:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n        with:\n          ref: ${{ github.head_ref }}\n      - name: Create report file\n        run: date +%s > report.txt\n      - name: Commit report\n        run: |\n          git config --global user.name 'Your Name'\n          git config --global user.email '[email\u00a0protected]'\n          git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/${{ github.repository }}\n          git commit -am \"Automated report\"\n          git push\n\nFor further examples of push to origin during an on: pull_request workflow see this blog post, GitHub Actions: How to Automate Code Formatting in Pull Requests."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I get Composer to download the latest commit in the master branch from GitHub for a package?\n\nI am trying to get Composer do download the latest commit for the Behat/MinkSelenium2Driver package. That particular repo only has a master branch. I have tried every method I can think of, including deleting the files and letting it pull them back in, to get it to work but it doesn't.\nHow would I get it to pull in latest committed files or at least those from the commit I list below?\nSpecifically I want to get this commit:\nhttps://github.com/Behat/MinkSelenium2Driver/commit/2e73d8134ec8526b6e742f05c146fec2d5e1b8d6\nThanks,\nPatrick"}, {"role": "assistant", "content": "There is only one way to grab the head of the repository: \n\"require\": { \"behat/mink-selenium2-driver\" : \"dev-master\" }\n\"minimum-stability\": \"dev\"\n\nOh well, at least two ways:\n\"require\": { \"behat/mink-selenium2-driver\" : \"dev-master as 1.1.x-dev\" }\n\"minimum-stability\": \"dev\"\n\nProbably at least three ways:\n\"require\": { \"behat/mink-selenium2-driver\" : \"dev-master#2e73d8134ec8526b6e742f05c146fec2d5e1b8d6\" }\n\"minimum-stability\": \"dev\"\n\nBecause that repository actually aliased the master branch as 1.1.x-dev, this would also work without the minimum-stability affecting all other packages:\n\"require\": { \"behat/mink-selenium2-driver\" : \"1.1.*@dev\" }"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.srcPrefix"}, {"role": "assistant", "content": "If set, git diff uses this source prefix. Defaults to \"a/\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Gitlab - Xcode Can't connect with remote repository\n\nI am having troubles when I connect with my repository through Xcode.\nI have a Gitlab version (full pre-)installed on TurnkeyLinux Virtual Appliance on a remote server. \nIn the Gitlab Web interface, I've created a new test user: \"testuser\" with a password \"password\" and a new project \"testproject\". This user was assigned to this project.\nThe git url project are:\nHTTP: http://example.com/testuser/testproject.git\nSSH: [email\u00a0protected]:testuser/testproject.git\n\nI can see the repositories folder rightly created with a \"Terminal\" through SSH connection.\nNow, I want add this git repository to my Xcode repositories.\nSo, In\nXCode > Preferences > Account     \n\nI'm trying add it, using both urls and my user credentials, but always receive the following message:\n\"Authentication failed because the name or password was incorrect.\"\n\nCould anyone help me?"}, {"role": "assistant", "content": "The user/password would only be needed for an http url, not an ssh one.\nWhen using the http url to add a repo in your XCode Accounts, make sure there is no proxy which would prevent the resolution of the example.com server.\nIf it is still not working, then, as in \"Authentification issue when pushing Xcode project to GitHub\", try to use an url like: \nhttps://testuser:[email\u00a0protected]/testuser/testproject.git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I edit an incorrect commit message in git ( that I've pushed )?\nI want to modify a commit message deeper in history and I've pushed many new commits. \nHow do I change the commit message? Is it possible?"}, {"role": "assistant", "content": "The message from Linus Torvalds may answer your question:\nModify/edit old commit messages\nShort answer: you can not (if pushed).\n\nextract (Linus refers to BitKeeper as BK):\n\nSide note, just out of historical interest: in BK you could.\nAnd if you're used to it (like I was) it was really quite practical. I \n  would apply a patch-bomb from Andrew, notice something was wrong, and just \n  edit it before pushing it out.\nI could have done the same with git. It would have been easy enough to \n  make just the commit message not be part of the name, and still guarantee \n  that the history was untouched, and allow the \"fix up comments later\" \n  thing.\nBut I didn't.\nPart of it is purely \"internal consistency\". Git is simply a cleaner \n  system thanks to everything being SHA1-protected, and all objects being \n  treated the same, regardless of object type. Yeah, there are four \n  different kinds of objects, and they are all really different, and they \n  can't be used in the same way, but at the same time, even if their \n  encoding might be different on disk, conceptually they all work exactly \n  the same.\nBut internal consistency isn't really an excuse for being inflexible, and \n  clearly it would be very flexible if we could just fix up mistakes after \n  they happen. So that's not a really strong argument.\nThe real reason git doesn't allow you to change the commit message ends \n  up being very simple: that way, you can trust the messages. If you allowed \n  people to change them afterwards, the messages are inherently not very \n  trustworthy.\n\n\nTo be complete, you could rewrite your local commit history in order to reflect what you want, as suggested by sykora (with some rebase and reset --hard, gasp!)\nHowever, once you publish your revised history again (with a git push origin +master:master, the + sign forcing the push to occur, even if it doesn't result in a \"fast-forward\" commit)... you might get into some trouble.\nExtract from this other SO question:\n\nI actually once pushed with --force to git.git repository and got scolded by Linus BIG TIME. It will create a lot of problems for other people. A simple answer is \"don't do it\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "View a specific Git commit [duplicate]\nThis question already has answers here:\n                                \n                            \n\n\n\nClosed 12 years ago.\n\n\n\n\nPossible Duplicate:\nGet Information about a SHA-1 commit object? \n\nI needed to check when a specific change was added to a file I'm working on, so I used the git blame command. From that I obtained the hash of the relevant commit. Is there a way to see the log notes of just that commit, using the hash? All the docs talk about how to look at the whole tree.\nI realize could just do git log <filename>, but there are a lot of commits for the file, and I'm loathe to go through all of them looking for this one. A simple way to view the log notes would be appreciated."}, {"role": "assistant", "content": "git show <revhash>\n\nDocumentation here.\nOr if that doesn't work, try Google Code's Git Documentation"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Creating a patch file from a diff of 2 folders\nI made some changes to an open source project without taking time to create proper patch files.\nNow, the maintainer of the project released a new version, and among new and edited files, there are a bunch of renamed files.\nWhat is the best way to apply my changes to the new version ?\nI'm completely new to diff/patch use, and If I can get it done with git, it would be better."}, {"role": "assistant", "content": "If you have two directories a and b that are similar, and you want b to be the same as a, you can create and apply a patch with:\n$ diff -ur b a > ba.diff\n$ patch -i ba.diff\n\nSuppose you have directories local (containing your local version of upstream1.0), upstream1.0, and upstream1.1.  To create and apply your changes to upstream1.1:\n$ diff -ur upstream1.0 local > my.diff\n$ cd upstream1.1\n$ patch -i ../my.diff \n\nCheck the documentation for patch, and try to convince the upstream maintainers to use git.  Things will be much simpler if you can use git tools to work with your local repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Updates were rejected because the tip of your current branch is behind its remote counterpart\nOur workflow is such.  We have a branch called dev which I can reach at origin/dev.  When we do changes, we create a branch off dev:\ngit checkout -b FixForBug origin/dev\n\nNow I have a branch called FixForBug which is tracking (I think that's the right word) origin/dev.  Thus, if I do a git pull it'll bring in new changes from origin/dev which is great.  Now, when I'm finished with my fix, I push to a remote branch called the same thing.\nFirst I pull down any changes from origin/dev and do a rebase:\ngit pull --rebase\n\nThen I push the changes to a remote branch of the same name:\ngit push origin FixForBug\n\nNow, there's a branch on the remote server and I can create a pull request for that change to be approved and merged back in to the dev branch.  I don't ever push anything to origin/dev myself.  I'm guessing this is as pretty common workflow.\nThe first time I do a git push, it works fine and creates the remote branch.  However, if I push a second time (let's say during code-review, someone points out a problem), I get the following error:\n\nerror: failed to push some refs to\n'https://github.mydomain.info/Product/product.git'\nhint: Updates were rejected because the tip of your current branch is behind its remote counterpart. Integrate the remote changes (e.g. hint: 'git pull ...') before pushing again.\nSee the 'Note about fast-forwards' in 'git push --help' for details.\n\nHowever, if I do a git status it says I'm ahead of origin/dev by 1 commit (which makes sense) and if I follow the hint and run git pull, it says everything is up to date.  I think this is because I'm pushing to a different branch than my upstream branch.  I can fix this issue by running:\ngit push -f origin FixForBug\nIn that case, it'll push the changes to the remote branch, saying (forced update) and everything appears to be good on the remote branch.\nMy Questions:\nWhy is -f required in this scenario?  Usually when you're forcing something, it's because you were doing something wrong or at least against standard practice.  Am I ok doing this, or will it mess up something in the remote branch or create a hassle for whoever has to eventually merge my stuff into dev?"}, {"role": "assistant", "content": "The -f is actually required because of the rebase.  Whenever you do a rebase you would need to do a force push because the remote branch cannot be fast-forwarded to your commit. You'd always want to make sure that you do a pull before pushing, but if you don't like to force push to master or dev for that matter, you can create a new branch to push to and then merge or make a PR."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Copy a git repo without history\nI have a private repository on GitHub that I want to make public. However, some of the initial commits contain information that I don't want to publicize (hard-coded credentials, etc).\nWhat is the easiest route to make the latest commit public (I don't really need or want the previous commits in the public repository) without including some or all of the commit history?"}, {"role": "assistant", "content": "You can limit the depth of the history while cloning:\n--depth <depth>\nCreate a shallow clone with a history truncated to the specified \nnumber of revisions.\n\nUse this if you want limited history, but still some."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-merge-one-file"}, {"role": "assistant", "content": "The standard helper program to use with git-merge-index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git add * (asterisk) vs git add . (period)\nI have a question about adding files in git. I have found multiple stackoverflow questions about the difference between git add . and git add -a, git add --all, git add -A, etc. But I've been unable to find a place that explains what git add * does. I've even looked at the git add man page, but it didn't help. I've been using it in place of git add . and my co-worker asked me why. I didn't have an answer. I've just always used git add *.\nAre git add . and git add * the same? Does one add changed files from the current directory only, while the other adds files from the current directory and subdirectories (recursively)?\nThere's a great chart listed on one of the other stack questions that shows the difference between git add -A git add . and git add -u, but it doesn't have git add *.\n\nNote: I understand what it means to use the asterisk as a wildcard (add all files with a given extension). For example, git add *.html would add all files that have a .html extension (but ignore .css, .js, etc).\nThanks for the help!"}, {"role": "assistant", "content": "add * means add all files in the current directory, except for files whose name begin with a dot. This is your shell functionality and Git only ever receives a list of files.\nadd . has no special meaning in your shell, and thus Git adds the entire directory recursively, which is almost the same, but including files whose names begin with a dot."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --summary"}, {"role": "assistant", "content": "Instead of applying the patch, output a condensed\nsummary of information obtained from git diff extended\nheaders, such as creations, renames, and mode changes.\nTurns off \"apply\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Warning: Permanently added the RSA host key for IP address\n\nWhen I do pull from Github, I am getting this warning message.    \n    MYPC:/Rails$ git pull origin master\n    Warning: Permanently added the RSA host key for IP address '#{Some IP address}' to the list of known hosts.\n    From github.com:Example/Demo\n     * branch            master     -> FETCH_HEAD\n    Already up-to-date.\n\nI just want to know which IP address it is adding to the known hosts."}, {"role": "assistant", "content": "If you are accessing your repositories over the SSH protocol, you will receive a warning message each time your client connects to a new IP address for github.com. As long as the IP address from the warning is in the range of IP addresses , you shouldn't be concerned. Specifically, the new addresses that are being added this time are in the range from 192.30.252.0 to 192.30.255.255. The warning message looks like this:\nWarning: Permanently added the RSA host key for IP address '$IP' to the list of \n\n\nhttps://github.com/blog/1606-ip-address-changes"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git Error \"fatal: invalid branch name: init.defaultBranch =\"\n\nI getting this error when ever I do git clone\nError :-\nfatal: invalid branch name: init.defaultBranch =\nTried to reinstall git (latest)\nStill same error\nOS :- Windows"}, {"role": "assistant", "content": "It would appear that you have experimented with the new (2.28) init.defaultBranch configuration value.\nAssign it a proper value:\ngit config --global init.defaultBranch main"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  commit.verbose"}, {"role": "assistant", "content": "A boolean or int to specify the level of verbosity with git commit .\nSee git-commit ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  updateSparsePath"}, {"role": "assistant", "content": "Shown when either git-add or git-rm is asked to update index entries outside the current sparse\ncheckout."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to get diff working like git-diff?\nI like the output formatting of git diff.  The color and the +/- representation of changes between lines is easier to read than GNU diff.\nI can run git diff using --no-index flag outside of a git repo and it works fine. However, it appears to be missing the --exclude option for excluding files or subdirectories from a recursive diff. \nIs there a way to get the best of both worlds? (color options and +/- format of git diff and --exclude option of GNU diff).  \nI've experimented with colordiff, but I still prefer the output format of git diff"}, {"role": "assistant", "content": "This will do the +/- rather than < and >.\ndiff -u file1 file2\n\nSince GNU diffutils 3.4 the flag --color has been added. Combining both makes the following:\ndiff --color -u file1 file2\n\nThe flag --color also takes an argument, valid options are never, always, or auto. Useful when you want to be more explicit on what needs to be done."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to integrate a GitHub wiki into the main project\n\nI want keep all my source code and documentation in one single Git repository. I already have the GitHub pages integrated into my main project and now I want to do the same with the GitHub wiki.\nI know that GitHub wikis are plain Git repositories. My plan is to add the wiki as a remote to my main repository and keep everything in one place. However in the wiki repository everything is in the root directory and thus would clutter my main project.\nWhat is the best way to handle this?"}, {"role": "assistant", "content": "You want to add the wiki as a submodule. The same Wiki Git repository connected as a remote, but within a subdirectory with its own .git directory.\ngit submodule add git://github.com/you/proj.wiki\n\nIn the root of your main repository to add the wiki repository as a submodule in the wiki/ directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --ws-error-highlight=<kind>"}, {"role": "assistant", "content": "Highlight whitespace errors in the context , old or new lines of the diff.  Multiple values are separated by comma, none resets previous values, default reset the list to new and all is a shorthand for old,new,context .  When\nthis option is not given, and the configuration variable diff.wsErrorHighlight is not set, only whitespace errors in new lines are highlighted. The whitespace errors are colored\nwith color.diff.whitespace ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What does the term \"porcelain\" mean in Git?\nThe term \"porcelain\" appears occasionally in the Git documentation.  What does it mean?"}, {"role": "assistant", "content": "\"Porcelain\" is the material from which toilets are usually made (and sometimes other fixtures such as washbasins). This is distinct from \"plumbing\" (the actual pipes and drains), where the porcelain provides a more user-friendly interface to the plumbing.\nGit uses this terminology in analogy, to separate the low-level commands that users don't usually need to use directly (the \"plumbing\") from the more user-friendly high level commands (the \"porcelain\")."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do Git LFS and git-annex differ?\n\ngit-annex has been around for quite some time, but never really gained momentum.\nGit LFS is rather young and is already supported by GitHub, Bitbucket and GitLab.\nBoth tools handle binary files in git repositories. On the other hand, GitLab seems to have replaced git-annex with Git LFS within one year.\n\nWhat are the technical differences?\nDo they solve the same problem?"}, {"role": "assistant", "content": "They do solve the same problem.\nLet me start off with pro/con, then I'll move into technical differences.\ngit-annex\nPros:\n\nSupports multiple remotes that you can store the binaries.\nCan be used without support from hosting provider (for more details see here).\n\nCons:\n\nWindows support in beta, and has been for a long time\nUsers need to learn separate commands for day-to-day work\nnot supported by github and bitbucket\n\ngit-lfs\nPros:\n\nSupported by github, bitbucket and gitlab\nMost supported on all os's\nEasy to use.\nautomated based on filters\n\nCons:\n\nRequires a custom server implementation to work. A simple ssh remote is not sufficient. Reference server is under development https://github.com/git-lfs/lfs-test-server.\n\nTechnical\ngit-annex\ngit-annex works by creating a symlink in your repo that gets committed. The actual data gets stored into a separate backend (S3, rsync, and MANY others). It is written in haskell. Since it uses symlinks, windows users are forced to use annex in a much different manner, which makes the learning curve higher.\ngit-lfs\nPointer files are written. A git-lfs api is used to write the BLOBs to lfs. A special LFS server is required due to this. Git lfs uses filters so you only have to set up lfs once, and again when you want to specify which types of files you want to push to lfs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I fold content in Github markdown?\n\nHow does github fold text blocks?\nlook at this issuecomment"}, {"role": "assistant", "content": "Check if this follows dear-github issue 166, which mentions:\ncollapsible sections are supported:\n<details>\n<summary>Click to expand</summary>\n\nwhatever\n\n</details>\n\nSee more in this example.\n\nThe key is to wrap the whole contents inside the <p>:\n\n<details><summary>stuff with *mark* **down**</summary><p>\n\n## _formatted_ **heading** with [a](link)\n\n---\n{{standard 3-backtick code block omitted from here due to escaping issues}}\n---\n\nCollapsible until here.\n</p></details>\n\n\nGabriel Devillers reports in the comments that GitLab also have a similar collapsible section support."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip"}, {"role": "assistant", "content": "NAME git-rebase - Reapply commits on top of another base tip"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is a git \"Snapshot\"?\nThe official Git doc says:\n\n$ git diff test\nThis will show you what is different between your current working directory and the snapshot on the 'test' branch\n\nAs a newbie this is very confusing. I've never heard of the term snapshot. Do they mean the \"HEAD\" of the \"test\" branch?"}, {"role": "assistant", "content": "The term snapshot is used in the git reference site as well\nIt is the replacement term for \"Revision\". In other version control systems, changes to individual files are tracked and refered to as revisions, but with git you are tracking the entire workspace, so they use the term snapshot to denote the difference.\nFrom http://gitref.org/index.html\n\nInstead of writing a tool that versions each file individually, like Subversion, we would probably write one that makes it easier to store snapshots of our project without having to copy the whole directory each time.\nThis is essentially what Git is. You tell Git you want to save a snapshot of your project with the git commit command and it basically records a manifest of what all of the files in your project look like at that point. Then most of the commands work with those manifests to see how they differ or pull content out of them, etc.\nIf you think about Git as a tool for storing and comparing and merging snapshots of your project, it may be easier to understand what is going on and how to do things properly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  directory"}, {"role": "assistant", "content": "The list you get with \"ls\" :-)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to show Git log history (i.e., all the related commits) for a sub directory of a Git repository\nLet\u2019s say that I have a Git repository that looks like this:\nfoo/\n  .git/\n  A/\n   ... big tree here\n  B/\n   ... big tree here\n\nIs there a way to ask git log to show only the log messages for a specific directory? For example, I want to see what commits touched files in foo/A only."}, {"role": "assistant", "content": "From directory foo/, use\n  git log -- A\n\nYou need the '--' to separate <path>.. from the <since>..<until> refspecs.\n# Show changes for src/nvfs\n$ git log --oneline -- src/nvfs\nd6f6b3b Changes for Mac OS X\n803fcc3 Initial Commit\n\n# Show all changes (one additional commit besides in src/nvfs).\n$ git log --oneline\nd6f6b3b Changes for Mac OS X\n96cbb79 gitignore\n803fcc3 Initial Commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Get raw file from repository\n\nI want to get a file content in gitlab by using its api.\nFirstly, I check my gitlab version, its written as,\nGitLab Community Edition 9.4.3 b125d21 update asap\nThen I create a private token and \nhttp://gitadress/api/v4/projects/id/repository/files?private_token=PRIVATE_TOKEN\nreturns as;\n{\"error\":\"404 Not Found\"}\n\nthen I modify the query as;\nhttp://gitadress/api/v4/projects/222/repository/tree?private_token=PRIVATE_TOKEN \nthis request returns as;\n[{\"id\":\"8078365d80c\",\"name\":\"test.js\",\"type\":\"blob\",\"path\":\"test.js\",\"mode\":\"100644\"}]\n\nWhat I want is to get the content of the test.js but whatever I tried I couldn't achieve it.\nhttp://gitadress/api/v4/projects/id/repository/tree/test.js/raw?private_token=PRIVATE_TOKEN&ref=master\nreturns as; \n{\"error\":\"404 Not Found\"}\n\nHow can I get the raw file content by using gitlab api?\nDocumentation is here;\nhttps://github.com/gitlabhq/gitlabhq/blob/master/doc/api/repository_files.md#get-raw-file-from-repository"}, {"role": "assistant", "content": "The documentation mentions:\n\nUrl encoded full path to new file. Ex. lib%2Fclass%2Erb\n\nThat means you need to URL encode test.js: test%2Ejs.\n(See Percent encoding: character data)\nhttp://gitadress/api/v4/projects/id/repository/files/test%2Ejs/raw?private_token=PRIVATE_TOKEN\n\nYou can add ?ref=master to make sure to get the content from the master branch for instance.\nhttp://gitadress/api/v4/projects/id/repository/files/test%2Ejs/raw?ref=master&private_token=PRIVATE_TOKEN\n\nThat being said, you have the gitlab-ce issue 31470 which is still open:\n\nAPI to \"Get raw file from repository\" fails for files with dots\n\nA fix is in progress: gitlab-ce merge_request 13370, and will be delivered for GitLab 9.5."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  find-renames[=<n>]"}, {"role": "assistant", "content": "Turn on rename detection, optionally setting the similarity\nthreshold.  This is the default. This overrides the merge.renames configuration variable.\nSee also git-diff --find-renames ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "why is Issues tab not present in my repo's github page?\nI want to create issues in a github repo to correct technical debt in the repo. I am not able to see the issues tab. For other repos the issues tab present below the pull request tab. How can I enable the issues tab for my repo?"}, {"role": "assistant", "content": "You have to enable the Issues first. You can do that by clicking to Settings and enable the Issues section. Then you can use it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-read-tree - Reads tree information into the index  --trivial"}, {"role": "assistant", "content": "Restrict three-way merge by git read-tree to happen\nonly if there is no file-level merging required, instead\nof resolving merge for trivial cases and leaving\nconflicting files unresolved in the index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --pickaxe-regex"}, {"role": "assistant", "content": "Treat the <string> given to -S as an extended POSIX regular\nexpression to match."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitlab-runner x509: certificate signed by unknown authority\n\nI'm trying to register a new runner on gitlab following these steps :\nhttps://docs.gitlab.com/runner/register/index.html\nBut when I enter the url, token and tags, an error message pops-up saying:\n\nERROR: Registering runner... failed           runner=CS-XXX status=couldn't execute POST against https://example.com/api/v4/runners: Post https://example.com/api/v4/runners: x509: certificate signed by unknown authority\n\nI'm working on a new server and already installed the gitlab-runner."}, {"role": "assistant", "content": "you need to use tls-ca-file option during registration or in the configuration of your runner.\nHere is an example of non-interactive registration with tls-ca-file option :\ngitlab-runner register \\\n      --non-interactive \\\n      --registration-token YOUTOKEN \\\n      --url https://example.com/ \\\n      --tls-ca-file /path/to/your/ca.crt\n\nOther way, you can refer the tls-ca-file option in your config.toml under the [[runners]] section\nmore info : https://docs.gitlab.com/runner/configuration/tls-self-signed.html"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-update-index - Register file contents in the working tree to the index  --force-remove"}, {"role": "assistant", "content": "Remove the file from the index even when the working directory\nstill has such a file. (Implies --remove.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  patience"}, {"role": "assistant", "content": "Use \"patience diff\" algorithm when generating patches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "how to import your own github forked library into android studio\n\nI found a nice open library on GitHub, I imported it into my Android Studio project using Gradle dependencies, but then I realized I need to make little modifications on it.\nSo I forked the library on my GitHub, done the modifications and asked for a pull request, but I can't wait until they approve and merge my modifications with the original code.\nIs there a way to use dependencies to import my forked library (in my Github) into my Android Studio project, rather than the original library?"}, {"role": "assistant", "content": "There is actually a really easy way to do this nowadays: jitpack.io\nAll you need to do is.\n\nadd in your root build.gradle at the end of allprojects repositories:\nallprojects {\nrepositories {\n...\nmaven { url 'https://jitpack.io' }\n}\n}\n\nAdd the dependency in your app build.gradle:\ndependencies {\nimplementation 'com.github.User:Repo:Tag'\n}\n\n\nIf you don't have any releases/tags, you can also just do com.github.User:Repo:branchname-SNAPSHOT to build from the latest commit on that branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Eclipse \"Error: Could not find or load main class\"\nI have a project in eclipse on my laptop that I pushed to Git https://github.com/chrisbramm/LastFM-History-Graph.git\nIt works fully on my laptop and runs/builds without a problem but on my desktop it doesn't Eclipse gives the error\n\nError: Could not find or load the main class lastfmhistoryguis.InputPanel\n\nI've tried building the project from:\nProject>Build Project\n\nBut nothing happened. I've set the PATH variables on this computer to JRE6, JRE7 and JDK 1.7.0 even though these aren't set on my laptop.\nI did have Jar file (last.fm-bindings-0.1.1.jar) that was in my .classpath file that was in C:\\Users\\Chris\\Downloads folder on my laptop hence it wasn't included in the git tree which I recently brought into the project folder and committed ,but I'm not sure whether I have done it right.\nWould this also be causing a problem but there isn't a main argument in there.\nI can't work out now, what I need to check/change."}, {"role": "assistant", "content": "If you create a java class with public static void main(String[] args), Eclipse will run that main method for you by right clicking on the file itself, or on the file in the project explorer, then choosing:\n\n\"Run As\" -> \"Java Application.\"\n\nOnce you do this, Eclipse stores information about your class, so you can easily run the class again from the Run As menu (Green Play Button on the toolbar) or from the Run Configurations dialog.\nIf you subsequently MOVE the java class (manually, or however), then again choose \n\n\"Run As\" -> \"Java Application,\"\n\nfrom the new location, Eclipse will run the original stored configuration, attempt to invoke this class from its original location, which causes this error.\n\n\nSOLUTION:\nFor me, the fix was to go to the run configurations, (Green Play Button -> Run Configurations) and remove all references to the class. The next time you run \n\n\"Run As\" -> \"Java Application\" \n\nEclipse will write a new configuration for the moved class, and the error will go away."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  fetch.negotiationAlgorithm"}, {"role": "assistant", "content": "Control how information about the commits in the local repository\nis sent when negotiating the contents of the packfile to be sent by\nthe server.  Set to \"consecutive\" to use an algorithm that walks\nover consecutive commits checking each one.  Set to \"skipping\" to\nuse an algorithm that skips commits in an effort to converge\nfaster, but may result in a larger-than-necessary packfile; or set\nto \"noop\" to not send any information at all, which will almost\ncertainly result in a larger-than-necessary packfile, but will skip\nthe negotiation step.  Set to \"default\" to override settings made\npreviously and use the default behaviour.  The default is normally\n\"consecutive\", but if feature.experimental is true, then the\ndefault is \"skipping\".  Unknown values will cause git fetch to\nerror out. See also the --negotiate-only and --negotiation-tip options to git-fetch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit-tree - Create a new commit object  RFC 2822"}, {"role": "assistant", "content": "The standard date format as described by RFC 2822, for example Thu, 07 Apr 2005 22:13:13 +0200 ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Linking to other Wiki pages on GitHub?\n\nGitHub wikis allow you to link to other pages in the wiki like so:\n[[Wiki Page Name]]\n\nHowever, I want to display different text than the wiki page name when making the link. Is there a way to do this? Am I linking to wiki pages all wrong?"}, {"role": "assistant", "content": "Using the Markdown link syntax\n[Link Text](WikiPage)\n\nseems to work in the edit preview but not on the actual wiki page. At least for me the generated link is WikiPage instead of wiki/WikiPage and I get the famous GitHub 404.\nHowever the MediaWiki syntax\n[[Link Text|WikiPage]]\n\nworks for me, even for Markdown wiki pages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  no"}, {"role": "assistant", "content": "Do not ignore whitespace when performing move detection."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can you combine git add patch -p mode with diff's ignore-all-space\nHow can I do git add with patch mode but ignoring whitespace changes.\nThe use case is for when you've reformatted a file and also made changes to it. I want to commit the real code changes separately first (as shown by git diff -w path) and then commit the reformatting as a separate commit."}, {"role": "assistant", "content": "Here's an adaptation from a related question.\ngit diff -w --no-color | git apply --cached --ignore-whitespace\n\nIt has the benefit that you don't need to use stash, temporary files, or perform a reset --hard on your working folders.\nAddendum\nThe solution above only stages changes except whitespace-only edits.  This did not address patch, though using --patch to stage isn't straight forward in this situation.\nPatch Option 1: Edit the diff in a text editor\nThere are many ways to implement this using a text editor.  Vim is especially suited to this.\nIn the root directory of your repository, start Vim.\nIn normal mode, load the diff into an empty buffer with...\n:r !git diff -w --no-color\n:set ft=diff  # if you want syntax highlighting\n\nEdit the diff and remove the parts you don't want to stage.\nTo stage the contents of the vim buffer, run the vim ex command...\n:w !git apply --cached --ignore-whitespace\n\nIf you're a Vim afficionado, you could use visual mode to stage, too!\n:<',>'w !git apply --cached --ignore-whitespace\n\nYou can commit the staged changes with the ex command...\n:!git commit -m \"message\"\n# or\n:!git commit\n\nClear the buffer, read the unstaged changes, and repeat\n:bd! | set ft=diff | r !git diff -w --no-color\n\nEventually, you'll be left with only whitespace changes to commit.\nIf you don't use Vim, you could also dump git diff into a file, edit the file, save, then feed the file into git apply.  Commit and repeat until done.  It's a bit tedious, but functional.\nPatch Option 2: Patch reset\nIt's backwards from git add --patch, but once you've staged non-whitespace changes with...\ngit diff -w --no-color | git apply --cached --ignore-whitespace\n\n...you can unstage chunks in patch mode with...\ngit reset --patch .\n\nKeep in mind you're removing the changes that you want to keep staged.  Repeat and commit as necessary until you only have whitespace changes left."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitfaq - Frequently asked questions about using Git  If I make a change on two branches but revert it on one, why does the merge of those branches include the change?"}, {"role": "assistant", "content": "By default, when Git does a merge, it uses a strategy called the ort strategy, which does a fancy three-way merge.  In such a case, when Git\nperforms the merge, it considers exactly three points: the two heads and a\nthird point, called the merge base , which is usually the common ancestor of\nthose commits.  Git does not consider the history or the individual commits\nthat have happened on those branches at all. As a result, if both sides have a change and one side has reverted that change,\nthe result is to include the change.  This is because the code has changed on\none side and there is no net change on the other, and in this scenario, Git\nadopts the change. If this is a problem for you, you can do a rebase instead, rebasing the branch\nwith the revert onto the other branch.  A rebase in this scenario will revert\nthe change, because a rebase applies each individual commit, including the\nrevert.  Note that rebases rewrite history, so you should avoid rebasing\npublished branches unless you\u2019re sure you\u2019re comfortable with that.  See the\nNOTES section in git-rebase for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  -l<num>"}, {"role": "assistant", "content": "The -M and -C options involve some preliminary steps that\ncan detect subsets of renames/copies cheaply, followed by an\nexhaustive fallback portion that compares all remaining\nunpaired destinations to all relevant sources.  (For renames,\nonly remaining unpaired sources are relevant; for copies, all\noriginal sources are relevant.)  For N sources and\ndestinations, this exhaustive check is O(N^2).  This option\nprevents the exhaustive portion of rename/copy detection from\nrunning if the number of source/destination files involved\nexceeds the specified number.  Defaults to diff.renameLimit.\nNote that a value of 0 is treated as unlimited."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.status"}, {"role": "assistant", "content": "A boolean to enable/disable color in the output of git-status . May be set to always , false (or never ) or auto (or true ), in which case colors are used\nonly when the output is to a terminal. If unset, then the\nvalue of color.ui is used ( auto by default)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to embed bash script directly inside a git alias\nCan I embed the following bash shell code:\nfor name in $(git diff --name-only $1); do git difftool $1 $name & done\n\ndirectly into the creation of a git alias: \ngit config --global alias.diffall ***my-bash-code-here***\n\nThis leads on from my previous question/answer on SO, where I put the code into a .sh file and then aliased to the file:\ngit config --global alias.diffall '!sh diffall.sh'\n\nBut in the never-ending quest for simplicity, there's gotta be a way to skip the file and insert code directly into the alias? I can't figure out the format..."}, {"role": "assistant", "content": "git config --global alias.diffall '!sh diffall.sh'\n\nThis is redundant in one way. If you are going to add 'diffall.sh' into your $PATH anyway, why not save it as 'git-diffall', and save yourself from declaring an alias. Yes, \"git diffall\" will run it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is the git binary diff algorithm (delta storage) standardized?\nGit uses a delta compression to store objects that are similar to each-other. \nIs this algorithm standardized and used in other tools as well? Is there documentation describing the format? Is it compatible with xdelta/VCDIFF/RFC 3284?"}, {"role": "assistant", "content": "I think the diff algo used for pack files was linked to one of the delta encoding out there: initially (2005) xdelta, and then libXDiff.\nBut then, as detailed below, it shifted to a custom implementation.  \nAnyway, as mentioned here:\n\nGit does deltification only in packfiles.\n  But when you push via SSH git would generate a pack file with commits the other side doesn't\n  have, and those packs are thin packs, so they also have deltas... but the remote side then adds bases to those thin packs making them standalone.\n\n(note: creating many packfiles, or retrieving information in huge packfile is costly, and explain why git doesn't handle well huge files or huge repo.\nSee more at \"git with large files\")\nThis thread also reminds us:\n\nActually packfiles and deltification (LibXDiff, not xdelta) was, from what I remember and understand, originally because of network bandwidth (which is much more costly than disk space), and I/O performance of using single mmapped file instead of very large number of loose objects.\n\nLibXDiff is mentioned in this 2008 thread.\nHowever, since then, the algo has evolved, probably in a custom one, as this 2011 thread illustrates, and as the header of diff-delta.c points out:\n\nSo, strictly speaking, the current code in Git doesn't bear any resemblance with the libxdiff code at all.\n  However the basic algorithm behind both implementations is the same.\n  Studying the libxdiff version is probably easier in order to gain an understanding of how this works. \n\n/*\n * diff-delta.c: generate a delta between two buffers\n *\n * This code was greatly inspired by parts of LibXDiff from Davide Libenzi\n * http://www.xmailserver.org/xdiff-lib.html\n *\n * Rewritten for GIT by Nicolas Pitre <[email\u00a0protected]>, (C) 2005-2007\n */\n\nMore on the packfiles the Git Book:\n\n\nGit 2.18 adds to the delta description in this new documentation section, which now (Q2 2018) states:\n\nObject types\nValid object types are:\n\nOBJ_COMMIT (1)\nOBJ_TREE (2)\nOBJ_BLOB (3)\nOBJ_TAG (4)\nOBJ_OFS_DELTA (6)\nOBJ_REF_DELTA (7)\n\nType 5 is reserved for future expansion. Type 0 is invalid.\nDeltified representation\nConceptually there are only four object types: commit, tree, tag and\n  blob.\nHowever to save space, an object could be stored as a \"delta\" of\n  another \"base\" object.\n  These representations are assigned new types ofs-delta and ref-delta, which is only valid in a pack file.\nBoth ofs-delta and ref-delta store the \"delta\" to be applied to\n  another object (called 'base object') to reconstruct the object.\n  The difference between them is, \n\nref-delta directly encodes 20-byte base object name. \n  \n  \nIf the base object is in the same pack, ofs-delta encodes the offset of the base object in the pack instead.\n\n\nThe base object could also be deltified if it's in the same pack.\nRef-delta can also refer to an object outside the pack (i.e. the\n  so-called \"thin pack\"). When stored on disk however, the pack should\n  be self contained to avoid cyclic dependency.\nThe delta data is a sequence of instructions to reconstruct an object\n  from the base object.\n  If the base object is deltified, it must be converted to canonical form first. Each instruction appends more and more data to the target object until it's complete.\n  There are two supported instructions so far: \n\none for copy a byte range from the source object and \none for inserting new data embedded in the instruction itself.\n\nEach instruction has variable length. Instruction type is determined\n  by the seventh bit of the first octet. The following diagrams follow\n  the convention in RFC 1951 (Deflate compressed data format)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  merge.verifySignatures"}, {"role": "assistant", "content": "If true, this is equivalent to the --verify-signatures command\nline option. See git-merge for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Push to origin from GitHub action\n\nI'm trying to push to origin remote from GitHub action. The logic of my action is:\n\nhandle pull_request_review events and filter by comment message\ncheckout to master, merge PR branch, run some checks and push it to origin\n\nThe script is:\nif [[ \"${GITHUB_EVENT_NAME}\" != \"pull_request_review\" ]]; then\n  echo \"unsupported event: ${GITHUB_EVENT_NAME}\"\n  exit 1\nfi\n\nuser=$(jq -r .review.user.login ${GITHUB_EVENT_PATH})\ncmd=$(jq -r .review.body ${GITHUB_EVENT_PATH})\necho \"reviewer is ${user}, command is ${cmd}\"\n\nif [[ \"${cmd}\" == \"merge\" ]]; then\n  head=$(jq -r .pull_request.head.ref ${GITHUB_EVENT_PATH})\n  git config user.email [email\u00a0protected]\n  git config user.name test\n  git checkout -B _tmp origin/${head}\n  git checkout -B master origin/master\n  git merge --no-ff _tmp\n  git push origin master\nfi\n\nI'm running this script from alpine:3.10 Docker container:\nFROM alpine:3.10\n\nLABEL \"com.github.actions.name\"=\"Hello world action\"\nLABEL \"com.github.actions.icon\"=\"shield\"\nLABEL \"com.github.actions.color\"=\"green\"\n\nWORKDIR /app\nCOPY action.sh action.sh\nRUN apk --update add bash git jq\nCMD [\"bash\", \"/app/action.sh\"]\n\nFirst steps are working fine (checkout and merge), but action failed to push the merge to origin because of the error:\n\n+ git push origin master\n  fatal: could not read Username for 'https://github.com': No such device or address\n\nIt looks like GitHub-action Docker container is not configured to push to GitHub. How can I configure it? Is it possible to use some of the env variables provided by GitHub or maybe some mounted files (like in /github/* path)?"}, {"role": "assistant", "content": "actions/checkout@v2 onwards\nFrom version 2 of checkout, the detached HEAD state issue is resolved and simplifies pushing to origin.\nname: Push commit\non: push\npermissions:\n  contents: write\njobs:\n  report:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Create report file\n        run: date +%s > report.txt\n      - name: Commit report\n        run: |\n          git config --global user.name 'Your Name'\n          git config --global user.email '[email\u00a0protected]'\n          git commit -am \"Automated report\"\n          git push\n\nIf you need the push event to trigger other workflows, use a repo scoped Personal Access Token.\n      - uses: actions/checkout@v3\n        with:\n          token: ${{ secrets.PAT }}\n\nactions/checkout@v1 (original answer)\nTo add some further detail to the excellent answer by @rmunn. The problem is that the actions/checkout@v1 action leaves the git repository in a detached HEAD state. See this issue about it for more detailed information: https://github.com/actions/checkout/issues/6\nHere is a complete example to demonstrate how to get the checked out repository to a usable state and push to the remote.\nname: Push commit\non: push\njobs:\n  report:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - name: Create report file\n        run: date +%s > report.txt\n      - name: Commit report\n        run: |\n          git config --global user.name 'Your Name'\n          git config --global user.email '[email\u00a0protected]'\n          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY\n          git checkout \"${GITHUB_REF:11}\"\n          git commit -am \"Automated report\"\n          git push\n\nTo include untracked (new) files change the workflow to use the following.\n          git add -A\n          git commit -m \"Automated report\"\n\nThe above workflow should work for the majority of events. For on: pull_request workflows the merging branch (GITHUB_HEAD_REF) should be checked out to replace the default merge commit.\nImportant: If you have other pull request checks besides the following workflow then you must use a Personal Access Token instead of the default GITHUB_TOKEN.\nThis is due to a deliberate limitation imposed by GitHub Actions that events raised by a workflow (such as push) cannot trigger further workflow runs.\nThis is to prevent accidental \"infinite loop\" situations, and as an anti-abuse measure.\nUsing a repo scoped Personal Access Token is an approved workaround. See this GitHub issue for further detail on the workaround.\nname: Push commit on pull request\non: pull_request\njobs:\n  report:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n        with:\n          ref: ${{ github.head_ref }}\n      - name: Create report file\n        run: date +%s > report.txt\n      - name: Commit report\n        run: |\n          git config --global user.name 'Your Name'\n          git config --global user.email '[email\u00a0protected]'\n          git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/${{ github.repository }}\n          git commit -am \"Automated report\"\n          git push\n\nFor further examples of push to origin during an on: pull_request workflow see this blog post, GitHub Actions: How to Automate Code Formatting in Pull Requests."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  pushUnqualifiedRefname"}, {"role": "assistant", "content": "Shown when git-push gives up trying to\nguess based on the source and destination refs what\nremote ref namespace the source belongs in, but where\nwe can still suggest that the user push to either refs/heads/* or refs/tags/* based on the type of the\nsource object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-checkout - Switch branches or restore working tree files  --progress  --no-progress"}, {"role": "assistant", "content": "Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless --quiet is specified. This flag enables progress reporting even if not\nattached to a terminal, regardless of --quiet ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  show [-u|--include-untracked|--only-untracked] [<diff-options>] [<stash>]"}, {"role": "assistant", "content": "Show the changes recorded in the stash entry as a diff between the\nstashed contents and the commit back when the stash entry was first\ncreated.\nBy default, the command shows the diffstat, but it will accept any\nformat known to git diff (e.g., git stash show -p stash@{1} to view the second most recent entry in patch form).\nIf no <diff-option> is provided, the default behavior will be given\nby the stash.showStat , and stash.showPatch config variables. You\ncan also use stash.showIncludeUntracked to set whether --include-untracked is enabled by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  contents:subject"}, {"role": "assistant", "content": "The first paragraph of the message, which typically is a\nsingle line, is taken as the \"subject\" of the commit or the\ntag message.\nInstead of contents:subject , field subject can also be used to\nobtain same results. :sanitize can be appended to subject for\nsubject line suitable for filename."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  gitattributesMissing"}, {"role": "assistant", "content": "(ERROR) Unable to read .gitattributes blob."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "SSL certificate problem: self signed certificate in certificate chain\n\nI have upgraded my Inteliij IDEA 2019.2 recently and I am getting the following error if I try to pull from using my IDE:\n\nGit Pull Failed: unable to access 'https://github.xxx.com/app-Hello-USD/DGS.git/': SSL certificate problem: self signed certificate in certificate chain.\n\nCould someone help me what option I have to enable?"}, {"role": "assistant", "content": "git config --global http.sslVerify false"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to use Bitbucket and GitHub at the same time for one project?\n\nI have one repository which I want to push into Bitbucket and GitHub.\nIt is vital for my repository to be hosted by both.\nIs there a way to do this in Git?"}, {"role": "assistant", "content": "You can use multiple remote repositories with git. But you'll have to push separately into 2 of your remotes I believe.\nFor example, if your project currently points to github, you can rename your current remote repository to github:\n$ git remote rename origin github\n\nYou can then add another remote repository, say bitbucket:\n$ git remote add bitbucket [email\u00a0protected]:your_user/your_repo.git\n\nNow in order to push changes to corresponding branch on github or bitbucket you can do this:\n$ git push github HEAD\n$ git push bitbucket HEAD\n\nSame rule applies to pulling: you need to specify which remote you want to pull from:\n$ git pull github your_branch\n$ git pull bitbucket your_branch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Migrate gitlab to gogs\n\nRecently, i found a Gitlab alternative called Gogs.\nAny suggestion for migrating repo in Gitlab to Gogs? I m not expecting all of it of course, just as much as possible."}, {"role": "assistant", "content": "The correct steps for mirroring a repo is:\n\n$ git clone --mirror [email\u00a0protected]/upstream-repository.git\n  $ cd upstream-repository.git\n  $ git push --mirror [email\u00a0protected]/new-location.git\n\nNote: Do not use git push --mirror if you did not clone the repo with git clone --mirror. Also, git clone --mirror is preferred over git clone --bare as it will clone all git notes and attributes as well.\nReference: http://blog.plataformatec.com.br/2013/05/how-to-properly-mirror-a-git-repository/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  --score-debug"}, {"role": "assistant", "content": "Include debugging information related to the movement of\nlines between files (see -C ) and lines moved within a\nfile (see -M ).  The first number listed is the score.\nThis is the number of alphanumeric characters detected\nas having been moved between or within files.  This must be above\na certain threshold for git blame to consider those lines\nof code to have been moved."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "githooks - Hooks used by Git  rebase"}, {"role": "assistant", "content": "For the squash and fixup operation, all commits that were\nsquashed are listed as being rewritten to the squashed commit.\nThis means that there will be several lines sharing the same new-object-name . The commits are guaranteed to be listed in the order that they were\nprocessed by rebase."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --shortstat"}, {"role": "assistant", "content": "Output only the last line of the --stat format containing total\nnumber of modified files, as well as number of added and deleted\nlines."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git merge develop into feature branch outputs \"Already up-to-date\" while it's not\nI checked out a feature branch from develop called branch-x. After a while other people pushed changes to the develop branch. \nI want to merge those changes into my branch-x. However if I do \ngit merge develop \n\nit says \"Already up-to-date\" and doesn't allow me to merge. \ngit diff develop shows that there are differences between branch-x and develop.\nHow do I merge develop into branch-x?"}, {"role": "assistant", "content": "You should first pull the changes from the develop branch and only then merge them to your branch:\ngit checkout develop \ngit pull \ngit checkout branch-x\ngit rebase develop\n\nOr, when on branch-x:\ngit fetch && git rebase origin/develop\n\n\nI have an alias that saves me a lot of time. Add to your ~/.gitconfig:\n[alias]\n    fr = \"!f() { git fetch && git rebase origin/\"$1\"; }; f\"\n\nNow, all that you have to do is:\ngit fr develop"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "HTML code into README.md on Github\n\nI tried to put some HTML snippets into my README.md on Github but the HTML codes are parsed.\nHow do I do it?\n<h2>Example of code</h2>\n\n<pre>\n    <div class=\"container\">\n        <div class=\"block two first\">\n            <h2>Your title</h2>\n            <div class=\"wrap\">\n                //Your content\n            </div>\n        </div>\n    </div>\n</pre>"}, {"role": "assistant", "content": "Try putting your HTML snippet inside an ```HTML block like this:\n```html\n<h2>Example of code</h2>\n\n<pre>\n    <div class=\"container\">\n        <div class=\"block two first\">\n            <h2>Your title</h2>\n            <div class=\"wrap\">\n            //Your content\n            </div>\n        </div>\n    </div>\n</pre>\n```"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Merge two Git repositories without breaking file history\nI need to merge two Git repositories into a brand new, third repository.  I've found many descriptions of how to do this using a subtree merge (for example Jakub Nar\u0119bski's answer on How do you merge two Git repositories?) and following those instructions mostly works, except that when I commit the subtree merge all of the files from the old repositories are recorded as new added files.  I can see the commit history from the old repositories when I do git log, but if I do git log <file> it shows only one commit for that file - the subtree merge.  Judging from the comments on the above answer, I'm not alone in seeing this problem but I've found no published solutions for it.\nIs there any way do merge repositories and leave individual file history intact?"}, {"role": "assistant", "content": "It turns out that the answer is much simpler if you're simply trying to glue two repositories together and make it look like it was that way all along rather than manage an external dependency.  You simply need to add remotes to your old repos, merge them to your new master, move the files and folders to a subdirectory, commit the move, and repeat for all additional repos.  Submodules, subtree merges, and fancy rebases are intended to solve a slightly different problem and aren't suitable for what I was trying to do.\nHere's an example Powershell script to glue two repositories together:\n# Assume the current directory is where we want the new repository to be created\n# Create the new repository\ngit init\n\n# Before we do a merge, we have to have an initial commit, so we'll make a dummy commit\ngit commit --allow-empty -m \"Initial dummy commit\"\n\n# Add a remote for and fetch the old repo\n# (the '--fetch' (or '-f') option will make git immediately fetch commits to the local repo after adding the remote)\ngit remote add --fetch old_a <OldA repo URL>\n\n# Merge the files from old_a/master into new/master\ngit merge old_a/master --allow-unrelated-histories\n\n# Move the old_a repo files and folders into a subdirectory so they don't collide with the other repo coming later\nmkdir old_a\ndir -exclude old_a | foreach { git mv $_.Name old_a }\n\n# Commit the move\ngit commit -m \"Move old_a files into subdir\"\n\n# Do the same thing for old_b\ngit remote add -f old_b <OldB repo URL>\ngit merge old_b/master --allow-unrelated-histories\nmkdir old_b\ndir \u2013exclude old_a,old_b | foreach { git mv $_.Name old_b }\ngit commit -m \"Move old_b files into subdir\"\n\nObviously you could instead merge old_b into old_a (which becomes the new combined repo) if you\u2019d rather do that \u2013 modify the script to suit.\nIf you want to bring over in-progress feature branches as well, use this:\n# Bring over a feature branch from one of the old repos\ngit checkout -b feature-in-progress\ngit merge -s recursive -Xsubtree=old_a old_a/feature-in-progress\n\nThat's the only non-obvious part of the process - that's not a subtree merge, but rather an argument to the normal recursive merge that tells Git that we renamed the target and that helps Git line everything up correctly.\nI wrote up a slightly more detailed explanation here."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_SSH_VARIANT"}, {"role": "assistant", "content": "If this environment variable is set, it overrides Git\u2019s autodetection\nwhether GIT_SSH / GIT_SSH_COMMAND / core.sshCommand refer to OpenSSH,\nplink or tortoiseplink. This variable overrides the config setting ssh.variant that serves the same purpose."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to make a GitHub mirror to Bitbucket?\n\nI have a repo that I've cloned from GitHub and want to have a mirror of this repo on BitBucket. Is there is any way how to do it? Something like having two origin in the repo as I think."}, {"role": "assistant", "content": "You could simply add a second remote:\ngit remote add bitbucket /url/to/am/empty/bitbucket/repo\n\nand push everything to bitbucket:\ngit push --mirror bitbucket\n\nYou can actually pull from or push to multiple remotes from your local repo.\n\nUpdate 2020:\nAs noted below in Rahulmohan Kolakandy's answer, if you are talking about an on-premise BitBucket server (as opposed to bitbucket.org), then you can take advantage of BitBucket Server Smart Mirroring.\nAs commented by V-Q-A NGUYEN: \nBitBucket Server Smart Mirroring (introduced originally in 2016, and Oct. 2017 for BitBucket Server)\n\nis only available for customers with an active Bitbucket Data Center license"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  combined, c"}, {"role": "assistant", "content": "Show differences from each of the parents to the merge\nresult simultaneously instead of showing pairwise diff between\na parent and the result one at a time. Furthermore, it lists\nonly files which were modified from all parents."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: move a commit \"on top\"\nLet's say in master I have a feature disabled.\nI work on that feature on branch feature, so I have a special commit $ there that just enables that feature.\nNow I want to merge the changes I did in feature into master, but keep the enabling commit out. So it's like\nmain:    A--B--X--Y\nfeature: A--B--$--C--D\n\nSo let's say I want to do it, by moving the $ commit on top of feature:\nnew feature: A--B--C--D--$\n\nHow would I go about doing that?"}, {"role": "assistant", "content": "git rebase -i B, and then move $ to the end of the list that shows up in your editor.  It will start out as the first line in the file that opens.  You could also just delete that line entirely, which will just drop that commit out of your branch's history."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Gist: How are images uploaded to a gist?\n\nHere is the image file:\nhttps://gist.github.com/mbostock/5503544#file-thumbnail-png\nI tried to drag-and-drop the image file in the edit mode of a gist.  That didn't seem to work in Chrome and FireFox.\nUpdate: After back and forth emails with GitHub, this feature (drag-and-drop binary files, including images) isn't supported."}, {"role": "assistant", "content": "With a little creativity you can achieve this faster than cloning. To drag/drop:\n\nCreate the Gist\nDrag an image into the comment field below. This will auto-upload your image file to https://user-images.githubusercontent.com and insert  markdown code in the comment field to display the image.\nCopy this markdown code to your gist\n\nNote: It is not required that you submit the comment.\nLive example"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to fix error 'not found husky-run' when committing new code?\nWhen committing on a project that uses Husky, I get an error that says not found husky-run\nI checked the package.json and it has husky as a dependency, and I can see the pre-commit hook configuration for Husky in the package.json. So I don't know what to do to fix this. Additionally, other members on my team can commit and husky works for them.\nI also tried rm -rf node_modules && npm install and then committing again, but still, I get the same error.\nAnyone else have ideas on how to fix this?"}, {"role": "assistant", "content": "To fix this there are two methods, depending on which version of Husky you are already on.\nIf you're using Husky v4 or lower, do the following:\nrm -rf .git/hooks\nnpm install\n\nFor Husky v7 or greater, do the following:\n# For NPM\n npm install husky@7 --save-dev \\\n      && npx husky-init \\\n      && npm exec -- github:typicode/husky-4-to-7 --remove-v4-config\n\n# For Yarn\n yarn add husky@7 --dev \\\n  && npx husky-init \\\n  && npm exec -- github:typicode/husky-4-to-7 --remove-v4-config\n# or\n yarn add husky@7 --dev \\\n  && yarn dlx husky-init --yarn2 \\\n  && npm exec -- github:typicode/husky-4-to-7 --remove-v4-config\n\nAt this point you should be able to commit and have your hooks working again.\nIf anything goes wrong, please read the documentation for migration from 4 to 7."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitfaq - Frequently asked questions about using Git  How do I specify my credentials when pushing over HTTP?"}, {"role": "assistant", "content": "The easiest way to do this is to use a credential helper via the credential.helper configuration.  Most systems provide a standard\nchoice to integrate with the system credential manager.  For example,\nGit for Windows provides the wincred credential manager, macOS has the osxkeychain credential manager, and Unix systems with a standard\ndesktop environment can use the libsecret credential manager.  All of\nthese store credentials in an encrypted store to keep your passwords or\ntokens secure. In addition, you can use the store credential manager which stores in a file\nin your home directory, or the cache credential manager, which does not\npermanently store your credentials, but does prevent you from being prompted for\nthem for a certain period of time. You can also just enter your password when prompted.  While it is possible to\nplace the password (which must be percent-encoded) in the URL, this is not\nparticularly secure and can lead to accidental exposure of credentials, so it is\nnot recommended."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Finding a branch point with Git?\nI have a repository with branches master and A and lots of merge activity between the two. How can I find the commit in my repository when branch A was created based on master?\nMy repository basically looks like this:\n-- X -- A -- B -- C -- D -- F  (master) \n          \\     /   \\     /\n           \\   /     \\   /\n             G -- H -- I -- J  (branch A)\n\nI'm looking for revision A, which is not what git merge-base (--all) finds."}, {"role": "assistant", "content": "I was looking for the same thing, and I found this question.  Thank you for asking it!\nHowever, I found that the answers I see here don't seem to quite give the answer you asked for (or that I was looking for) -- they seem to give the G commit, instead of the A commit.\nSo, I've created the following tree (letters assigned in chronological order), so I could test things out:\nA - B - D - F - G   <- \"master\" branch (at G)\n     \\   \\     /\n      C - E --'     <- \"topic\" branch (still at E)\n\nThis looks a little different than yours, because I wanted to make sure that I got (referring to this graph, not yours) B, but not A (and not D or E).  Here are the letters attached to SHA prefixes and commit messages (my repo can be cloned from here, if that's interesting to anyone):\nG: a9546a2 merge from topic back to master\nF: e7c863d commit on master after master was merged to topic\nE: 648ca35 merging master onto topic\nD: 37ad159 post-branch commit on master\nC: 132ee2a first commit on topic branch\nB: 6aafd7f second commit on master before branching\nA: 4112403 initial commit on master\n\nSo, the goal: find B.  Here are three ways that I found, after a bit of tinkering:\n\n1. visually, with gitk:\nYou should visually see a tree like this (as viewed from master):\n\nor here (as viewed from topic):\n\nin both cases, I've selected the commit that is B in my graph.  Once you click on it, its full SHA is presented in a text input field just below the graph.\n\n2. visually, but from the terminal:\ngit log --graph --oneline --all\n(Edit/side-note: adding --decorate can also be interesting; it adds an indication of branch names, tags, etc.  Not adding this to the command-line above since the output below doesn't reflect its use.)\nwhich shows (assuming git config --global color.ui auto):\n\nOr, in straight text:\n\n*   a9546a2 merge from topic back to master\n|\\  \n| *   648ca35 merging master onto topic\n| |\\  \n| * | 132ee2a first commit on topic branch\n* | | e7c863d commit on master after master was merged to topic\n| |/  \n|/|   \n* | 37ad159 post-branch commit on master\n|/  \n* 6aafd7f second commit on master before branching\n* 4112403 initial commit on master\n\nin either case, we see the 6aafd7f commit as the lowest common point, i.e. B in my graph, or A in yours.\n\n3. With shell magic:\nYou don't specify in your question whether you wanted something like the above, or a single command that'll just get you the one revision, and nothing else.  Well, here's the latter:\ndiff -u <(git rev-list --first-parent topic) \\\n             <(git rev-list --first-parent master) | \\\n     sed -ne 's/^ //p' | head -1\n6aafd7ff98017c816033df18395c5c1e7829960d\n\nWhich you can also put into your ~/.gitconfig as (note: trailing dash is important; thanks Brian for bringing attention to that):\n[alias]\n    oldest-ancestor = !zsh -c 'diff -u <(git rev-list --first-parent \"${1:-master}\") <(git rev-list --first-parent \"${2:-HEAD}\") | sed -ne \\\"s/^ //p\\\" | head -1' -\n\nWhich could be done via the following (convoluted with quoting) command-line:\ngit config --global alias.oldest-ancestor '!zsh -c '\\''diff -u <(git rev-list --first-parent \"${1:-master}\") <(git rev-list --first-parent \"${2:-HEAD}\") | sed -ne \"s/^ //p\" | head -1'\\'' -'\n\nNote: zsh could just as easily have been bash, but sh will not work -- the <() syntax doesn't exist in vanilla sh.  (Thank you again, @conny, for making me aware of it in a comment on another answer on this page!)\nNote: Alternate version of the above:\nThanks to liori for pointing out that the above could fall down when comparing identical branches, and coming up with an alternate diff form which removes the sed form from the mix, and makes this \"safer\" (i.e. it returns a result (namely, the most recent commit) even when you compare master to master):\nAs a .git-config line:\n[alias]\n    oldest-ancestor = !zsh -c 'diff --old-line-format='' --new-line-format='' <(git rev-list --first-parent \"${1:-master}\") <(git rev-list --first-parent \"${2:-HEAD}\") | head -1' -\n\nFrom the shell:\ngit config --global alias.oldest-ancestor '!zsh -c '\\''diff --old-line-format='' --new-line-format='' <(git rev-list --first-parent \"${1:-master}\") <(git rev-list --first-parent \"${2:-HEAD}\") | head -1'\\'' -'\n\nSo, in my test tree (which was unavailable for a while, sorry; it's back), that now works on both master and topic (giving commits G and B, respectively).  Thanks again, liori, for the alternate form.\n\nSo, that's what I [and liori] came up with.  It seems to work for me.  It also allows an additional couple of aliases that might prove handy:\ngit config --global alias.branchdiff '!sh -c \"git diff `git oldest-ancestor`..\"'\ngit config --global alias.branchlog '!sh -c \"git log `git oldest-ancestor`..\"'\n\nHappy git-ing!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitattributes - Defining attributes per path  binary"}, {"role": "assistant", "content": "Keep the version from your branch in the work tree, but\nleave the path in the conflicted state for the user to\nsort out."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gui.trustmtime"}, {"role": "assistant", "content": "Determines if git-gui should trust the file modification\ntimestamp or not. By default the timestamps are not trusted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  master"}, {"role": "assistant", "content": "The default development branch . Whenever you\ncreate a Git repository , a branch named\n\"master\" is created, and becomes the active branch. In most\ncases, this contains the local development, though that is\npurely by convention and is not required."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  gitcvs.dbUser, gitcvs.dbPass"}, {"role": "assistant", "content": "Database user and password. Only useful if setting gitcvs.dbDriver ,\nsince SQLite has no concept of database users and/or passwords. gitcvs.dbUser supports variable substitution (see git-cvsserver for details)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --recurse-submodules-default=[yes|on-demand]"}, {"role": "assistant", "content": "This option is used internally to temporarily provide a\nnon-negative default value for the --recurse-submodules\noption.  All other methods of configuring fetch\u2019s submodule\nrecursion (such as settings in gitmodules and git-config ) override this option, as does\nspecifying --[no-]recurse-submodules directly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Saving ssh key fails\n\ni just started a Git tutorial and I get to a deadend: I try to generate a rsa key part and it fails.\nI did this, in git bash:\nssh-keygen -t rsa -C \"[email\u00a0protected]\"\n\nAnd i got this:\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/c/Users/Eva/.ssh/id_rsa):\nenter passphrase:\nenter same passphrase again:\nopen /c/Users/Eva/.ssh/id_rsa failed: no such file or directory.\nSaving the key failed:/c/Users/Eva/.ssh/id_rsa.\n\nI tried to save in a different folder and it went OK. but now i do the command ssh -T [email\u00a0protected]  and it gives me the error permisson denied (publickey)."}, {"role": "assistant", "content": "If you're using Windows, the unix-style default path of ssh-keygen is at fault.\nIn Line 2 it says Enter file in which to save the key (/c/Users/Eva/.ssh/id_rsa):.\nThat full filename in the parantheses is the default, obviously Windows cannot access a file like that. If you type the Windows equivalent (c:\\Users\\Eva\\.ssh\\id_rsa), it should work.\nBefore running this, you also need to create the folder. You can do this by running mkdir c:\\Users\\Eva\\.ssh, or by created the folder \".ssh.\" from File Explorer (note the second dot at the end, which will get removed automatically, and is required to create a folder that has a dot at the beginning).\nc:\\Users\\Administrator\\.ssh>ssh-keygen -t rsa -C \"[email\u00a0protected]\"\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/Administrator/.ssh/id_rsa): C:\\Users\\Administrator\\.ssh\\id_rsa\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in C:\\Users\\Administrator\\.ssh\\id_rsa.\nYour public key has been saved in C:\\Users\\Administrator\\.ssh\\id_rsa.pub.\nThe key fingerprint is:\n... [email\u00a0protected]\nThe key's randomart image is:...`\n\nI know this is an old thread, but I thought the answer might help others."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to get commit history for just one branch?\nLet's say I created a new branch my_experiment from  master and made several commits to my_experiment. If I do a git log when on my_experiment, I see the commits made to this branch, but also the commits made to master before the my_experiments branch was created.\nI would find it very useful to see the history of all commits to the my_experiments branch until it hits the creation of that branch - effectively a true history of just that branch. Otherwise it's not clear to me when looking through the log whether the commits were on the my_experiments branch or not.\nIs there a way to do this with Git?"}, {"role": "assistant", "content": "You can use a range to do that.\ngit log master..\n\nIf you've checked out your my_experiment branch. This will compare where master is at to HEAD (the tip of my_experiment)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-sh-setup"}, {"role": "assistant", "content": "Common Git shell script setup code"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  EMAIL"}, {"role": "assistant", "content": "The email address used in the author and committer identities if no other\nrelevant environment variable or configuration setting has been set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-gc - Cleanup unnecessary files and optimize the local repository  --force"}, {"role": "assistant", "content": "Force git gc to run even if there may be another git gc instance running on this repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gittutorial - A tutorial introduction to Git"}, {"role": "assistant", "content": "DESCRIPTION This tutorial explains how to import a new project into Git, make\nchanges to it, and share changes with other developers. If you are instead primarily interested in using Git to fetch a project,\nfor example, to test the latest version, you may prefer to start with\nthe first two chapters of The Git User\u2019s Manual . First, note that you can get documentation for a command such as git log --graph with: $ man git-log or: $ git help log With the latter, you can use the manual viewer of your choice; see git-help for more information. It is a good idea to introduce yourself to Git with your name and\npublic email address before doing any operation.  The easiest\nway to do so is: $ git config --global user.name \"Your Name Comes Here\"\n$ git config --global user.email you@yourdomain.example.com"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why is the `git subtree` not working even though I have git 1.8.3.2 installed on Ubuntu 12.10?\nI am about to deploy my AngularJS based static site as a Github Page with Yeoman. Step 3 of the deployment instructions tell me to do\ngit subtree push --prefix dist origin gh-pages\nbut when I enter that I get \ngit: 'subtree' is not a git command. See 'git --help'.\nThis SO answer provided me instructions on how to upgrade to the latest git-core and ensure it  always get upgraded to the latest stable release. \nsudo add-apt-repository ppa:git-core/ppa\nsudo apt-get update\nsudo apt-get install git\n\nAfter running those commands I did git --version to make sure I had the latest version and apparently I did since git version 1.8.3.2 was the output. Now when I tried running \ngit subtree push --prefix dist origin gh-pages \nagain I still got the same following error \ngit: 'subtree' is not a git command. See 'git --help'. \nFinally I just restarted Ubuntu 12.10 and tried to run the command again but once again, I got the same error. \nHow come the git subtree command is still not working even though I have upgraded to the current stable release?"}, {"role": "assistant", "content": "It actually is installed on Ubuntu but for some reason it's not put anyplace where git can find it. Easiest way is to create a symlink:\nsudo chmod +x /usr/share/doc/git/contrib/subtree/git-subtree.sh\nsudo ln -s /usr/share/doc/git/contrib/subtree/git-subtree.sh /usr/lib/git-core/git-subtree\n\nUPDATE 1: looks like a patch has been submitted upstream to fix this but it hasn't yet been merged.\nUPDATE 2: the patch to fix this in Debian has been merged, but since they went the route of a separate git-subtree package I don't think this will make it to Ubuntu 12.04. Seems to not be an issue in 14.04 as /usr/lib/git-core/git-subtree is already created correctly by the git package."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-request-pull - Generates a summary of pending changes  <end>"}, {"role": "assistant", "content": "Commit to end at (defaults to HEAD).  This names the commit\nat the tip of the history you are asking to be pulled. When the repository named by <URL> has the commit at a tip of a\nref that is different from the ref you have locally, you can use the <local>:<remote> syntax, to have its local name, a colon : , and\nits remote name."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git interactive rebase no commits to pick\nI'm on master and I did rebase -i <my_branch>\nGot this:\nnoop\n\n# Rebase c947bec..7e259d3 onto c947bec\n#\n# Commands:\n#  p, pick = use commit\n#  r, reword = use commit, but edit the commit message\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#  f, fixup = like \"squash\", but discard this commit's log message\n#  x <cmd>, exec <cmd> = Run a shell command <cmd>, and stop if it fails\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n# However, if you remove everything, the rebase will be aborted.\n#\n\nI would like to pick some commits not all as some of them are not welcome.\nAlso how do you work when you want to keep some files or changes always 'local' to some branch? Is there some helper like .gitignore?"}, {"role": "assistant", "content": "Like a non-interactive rebase, you have to rebase onto a particular commit.\nWith a non-interactive rebase, if you supply a direct ancestor of the current commit then you aren't changing anything; with an interactive rebase you can edit commits after the commit that you are rebasing onto, even if the commit is a direct ancestor of your current commit but you do have to specify this commit that you want to edit onwards from.\nI don't know the details of your situation but you might want something like this:\n# Opportunity to edit or prune commits between origin/master and current branch\ngit rebase -i origin/master\n\nor\n# Edit some of the last ten commits\ngit rebase -i HEAD~10 # Note that ~10 uses a tilde(\"~\") not a dash(\"-\"_) !"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --mergeinfo=<mergeinfo>"}, {"role": "assistant", "content": "Add the given merge information during the dcommit\n(e.g. --mergeinfo=\"/branches/foo:1-10\" ). All svn server versions can\nstore this information (as a property), and svn clients starting from\nversion 1.5 can make use of it. To specify merge information from multiple\nbranches, use a single space character between the branches\n( --mergeinfo=\"/branches/foo:1-10 /branches/bar:3,5-6,8\" ) config key: svn.pushmergeinfo This option will cause git-svn to attempt to automatically populate the\nsvn:mergeinfo property in the SVN repository when possible. Currently, this can\nonly be done when dcommitting non-fast-forward merges where all parents but the\nfirst have already been pushed into SVN."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git repository ignoring all .dlls\nTitle says it all. I am trying to add my NuGet packages to the repository. Everything but the .dll files are being detected. \nThe gitignore file contains no references to *.dll. The .dll files don't get recognized when located anywhere in the entire repository. info/exclude is also empty.\nI have also cloned the repository (file-system to file-system as opposed from remote to file-sysytem) with no luck. This issue also happens on two different computers.\nI could add the .dll files manually, but they should be tracked. Why are they not being tracked?"}, {"role": "assistant", "content": "Do you have either ~/.gitignore_global or ~/.gitignore in your home directory which could also be listing these file patterns?\nSee https://help.github.com/articles/ignoring-files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  reset"}, {"role": "assistant", "content": "Reset an existing branch (or a new branch) to a specific\nrevision.  This command must be used to change a branch to\na specific revision without making a commit on it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Cant commit after starting a merge in Sourcetree\nWhen trying to commit after a merge I'm getting this error message:\n\n\"fatal: You are in the middle of a merge -- cannot amend.\"\n\nHow do i resolve this? as far as I know I have resolved all conflicts, i just need to complete the merge and commit the changes. but the product won't let me and doesn't give me any clues as to what I am meant to do next, and there is no option to \"complete the merge\"\nEverytime I try to commit my changes I get the error message and I now have no idea what to do about it!"}, {"role": "assistant", "content": "You can manually delete .git/MERGE_HEAD and Git won't be able to tell that you were just doing a merge. It will let you amend the previous commit with the changes in your index just like normal.\nPlease read:\nThough this would work, it is a hack and not recommended. All is needed here is to let git know the merge is completed git commit -a as per this answer"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": ".gitignore not ignoring .idea path\nWhat am I missing that needs to be done in order to get git to ignore my .idea/ path?\nctote@ubuntu:~/dev/1$ git status\nOn branch master\nYour branch is up-to-date with 'origin/master'.\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n    modified:   .idea/.name\n    modified:   .idea/misc.xml\n    modified:   .idea/modules.xml\n    modified:   .idea/vcs.xml\n    modified:   .idea/workspace.xml\n    modified:   src/Receiver.java\n    modified:   test/1/agent/WindowsQueryHandlerTest.java\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n    lib/\n    mp1.iml\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n\nctote@ubuntu:~/dev/1$ cat .gitignore\n*.class\n\n# Package Files #\n*.war\n*.ear\n\n# IDEA config files\n.idea/"}, {"role": "assistant", "content": ".gitignore only ignores newly added (untracked) files.\nIf you have files that have already been added to the repository, all their changes will be tracked as usual, even if they are matched by .gitignore rules.\nTo remove that folder from the repository (without deleting it from disk), do:\ngit rm --cached -r .idea"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to change the project owner in GitLab\n\nHow can I change the project owner in GitLab?\nThere are options in project settings, but in the \"transfer\" field, it does not recognize any username or anything. Is it possible to change the owner-permissions and root-privileges?"}, {"role": "assistant", "content": "TL;DR\nMove your project to a new group where both you and the other user are owners, then the other user must transfer it to his own namespace.\nBackground\nThe other answers obviously do not work to transfer a project to a different user, although the comments section of one is enough for someone to figure it out. Also there is this issue on GitLab itself that provides some insights.\nMy Situation\nI installed and now administer a few instances of GitLab for a few small developer teams as well as one for my personal projects. Resultingly, I have run into numerous questions about this. I keep coming back to this question only to realize that it was never actually answered correctly.\nThe Namespace Problem\nThe issue that you face when doing this is that there can only be one owner of a project, but to transfer a project you have to own the namespace that you are transferring it to. To my knowledge there is no other way to move a project. For completeness, I'll add that the namespace here is, e.g., \"gitlab.com/my-user-name/...\" or \"gitlab.com/my-group-name/...\".\n\nSolution\nBecause one user cannot \"own\" another namespace (not even admins), the only option to set up a scenario where two users own the same namespace is with a group. Perform the following steps to accomplish this.\n\nCreate a new group.\nAdd the user that you want to transfer your project to as an owner member of that group.\nTransfer your project to that group (a namespace you manage because you are an owner).\nLogin as the other user, then transfer the group project to the \"other user\" namespace.\n\nAt this point you will be left as a master in the project. You can now remove yourself from the project entirely if desired."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  -I<regex>  --ignore-matching-lines=<regex>"}, {"role": "assistant", "content": "Ignore changes whose all lines match <regex>.  This option may\nbe specified more than once."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  remote.pushDefault"}, {"role": "assistant", "content": "The remote to push to by default.  Overrides branch.<name>.remote for all branches, and is overridden by branch.<name>.pushRemote for specific branches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gerrit - git (pull vs checkout vs cherrypick) which is for what?\nIn Android's gerrit ex: link, to download the patch, I see 4 options.\n\nrepo download\ncheckout\npull\ncherry-pick\n\nWhat is the difference between them?\nHere is what I think of them. Please clarify\n\nrepo download --> Downloads full source code(of all git repos in the project) till this commit\ncheckout --> Not sure what it is.\npull --> Not sure what it does?\ncherry-pick --> It tries to download only this change and merge it into the source code.\n\nI know that pull and checkout are different from cherry-pick. But how are they different?"}, {"role": "assistant", "content": "You are right about the first one. Here are the rest of them:\n\nCheckout: Fetches the latest changes. You should already have this repo downloaded. It does not merge those new changes but makes your working directory reflect them. And a name-less commit is created to include these changes in your working directory. And a detached HEAD pointing to it. You can merge them at your leisure later.\n\nPull: Fetches the changes AND merges them into the local branch of the same name.\n\nCherry-pick: Fetches the commit and plays it on top of the current local branch, thus creating an entirely new commit which happens to have same changes as the one it fetched.\n\n\nThey are a little different than what they actually mean in git. checkout and cherry-pick don't automatically fetch the changes. checkout just takes HEAD to a commit you specify, thus making working directory exactly as it was at that commit. Likewise, cherry-pick is used to replay commits which you already have local access to."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.repositoryFormatVersion"}, {"role": "assistant", "content": "Internal variable identifying the repository format and layout\nversion."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitsubmodules - Mounting one repository inside another"}, {"role": "assistant", "content": "FORMS Submodules can take the following forms: The basic form described in DESCRIPTION with a Git directory,\na working directory, a gitlink , and a .gitmodules entry. \"Old-form\" submodule: A working directory with an embedded .git directory, and the tracking gitlink and .gitmodules entry in\nthe superproject. This is typically found in repositories generated\nusing older versions of Git. It is possible to construct these old form repositories manually. When deinitialized or deleted (see below), the submodule\u2019s Git\ndirectory is automatically moved to $GIT_DIR/modules/<name>/ of the superproject. Deinitialized submodule: A gitlink , and a .gitmodules entry,\nbut no submodule working directory. The submodule\u2019s Git directory\nmay be there as after deinitializing the Git directory is kept around.\nThe directory which is supposed to be the working directory is empty instead. A submodule can be deinitialized by running git submodule deinit .\nBesides emptying the working directory, this command only modifies\nthe superproject\u2019s $GIT_DIR/config file, so the superproject\u2019s history\nis not affected. This can be undone using git submodule init . Deleted submodule: A submodule can be deleted by running git rm <submodule-path> && git commit . This can be undone\nusing git revert . The deletion removes the superproject\u2019s tracking data, which are\nboth the gitlink entry and the section in the .gitmodules file.\nThe submodule\u2019s working directory is removed from the file\nsystem, but the Git directory is kept around as it to make it\npossible to checkout past commits without requiring fetching\nfrom another repository. To completely remove a submodule, manually delete $GIT_DIR/modules/<name>/ ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-restore - Restore working tree files  -m  --merge"}, {"role": "assistant", "content": "When restoring files on the working tree from the index,\nrecreate the conflicted merge in the unmerged paths.\nThis option cannot be used when checking out paths from a\ntree-ish (i.e. with the --source option)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What does \"Changes not staged for commit\" mean\nI thought if you want to track the files you should  git add [files you want to track]\nI don't know why I got the messages Changes not staged for commit.\nIf those files were not staged, shouldn't git shows me those files were  Untracked like that\n\nAll I've done was create a new feature from develop branch and worked in feature/change_excel_format branch\nI thought Those files should be in staged status,\nBut git status told me Changes not staged for commit\n\nTo brief, \nI only know there are 3 stages in git  untracked, staged, committed\nCan any one tell me , what was the stage in for Changes not staged for commit\n\nSo if I modified the  file a  (already in the repo)\nand type git st , the git will tell me Changes not staged for commit\nif I  git a then the file a will be in staged status\nif I modified the file a now, there will be two status of file a in git, right ?\nSo I have to decide if make the staged a be commit or make the not stage a to be staged,\nand then the previous staged file awill be discard ?"}, {"role": "assistant", "content": "when you change a file which is already in the repository, you have to git add it again if you want it to be staged.\nThis allows you to commit only a subset of the changes you made since the last commit. For example, let's say you have file a, file b and file c. You modify file a and file b but the changes are very different in nature and you don't want all of them to be in one single commit. You issue\ngit add a\ngit commit a -m \"bugfix, in a\"\ngit add b\ngit commit b -m \"new feature, in b\"\n\nAs a side note, if you want to commit everything you can just type\ngit commit -a"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git push requires username and password\n\nI cloned a Git repository from my GitHub account to my PC.\nI want to work with both my PC and laptop, but with one GitHub account.\nWhen I try to push to or pull from GitHub using my PC, it requires a username and password, but not when I'm using the\u00a0laptop!\nI don't want to type my username and password every time I interact with\u00a0origin. What am I missing\u00a0here?"}, {"role": "assistant", "content": "A common cause is cloning using the default (HTTPS) instead of SSH. You can correct this by going to your repository, clicking \"Clone or download\", then clicking the \"Use SSH\" button above the URL field and updating the URL of your origin remote like this:\ngit remote set-url origin [email\u00a0protected]:username/repo.git\n\nYou can check if you have added the remote as HTTPS or SSH using:\ngit remote -v\n\nThis is documented at GitHub: Switching remote URLs from HTTPS to SSH."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --verify"}, {"role": "assistant", "content": "Allows the pre-rebase hook to run, which is the default.  This option can\nbe used to override --no-verify .  See also githooks ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  t"}, {"role": "assistant", "content": "for a successful tag update;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "github Readme - reference issue\n\nHow can I reference (insert a relative link to) an issue in my github Readme.md?\nI found the following document GitHub Flavored Markdown where it is described how to reference to an issue in a commit, but not in the readme.\nE.g. if the Issue is: https://github.com/user/project/issues/5 how can I set a link to it in my readme without using absolute links?"}, {"role": "assistant", "content": "There's a pretty ugly way of doing something like that if you only want to refer to issues from the same repo, which as of 2015-04-29 works:\nsee also [#3](/../../issues/3)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  format.numbered"}, {"role": "assistant", "content": "A boolean which can enable or disable sequence numbers in patch\nsubjects.  It defaults to \"auto\" which enables it only if there\nis more than one patch.  It can be enabled or disabled for all\nmessages by setting it to \"true\" or \"false\".  See --numbered\noption in git-format-patch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why can't I use TortoiseMerge as my git merge tool on Windows?\nI'm trying to perform my first Git merge ever (exciting!), but can't get Git Gui (0.13.GITGUI from Git 1.7.4.msysgit.0) to recognize TortoiseMerge (1.6.11.20210 x64) on Windows 7.  Based on an answer to a similar question, I've made the following configuration changes:\n$ git config --global merge.tool tortoisemerge\n$ git config --global mergetool.tortoisemerge.cmd 'TortoiseMerge.exe -base:\"$BASE\" -mine:\"$LOCAL\" -theirs:\"$REMOTE\" -merged:\"$MERGED\"'\n$ git config --global --list\n...snip...\nmerge.tool=tortoisemerge\nmergetool.tortoisemerge.cmd=TortoiseMerge.exe -base:\"$BASE\" -mine:\"$LOCAL\" -theirs:\"$REMOTE\" -merged:\"$MERGED\"\n$\n\nUnfortunately, when I start Git Gui and attempt to \"Run Merge Tool\", I receive the error Unsupported merge tool 'tortoisemerge'.\nCan anyone tell me what I've done wrong?  Here's the relevant sections of my ~/.gitconfig:\n[merge]\n        tool = tortoisemerge\n[mergetool \"tortoisemerge\"]\n        cmd = TortoiseMerge.exe -base:\\\"$BASE\\\" -mine:\\\"$LOCAL\\\" -theirs:\\\"$REMOTE\\\" -merged:\\\"$MERGED\\\"\n\nUpdate\nTortoiseMerge works fine with the above config when running git mergetool from the command line.  It seems that only Git Gui has problems with it.  :-/"}, {"role": "assistant", "content": "If you have the latest git, run this command line once:\ngit config merge.tool tortoisemerge\nImportant: Do not add a .exe extension to the command.\nIf that fails, or if you want to add a different merge tool that git doesn't know about, do this:\nOpen one of the following in an editor:\n\n64-bit git: C:\\Program Files\\Git\\mingw64\\share\\git-gui\\lib\\mergetool.tcl\n32-bit git: C:\\Program Files (x86)\\Git\\share\\git-gui\\lib\\mergetool.tcl\n\nAdd something like this to mergetool.tcl:\ntortoisemerge {\n    set cmdline [list TortoiseMerge.exe -base:\"$BASE\" -mine:\"$LOCAL\" -theirs:\"$REMOTE\" -merged:\"$MERGED\"]\n}\n\nPut the new tortoisemerge entry above this other code:\ndefault {\n        error_popup [mc \"Unsupported merge tool '%s'\" $tool]\n        return\n}\n\nBonus example:\nTo use SourceGear diffmerge, add this to mergetool.tcl:\ndiffmerge {\n    set cmdline [list \"C:/Program Files (x86)/SourceGear/DiffMerge/DiffMerge.exe\" --merge --result=$MERGED $LOCAL $BASE $REMOTE]\n}"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  <limit>"}, {"role": "assistant", "content": "An integer parameter specifies a cut-off percent (3% by default).\nDirectories contributing less than this percentage of the changes\nare not shown in the output."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  url.<base>.insteadOf"}, {"role": "assistant", "content": "Any URL that starts with this value will be rewritten to\nstart, instead, with <base>. In cases where some site serves a\nlarge number of repositories, and serves them with multiple\naccess methods, and some users need to use different access\nmethods, this feature allows people to specify any of the\nequivalent URLs and have Git automatically rewrite the URL to\nthe best alternative for the particular user, even for a\nnever-before-seen repository on the site.  When more than one\ninsteadOf strings match a given URL, the longest match is used. Note that any protocol restrictions will be applied to the rewritten\nURL. If the rewrite changes the URL to use a custom protocol or remote\nhelper, you may need to adjust the protocol.*.allow config to permit\nthe request.  In particular, protocols you expect to use for submodules\nmust be set to always rather than the default of user . See the\ndescription of protocol.allow above."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Set up a default directory structure on git init\nI would like to optimise my git workflow by automating creation of .gitignore, README, LICENSE and other files on git init command.\nTo do that I RTFM of git init at http://git-scm.com/docs/git-init and it tells me to do one of the following:\n\nUse git init --template=<template_directory>, but it's bothersome.\nAlter the contents of the $GIT_TEMPLATE_DIR environment variable, but I would rather not.\nSet the init.templatedir configuration variable. Now we're talking!\n\nSo I sudo mkdir /usr/share/git-core/templates/my_template and touch some files in it, then I vim ~/.gitconfig and append:\n[init]\n    templatedir = /usr/share/git-core/templates/my_template\n\nAnd git config -l tells me:\n\n...\n  init.templatedir=/usr/share/git-core/templates/my_template\n  ...\n\nHappy with myself, I go to my development playground directory and:\n$ git init\nInitialized empty Git repository in /the/current/directory\n$ ls -a\n.   ..  .git\n\nBummer... where are the files? :(\nQuick check:\n$ ls -a /usr/share/git-core/templates/my_template\n.   ..  .gitignore  LICENSE README.md\n$ git --version\ngit version 1.8.2.1\n\nIt seems that $ git init --template=/usr/share/git-core/templates/my_template doesn't work either.\nSo what is it that I'm doing wrong here? Incorrect configuration directive? Bad template or its location (I'm on OSX)? Should template be a git repo? A bare one?"}, {"role": "assistant", "content": "The behavior you're seeing is the expected git behavior:\nIf you read the manual correctly about the template directory:\n\nTEMPLATE DIRECTORY\nThe template directory contains files and\n  directories that will be copied to the $GIT_DIR after it is created.\n\nThe files which are copied from the template directory are placed in your GIT_DIR which defaults to the .git directory under your repo's root directory.\ngit init does not support templates for the work-tree as far as I know. If this behavior is required, you should be able to get away with writing some simple bash aliases or functions to do this for you."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.splitIndex"}, {"role": "assistant", "content": "If true, the split-index feature of the index will be used.\nSee git-update-index . False by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --show-prefix"}, {"role": "assistant", "content": "When the command is invoked from a subdirectory, show the\npath of the current directory relative to the top-level\ndirectory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  ISO 8601"}, {"role": "assistant", "content": "Time and date specified by the ISO 8601 standard, for example 2005-04-07T22:13:13 . The parser accepts a space instead of the T character as well. Fractional parts of a second will be ignored,\nfor example 2005-04-07T22:13:13.019 will be treated as 2005-04-07T22:13:13 . Note In addition, the date part is accepted in the following formats: YYYY.MM.DD , MM/DD/YYYY and DD.MM.YYYY ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to resolve \"GitLab: API is not accessible\" when pushing to a new repository?\n\nwe have a locally-hosted Enterprise Edition of GitLab at my place of employment (currently at v7.12.00-ee ceb5083). I can create a repository through the GUI without issue.  But when I try to add anything to the repository, I get this error:\nD:\\ws\\testing [master]> git push -u origin master\nCounting objects: 3, done.\nWriting objects: 100% (3/3), 219 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nremote: GitLab: API is not accessible\nTo http://gitlab.ops.cld/duffrw/testing.git\n ! [remote rejected] master -> master (pre-receive hook declined)\nerror: failed to push some refs to 'http://gitlab.ops.cld/duffrw/testing.git'\n\nI see in the /var/log/gitlab/gitlab-shell/gitlab-shell.log file that the API isn't responding, and is giving an \"Internal Server Error\":\nE, [2015-07-22T16:05:51.812454 #15110] ERROR -- : API call <POST http://127.0.0.1:8080/api/v3/internal/allowed> failed: 500 => <{\"message\":\"500 Internal Server Error\"}>.\n\nA few questions... Where can I go from here? There must some sort of service provider that isn't running. Why not? What's it called? How do I start it?\nI checked in /var/log/gitlab/nginx/gitlab_access.log and found these lines, but I didn't see anything interesting:\n172.31.201.164 - - [22/Jul/2015:16:05:50 +0000] \"GET /duffrw/testing.git/info/refs?service=git-receive-pack HTTP/1.1\" 401 0 \"-\" \"git/1.9.5.msysgit.1\"\n172.31.201.164 - - [22/Jul/2015:16:05:50 +0000] \"GET /duffrw/testing.git/info/refs?service=git-receive-pack HTTP/1.1\" 401 0 \"-\" \"git/1.9.5.msysgit.1\"\n172.31.201.164 - duffrw [22/Jul/2015:16:05:51 +0000] \"GET /duffrw/testing.git/info/refs?service=git-receive-pack HTTP/1.1\" 200 179 \"-\" \"git/1.9.5.msysgit.1\"\n172.31.201.164 - duffrw [22/Jul/2015:16:05:51 +0000] \"POST /duffrw/testing.git/git-receive-pack HTTP/1.1\" 200 124 \"-\" \"git/1.9.5.msysgit.1\"\n\nThere aren't any errors for the push of this repository in /var/log/gitlab/nginx/gitlab_error.log and /var/log/gitlab/nginx/error.log is completely empty.\nWhat am I missing?\nUpdate:\nUsing the gitlab-ctl tail command is very handy!  It revealed a stack trace, which I sent to GitLab and they told me that this was a bug in 7.12.00. It is fixed in 7.13.00."}, {"role": "assistant", "content": "If using gitlab.com, the server is either being updated or having issues.\nYou can check https://status.gitlab.com for updates from the GitLab team.\nThere's also a Twitter account you can follow: https://twitter.com/gitlabstatus"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  signature:fingerprint"}, {"role": "assistant", "content": "The fingerprint of the GPG signature of a commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to refer to a previous commit in git commit message\nIs there a convention for referring to a previous commit in a git commit message?\nExample commit message:\nFixed bug such and such introduced in a1b2c3e4\n\nIn particular, is there a convention that github.com will understand, and convert to a link?"}, {"role": "assistant", "content": "Yup - GitHub will pick up references to SHAs and users/repos patterns using the GitHub Flavored Markdown\nSpecifically about linking to commits:\n\nA bit of the GitHub spice\nIn addition to the changes in the previous section, certain references are auto-linked:\n\nSHA: be6a8cc1c1ecfe9489fb51e4869af15a13fc2cd2\nUser@SHA ref: mojombo@be6a8cc1c1ecfe9489fb51e4869af15a13fc2cd2\nUser/Project@SHA: mojombo/god@be6a8cc1c1ecfe9489fb51e4869af15a13fc2cd2\n#Num: #1\nUser/#Num: mojombo#1\nUser/Project#Num: mojombo/god#1"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Trigger a GitHub Action when another repository creates a new release\n\nI'm trying to build a GitHub workflow that will be triggered when another repository creates a new release.\nIn the documentation, there is the paragraph: on.event_name.types where event_name will be release.\nThe question is: Is there any way to refer to the release event of another repository?"}, {"role": "assistant", "content": "Is there any way to refer to the release event of another repository?\n\nFairly sure this feature does not exist.\nIf you have have access to the repository creating the release then you could call a webhook event to trigger an on: repository_dispatch workflow to run in another repository. repository-dispatch action can help in this case.\nIf you don't have access to the repository creating the release (which I assume is the case here) then this would be my suggestion. First, create the following workflow that periodically checks the release version tag of the repository you want to track. If it differs from the release version you currently have saved in your repository then the new version will be committed.\nNote that you must prepare the destination file first (e.g. release-versions/swagger-ui-latest.txt) for the the modified files check to work.\nFurther, you must use a repo scoped token instead of the default GITHUB_TOKEN. For more detail about that see Push to origin from GitHub action\nname: Get latest release version\non:\n  schedule:\n    - cron:  '0 10 * * *'\njobs:\n  get-version:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          token: ${{ secrets.REPO_SCOPED_TOKEN }}\n      - name: Fetch release version\n        run: |\n          curl -sL https://api.github.com/repos/swagger-api/swagger-ui/releases/latest | \\\n          jq -r \".tag_name\" > release-versions/swagger-ui-latest.txt\n      - name: Check for modified files\n        id: git-check\n        run: echo ::set-output name=modified::$([ -z \"`git status --porcelain`\" ] && echo \"false\" || echo \"true\")\n      - name: Commit latest release version\n        if: steps.git-check.outputs.modified == 'true'\n        run: |\n          git config --global user.name 'Your Name'\n          git config --global user.email '[email\u00a0protected]'\n          git commit -am \"New release version\"\n          git push\n\nThen you can create a second workflow that only runs when it sees any changes to the directory release-versions.\non:\n  push:\n    paths:\n      - 'release-versions/*'\n\nIn this workflow you can use the saved version to fetch the assets you need and do whatever processing you need to.\nHere is a similar example that raises a pull request instead of committing immediately."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git is really slow for 100,000 objects. Any fixes?\nI have a \"fresh\" git-svn repo (11.13 GB) that has over a 100,000 objects in it.\nI have preformed\ngit fsck\ngit gc\n\non the repo after the initial checkout.\nI then tried to do a\ngit status\n\nThe time it takes to do a git status is anywhere from 2m25.578s and 2m53.901s\nI tested git status by issuing the command\ntime git status\n\n5 times and all of the times ran between the two times listed above.\nI am doing this on a Mac OS X, locally not through a VM.\nThere is no way it should be taking this long.\nAny ideas? Help?\nThanks.\nEdit\nI have a co-worker sitting right next to me with a comparable box.  Less RAM and running Debian with a jfs filesystem.  His git status runs in .3 on the same repo (it is also a git-svn checkout).\nAlso, I recently changed my file permissions (to 777) on this folder and it brought the time down considerably (why, I have no clue).  I can now get it done anywhere between 3 and 6 seconds.  This is manageable, but still a pain."}, {"role": "assistant", "content": "It came down to a couple of items that I can see right now.\n\ngit gc --aggressive\nOpening up file permissions to 777\n\nThere has to be something else going on, but this was the things that clearly made the biggest impact."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ALTERNATE_OBJECT_DIRECTORIES"}, {"role": "assistant", "content": "Due to the immutable nature of Git objects, old objects can be\narchived into shared, read-only directories. This variable\nspecifies a \":\" separated (on Windows \";\" separated) list\nof Git object directories which can be used to search for Git\nobjects. New objects will not be written to these directories. Entries that begin with \" (double-quote) will be interpreted\nas C-style quoted paths, removing leading and trailing\ndouble-quotes and respecting backslash escapes. E.g., the value \"path-with-\\\"-and-:-in-it\":vanilla-path has two paths: path-with-\"-and-:-in-it and vanilla-path ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git merge two local branches\nI have branch Master, branchA and branchB.\nNow I'm working in the branchA and I need to merge branchA with branchB and proceed my work in the branchA. All files are comitted in the branchA and branchB.\nWhat's the fast way to implement it?"}, {"role": "assistant", "content": "If I understood your question, you want to merge branchB into branchA. To do so,\nfirst checkout branchA like below,\ngit checkout branchA\n\nThen execute the below command to merge branchB into branchA:\ngit merge branchB\n\nYou can also condense this into one liner:\ngit merge branchA branchB"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  transfer.advertiseObjectInfo"}, {"role": "assistant", "content": "When true , the object-info capability is advertised by\nservers. Defaults to false."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Move branch to another branch\nI have started doing some work on a branch which I have in term realised was the wrong branch. Is there a way to move a branch to a different branch.\nFor example:\nA -- B -- C -- D -- HEAD\n \\-- E -- F -- G -- H -- I -- J\n      \\-- K -- L\n\nAnd I want this:\nA -- B -- C -- D -- HEAD\n \\    \\-- K -- L\n  \\\n   \\-- E -- F -- G -- H -- I -- J"}, {"role": "assistant", "content": "Let's say you've named your branches like so:\n    A -- B -- C -- D (master)\n     \\-- E -- G -- H -- I -- J (current-parent)\n          \\-- K -- L (my-branch)\n\nWhat you want to do is rebase my-branch onto the B commit like so:\n    git rebase current-parent my-branch --onto B"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  repository"}, {"role": "assistant", "content": "A collection of refs together with an object database containing all objects\nwhich are reachable from the refs, possibly\naccompanied by meta data from one or more porcelains . A\nrepository can share an object database with other repositories\nvia alternates mechanism ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  cumulative"}, {"role": "assistant", "content": "Count changes in a child directory for the parent directory as well.\nNote that when using cumulative , the sum of the percentages\nreported may exceed 100%. The default (non-cumulative) behavior can\nbe specified with the noncumulative parameter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-tree - List the contents of a tree object"}, {"role": "assistant", "content": "SYNOPSIS git ls-tree [-d] [-r] [-t] [-l] [-z]\n\t    [--name-only] [--name-status] [--object-only] [--full-name] [--full-tree] [--abbrev[=<n>]] [--format=<format>]\n\t    <tree-ish> [<path>\u2026\u200b]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do you make Git ignore files without using .gitignore?\nDue to external weird constraints I cannot modify the .gitignore of my repository. Is there a way to ignore files and directories other than modifying a .gitignore? Even if it is a global solution like a global configuration that will be applied to all my repositories."}, {"role": "assistant", "content": "If you can modify .git/info/exclude you can put the same rules there. But that file is within your local repo only."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --no-to  --no-cc  --no-bcc"}, {"role": "assistant", "content": "Clears any list of \"To:\", \"Cc:\", \"Bcc:\" addresses previously\nset via config."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.wsErrorHighlight"}, {"role": "assistant", "content": "Highlight whitespace errors in the context , old or new lines of the diff.  Multiple values are separated by comma, none resets previous values, default reset the list to new and all is a shorthand for old,new,context .  The\nwhitespace errors are colored with color.diff.whitespace .\nThe command line option --ws-error-highlight=<kind> overrides this setting."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How does Git create unique commit hashes, mainly the first few characters?\nI find it hard to wrap my head around how Git creates fully unique hashes that aren't allowed to be the same even in the first 4 characters. I'm able to call commits in Git Bash using only the first four characters. Is it specifically decided in the algorithm that the first characters are \"ultra\"-unique and will not ever conflict with other similar hashes, or does the algorithm generate every part of the hash in the same way?"}, {"role": "assistant", "content": "Git uses the following information to generate the sha-1:\n\nThe source tree of the commit (which unravels to all the subtrees and\nblobs) \nThe parent commit sha1 \nThe author info (with timestamp)\nThe committer info (right, those are different!, also with timestamp)\nThe commit message\n\n(on the complete explanation; look here).\nGit does NOT guarantee that the first 4 characters will be unique. In chapter 7 of the Pro Git Book it is written:\n\nGit can figure out a short, unique abbreviation for your SHA-1 values.\n  If you pass --abbrev-commit to the git log command, the output will\n  use shorter values but keep them unique; it defaults to using seven\n  characters but makes them longer if necessary to keep the SHA-1\n  unambiguous:\n\nSo Git just makes the abbreviation as long as necessary to remain unique. They even note that:\n\nGenerally, eight to ten characters are more than enough to be unique\n  within a project.\nAs an example, the Linux kernel, which is a pretty large project with\n  over 450k commits and 3.6 million objects, has no two objects whose\n  SHA-1s overlap more than the first 11 characters.\n\nSo in fact they just depend on the great improbability of having the exact same (X first characters of a) sha."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is it possible to do a Git Pull --rebase with Visual Studio git tools (and can it be set by default)\nFirst, as the title says, is it even possible in a single step (i.e. not fetch then rebase), to do a pull --rebase? \nSecond, is a setting in Visual Studio to force the built-in Team Explorer git tools to always do a pull --rebase rather than a standard pull (fetch/merge).\nI am aware you could set the default in the global or project config files with git config branch.autosetuprebase always, but I wanted to specifically find out if Visual Studio could update/change that setting or had a similar option, like most other GUIs have. I haven't been able to find anything, so it seems like it doesn't, hence the question."}, {"role": "assistant", "content": "In VS2017 you can use built-in feature to change git settings for rebase: go to Team Explorer -> Home -> Settings -> Global Settings or Repository Settings -> set Rebase local branch when pulling: True (screenshot)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bundle - Move objects and refs by archive  unbundle <file>"}, {"role": "assistant", "content": "Passes the objects in the bundle to git index-pack for storage in the repository, then prints the names of all\ndefined references. If a list of references is given, only\nreferences matching those in the list are printed. This command is\nreally plumbing, intended to be called only by git fetch .\nIf file is - , the bundle is read from stdin."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git is not detecting a file and is not in .gitignore\nI have a file called \"style.css\" and git is not detecting it. It doesn't detect it if I delete it either, but it does detect if I change the name of the file. But I need it with that name.\nThe file is not in the .gitignore file. This is driving me crazy!\nI would appreciate some help."}, {"role": "assistant", "content": "Use git check-ignore command to debug your gitignore file (exclude files).\nIn example:\n$ git check-ignore -v config.php\n.gitignore:2:src    config.php\n\nThe above output details about the matching pattern (if any) for each given pathname (including line).\nSo maybe your file extension is not ignored, but the whole directory.\nThe returned format is:\n<source> <COLON> <linenum> <COLON> <pattern> <HT> <pathname>\n\nOr use the following command to print your .gitignore in user and repo folder:\ncat ~/.gitignore $(git rev-parse --show-toplevel)/.gitignore $(git rev-parse --show-toplevel)/.git/info/exclude\n\nAlternatively use git add -f <path/file> which allows adding otherwise ignored files.\nSee: man gitignore, man git-check-ignore for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --pickaxe-regex"}, {"role": "assistant", "content": "Treat the <string> given to -S as an extended POSIX regular\nexpression to match."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %Cgreen"}, {"role": "assistant", "content": "switch color to green"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to checkout on an old commit and push it on current branch?\n\nI have some incorrect commit/push on my branch, then I want to revert to an old correct commit and push it on the current branch.\nI have a problem with:\ngit log\n    new: xxxxxxx\n    ...\n    old: ac758a3\n\ngit checkout ac758a3\ngit commit -m 'revert to old branch (ac758a3) to push it on current branch'\n\nOut:\nHEAD detached at ac758a3\nnothing to commit, working directory clean\n\n\n[EDIT]\nSchematically:\n\nA(correct commit that I want) --- B(incorrect commit) --- C(incorrect\ncommit)\n\nSo I want to have the following flow:\n\nA --- B --- C --- A\n\nI want revert to A(old commit) and push it on current branch (the same branch).\nWhat is the fast solution?\n\nThanks in advance."}, {"role": "assistant", "content": "git reset --hard <commit-id> is your friend dear.\nFollow below steps:\n\nOn your current branch run command: git log\nCopy correct commit id from the log on which you want to go back.\nRun command: git reset --hard <commit-id-copied-in-step-2 above>\nPush your branch to remote: git push origin <my-feature-branch> -f.\n\nNote: You will not be able to push it normally, you have to push it forcefully since we have changed the history of that branch and is not in sync with remote."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-notes - Add or inspect object notes  --commit"}, {"role": "assistant", "content": "Finalize an in-progress git notes merge . Use this option\nwhen you have resolved the conflicts that git notes merge stored in .git/NOTES_MERGE_WORKTREE. This amends the partial\nmerge commit created by git notes merge (stored in\n.git/NOTES_MERGE_PARTIAL) by adding the notes in\n.git/NOTES_MERGE_WORKTREE. The notes ref stored in the\n.git/NOTES_MERGE_REF symref is updated to the resulting commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Jenkins pipeline git command submodule update\nI want to update submodule on git clone.\nIs there a way to do this with Jenkins pipeline Git command?\nCurrently I'm doing this...\ngit branch: 'master',\n    credentialsId: 'bitbucket',\n    url: 'ssh://bitbucket.org/hello.git'\n\nIt doesn't however update submodule once cloned"}, {"role": "assistant", "content": "The git command as a pipeline step is rather limited as it provides a default implementation of the more complex checkout command. For more advanced configuration, you should use checkout command, for which you can pass a whole lot of parameters, including the desired submodules configuration.\nWhat you want to use is probably something like this :\ncheckout([$class: 'GitSCM',\n          branches: [[name: '*/master']],\n          doGenerateSubmoduleConfigurations: false,\n          extensions: [[$class: 'SubmoduleOption',\n                        disableSubmodules: false,\n                        parentCredentials: false,\n                        recursiveSubmodules: true,\n                        reference: '',\n                        trackingSubmodules: false]], \n          submoduleCfg: [], \n          userRemoteConfigs: [[url: 'your-git-server/your-git-repository']]])\n\nFrom the documentation it is often cumbersome to write these kind of lines, I recommand you use instead Jenkins very good Snippet Generator (YourJenkins > yourProject > PipelineSyntax) to automatically generate the checkout line !"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --ws-error-highlight=<kind>"}, {"role": "assistant", "content": "Highlight whitespace errors in the context , old or new lines of the diff.  Multiple values are separated by comma, none resets previous values, default reset the list to new and all is a shorthand for old,new,context .  When\nthis option is not given, and the configuration variable diff.wsErrorHighlight is not set, only whitespace errors in new lines are highlighted. The whitespace errors are colored\nwith color.diff.whitespace ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.<driver>.xfuncname"}, {"role": "assistant", "content": "The regular expression that the diff driver should use to\nrecognize the hunk header.  A built-in pattern may also be used.\nSee gitattributes for details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-write-tree"}, {"role": "assistant", "content": "Create a tree object from the current index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can git be installed on CENTOS 5.5?\nHow can I install git on CENTOS 5.5 machine?\nI tried to install it from yum but got following msg.\nroot@host [~]# sudo yum install git\nLoaded plugins: fastestmirror\nLoading mirror speeds from cached hostfile\n * addons: centos.mirrors.tds.net\n * base: mirror.ubiquityservers.com\n * extras: mirrors.serveraxis.net\n * updates: pubmirrors.reflected.net\naddons                                                   |  951 B     00:00\nbase                                                     | 2.1 kB     00:00\nextras                                                   | 2.1 kB     00:00\nupdates                                                  | 1.9 kB     00:00\nExcluding Packages in global exclude list\nFinished\nSetting up Install Process\nNo package git available.\nNothing to do\nroot@host [~]#"}, {"role": "assistant", "content": "If you are using CentOS the built in yum repositories don't seem to have git included and as such, you will need to add an additional repository to the system. For my servers I found that the Webtatic repository seems to be reasonably up to date and the installation for git will then be as follows:\n# Add the repository\nrpm -Uvh http://repo.webtatic.com/yum/centos/5/latest.rpm\n\n# Install the latest version of git\nyum install --enablerepo=webtatic git-all\n\nTo work around Missing Dependency: perl(Git) errors:\nyum install --enablerepo=webtatic --disableexcludes=main  git-all"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  --fixed-value"}, {"role": "assistant", "content": "When used with the value-pattern argument, treat value-pattern as\nan exact string instead of a regular expression. This will restrict\nthe name/value pairs that are matched to only those where the value\nis exactly equal to the value-pattern ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-describe - Give an object a human readable name based on an available ref"}, {"role": "assistant", "content": "SYNOPSIS git describe [--all] [--tags] [--contains] [--abbrev=<n>] [<commit-ish>\u2026\u200b] git describe [--all] [--tags] [--contains] [--abbrev=<n>] --dirty[=<mark>] git describe <blob>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Publish to S3 using Git?\nDoes anyone know how to do this? So far I haven't been able to find anything useful via Google.\nI'd really like to setup a local repo and use git push to publish it to S3, the idea being to have local version control over assets but remote storage on S3.\nCan this be done, and if so, how?"}, {"role": "assistant", "content": "1  Use JGit via http://blog.spearce.org/2008/07/using-jgit-to-publish-on-amazon-s3.html\nDownload jgit.sh, rename it to jgit and put it in your path (for example $HOME/bin).\nSetup the .jgit config file and add the following (substituting your AWS keys):\n$vim ~/.jgit\naccesskey: aws access key\nsecretkey: aws secret access key\n\nNote, by not specifying acl: public in the .jgit file, the git files on S3 will be private (which is what we wanted). Next create an S3 bucket to store your repository in, let\u2019s call it git-repos, and then create a git repository to upload:\ns3cmd mb s3://git-repos\nmkdir chef-recipes\ncd chef-recipes\ngit init\ntouch README\ngit add README\ngit commit README\ngit remote add origin amazon-s3://.jgit@git-repos/chef-recipes.git\n\nIn the above I\u2019m using the s3cmd command line tool to create the bucket but you can do it via the Amazon web interface as well. Now let\u2019s push it up to S3 (notice how we use jgit whenever we interact with S3, and standard git otherwise):\njgit push origin master\n\nNow go somewhere else (e.g. cd /tmp) and try cloning it:\njgit clone amazon-s3://.jgit@git-repos/chef-recipes.git\n\nWhen it comes time to update it (because jgit doesn\u2019t support merge or pull) you do it in 2 steps:\ncd chef-recipes\njgit fetch\ngit merge origin/master\n\n2  Use FUSE-based file system backed by Amazon S3\n\nGet an Amazon S3 account!\nDownload, compile and install. (see InstallationNotes)\nSpecify your Security Credentials (Access Key ID & Secret Access\nKey) by one of the following methods:\n\nusing the passwd_file command line option\nsetting the AWSACCESSKEYID and AWSSECRETACCESSKEY environment variables\nusing a .passwd-s3fs file in your home directory\nusing the system-wide /etc/passwd-s3fs file\ndo this\n\n\n.\n/usr/bin/s3fs mybucket /mnt\n\nThat's it! the contents of your amazon bucket \"mybucket\" should now be accessible read/write in /mnt"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to revert initial git commit?\nI commit to a git repository for the first time; I then regret the commit and want to revert it.  I try\n# git reset --hard HEAD~1\n\nI get this message:\nfatal: ambiguous argument 'HEAD~1': unknown revision or path not in the working tree.\n\nThis commit is the first commit of the repository. Any idea how to undo git's initial commit?"}, {"role": "assistant", "content": "You just need to delete the branch you are on. You can't use git branch -D as this has a safety check against doing this. You can use update-ref to do this.\ngit update-ref -d HEAD\n\nDo not use rm -rf .git or anything like this as this will completely wipe your entire repository including all other branches as well as the branch that you are trying to reset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What does git update-server-info do?\nWhat does git update-server-info do?  How do I know if I need it? The manual says:\n\nA dumb server that does not do on-the-fly pack generations must have some auxiliary information files in $GIT_DIR/info and $GIT_OBJECT_DIRECTORY/info directories to help clients discover what references and packs the server has. This command generates such auxiliary files.\n\nHow do I know if my server is dumb, and whether it does or does not do \"on-the-fly pack generations\", and whether it \"must have some auxiliary information files\"?\nI am pushing a web app via ssh to a bare repository, then pulling from that bare repository into the web root."}, {"role": "assistant", "content": "Dumb server basically means accessed over HTTP.  So if you access your Git repository over http: or https: URLs, you need the update-server-info business, otherwise (git:, ssh:, etc.) you don't need it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I check out a GitHub pull request with git?\n\nI'd like to check out a previously created pull request (created via GitHub web interface). I searched and found different places where a refs/pull or refs/pull/pr\nBut when I add fetch = +refs/pull/*/head:refs/remotes/origin/pr/* to the git config file and do a git fetch\nWhat I'm doing wrong? Should GitHub create automatically the pull/xyz stuff, or do I have to configure something?"}, {"role": "assistant", "content": "To fetch a remote PR into your local repo,\ngit fetch origin pull/$ID/head:$BRANCHNAME\n\nwhere $ID is the pull request id and $BRANCHNAME is the name of the new branch that you want to create. Once you have created the branch, then simply\ngit checkout $BRANCHNAME\n\nFor instance, let's imagine you want to checkout pull request #2 from the origin main branch:\ngit fetch origin pull/2/head:MASTER\n\nSee the official GitHub documentation for more."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-write-tree - Create a tree object from the current index"}, {"role": "assistant", "content": "SYNOPSIS git write-tree [--missing-ok] [--prefix=<prefix>/]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --cherry-mark"}, {"role": "assistant", "content": "Like --cherry-pick (see below) but mark equivalent commits\nwith = rather than omitting them, and inequivalent ones with + ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  default , myers"}, {"role": "assistant", "content": "The basic greedy diff algorithm. Currently, this is the default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref"}, {"role": "assistant", "content": "CAVEATS Note that the sizes of objects on disk are reported accurately, but care\nshould be taken in drawing conclusions about which refs or objects are\nresponsible for disk usage. The size of a packed non-delta object may be\nmuch larger than the size of objects which delta against it, but the\nchoice of which object is the base and which is the delta is arbitrary\nand is subject to change during a repack. Note also that multiple copies of an object may be present in the object\ndatabase; in this case, it is undefined which copy\u2019s size or delta base\nwill be reported."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-status - Show the working tree status  -z"}, {"role": "assistant", "content": "Terminate entries with NUL, instead of LF.  This implies\nthe --porcelain=v1 output format if no other format is given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I ignore PyCharm configuration files in a git repository?\nI don't want to commit my PyCharm config files (e.g. .idea/codeStyleSettings.xml) to my git repository, so I added the following to my .gitignore file:\n.idea/\nmydjangosite/.idea/\n\nHowever, every time I try to make a commit within PyCharm (command k), it still wants to commit these files. How do I get PyCharm to recognize my .gitignore file and not commit these files?"}, {"role": "assistant", "content": "If PyCharm offers you to commit the files, it means that you have already added them to Git. You need to remove them using 'git rm --cached' and commit the change. After that, they will be ignored by the integration according to your .gitignore settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Automatically track remote branch with git\nWhen I'm using a local branch mybranch, I'd like to be able to push to and pull from origin mybranch using just git push and git pull. As it is, I have to tediously write out git push origin mybranch and git pull origin mybranch. If I try to use just git pull for example, I get:\nThere is no tracking information for the current branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details\n\n    git pull <remote> <branch>\n\nIf you wish to set tracking information for this branch you can do so with:\n\n    git branch --set-upstream-to=origin/<branch> mybranch\n\nAnd if I enter git branch --set-upstream-to=origin/mybranch mybranch, then it works. But this is almost as tedious as the previous commands. Can I just have git do this as default behavior? I've seen similar questions asked and the answers tend to suggest that newer versions of git do this, but I'm using git version 2.1.3, which is fairly new, so it can't just be that."}, {"role": "assistant", "content": "As of git 2.37.0, this is now possible with git configuration.\nRun to update your configuration:\ngit config --global --add --bool push.autoSetupRemote true\n\nThen git push will automatically setup the remote branch.\nNote: The --global flag means this will apply to all git commands on your machine (regardless of which repo it is), you can omit the flag to make it specific to a single repo on your machine.\nDocumentation:\nhttps://git-scm.com/docs/git-config#Documentation/git-config.txt-pushautoSetupRemote\n\npush.autoSetupRemote\nIf set to \"true\" assume --set-upstream on default push when no upstream tracking exists for the current branch; this option takes effect with push.default options simple, upstream, and current. It is useful if by default you want new branches to be pushed to the default remote (like the behavior of push.default=current) and you also want the upstream tracking to be set. Workflows most likely to benefit from this option are simple central workflows where all branches are expected to have the same name on the remote."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Import a Python library from Github\n\nI'm new to Python so this may sound silly.\nI want to use a Python library I've found on Github, lets say on https://github.com/praw-dev/praw, and I want to be able to do git pull in the future to pull the latest commits.\nQuestion: Should I git clone <git url> in the project directory and delete everything except the praw directory, then in my python script do a import praw? \nIn iPython,\nimport praw\n\ngives the error ImportError: No module named praw\n\nDirectory Structure\n~\\myProject\\\n    praw\\\n    myNotebook.ipynb"}, {"role": "assistant", "content": "Actually, if given package is not on PyPI (or you want a specific branch) you can still install it through pip from GitHub with:\npip install git+https://github.com/[repo owner]/[repo]@[branch name]\n\nAnd for your problem it would be (although @pandita's answer is correct for normal usage case):\npip install git+https://github.com/praw-dev/praw.git\n\nFor more information check this answer."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Using Git, how could I search for a string across all branches?\nUsing Git, how could I search within all files in all local branches for a given string?\nGitHub specific: is it possible to perform the above search across all GitHub branches? (There are several remote branches on my remote GitHub repository that ideally I wouldn't have to bring down for this search...)"}, {"role": "assistant", "content": "You can do this on a Git repository:\ngit grep \"string/regexp\" $(git rev-list --all)\n\nGitHub advanced search has code search capability:\nThe code search will look through all of the code publicly hosted on GitHub. You can also filter by:\n\nthe language: language:\nthe repository name (including the username):    repo:\nthe file path: path:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-grep - Print lines matching a pattern  grep.fullName"}, {"role": "assistant", "content": "If set to true, enable --full-name option by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Cross-Origin Resource Sharing on GitHub Pages\n\nIs there a way to enable Cross-Origin Resource Sharing (CORS) for a static page hosted on GitHub Pages to allow cross-origin requests in Javascript?\nFor example, can we instruct GH Pages somehow to add these HTTP response headers:\nAccess-Control-Allow-Origin:*  \nAccess-Control-Allow-Methods:GET,POST\nAccess-Control-Max-Age: 1000\nAccess-Control-Allow-Headers:*\n\nCouldn't find anything in their documentation, and this ...\n\n...GitHub Pages does not support customer server configuration files\n  such as .htaccess or .conf...\n\n... doesn't sound very promising - or is there a way?"}, {"role": "assistant", "content": "EDIT: Yay! Looks like GitHub Pages now supports CORS: https://twitter.com/invisiblecomma/status/575219895308324864\nThis can be verified by curling a request to enable-cors.org (which is hosted on GitHub Pages). Running this command: curl -v enable-cors.org > /dev/null returns an Access-Control-Allow-Origin: * header.\nThere's no way to support CORS on GitHub Pages, though I'd love to see this feature. We host http://enable-cors.org on GitHub Pages, and we can't enable CORS on the site itself :)\n\nUpdate\nAs noted by @Styx GitHub Pages now always redirect to HTTPS. So if you want to confirm for yourself that all origins are allowed, for a particular site using GitHub pages, try curl with -L (to follow the redirects that are involved). E.g.:\n$ curl -vL square.github.io/okhttp 2>&1 | fgrep -i access-control-allow-origin"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.statNameWidth"}, {"role": "assistant", "content": "Limit the width of the filename part in --stat output. If set, applies\nto all commands generating --stat output except format-patch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I see which Git branches are tracking which remote / upstream branch?\nI know I can do git branch --all, and that shows me both local and remote branches, but it's not that useful in showing me the relationships between them.\nHow do I list branches in a way that shows which local branch is tracking which remote?"}, {"role": "assistant", "content": "Very much a porcelain command, not good if you want this for scripting:\ngit branch -vv   # doubly verbose!\n\nNote that with git 1.8.3, that upstream branch is displayed in blue (see \"What is this branch tracking (if anything) in git?\")\n\nIf you want clean output, see Carl Suster's answer - it uses a porcelain command that I don't believe existed at the time I originally wrote this answer, so it's a bit more concise and works with branches configured for rebase, not just merge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Modified files in a git branch are spilling over into another branch\nI am working on a git repository with a master branch and another the topic branch. I have switched to topic branch and modified a file. Now, if I switched to the master branch, that same file is shown as modified.\nFor example:\ngit status in git-build branch:\n# On branch git-build\n# Changes to be committed:\n#   (use \"git reset HEAD <file>...\" to unstage)\n#\n#       modified:   cvsup_current\n#\n\nSwitch to master branch\n[root@redbull builder_scripts (git-build)]# git co master\nM       builder_scripts/cvsup_current\nSwitched to branch \"master\"\n\ngit status in master branch\n[root@redbull builder_scripts (master)]# git status\n# On branch master\n# Changes to be committed:\n#   (use \"git reset HEAD <file>...\" to unstage)\n#\n#       modified:   cvsup_current\n#\n\nWhy is that the file is shown as modified in the master branch even though it was modified in git-build branch?\nMy understanding was that the branches are independent of each other and when I change from one branch to another the changes do not \"spill over\" from one branch to another. So I am obviously missing something here.\nHas anyone got a clue stick?"}, {"role": "assistant", "content": "Why is that the file is shown as modified in master branch even though it was modified in git-build branch?\n\nThe key to remember is that the file was not modified in the git-build branch. It was only modified in your working copy.\nOnly when you commit are the changes put back into whichever branch you have checked out"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Error \"Your push would publish a private email address\"\n\nI'm very new to GitHub/VCS.\nWhen I try to share my project on GitHub, I get the following error message.\n    Can't finish GitHub sharing process\n    Successfully created project 'myproject' on GitHub, but initial push failed:\n    remote: error: GH007: Your push would publish a private email address.\n    failed to push some refs to 'https://github.com/me/myproject.git'\n\nI've googled the error message and got no hits. I've also searched Stack\u00a0Exchange, but no cigar. How can I solve this issue?"}, {"role": "assistant", "content": "When enabling the \u201cBlock command line pushes that expose my email\u201d feature, you\u2019ll also want to configure Git to use your no-reply email address. Don\u2019t worry\u2014this won\u2019t affect your contribution graph. All commits will still be associated with your account.\n\nOpen Terminal.\n\nChange the current working directory to the local repository where you want to configure the email address that you associate with your Git commits.\n\nFind your GitHub noreply address in your GitHub's Personal Settings \u2192 Emails. It's mentioned in the description of the Keep my email address private checkbox. Usually, it starts with a unique identifier, plus your username.\n\nSet an email address in Git. Use your GitHub-provided no-reply email address.\n\nSetting your email address for every repository on your computer\n  git config --global user.email \"{ID}+{username}@users.noreply.github.com\"\n\n\nSetting your email address for a single repository\n  git config user.email \"{ID}+{username}@users.noreply.github.com\"\n\n\n\n\nReset the author information on your last commit:\ngit commit --amend --reset-author --no-edit\n\n\n\nIf you have multiple commits with your private e-mail address, see this answer.\n\nNow you can push the commit with the noreply e-mail address, and future commits will have the noreply e-mail address as well.\ngit push\n\n\n\nOnce you configure Git, commits will use your alternate \u201cnoreply\u201d email address, and any pushes that don\u2019t will be rejected."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %<|( <M> )"}, {"role": "assistant", "content": "make the next placeholder take at least until Mth\ndisplay column, padding spaces on the right if necessary.\nUse negative M values for column positions measured\nfrom the right hand edge of the terminal window."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index"}, {"role": "assistant", "content": "Generating patch text with -p Running git-diff , git-log , git-show , git-diff-index , git-diff-tree , or git-diff-files with the -p option produces patch text.\nYou can customize the creation of patch text via the GIT_EXTERNAL_DIFF and the GIT_DIFF_OPTS environment variables\n(see git ), and the diff attribute (see gitattributes ). What the -p option produces is slightly different from the traditional\ndiff format: It is preceded by a \"git diff\" header that looks like this: diff --git a/file1 b/file2 The a/ and b/ filenames are the same unless rename/copy is\ninvolved.  Especially, even for a creation or a deletion, /dev/null is not used in place of the a/ or b/ filenames. When a rename/copy is involved, file1 and file2 show the\nname of the source file of the rename/copy and the name of\nthe file that the rename/copy produces, respectively. It is followed by one or more extended header lines: old mode <mode>\nnew mode <mode>\ndeleted file mode <mode>\nnew file mode <mode>\ncopy from <path>\ncopy to <path>\nrename from <path>\nrename to <path>\nsimilarity index <number>\ndissimilarity index <number>\nindex <hash>..<hash> <mode> File modes are printed as 6-digit octal numbers including the file type\nand file permission bits. Path names in extended headers do not include the a/ and b/ prefixes. The similarity index is the percentage of unchanged lines, and\nthe dissimilarity index is the percentage of changed lines.  It\nis a rounded down integer, followed by a percent sign.  The\nsimilarity index value of 100% is thus reserved for two equal\nfiles, while 100% dissimilarity means that no line from the old\nfile made it into the new one. The index line includes the blob object names before and after the change.\nThe <mode> is included if the file mode does not change; otherwise,\nseparate lines indicate the old and the new mode. Pathnames with \"unusual\" characters are quoted as explained for\nthe configuration variable core.quotePath (see git-config ). All the file1 files in the output refer to files before the\ncommit, and all the file2 files refer to files after the commit.\nIt is incorrect to apply each change to each file sequentially.  For\nexample, this patch will swap a and b: diff --git a/a b/b\nrename from a\nrename to b\ndiff --git a/b b/a\nrename from b\nrename to a Hunk headers mention the name of the function to which the hunk\napplies.  See \"Defining a custom hunk-header\" in gitattributes for details of how to tailor this to\nspecific languages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is the use of \"actions/checkout\" in GitHub Actions?\n\nI saw a lot of uses of :\njobs:\n  myjob:\n    steps:\n      - name: checkout\n        uses: \"actions/checkout@something\"\n      - ...\n\nBut i can not find what is the purpose of the line :\nuses : \"actions/checkout@something\"\n\nIs it similar to this ?\n run: git checkout something"}, {"role": "assistant", "content": "For this line: uses : \"actions/checkout@something\", it will use the actions/checkout github action (source here)  with the ref something. This ref only refers to the github action version (nothing to do with your repo)\nThe uses statement refers to a github action that is being used in this step. From github documentation for jobs.<job_id>.steps[*].uses:\n\nSelects an action to run as part of a step\nin your job. An action is a reusable unit of code. You can use an\naction defined in the same repository as the workflow, a public\nrepository, or in a published Docker container image.\n\nFrom actions/checkout readme :\n\nThis action checks-out your repository under $GITHUB_WORKSPACE, so your workflow can access it.\n\nBy default it checks out only one commit. My understanding is that it's doing something similar to:\ngit fetch --depth 1 origin $GITHUB_REF\n\nThis action also persists an auth token in git config. This way, your workflow can run authenticated git commands\nBy default, it clones your current repository ({{ github.repository }}) but you can also use this action to clone a different repository, and specify additionnal parameters like token, branch, path etc...\nAn example with additionnal input parameters: check out all git history by setting fetch-depth to 0 (default is 1), see usage doc:\n- uses: actions/checkout@v2\n  with:\n    fetch-depth: 0"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why is Gitlab CI re-uploading cache when key is still valid\n\nin gitlab CI file for an angular project; I define the global cache with the checksum of the package-lock.json file as key. so that the cache is only invalidated when the package-lock.json file changes.\ncache:\n  key:\n    files:\n      - package-lock.json\n  paths:\n    - node_modules/\n    - .npm\n\nPROBLEM: cache is still uploaded even when the cache-key is still valid. (see the picture the cache name did not change)\n\nI want the cache to be uploaded only when it is invalidated, is there anyway to achieve this? or any other remarks recommendations?"}, {"role": "assistant", "content": "By default, the cache is always uploaded on success (push-pull policy).\nYou can change this behavior by configuring the cache policy. If you want a job to only download the cache, but never upload it, set the cache policy to pull. However, you need to make sure at least one previous job populates the cache with either a push or push-pull policy.\nFor example:\nstages:\n  - one\n  - two\n\ncreate_cache:\n  stage: one\n  cache:\n    key:\n      files:\n        - package-lock.json\n    paths:\n      - node_modules/\n      - .npm\n    policy: \"push-pull\"  # default cache behavior\n    script:\n      - echo \"this job is responsible for creating/updating the cache as needed\"\n\nother_jobs:\n  stage: two\n  cache:\n    key:\n      files:\n        - package-lock.json\n    paths:\n      - node_modules/\n      - .npm\n    policy: \"pull\"  # only download cache, do not upload\n    script:\n      - echo \"this will rely on cache being created in previous stage\" \n\nUnfortunately, there is no configuration to say \"push cache if old-cache is invalidated\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-mv"}, {"role": "assistant", "content": "Move or rename a file, a directory, or a symlink"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to complete a milestone on GitHub?\n\nHow do I close/complete milestones on GitHub projects? I've already three milestones that are \"overdue\" but they are completed already. I simply don't know how to mark them \"completed\" - can anyone help me?\nI already tried to Google this issue, and browsed the GitHub help pages, but couldn't find any information on using milestones."}, {"role": "assistant", "content": "Update: this is an old answer for an old question. The nowerdays correct answer is the one by seeker.\nMilestones now must be closed manually. --- A.J. Brown\n\nSimply creating and closing an issue for a milestone, will mark the milestone completed:\n\nWhen all issues of the milestone are closed, the milestone should be closed as well. \n\n--- Felix King\nThanks."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a command to undo git-flow feature start?\nI'm inexperienced with git-flow.\nIs there a command to undo git-flow feature start?"}, {"role": "assistant", "content": "Since git-flow just wraps regular git functionality, how about simply deleting the new branch (assuming you have no changes in there you want saved)?\n$ git checkout master\nSwitched to branch 'master'\n$ git branch -d feature/your-feature-name-here"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.deltaBaseCacheLimit"}, {"role": "assistant", "content": "Maximum number of bytes per thread to reserve for caching base objects\nthat may be referenced by multiple deltified objects.  By storing the\nentire decompressed base objects in a cache Git is able\nto avoid unpacking and decompressing frequently used base\nobjects multiple times. Default is 96 MiB on all platforms.  This should be reasonable\nfor all users/operating systems, except on the largest projects.\nYou probably do not need to adjust this value. Common unit suffixes of k , m , or g are supported."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Host static website with GitLab pages\n\nI need to host a static website with gitlab pages. My repo is a private repository (or project) and the .gitlab-ci.yml that I tried to use looks like this:\nimage: gpecchio:BeCall\npages:\n  stage: deploy\n  script:\n  - echo 'Nothing to do...'\n  artifacts:\n    paths:\n    - private\n  only:\n  - master\n\nI believe that the image is wrong but I have no idea about what to change it to. I did some research but there aren't that many tutorials online for GitLab pages. How could I change this file to make it work?\nOther info that might be useful: \nGitLab username: gpecchio \nGitLab project name: BeCall \nGitLab project url: https://gitlab.com/gpecchio/BeCall"}, {"role": "assistant", "content": "Is your website created in html or are you using a static generator to create your website and then using gitlab pages to host it?\nIn the .gitlab-ci.yml file, the artifacts need to be public (even if your repository is private) for hosting your website using gitlab pages.\nHere are some examples of what your .gitlab-ci.yml file needs to look like for hosting your site with gitlab pages.\nHTML\npages:\n  stage: deploy\n  script:\n  - mkdir .public\n  - cp -r * .public\n  - mv .public public\n  artifacts:\n    paths:\n    - public\n  only:\n  - master\n\nJekyll\nimage: ruby:2.3\n\npages:\n  stage: deploy\n  script:\n  - gem install jekyll\n  - jekyll build -d public/\n  artifacts:\n    paths:\n    - public\n  only:\n  - master\n\nHexo\nimage: node:4.2.2\n\npages:\n  cache:\n    paths:\n    - node_modules/\n\n  script:\n  - npm install hexo-cli -g\n  - npm install\n  - hexo deploy\n  artifacts:\n    paths:\n    - public\n  only:\n  - master\n\nYou should check out https://gitlab.com/pages/ which has examples of static sites created using all the different static site generator and hosted using gitlab pages.\nYou can also find some Jekyll themes hosted on gitlab pages at https://gitlab.com/groups/jekyll-themes\nFinally, the link to your gitlab project url: https://gitlab.com/gpecchio/BeCall is private."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-signature"}, {"role": "assistant", "content": "Git cryptographic signature formats"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --show-notes-by-default"}, {"role": "assistant", "content": "Show the default notes unless options for displaying specific\nnotes are given."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What does it mean to squash commits in git?\n\nWhat does Squashing commits in git mean. How do I squash commits in Github?"}, {"role": "assistant", "content": "You can think of Git as an advanced database of snapshots of your working directory(ies).\nOne very nice feature of Git is the ability to rewrite the history of commits.\nThe principal reason for doing this is that a lot of such history is relevant only for the developer who generated it, so it must be simplified, or made more nice, before submitting it to a shared repository.\nSquashing a commit means, from an idiomatic point of view, to move the changes introduced in said commit into its parent so that you end up with one commit instead of two (or more).\nIf you repeat this process multiple times, you can reduce n commit to a single one.\nVisually, if you started your work at the commit tagged Start, you want this\n\nYou may notice that the new commit has a slightly darker shade of blue. This is intentional.\nIn Git squashing is achieved with a Rebase, of a special form called Interactive Rebase.\nSimplifying: when you rebase a set of commits into a branch B, you apply all the changes introduced by those commits as they were done, starting from B instead of their original ancestor.\nA visual clue\n\nNote again the different shades of blue.\nAn interactive rebase let you choose how commits should be rebased.\nIf you run this command:\n git rebase -i branch\n\nYou would end up with a file that lists the commits that will be rebased\n pick ae3...\n pick ef6...\n pick 1e0...\n pick 341...\n\nI didn't name the commits, but these four ones are intended to be the commits from Start to Head\nThe nice thing about this list is that it is editable.\nYou can omit commits, or you can squash them.\nAll you have to do is to change the first word to squash.\n pick ae3...\n squash ef6...\n squash 1e0...\n squash 341...\n\nIf you close the editor and no merge conflicts are found, you end up with this history:\n\nIn your case, you don't want to rebase into another branch, but rather into a previous commit.\nIn order to transform the history as shown in the very first example, you have to run something like\ngit rebase -i HEAD~4\n\nchange the \"commands\" to squash for all the commits apart from the first one, and then close your editor.\n\nNote about altering history\nIn Git, commits are never edited. They can be pruned, made not reachable, cloned but not changed.\nWhen you rebase, you are actually creating new commits.\nThe old ones are not longer reachable by any refs, so are not shown in the history but they are still there!\nThis is what you actually get for a rebase:\n\nIf you have already pushed them somewhere, rewriting the history will actually make a branch!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge-base - Find as good common ancestors as possible for a merge  --fork-point"}, {"role": "assistant", "content": "Find the point at which a branch (or any history that leads\nto <commit>) forked from another branch (or any reference)\n<ref>. This does not just look for the common ancestor of\nthe two commits, but also takes into account the reflog of\n<ref> to see if the history leading to <commit> forked from\nan earlier incarnation of the branch <ref> (see discussion\nof this mode below)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git push failed, \"Non-fast forward updates were rejected\"\n\nI've edited my GIT repositories via Git Online. After I tried to push my local code changes, I got an error: \nGit push failed, To prevent from losing history, non-fast forward updates were rejected.\n\nHow can I fix this?"}, {"role": "assistant", "content": "Pull changes first:\ngit pull origin branch_name"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I switch my git repository to a particular commit\nIn my git repository, I made 5 commits, like below in my git log:\ncommit 4f8b120cdafecc5144d7cdae472c36ec80315fdc\nAuthor: Michael \nDate:   Fri Feb 4 15:26:38 2011 -0800\n\ncommit b688d46f55db1bc304f7f689a065331fc1715079\nAuthor: Michael\nDate:   Mon Jan 31 10:37:42 2011 -0800\n\ncommit b364f9dcec3b0d52666c4f03eb5f6efb7e1e7bda\nAuthor: Michael\nDate:   Wed Jan 26 13:33:17 2011 -0800\n\ncommit 4771e26619b9acba3f059b491c6c6d70115e696c\nAuthor: Michael \nDate:   Wed Jan 26 11:16:51 2011 -0800\n\ncommit 6e559cb951b9bfa14243b925c1972a1bd2586d59\nAuthor: Michael \nDate:   Fri Jan 21 11:42:27 2011 -0800\n\nHow can I roll back my previous 4 commits locally in a branch?\nIn other words, how can I create a branch without my latest 4 commits (assume I have the SHA of that commit from git log)?"}, {"role": "assistant", "content": "To create a new branch (locally):\n\nWith the commit hash (or part of it)\ngit checkout -b new_branch 6e559cb\n\nor to go back 4 commits from HEAD\ngit checkout -b new_branch HEAD~4\n\n\nOnce your new branch is created (locally), you might want to replicate this change on a remote of the same name: How can I push my changes to a remote branch\n\nFor discarding the last three commits, see Lunaryorn's answer below.\n\nFor moving your current branch HEAD to the specified commit without creating a new branch, see Arpiagar's answer below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to find the branch from commit id\n\nSo, I am trying to find branch name in which a given commit was made. (c853d8cf3ae34dae9866b874b96c6529515d7e90)\nI have the parent id and commit id referenced on the git issue.\nHow can I find that given commit id was pushed in 'x' branch?"}, {"role": "assistant", "content": "On GitHub specifically, you now can see the branch a given commit is part of.\nThe blog post \"Branch and Tag Labels For Commit Pages\" details:\n\nIf the commit is not on the default branch, the indicator will show the branches which contain the commit.\nIf the commit is part of an unmerged pull request, a link will be shown.\n\n\n\nOnce the commit makes it to the default branch, any tags that contain the commit will be shown, and the default branch will be the only branch listed.\n\n\n\nOriginal answer\nYou can list those branches:\ngit branch --contains <commit>\n\n# in your case\ngit branch --contains <commit> | grep x\n\nMore details in \"Git: Finding what branch a commit came from\".\nDon't forget that a commit can be part of several branches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to specify which SSH key to use within git for git push in order to have gitorious as a mirror?\nI have a project hosted on git.debian.org (alioth) and I'd like to configure a post-receive hook to update a mirror of the repository on http://gitorious.org\nI suppose I'll have to use git push --mirror gitorious\nNow, I'll need to have Alioth authorized on gitorious for the push to succeed. How do I do that?\nI suppose I need to configure a user on gitorious and create a ssh key for it. And then when I do the git push in the post-receive hook, make sure this ssh key is used.\nI could use a ~/.ssh/config but the problem is that many users can push on alioth, and everyone would have to log in and configure the ~/.ssh/config. Instead, I'd like to have a command line option or an environment variable to tell ssh which key to use. Can I do that?\nAlso, do you have other ideas how mirroring can be achieved? And, is it possible to configure it the other way around (gitorious pushing on alioth)?"}, {"role": "assistant", "content": "The answer is to be found in the git reference manual.\n\nGIT_SSH\nIf this environment variable is set then git fetch and git push will use this command instead of ssh when they need to connect to a remote system. The $GIT_SSH command will be given exactly two arguments: the username@host (or just host) from the URL and the shell command to execute on that remote system.\nTo pass options to the program that you want to list in GIT_SSH you will need to wrap the program and options into a shell script, then set GIT_SSH to refer to the shell script.\nUsually it is easier to configure any desired options through your personal .ssh/config file. Please consult your ssh documentation for further details.\n\nSo, I need to write a wrapper script, I write this push-gitorious.sh script:\n#!/bin/sh\n\n\nif [ \"run\" != \"$1\" ]; then\n  exec ssh -i \"$GITORIOUS_IDENTITY_FILE\" -o \"StrictHostKeyChecking no\" \"$@\"\nfi\n\nremote=YOUR_SSH_GITORIOUS_URL\n\necho \"Mirroring to $remote\"\n\nexport GITORIOUS_IDENTITY_FILE=\"`mktemp /tmp/tmp.XXXXXXXXXX`\"\nexport GIT_SSH=\"$0\"\n\ncat >\"$GITORIOUS_IDENTITY_FILE\" <<EOF\nYOUR SSH PRIVATE KEY\n\nEOF\ncat >\"$GITORIOUS_IDENTITY_FILE.pub\" <<EOF\nYOUR SSH PUBLIC KEY\n\nEOF\n\n#echo git push --mirror \"$remote\"\ngit push --mirror \"$remote\"\n\nrm -f \"$GITORIOUS_IDENTITY_FILE\"\nrm -f \"$GITORIOUS_IDENTITY_FILE.pub\"\n\nexit 0\n\nOf course, you have to fill in the private key (the public key is included in the script for reference only. You also need to fill in the gitorious URL.\nIn the post-receive hook, you have to put:\npath/to/push-gitorious.sh run\n\nThe run option is important, otherwise it will run ssh directly.\nWarning: no checking is done on the remote host identity. You can remove the option from the ssh command line and customize known_hosts if you want to. In this use case, I don't think it's important."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_ALTERNATE_OBJECT_DIRECTORIES"}, {"role": "assistant", "content": "Due to the immutable nature of Git objects, old objects can be\narchived into shared, read-only directories. This variable\nspecifies a \":\" separated (on Windows \";\" separated) list\nof Git object directories which can be used to search for Git\nobjects. New objects will not be written to these directories. Entries that begin with \" (double-quote) will be interpreted\nas C-style quoted paths, removing leading and trailing\ndouble-quotes and respecting backslash escapes. E.g., the value \"path-with-\\\"-and-:-in-it\":vanilla-path has two paths: path-with-\"-and-:-in-it and vanilla-path ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  -t  --tags"}, {"role": "assistant", "content": "Fetch all tags from the remote (i.e., fetch remote tags refs/tags/* into local tags with the same name), in addition\nto whatever else would otherwise be fetched.  Using this\noption alone does not subject tags to pruning, even if --prune\nis used (though tags may be pruned anyway if they are also the\ndestination of an explicit refspec; see --prune )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %GS"}, {"role": "assistant", "content": "show the name of the signer for a signed commit"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --unidiff-zero"}, {"role": "assistant", "content": "By default, git apply expects that the patch being\napplied is a unified diff with at least one line of context.\nThis provides good safety measures, but breaks down when\napplying a diff generated with --unified=0 . To bypass these\nchecks use --unidiff-zero . Note, for the reasons stated above, the usage of context-free patches is\ndiscouraged."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to clone a Github Gist via SSH protocol?\n\nGithub really seems to want us to use the HTTPS protocol to use Gists, for example, they only list the HTTPS url on a Gist page - e.g. https://gist.github.com/donatello/5834862\nIs it possible to clone a Gist using SSH protocol?"}, {"role": "assistant", "content": "Yes, it is possible:\ngit clone [email\u00a0protected]:5834862.git\n\nJust replace with your own Gist ID of course."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --word-diff-regex=<regex>"}, {"role": "assistant", "content": "Use <regex> to decide what a word is, instead of considering\nruns of non-whitespace to be a word.  Also implies --word-diff unless it was already enabled. Every non-overlapping match of the\n<regex> is considered a word.  Anything between these matches is\nconsidered whitespace and ignored(!) for the purposes of finding\ndifferences.  You may want to append |[^[:space:]] to your regular\nexpression to make sure that it matches all non-whitespace characters.\nA match that contains a newline is silently truncated(!) at the\nnewline. For example, --word-diff-regex=. will treat each character as a word\nand, correspondingly, show differences character by character. The regex can also be set via a diff driver or configuration option, see gitattributes or git-config .  Giving it explicitly\noverrides any diff driver or configuration setting.  Diff drivers\noverride configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What's an easy way to detect modified files in a Git workspace?\nDuring make, I create string fields which I embedded in the linked output.  Very useful.  \nOther than a complex sed/grep parsing of the git status command, how can I easily determine if files in the workspace have been modified according to git?"}, {"role": "assistant", "content": "If you just want a plain \u201cAre there any differences from HEAD?\u201d:\ngit diff-index --quiet HEAD\n\nIf the exit code is 0, then there were no differences.\nIf you want \u201cWhat files have changed from HEAD?\u201d:\ngit diff-index --name-only HEAD\n\nIf you want \u201cWhat files have changed from HEAD, and in what ways have they changed (added, deleted, changed)?\u201d:\ngit diff-index --name-status HEAD\n\nAdd -M (and -C) if you want rename (and copy) detection.\nThese commands will check both the staged contents (what is in the index) and the files in the working tree. Alternatives like git ls-files -m will only check the working tree against the index (i.e. they will disregard any staged (but uncommitted) content that is also in the working tree)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is git's semi-secret empty tree object reliable, and why is there not a symbolic name for it?\nGit has a well-known, or at least sort-of-well-known, empty tree whose SHA1 is:\n4b825dc642cb6eb9a060e54bf8d69288fbee4904\n\n(you can see this in any repo, even a newly created one, with git cat-file -t and git cat-file -p).  [Edit made in 2020: the SHA-256 empty tree hash ID is:\n6ef19b41225c5369f1c104d45d8d85efa9b057b53b14b4b9b939dd74decc5321\n\nas VonC mentions in his answer.  My question was apparently about 8 years early. \ud83d\ude00]\nIf you work hard and are very careful you can sort of use this empty tree to store a directory that has no files (see answer to How do I add an empty directory to a git repository), although it's not really a great idea.\nIt's more useful as one argument to git diff-tree, which one of the sample hooks does.\nWhat I'm wondering is,\n\nhow reliable is this\u2014i.e., will some future version of git not have a git object numbered 4b825dc642cb6eb9a060e54bf8d69288fbee4904?\nWhy is there no symbolic name for the empty tree (or is there one?).\n\n(A quick and dirty way to create a symbolic name is to put the SHA1 in, e.g., .git/Nulltree.  Unfortunately you have to do this for every repo.  Seems better to just put the magic number in scripts, etc.  I just have a general aversion to magic numbers.)"}, {"role": "assistant", "content": "This thread mentions:\n\nIf you don't remember the empty tree sha1, you can always derive it with:\n\ngit hash-object -t tree /dev/null\n\nOr, as Ciro Santilli proposes in the comments:\nprintf '' | git hash-object --stdin -t tree\n\nOr, as seen here, from Colin Schimmelfing:\ngit hash-object -t tree --stdin < /dev/null\n\nSo I guess it is safer to define a variable with the result of that command as your empty sha1 tree (instead of relying of a \"well known value\").\nNote: Git 2.25.1 (Feb. 2020) proposes in commit 9c8a294:\nempty_tree=$(git mktree </dev/null)\n\n# Windows (Command Prompt):\ngit mktree <NUL\n\n# Windows (PowerShell):\n$null | git mktree\n\nAnd adds:\n\nAs a historical note, the function now known as repo_read_object_file() was taught the empty tree in 346245a1bb (\"hard-code the empty tree object\", 2008-02-13, Git v1.5.5-rc0 -- merge), and the function now known as oid_object_info() was taught the empty tree in c4d9986f5f (\"sha1_object_info: examine cached_object store too\", 2011-02-07, Git  v1.7.4.1).\n\n\nNote, you will see that SHA1 pop up on some GitHub repo when the author wants its first commit to be empty (see blog post \"How I initialize my Git repositories\"):\n$ GIT_AUTHOR_DATE=\"Thu, 01 Jan 1970 00:00:00 +0000\" GIT_COMMITTER_DATE=\"Thu, 01 Jan 1970 00:00:00 +0000\" git commit --allow-empty -m 'Initial commit'\n\nWill give you:\n\n(See the tree SHA1?)\nYou can even rebase your existing history on top of that empty commit (see \"git: how to insert a commit as the first, shifting all the others?\")\nIn both cases, you don't rely on the exact SHA1 value of that empty tree.\nYou simply follow a best practice, initializing your repo with a first empty commit.\n\nTo do that:\ngit init my_new_repo\ncd my_new_repo\ngit config user.name username\ngit config user.email email@com\n\ngit commit --allow-empty -m \"initial empty commit\"\n\nThat will generate a commit with a SHA1 specific to your repo, username, email, date of creation (meaning the SHA1 of the commit itself will be different every time).\nBut the tree referenced by that commit will be 4b825dc642cb6eb9a060e54bf8d69288fbee4904, the empty tree SHA1.\ngit log --pretty=raw\n\ncommit 9ed4ff9ac204f20f826ddacc3f85ef7186d6cc14\ntree 4b825dc642cb6eb9a060e54bf8d69288fbee4904      <====\nauthor VonC <[email\u00a0protected]> 1381232247 +0200\ncommitter VonC <[email\u00a0protected]> 1381232247 +0200\n\n    initial empty commit\n\nTo show just the tree of a commit (display the commit tree SHA1):\ngit show --pretty=format:%T 9ed4ff9ac204f20f826ddacc3f85ef7186d6cc14\n4b825dc642cb6eb9a060e54bf8d69288fbee4904\n\nIf that commit, referencing an empty tree, is indeed your first commit, you can show that empty tree SHA1 with:\ngit log --pretty=format:%h --reverse | head -1 | xargs git show --pretty=format:%T\n4b825dc642cb6eb9a060e54bf8d69288fbee4904\n\n(and that even works on Windows, with Gnu On Windows commands)\n\nAs commented below, using git diff <commit> HEAD, this will show all your file in the current branch HEAD:\ngit diff --name-only 4b825dc642cb6eb9a060e54bf8d69288fbee4904 HEAD\n\n\nNote: that empty tree value is formally defined in cache.h.\n#define EMPTY_TREE_SHA1_HEX \\\n    \"4b825dc642cb6eb9a060e54bf8d69288fbee4904\"\n\nSince Git 2.16 (Q1 2018), it is used in a structure which is no longer tied to  (only) SHA1, as seen in commit eb0ccfd:\n\nSwitch empty tree and blob lookups to use hash abstraction\n\n\nSwitch the uses of empty_tree_oid and empty_blob_oid to use the current_hash abstraction that represents the current hash algorithm in\nuse.\n\nSee more at \"Why doesn't Git use more modern SHA?\": it is SHA-2, since Git 2.19 (Q3 2018)\n\nWith Git 2.25 (Q1 2020), tests are preparing for a SHA-2 transition, and is involving the empty tree.\nSee commit fa26d5e, commit cf02be8, commit 38ee26b, commit 37ab8eb, commit 0370b35, commit 0253e12, commit 45e2ef2, commit 79b0edc, commit 840624f, commit 32a6707, commit 440bf91, commit 0b408ca, commit 2eabd38 (28 Oct 2019), and commit 1bcef51, commit ecde49b (05 Oct 2019) by brian m. carlson (bk2204).\n(Merged by Junio C Hamano -- gitster -- in commit 28014c1, 10 Nov 2019)\n\nt/oid-info: add empty tree and empty blob values\nSigned-off-by: brian m. carlson\n\n\nThe testsuite will eventually learn how to run using an algorithm other than SHA-1. In preparation for this, teach the test_oid family of functions how to look up the empty blob and empty tree values so they can be used.\n\nSo t/oid-info/hash-info now includes:\nrawsz sha1:20\nrawsz sha256:32\n\nhexsz sha1:40\nhexsz sha256:64\n\nzero sha1:0000000000000000000000000000000000000000\nzero sha256:0000000000000000000000000000000000000000000000000000000000000000\n\nalgo sha1:sha1\nalgo sha256:sha256\n\nempty_blob sha1:e69de29bb2d1d6434b8b29ae775ad8c2e48c5391\nempty_blob sha256:473a0f4c3be8a93681a267e3b1e9a7dcda1185436fe141f7749120a303721813\n\nempty_tree sha1:4b825dc642cb6eb9a060e54bf8d69288fbee4904\nempty_tree sha256:6ef19b41225c5369f1c104d45d8d85efa9b057b53b14b4b9b939dd74decc5321\n\nThe SHA2 \"6ef19b41225c5369f1c104d45d8d85efa9b057b53b14b4b9b939dd74decc5321\" is the new SHA1 \"4b825dc642cb6eb9a060e54bf8d69288fbee4904\" empty tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to quickly disable / enable stages in Gitlab CI\n\nWhen you work on your .gitlab-ci.yml for a big project, for example having a time consuming testing stage causes a lot of delay. Is there an easy way to disable that stage, as just removing it from the stages definition, will make the YAML invalid from Gitlab's point of view (since there's a defined but unused stage), and in my case results in:\ntest job: chosen stage does not exist; available stages are .pre, build, deploy, .post\n\nSince YAML does not support block comments, you'd need to comment out every line of the offending stage.\nAre there quicker ways?"}, {"role": "assistant", "content": "You could disable all the jobs from your stage using this trick of starting the job name with a dot ('.'). See https://docs.gitlab.com/ee/ci/jobs/index.html#hide-jobs for more details.\n.hidden_job:\n  script:\n    - run test"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  -4  --ipv4"}, {"role": "assistant", "content": "Use IPv4 addresses only, ignoring IPv6 addresses."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Remove directory from remote repository after adding them to .gitignore\n\nI committed and pushed some directory to github. After that, I altered the .gitignore file adding a directory that should be ignored. Everything works fine, but the (now ignored) directory stays on github.\nHow do I delete that directory from github and the repository history?"}, {"role": "assistant", "content": "The rules in your .gitignore file only apply to untracked files.  Since the files under that directory were already committed in your repository, you have to unstage them, create a commit, and push that to GitHub:\ngit rm -r --cached some-directory\ngit commit -m 'Remove the now ignored directory \"some-directory\"'\ngit push origin master\n\nYou can't delete the file from your history without rewriting the history of your repository - you shouldn't do this if anyone else is working with your repository, or you're using it from multiple computers.  If you still want to do that, you can use git filter-branch to rewrite the history - there is a helpful guide to that here.\nAdditionally, note the output from git rm -r --cached some-directory will be something like:\nrm 'some-directory/product/cache/1/small_image/130x130/small_image.jpg'\nrm 'some-directory/product/cache/1/small_image/135x/small_image.jpg'\nrm 'some-directory/.htaccess'\nrm 'some-directory/logo.jpg'\n\nThe rm is feedback from git about the repository; the files are still in the working directory."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge-base - Find as good common ancestors as possible for a merge  --octopus"}, {"role": "assistant", "content": "Compute the best common ancestors of all supplied commits,\nin preparation for an n-way merge.  This mimics the behavior\nof git show-branch --merge-base ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -r <arg>  --revision <arg>"}, {"role": "assistant", "content": "Used with the fetch command. This allows revision ranges for partial/cauterized history\nto be supported.  $NUMBER, $NUMBER1:$NUMBER2 (numeric ranges),\n$NUMBER:HEAD, and BASE:$NUMBER are all supported. This can allow you to make partial mirrors when running fetch;\nbut is generally not recommended because history will be skipped\nand lost."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --abbrev[=<n>]"}, {"role": "assistant", "content": "Instead of showing the full 40-byte hexadecimal object\nname in diff-raw format output and diff-tree header\nlines, show the shortest prefix that is at least <n> hexdigits long that uniquely refers the object.\nIn diff-patch output format, --full-index takes higher\nprecedence, i.e. if --full-index is specified, full blob\nnames will be shown regardless of --abbrev .\nNon default number of digits can be specified with --abbrev=<n> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I clone a Git repository into a specific folder?\nThe command git clone [email\u00a0protected]:whatever creates a directory named whatever containing a Git repository:\n./\n    whatever/\n        .git\n\nI want the contents of the Git repository cloned into my current directory ./ instead:\n./\n    .git"}, {"role": "assistant", "content": "Option A:\ngit clone [email\u00a0protected]:whatever folder-name\n\nErgo, for right here use:\ngit clone [email\u00a0protected]:whatever .\n\nOption B:\nMove the .git folder, too. Note that the .git folder is hidden in most graphical file explorers, so be sure to show hidden files.\nmv /where/it/is/right/now/* /where/I/want/it/\nmv /where/it/is/right/now/.* /where/I/want/it/\n\nThe first line grabs all normal files, the second line grabs dot-files. It is also possibe to do it in one line by enabling dotglob (i.e. shopt -s dotglob) but that is probably a bad solution if you are asking the question this answer answers.\nBetter yet:\nKeep your working copy somewhere else, and create a symbolic link. Like this:\nln -s /where/it/is/right/now /the/path/I/want/to/use\n\nFor your case this would be something like:\nln -sfn /opt/projectA/prod/public /httpdocs/public\n\nWhich easily could be changed to test if you wanted it, i.e.:\nln -sfn /opt/projectA/test/public /httpdocs/public\n\nwithout moving files around. Added -fn in case someone is copying these lines (-f is force,  -n avoid some often unwanted interactions with already and non-existing links).\nIf you just want it to work, use Option A, if someone else is going to look at what you have done, use Option C."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-restore - Restore working tree files  --ignore-skip-worktree-bits"}, {"role": "assistant", "content": "In sparse checkout mode, the default is to only update entries\nmatched by <pathspec> and sparse patterns in\n$GIT_DIR/info/sparse-checkout. This option ignores the sparse\npatterns and unconditionally restores any files in <pathspec> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I remove an applied git patch?\nI have a git repo, where we apply many patches in test environment.\ngit apply --stat --check --ignore-whitespace /home/kent/Desktop/patches/test.patch --exclude .gitignore\n\ngit am -s --ignore-whitespace /home/kent/Desktop/patches/test.patch --exclude .gitignore --exclude .gitignore\n\nIf I have to remove the patch and apply a new one, at present I clone the live content and reapply all the test patches and push again.\nThis process is somehow cumbersome and also leads to errors at times I also miss one or two patches.\nI wanted to know if there is a way to remove a patch and apply the new one\nAlso, to add one way is there if we commit each time to the patch and then i can use:\ngit revert <<commit id>>\n\nThe above does not work for me at all times."}, {"role": "assistant", "content": "TL;DR\nYou can revert a patch with:\n$ git apply -R <patch>\n\n\nYou can generate a patch either by one of the following:\nThis will generate a patch from a diff\n$ git diff --patch > 0001-some-modifications.patch\n\nIf you want to generate a patch for just the HEAD commit:\n$ git show --patch HEAD^ > 0001-some-modifications.patch\n\nYou can generate a patch for the previous 3 commits from HEAD:\n$ git show --patch HEAD~3 > 0001-some-modifications.patch\n\nYou can apply the patch by:\n$ git apply -- 0001-some-modifications.patch\n\nYou can revert a patch with:\n$ git apply -R <patch>\n\nWhen you generate a patch it is just a diff with metadata; files, line numbers adds/removes; something along the following:\ncommit 9dad147cbf16befecdef2e812c1249499bdef5ac\nAuthor: My Name <[email\u00a0protected]>\nDate:   Mon Dec 21 20:46:01 2015 +0000\n\n    Example commit message.\n\ndiff --git a/src/example.md b/src/example.md\nnew file mode 100644\nindex 0000000..ab73512\n--- /dev/null\n+++ b/src/example.md\n@@ -0,0 +1,3 @@\n+# Example document\n+\n+ Hello World\n\nSo when you use git apply you're essentially applying the edits as per to the tree.\nWhen you then run git apply -R git will simply do the opposite to the patch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "MSysGit vs. Git for Windows\nI am having trouble determining the difference between MSysGit and Git for Windows. How are they different? Why would I choose one over the other?"}, {"role": "assistant", "content": "Are they not the same thing?\nOn: http://msysgit.github.com/ The title is Git for Windows, the application is msysgit.\nEven in the event they are not, I expect the only differences will be in the method of compilation (i.e. compiler used and any options set) and any extraneous packaging (such as having a bash emulating shell as in msysgit). The actual product (Git itself) should remain broadly similar.\n\nEdit: Thanks to Jarrod for pointing this out. I've left the above in for posterity. To quote the wiki:\n\nmsysGit is the development environment\n  to compile Git for Windows. It is\n  complete, in the sense that you just\n  need to install msysGit, and then you\n  can build Git. Without installing any\n  3rd-party software.\n  msysGit is not Git for Windows; that\n  is an installer which installs Git --\n  and only Git.\nIt is easy to see the difference: the\n  installers for Git have the prefix\n  Git-, the msysGit installers have the\n  prefix msysGit-. Another telltale is\n  that the msysGit installers come in\n  two flavors: fullinstall and\n  netinstall. Further, msysGit does not\n  install to C:\\Program Files by\n  default. But msysGit comes with gcc,\n  the GNU C Compiler.\n\nSo, the difference between the two projects:\n\nmsysGit is the msys+mingw environment + everything needed to compile Git yourself, on Windows.\nGit for Windows is exactly that: Git, compiled for Windows."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "When should I use git pull --rebase?\nI know of some people who use git pull --rebase by default and others who insist never to use it.  I believe I understand the difference between merging and rebasing, but I'm trying to put this in the context of git pull.  Is it just about not wanting to see lots of merge commit messages, or are there other issues?"}, {"role": "assistant", "content": "I would like to provide a different perspective on what git pull --rebase actually means, because it seems to get lost sometimes.\nIf you've ever used Subversion (or CVS), you may be used to the behavior of svn update. If you have changes to commit and the commit fails because changes have been made upstream, you svn update. Subversion proceeds by merging upstream changes with yours, potentially resulting in conflicts.\nWhat Subversion just did, was essentially git pull --rebase. The act of re-formulating your local changes to be relative to the newer version is the \"rebasing\" part of it. If you had done svn diff prior to the failed commit attempt, and compare the resulting diff with the output of svn diff afterwards, the difference between the two diffs is what the rebasing operation did.\nThe major difference between Git and Subversion in this case is that in Subversion, \"your\" changes only exist as non-committed changes in your working copy, while in Git you have actual commits locally. In other words, in Git you have forked the history; your history and the upstream history has diverged, but you have a common ancestor.\nIn my opinion, in the normal case of having your local branch simply reflecting the upstream branch and doing continuous development on it, the right thing to do is always --rebase, because that is what you are semantically actually doing. You and others are hacking away at the intended linear history of a branch. The fact that someone else happened to push slightly prior to your attempted push is irrelevant, and it seems counter-productive for each such accident of timing to result in merges in the history.\nIf you actually feel the need for something to be a branch for whatever reason, that is a different concern in my opinion. But unless you have a specific and active desire to represent your changes in the form of a merge, the default behavior should, in my opinion, be git pull --rebase.\nPlease consider other people that need to observe and understand the history of your project. Do you want the history littered with hundreds of merges all over the place, or do you want only the select few merges that represent real merges of intentional divergent development efforts?"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  [<branchname>]@{upstream} , e.g. master@{upstream} , @{u}"}, {"role": "assistant", "content": "A branch B may be set up to build on top of a branch X (configured with branch.<name>.merge ) at a remote R (configured with branch.<name>.remote ). B@{u} refers to the remote-tracking branch for\nthe branch X taken from remote R, typically found at refs/remotes/R/X ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What does git fsck stand for?\nWhat is the meaning in behind the fsck command name?\nThe documentation of the command does not seem to mention what the name stands for."}, {"role": "assistant", "content": "It stands for File System ChecK. The name is taken from the Unix fsck command, which is used to validate a file system.\nWhile Git is not technically a file system, it can be used analogously and the command name is a metaphor on this."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Private pages for a private Github repo\n\nCouldn't find anything in the github documentation and also here on SO. But I was wondering if there could be a http://foo.github.com for a private repository named foo which is accessible only one had access to the foo repository itself.\nI remember having read something about github pages always being public but can't seem to find that anymore.\nAnd surprisingly, I can't seem to find anyone else asking the question either."}, {"role": "assistant", "content": "I had raised a support ticket against Github and got a response confirming the fact that ALL pages are public. I've now requested them to add a note to help.github.com/pages."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.mnemonicPrefix"}, {"role": "assistant", "content": "If set, git diff uses a prefix pair that is different from the\nstandard \"a/\" and \"b/\" depending on what is being compared.  When\nthis configuration is in effect, reverse diff output also swaps\nthe order of the prefixes: git diff compares the (i)ndex and the (w)ork tree; git diff HEAD compares a (c)ommit and the (w)ork tree; git diff --cached compares a (c)ommit and the (i)ndex; git diff HEAD:file1 file2 compares an (o)bject and a (w)ork tree entity; git diff --no-index a b compares two non-git things (1) and (2)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Ignore modified (but not committed) files in git?\nCan I tell git to ignore files that are modified (deleted) but should not be committed?\nThe situation is that I have a subdirectory in the repo which contains stuff I'm not interested in at all, so I deleted it to prevent it showing up in auto-completions and the like (in the IDE).\nBut now, if I add that folder to .gitignore, simply nothing changes, all the stuff is shown as deleted by git status.\nIs there a way to make git ignore it either way?\n(Alternatively, as I'm using git-svn, could I commit the changes to the local git and ensure they are not passed on to the svn repo?)"}, {"role": "assistant", "content": "check out the git-update-index man page and the --assume-unchanged bit and related.\nwhen I have your problem I do this\ngit update-index --assume-unchanged dir-im-removing/\n\nor a specific file\ngit update-index --assume-unchanged config/database.yml"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  --sparse"}, {"role": "assistant", "content": "Allow updating index entries outside of the sparse-checkout cone.\nNormally, git add refuses to update index entries whose paths do\nnot fit within the sparse-checkout cone, since those files might\nbe removed from the working tree without warning. See git-sparse-checkout for more details."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git pull is very slow... Why?\nNote I have studied the git-is-very-very-slow question, but in their case the reason was big binary files - while in my repository there is PHP/JS/HTML/CSS only code (no binaries) and the biggest file in the repository is around 800 KB.\nI've changed one file (a few lines), then git add . and git commit -m \"msg\", then git push origin master.\nOn some other machine, when I do git pull origin master it downloads a few MiB of data, and it takes more than 2 minutes to calculate the delta and apply changes. Something is terribly wrong here.\nI suspect some recent operations may cause this:\nrecently, I've accidentally added many vendor assets (bower_components assets)\nwhen I realized it, I've used git rm to remove them from repository (and ofcourse, git add, git commit and git push to upstream).\nThat was a few days ago and the problems I have right now started happeing around that time.\nI have two questions:\n\nWhy this is happeing?\nHow can I fix my repository?\n\nNote: I am the only one useing and pushing to this repo."}, {"role": "assistant", "content": "I had the same issue. For me this was a IPv4/IPv6 issue. I fixed it forcing SSH to use IPv4.\nSet \"AddressFamily inet\" in /etc/ssh/ssh_config to force IPv4 connection. Then restart ssh client sudo service ssh restart\nMore info here."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git + LaTeX workflow\nI'm writing a very long document in LaTeX. I have my work computer and my laptop, and I work on them both. I need to keep all the files synchronized between the two computers, and also would like to keep a revision history. I chose git as my DVCS, and I'm hosting my repository on my server. I'm also using Kile + Okular to do the editing. Kile doesn't have an integrated git plugin. I'm also not collaborating with anyone on this text. I'm also thinking about putting another private repository on codaset, if my server for some reason is not accessible.\nWhat is the recommended workflow practice in this case? How can branching be fitted in this working scheme? Is there a way to compare two versions of the same file? What about using a stash?"}, {"role": "assistant", "content": "Changes to your LaTeX workflow:\nThe first step in efficiently managing a Git+LaTeX workflow is to make a few changes to your LaTeX habits.\n\nFor starters, write each sentence on a separate line. Git was written to version control source code, where each line is distinct and has a specific purpose. When you write documents in LaTeX, you often think in terms of paragraphs and write it as a free flowing document. However, in git, changes to a single word in a paragraph get recorded as a change to the entire paragraph.\nOne solution is to use git diff --color-words (see my answer to a similar question How to use Mercurial for version control of text documents? where I show an example). However, I must emphasize that splitting into separate lines is a much better option (I only mentioned it in passing in that answer), as I've found it to result in very minimal merge conflicts.\n\nIf you need to look at the code diff, use Git's native diff. To see the difference between two arbitrary commits (versions), you can do so with the shas of each of the commits. See the documentation for more details and also Showing which files have changed between two revisions.\nOn the other hand, if you need to look at the diff of your formatted output, use latexdiff which is an excellent utility (written in perl) that takes two latex files and produces a neat diffed output in pdf like this (image source):\n\nYou can combine git and latexdiff (plus latexpand if needed) in a single command using git-latexdiff (e.g. git latexdiff HEAD^ to view the diff between your worktree and the last-but-one commit).\n\nIf you're writing a long document in LaTeX, I'd suggest splitting different chapters into their own files and call them in the main file using the \\include{file} command. This way it is easier for you to edit a localized part of your work, and it is also easier for version control, as you know what changes have been made to each chapter, instead of having to figure it out from the logs of one big file.\n\n\nUsing Git efficiently:\n\nUse branches!. There is perhaps no better advice I can give. I've found branches to be very helpful to keep track of \"different ideas\" for the text or for \"different states\" of the work. The master branch should be your main body of work, in its most current \"ready to publish\" state i.e., if of all the branches, if there is one that you are willing to put your name on it, it should be the master branch.\nBranches are also extremely helpful if you are a graduate student. As any grad student will attest, the advisor is bound to have numerous corrections, most of which you don't agree with. Yet, you might be expected to atleast change them for the time being, even if they are reverted later after discussions. So in such cases, you could create a new branch advisor and make changes to their liking, at the same time maintaining your own development branch. You can then merge the two and cherry pick what you need.\n\nI would also suggest splitting each section into a different branch and focus only the section corresponding to the branch that you're on. Spawn a branch when you create a new section or dummy sections when you make your initial commit (your choice, really). Resist the urge to edit a different section (say, 3) when you're not on its branch. If you need to edit, commit this one and then checkout the other before branching. I find this very helpful because it keeps the history of the section in its own branch and also tells you at a glance (from the tree) how old some section is. Perhaps you've added material to section 3 that requires tweaking to section 5\u2026 Of course, these will, in all probability, be observed during a careful reading, but I find it helpful to see this at a glance so that I can shift gears if I'm getting bored of a section.\nHere's an example of my branches and merges from a recent paper (I use SourceTree on OS X and Git from the command line on Linux). You'll probably notice that I'm not the world's most frequent committer nor do I leave useful comments all the time, but that's no reason for you not to follow those good habits. The main takeaway message is that working in branches is helpful. My thoughts, ideas and development proceeds non-linearly, but I can keep track of them via branches and merge them when I'm satisfied (I also had other branches that led nowhere that were later deleted). I can also \"tag\" commits if they mean something (e.g., initial submissions to journals/revised submissions/etc.). Here, I've tagged it \"version 1\", which is where the draft is as of now. The tree represents a week's worth of work.\n\n\nAnother useful thing to do would be to make document wide changes (such as changing \\alpha to \\beta everywhere) commits on their own. That way,  you can revert changes without having to rollback something else along with it (there are ways you can do this using git, but hey, if your can avoid it, then why not?). The same goes for additions to the preamble.\n\nUse a remote repo and push your changes upstream regularly. With free service providers like GitHub and Bitbucket (both allow you to create private repos with a free account), there is no reason to not be using these if you're working with Git/Mercurial. At the very least, consider it as a secondary backup (I hope you have a primary one!) for your LaTeX files and a service that allows you to continue editing from where you left on a different machine."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  External data format"}, {"role": "assistant", "content": "The data content for the note was already supplied by a prior blob command.  The frontend just needs to connect it to the\ncommit that is to be annotated. 'N' SP <dataref> SP <commit-ish> LF Here <dataref> can be either a mark reference ( :<idnum> )\nset by a prior blob command, or a full 40-byte SHA-1 of an\nexisting Git blob object."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  -v  --verbose"}, {"role": "assistant", "content": "Show unified diff between the HEAD commit and what\nwould be committed at the bottom of the commit message\ntemplate to help the user describe the commit by reminding\nwhat changes the commit has.\nNote that this diff output doesn\u2019t have its\nlines prefixed with # . This diff will not be a part\nof the commit message. See the commit.verbose configuration\nvariable in git-config . If specified twice, show in addition the unified diff between\nwhat would be committed and the worktree files, i.e. the unstaged\nchanges to tracked files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to download GitHub Release from private repo using command line\n\nGitHub guide explains 2 way to authorize but looks neither of those works with the Release files.\nas a result of:\ncurl -u 'username' -L -o a.tgz https://github.com/company/repository/releases/download/TAG-NAME/A.tgz\n\nThere always is something like\n<!DOCTYPE html>\n<!--\nHello future GitHubber! ..."}, {"role": "assistant", "content": "To download release file from private repo, you can use Personal access token which can be generated at settings/tokens with Full control of private repositories scope.\nThen download the asset with curl command (change with appropriate values):\ncurl -vLJO -H 'Authorization: token my_access_token' 'https://api.github.com/repos/:owner/:repo/releases/assets/:id'\n\nor if you're using an OAuth app, use:\ncurl -u my_client_id:my_client_secret https://api.github.com/repos/:owner/:repo/releases/assets/:id\n\nwhere:\n\n:owner is your user or organisation username;\n:repo is your repository name;\n:id is your asset id, can be found in tag release URL, like:\nhttps://api.github.com/repos/:owner/:repo/releases/tags/:tag \n\n:token is your personal access token (can be created at /settings/tokens;\n\nNote: Using access_token as a query param is deprecated.\nSee: Repositories API v3 at GitHub\n\nHere is the Bash script which can download asset file given specific name of file:\n#!/usr/bin/env bash\n# Script to download asset file from tag release using GitHub API v3.\n# See: http://stackoverflow.com/a/35688093/55075    \nCWD=\"$(cd -P -- \"$(dirname -- \"$0\")\" && pwd -P)\"\n\n# Check dependencies.\nset -e\ntype curl grep sed tr >&2\nxargs=$(which gxargs || which xargs)\n\n# Validate settings.\n[ -f ~/.secrets ] && source ~/.secrets\n[ \"$GITHUB_API_TOKEN\" ] || { echo \"Error: Please define GITHUB_API_TOKEN variable.\" >&2; exit 1; }\n[ $# -ne 4 ] && { echo \"Usage: $0 [owner] [repo] [tag] [name]\"; exit 1; }\n[ \"$TRACE\" ] && set -x\nread owner repo tag name <<<$@\n\n# Define variables.\nGH_API=\"https://api.github.com\"\nGH_REPO=\"$GH_API/repos/$owner/$repo\"\nGH_TAGS=\"$GH_REPO/releases/tags/$tag\"\nAUTH=\"Authorization: token $GITHUB_API_TOKEN\"\nWGET_ARGS=\"--content-disposition --auth-no-challenge --no-cookie\"\nCURL_ARGS=\"-LJO#\"\n\n# Validate token.\ncurl -o /dev/null -sH \"$AUTH\" $GH_REPO || { echo \"Error: Invalid repo, token or network issue!\";  exit 1; }\n\n# Read asset tags.\nresponse=$(curl -sH \"$AUTH\" $GH_TAGS)\n# Get ID of the asset based on given name.\neval $(echo \"$response\" | grep -C3 \"name.:.\\+$name\" | grep -w id | tr : = | tr -cd '[[:alnum:]]=')\n#id=$(echo \"$response\" | jq --arg name \"$name\" '.assets[] | select(.name == $name).id') # If jq is installed, this can be used instead. \n[ \"$id\" ] || { echo \"Error: Failed to get asset id, response: $response\" | awk 'length($0)<100' >&2; exit 1; }\nGH_ASSET=\"$GH_REPO/releases/assets/$id\"\n\n# Download asset file.\necho \"Downloading asset...\" >&2\ncurl $CURL_ARGS -H \"Authorization: token $GITHUB_API_TOKEN\" -H 'Accept: application/octet-stream' \"$GH_ASSET\"\necho \"$0 done.\" >&2\n\nBefore running, you need to set your GITHUB_API_TOKEN with your GitHub token (see: /settings/tokens at GH). This can be placed in your ~/.secrets file, like:\nGITHUB_API_TOKEN=XXX\n\nExample script usage:\n./get_gh_asset.sh :owner :repo :tag :name\n\nwhere name is your filename (or partial of it). Prefix script with TRACE=1 to debug it.\n\nIn case you wonder why curl fails sometimes with (as mentioned in other answer):\n\nOnly one auth mechanism allowed; only the X-Amz-Algorithm query parameter, Signature query string parameter or the Authorization header should be specified.\n\nwhen running like:\ncurl -vLJ -H 'Authorization: token <token>' -H 'Accept: application/octet-stream' https://api.github.com/repos/:owner/:repo/releases/assets/<id>\n\nthis is because you're specifying multiple mechanism at the same time, so S3 server doesn't know which one to use, therefore you have to choose only one, such as:\n\nX-Amz-Algorithm query parameter\nSignature query string parameter (X-Amz-Signature)\nAuthorization header (Authorization: token <token>)\n\nand since GitHub redirects you from asset page (when requesting application/octet-stream), it populates credentials automatically in query string and since curl is passing over the same credentials in the request header (which you've specified), therefore they're conflicting. So as for workaround you can use access_token instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  advice.*"}, {"role": "assistant", "content": "These variables control various optional help messages designed to\naid new users.  When left unconfigured, Git will give the message\nalongside instructions on how to squelch it.  You can tell Git\nthat you do not need the help message by setting these to false : addEmbeddedRepo Shown when the user accidentally adds one\ngit repo inside of another. addEmptyPathspec Shown when the user runs git add without providing\nthe pathspec parameter. addIgnoredFile Shown when the user attempts to add an ignored file to\nthe index. amWorkDir Shown when git-am fails to apply a patch\nfile, to tell the user the location of the file. ambiguousFetchRefspec Shown when a fetch refspec for multiple remotes maps to\nthe same remote-tracking branch namespace and causes branch\ntracking set-up to fail. checkoutAmbiguousRemoteBranchName Shown when the argument to git-checkout and git-switch ambiguously resolves to a\nremote tracking branch on more than one remote in\nsituations where an unambiguous argument would have\notherwise caused a remote-tracking branch to be\nchecked out. See the checkout.defaultRemote configuration variable for how to set a given remote\nto be used by default in some situations where this\nadvice would be printed. commitBeforeMerge Shown when git-merge refuses to\nmerge to avoid overwriting local changes. detachedHead Shown when the user uses git-switch or git-checkout to move to the detached HEAD state, to tell the user how\nto create a local branch after the fact. diverging Shown when a fast-forward is not possible. fetchShowForcedUpdates Shown when git-fetch takes a long time\nto calculate forced updates after ref updates, or to warn\nthat the check is disabled. forceDeleteBranch Shown when the user tries to delete a not fully merged\nbranch without the force option set. ignoredHook Shown when a hook is ignored because the hook is not\nset as executable. implicitIdentity Shown when the user\u2019s information is guessed from the\nsystem username and domain name, to tell the user how to\nset their identity configuration. mergeConflict Shown when various commands stop because of conflicts. nestedTag Shown when a user attempts to recursively tag a tag object. pushAlreadyExists Shown when git-push rejects an update that\ndoes not qualify for fast-forwarding (e.g., a tag.) pushFetchFirst Shown when git-push rejects an update that\ntries to overwrite a remote ref that points at an\nobject we do not have. pushNeedsForce Shown when git-push rejects an update that\ntries to overwrite a remote ref that points at an\nobject that is not a commit-ish, or make the remote\nref point at an object that is not a commit-ish. pushNonFFCurrent Shown when git-push fails due to a\nnon-fast-forward update to the current branch. pushNonFFMatching Shown when the user ran git-push and pushed\n\"matching refs\" explicitly (i.e. used : , or\nspecified a refspec that isn\u2019t the current branch) and\nit resulted in a non-fast-forward error. pushRefNeedsUpdate Shown when git-push rejects a forced update of\na branch when its remote-tracking ref has updates that we\ndo not have locally. pushUnqualifiedRefname Shown when git-push gives up trying to\nguess based on the source and destination refs what\nremote ref namespace the source belongs in, but where\nwe can still suggest that the user push to either refs/heads/* or refs/tags/* based on the type of the\nsource object. pushUpdateRejected Set this variable to false if you want to disable pushNonFFCurrent , pushNonFFMatching , pushAlreadyExists , pushFetchFirst , pushNeedsForce , and pushRefNeedsUpdate simultaneously. refSyntax Shown when the user provides an illegal ref name, to\ntell the user about the ref syntax documentation. resetNoRefresh Shown when git-reset takes more than 2\nseconds to refresh the index after reset, to tell the user\nthat they can use the --no-refresh option. resolveConflict Shown by various commands when conflicts\nprevent the operation from being performed. rmHints Shown on failure in the output of git-rm , to\ngive directions on how to proceed from the current state. sequencerInUse Shown when a sequencer command is already in progress. skippedCherryPicks Shown when git-rebase skips a commit that has already\nbeen cherry-picked onto the upstream branch. statusAheadBehind Shown when git-status computes the ahead/behind\ncounts for a local ref compared to its remote tracking ref,\nand that calculation takes longer than expected. Will not\nappear if status.aheadBehind is false or the option --no-ahead-behind is given. statusHints Show directions on how to proceed from the current\nstate in the output of git-status , in\nthe template shown when writing commit messages in git-commit , and in the help message shown\nby git-switch or git-checkout when switching branches. statusUoption Shown when git-status takes more than 2\nseconds to enumerate untracked files, to tell the user that\nthey can use the -u option. submoduleAlternateErrorStrategyDie Shown when a submodule.alternateErrorStrategy option\nconfigured to \"die\" causes a fatal error. submoduleMergeConflict Advice shown when a non-trivial submodule merge conflict is\nencountered. submodulesNotUpdated Shown when a user runs a submodule command that fails\nbecause git submodule update --init was not run. suggestDetachingHead Shown when git-switch refuses to detach HEAD\nwithout the explicit --detach option. updateSparsePath Shown when either git-add or git-rm is asked to update index entries outside the current sparse\ncheckout. waitingForEditor Shown when Git is waiting for editor input. Relevant\nwhen e.g. the editor is not launched inside the terminal. worktreeAddOrphan Shown when the user tries to create a worktree from an\ninvalid reference, to tell the user how to create a new unborn\nbranch instead."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-config"}, {"role": "assistant", "content": "Get and set repository or global options"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "can we use dynamic jobs names in gitlab-ci.yml?\n\nI have to migrate from jenkins to gitlab and I would like to be able to use dynamic job names in order to have some information directly in the pipeline summary without having to click on each job etc.... in jenkins we can immediately see the parameters passed to our job and this is not the case in gitlab-ci.\nMy test runner being on a windows I tried to define the yml as follows:\njob_%myParam%:\n  stage: build\n  script:\n    - set>varList.txt\n  artifacts:\n    paths:\n    - varList.txt\n\nWhen I start my job with %myParam%=true, the variable is not interpreted in the job name and so it takes the name of job_%myParam% instead of expected \"job_true\".\nIs that even possible?\nthks :)"}, {"role": "assistant", "content": "As of gitlab 12.9, this can be done using trigger and child pipelines \u2014 although a little involved:\nQuoting the example from the gitlab doc:\ngenerate-config:\n  stage: build\n  script: generate-ci-config > generated-config.yml\n  artifacts:\n    paths:\n      - generated-config.yml\n\nchild-pipeline:\n  stage: test\n  trigger:\n    include:\n      - artifact: generated-config.yml\n        job: generate-config\n\nIn your case, you would put the definition of job_%myParam% in job.yml.in, then have the script generate-ci-config be e.g. sed \"s/%myParam%/$PARAM/g\" job.yml.in.\nThis is probably a bit much for just changing the names of course, and there will be a cost associated to the additional stage; but it does answer the question, and may be useful to do more, like start with different versions of the parameter in the same pipeline."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --binary"}, {"role": "assistant", "content": "In addition to --full-index , output a binary diff that\ncan be applied with git-apply .\nImplies --patch ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "\"fatal: HttpRequestException encountered.\" Error with GitHub/Bitbucket Repositories due to dropping TLS-1.0 support\nProblem\nI recently encountered the following message when I pushed to a GitHub repo:\n\"fatal: HttpRequestException encountered. \"\nfollowed by being prompted for my username and password again. \nFrom previous searches, Visual Studio and various others have the same root problem. For those lazier than I am, a summary of the various solutions for different applications/OS are here with relevant discussions. Hopefully people find this helpful.\nReason\nCan't really call updating sercurity a problem, so here's the reason. The issue is GitHub has removed TLS-1.0 support which is causing the problem with clients including Microsoft Visual Studio's built in git client, versions of Git below 1.14 as well as GUI clients includint tortoiseGit, etc. The full release notes can be found here: \nhttps://githubengineering.com/crypto-removal-notice/\nBitbucket will drop TLSv1.0 and TLSv1.1 starting 1 Dec 2018. I expect similar problems as before. \nSolution\nEdit: moved my self-answer to an answer box. See below."}, {"role": "assistant", "content": "Git hub has removed TLS-1.0 from it's authentication services. https://githubengineering.com/crypto-removal-notice/\nSolutions\nWindows Clients\nUse Version 2.14.3 (or newer) of Git for Windows and newer include an up-to-date Git Credential Manager for Windows: https://gitforwindows.org/\nYou can also explicitly update your Git Windows Credential Manager to the latest version, 1.14.0, to get TLS-1.2 support: https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/tag/v1.14.0\nVisual Studio Clients\nIt is suggested to update your client to VS 2017 or, if you cannot upgrade, there are two machine-wide registry keys you can set that affect all .NET-based applications on the client machine that you can change... https://developercommunity.visualstudio.com/content/problem/201457/unable-to-connect-to-github-due-to-tls-12-only-cha.html\nJDK\nTLS-1.2 is default in JDK8 and available in JDK7.\nhttps://blogs.oracle.com/java-platform-group/diagnosing-tls,-ssl,-and-https\nRed Hat native Git clients\nRH 5 does not support TLS-1.2 and GitHubEngineering suggest updating to newer versions of the OS. RH 6.8 and 7.2 will support TLS-1.2. https://www.linuxquestions.org/questions/blog/mensawater-183304/rhel5-wont-support-tlsv1-1-or-higher-36951/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Check that git repository exists\n\nIs there any way how to check whether git repository exist just before perform git clone action? Something like git clone $REMOTE_URL --dry-run?\nI would like to implement fast checking method which will check existence before the clone action will be performed. I expect that connection might be slow and repository might be big even more than 1GB, so I don't want to rely on time extensive operation due to simple validation. The clone will be performed asynchronously in the background when validation passes.\nI found this https://superuser.com/questions/227509/git-ping-check-if-remote-repository-exists but it works from git repository context after initial clone action is done.\nMaybe there is some git call which works without git repository context and return \"some data\" if repository on destination exist or error if doesn't."}, {"role": "assistant", "content": "The answer that you linked does what you want it to do.\nTry running this in a folder without a repository in it:\ngit ls-remote https://github.com/git/git\n\nIt should show you the references on the remote, even though you haven't added a local repository with git init or done a git clone.\nSee more: https://www.kernel.org/pub/software/scm/git/docs/git-ls-remote.html"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-restore"}, {"role": "assistant", "content": "Restore working tree files"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "npm install from github pull request\n\nLoooking at the npm install docs it looks possible to npm install from a github repo.  \nIs it also possible to install specifically from a pull request?\nIs the solution just to install based on the last commit (last sha) of the pull request?"}, {"role": "assistant", "content": "GitHub is maintaining a namespace for each PR in the original repo, so this works as well:\nnpm install <user>/<repo>#pull/<id>/head\n\n\nNOTE: It doesn't seeem to be working with NPM v. 5. See the comment below.\nWorks with npm 7.0.23 and possibly earlier versions. See the comment below.\n\nfor example:\nnpm i --save-dev json-schema-faker/json-schema-faker#pull/129/head\n\nor with yarn:\nyarn add <user>/<repo>#<id>/head\n\nfor example:\nyarn add json-schema-faker/json-schema-faker#129/head\n\nNote that in Yarn case there is no pull/ segment in the package identifier.\nThis may be helpful if you need to automate the installation or repo / branch from where PR is originating is removed. See also Modifying an inactive pull request locally at GitHub."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  MERGE_HEAD"}, {"role": "assistant", "content": "records the commit(s) which you are merging into your branch when you\nrun git merge ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitcli - Git command-line interface and conventions  -h"}, {"role": "assistant", "content": "gives a pretty printed usage of the command. $ git describe -h\nusage: git describe [<options>] <commit-ish>*\n   or: git describe [<options>] --dirty\n\n    --contains            find the tag that comes after the commit\n    --debug               debug search strategy on stderr\n    --all                 use any ref\n    --tags                use any tag, even unannotated\n    --long                always use long format\n    --abbrev[=<n>]        use <n> digits to display SHA-1s Note that some subcommand (e.g. git grep ) may behave differently\nwhen there are things on the command line other than -h , but git\nsubcmd -h without anything else on the command line is meant to\nconsistently give the usage."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  %(describe[:<options>])"}, {"role": "assistant", "content": "human-readable name, like git-describe ; empty string for\nundescribable commits.  The describe string may be followed by a colon and\nzero or more comma-separated options.  Descriptions can be inconsistent when\ntags are added or removed at the same time. tags[=<bool-value>] : Instead of only considering annotated tags,\nconsider lightweight tags as well. abbrev=<number> : Instead of using the default number of hexadecimal digits\n(which will vary according to the number of objects in the repository with a\ndefault of 7) of the abbreviated object name, use <number> digits, or as many\ndigits as needed to form a unique object name. match=<pattern> : Only consider tags matching the given glob(7) pattern, excluding the \"refs/tags/\" prefix. exclude=<pattern> : Do not consider tags matching the given glob(7) pattern, excluding the \"refs/tags/\" prefix."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to determine which forks on GitHub are ahead?\n\nSometimes, the original GitHub repository of a piece of software I'm using, such as linkchecker, is seeing little or no development, while a lot of forks have been created (in this case: 142, at the time of writing).\nFor each fork, I'd like to know:\n\nwhich branches it has with commits ahead of the original master branch\n\nand for each such branch:\n\nhow many commits it is ahead of the original\nhow many commits it is behind\n\nGitHub has a web interface for comparing forks, but I don't want to do this manually for each fork, I just want a CSV file with the results for all forks. How can this be scripted? The GitHub API can list the forks, but I can't see how to compare forks with it. Cloning every fork in turn and doing the comparison locally seems a bit crude."}, {"role": "assistant", "content": "Edit: This solution has to be adjusted to a recent change of the GitHub website. GitHub for some reason doesn't show the number of commits immediately anymore, but fetches it with a script as discussed here. Our bookmarklet should be edited to perform the same fetching.\nAfter clicking \"Insights\" on top and then \"Forks\" on the left, the following bookmarklet prints the info (including links to ZIP files) directly onto the web page like this:\n\nOr like this if you click \"Switch to tree view\":\n\nThe code to add as a bookmarklet (or to paste into the console):\njavascript:(async () => {\n  /* while on the forks page, collect all the hrefs and pop off the first one (original repo) */\n  const aTags = [...document.querySelectorAll('div.repo a:last-of-type')].slice(1).concat([...document.querySelectorAll('div.repository-content ul a:last-of-type:not(.Link--muted)')]);\n\n  for (const aTag of aTags) {\n    /* fetch the forked repo as html, search for the \"This branch is [n commits ahead,] [m commits behind]\", print it directly onto the web page */\n    await fetch(aTag.href)\n      .then(x => x.text())\n      .then(html => aTag.outerHTML += `${html.match(/This branch is.*/).pop().replace('This branch is', '').replace(/([0-9]+ commits? ahead)/, '<font color=\"#0c0\">$1</font>').replace(/([0-9]+ commits? behind)/, '<font color=\"red\">$1</font>')}` + \" <a \" + `${html.match(/href=\"[^\"]*\\.zip\">/).pop() + \"Download ZIP</a>\"}`)\n      .catch(console.error);\n  }\n})();\n\nYou can also paste the code into the address bar, but note that some browsers delete the leading javascript: while pasting, so you'll have to type javascript: yourself. Or copy everything except the leading j, type j, and paste the rest.\nIt has been modified from this answer."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Trying to commit Git files but getting :: fatal: LF would be replaced by CRLF in <some file in repo>\nWhen I try to commit some changed files, I get the following error message with TortoiseGit\nfatal: LF would be replaced by CRLF in <some file in the repo>\nNow, before I get the usual LF vs CRLF answers, I know and understand what the debate is about. Secondly, I've also set my global settings to:\ncore.autocrlf true\nThird, I've got a .gitattributes file.\nSo I -want- to make sure or files are forced to have CRLF.\nWhat I don't understand is that it's saying FATAL and blocking me from continuing. A Warning? Sure! Do I know what I'm trying to do? I do! \nI just want it to convert silently and STFU.\nAlternatively, if it's forced to BLOCK me, is there a way I can update all files in the repo to be CRLF, so this warning is no longer issued?\nThese repos are private, so they will never be developed outside of Windows + Visual Studio. \nHow can I proceed?"}, {"role": "assistant", "content": "You might want to set core.safecrlf to \"warn\", if you want only warning and not a fatal error.\nFrom \"git config\" mange page:\ncore.safecrlf\n\nIf true, makes git check if converting CRLF is reversible when end-of-line conversion is active. Git will verify if a command modifies a file in the work tree either directly or indirectly.\n  For example, committing a file followed by checking out the same file should yield the original file in the work tree. If this is not the case for the current setting of core.autocrlf, git will reject the file.\n  The variable can be set to \"warn\", in which case git will only warn about an irreversible conversion but continue the operation.\nCRLF conversion bears a slight chance of corrupting data.\n  When it is enabled, git will convert CRLF to LF during commit and LF to CRLF during checkout.\nA file that contains a mixture of LF and CRLF before the commit cannot be recreated by git.\n  For text files this is the right thing to do: it corrects line endings such that we have only LF line endings in the repository.\nBut for binary files that are accidentally classified as text the conversion can corrupt data.\nIf you recognize such corruption early you can easily fix it by setting the conversion type explicitly in .gitattributes.\n  Right after committing you still have the original file in your work tree and this file is not yet corrupted. You can explicitly tell git that this file is binary and git will handle the file appropriately.\nUnfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of corrupting binary files cannot be distinguished.\n  In both cases CRLFs are removed in an irreversible way. For text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs corrupts data.\n\nI prefer identifying the exact files or types of file I want to force the eol with .gitattributes files only (with core.eol settings, which you have), and leave autocrlf to false.\nIn case of text fiels with mixed eol, this blog post suggests, for instance, to:\n\nIf you have Notepad++ installed in your computer, simply follow these steps.\n\nOpen the file that is having the Fatal issue.\nClick Edit -> EOL Conversion then select Windows Format or to any that you\u2019re having an issue committing. \n\n\n\nWarning, if you have Git 2.17 or 2.18: a regression introduced in 8462ff4 (\"convert_to_git(): safe_crlf/checksafe becomes int conv_flags\", 2018-01-13, Git 2.17.0) back in Git 2.17 cycle caused autocrlf rewrites to produce a warning message despite setting safecrlf=false.\nSee commit 6cb0912 (04 Jun 2018) by Anthony Sottile (asottile).\n(Merged by Junio C Hamano -- gitster -- in commit 8063ff9, 28 Jun 2018)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to use Gitlab CI/CD to deploy a meteor project?\n\nAs claimed at their website Gitlab can be used to auto deploy projects after some code is pushed into the repository but I am not able to figure out how. There are plenty of ruby tutorials out there but none for meteor or node.\nBasically I just need to rebuild an Docker container on my server, after code is pushed into my master branch. Does anyone know how to achieve it? I am totally new to the .gitlab-ci.yml stuff and appreciate help pretty much."}, {"role": "assistant", "content": "Brief: I am running a Meteor 1.3.2 app, hosted on Digital Ocean (Ubuntu 14.04) since 4 months. I am using Gitlab v. 8.3.4 running on the same Digital Ocean droplet as the Meteor app. It is a 2 GB / 2 CPUs droplet ($ 20 a month). Using the built in Gitlab CI for CI/CD. This setup has been running successfully till now. (We are currently not using Docker, however this should not matter.)\nOur CI/CD strategy:\n\nWe check out Master branch on our local laptop. The branch contains the whole Meteor project as shown below:\n\n\nWe use git CLI tool on Windows to connect to our Gitlab server. (for pull, push, etc. similar regular git activities)\n\nOpen the checked out project in Atom editor. We have also integrated Atom with Gitlab. This helps in quick git status/pull/push etc. within Atom editor itself. Do regular Meteor work viz. fix bugs etc.\nPost testing on local laptop, we then do git push & commit on master. This triggers auto build using Gitlab CI and the results (including build logs) can be seen in Gitlab itself as shown below:\n\n\nBelow image shows all previous build logs:\n\nPlease follow below steps:\n\nInstall meteor on the DO droplet.\nInstall Gitlab on DO (using 1-click deploy if possible) or manual installation. Ensure you are installing Gitlab v. 8.3.4 or newer version. I had done a DO one-click deploy on my droplet.\nStart the gitlab server & log into gitlab from browser. Open your project and go to project settings -> Runners from left menu\n\n\n\nSSH to your DO server & configure a new upstart service on the droplet as root:\nvi /etc/init/meteor-service.conf\n\n\nSample file:\n#upstart service file at /etc/init/meteor-service.conf\ndescription \"Meteor.js (NodeJS) application for eaxmple.com:3000\"\nauthor \"[email\u00a0protected]\"\n\n# When to start the service\nstart on runlevel [2345]\n\n# When to stop the service\nstop on shutdown\n\n# Automatically restart process if crashed\nrespawn\nrespawn limit 10 5\n\nscript\n    export PORT=3000\n    # this allows Meteor to figure out correct IP address of visitors\n    export HTTP_FORWARDED_COUNT=1\n    export MONGO_URL=mongodb://xxxxxx:[email\u00a0protected]:59672/meteor-db\n    export ROOT_URL=http://<droplet_ip>:3000\n    exec /home/gitlab-runner/.meteor/packages/meteor-tool/1.1.10/mt-os.linux.x86_64/dev_bundle/bin/node /home/gitlab-runner/erecaho-build/server-alpha-running/bundle/main.js >> /home/gitlab-runner/erecaho-build/server-alpha-running/meteor.log\nend script\n\n\nInstall gitlab-ci-multi-runner from here: https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/blob/master/docs/install/linux-repository.md as per the instructions \nCheatsheet:\ncurl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.deb.sh | sudo bash\nsudo apt-get install gitlab-ci-multi-runner\nsudo gitlab-ci-multi-runner register\n\nEnter details from step 2\nNow the new runner should be green or activate the runner if required\nCreate .gitlab-ci.yml within the meteor project directory\nSample file:\nbefore_script:\n  - echo \"======================================\"\n  - echo \"==== START auto full script v0.1 =====\"\n  - echo \"======================================\"\n\ntypes:\n  - cleanup\n  - build\n  - test\n  - deploy\n\njob_cleanup:\n  type: cleanup\n  script:\n  - cd /home/gitlab-runner/erecaho-build\n  - echo \"cleaning up existing bundle folder\"\n  - echo \"cleaning up current server-running folder\"\n  - rm -fr ./server-alpha-running\n  - mkdir ./server-alpha-running\n  only:\n  - master\n  tags:\n  - master\n\njob_build:\n  type: build\n  script:\n  - pwd\n  - meteor build /home/gitlab-runner/erecaho-build/server-alpha-running --directory --server=http://example.org:3000 --verbose\n  only:\n  - master\n  tags:\n  - master\n\njob_test:\n  type: test\n  script:\n  - echo \"testing ----\"\n  - cd /home/gitlab-runner/erecaho-build/server-alpha-running/bundle\n  - ls -la main.js\n  only:\n  - master\n  tags:\n  - master\n\njob_deploy:\n  type: deploy\n  script:\n  - echo \"deploying ----\"\n  - cd /home/gitlab-runner/erecaho-build/server-alpha-running/bundle/programs/server/ && /home/gitlab-runner/.meteor/packages/meteor-tool/1.1.10/mt-os.linux.x86_64/dev_bundle/bin/npm install\n  - cd ../..\n  - sudo restart meteor-service\n  - sudo status meteor-service\n  only:\n  - master\n  tags:\n  - master\n\nCheck in above file in gitlab. This should trigger Gitlab CI and after the build process is complete, the new app will be available @ example.net:3000\n\nNote: The app will not be available after checking in .gitlab-ci.yml for the first time, since restart meteor-service will result in service not found. Manually run sudo start meteor-service once on DO SSH console. Post this any new check-in to gitlab master will trigger auto CI/CD and the new version of the app will be available on example.com:3000 after the build is completed successfully.\nP.S.: gitlab ci yaml docs can be found at http://doc.gitlab.com/ee/ci/yaml/README.html for your customization and to understand the sample yaml file above. \nFor docker specific runner, please refer https://gitlab.com/gitlab-org/gitlab-ci-multi-runner"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can clang-format tell me if formatting changes are necessary?\nIs there an way that you can run clang-format in a mode where it reports if the file meets the specified format? A kind of dry-run mode where it reports if a change is needed, but doesn't make the change. Ideally I'd like clang-format to just return a non-zero exit code if the file needs changes. Or, even more ideally, a non-zero exit code and a list of the files that need changes on standard output.\nI'm trying to keep the question generic, so that more people can answer, but what I am trying to do is write a git pre-commit hook that will reject any commits that don't match the expected .clang-format . It's easy to run clang-format on the list of files in the index. But it's hard to know if clang-format actually changed anything. \nI have one potential solution based on -output-replacements-xml (that I will post as an answer), but it's a hack and I feel like this should be more straightforward. Comments/suggestions, edits, different answers/approaches are all welcome."}, {"role": "assistant", "content": "Starting with clang-format-10, you can use the --dry-run and -Werror command line options. They will cause ClangFormat to output any formatting violations to stdout and return a non-zero exit status if any input file was not correctly formatted.\n$ clang-format --dry-run --Werror foo.cpp\nfoo.cpp:129:23: error: code should be clang-formatted [-Wclang-format-violations]\n        if (rc <= 0) {\n$ echo $?\n1\n\nOriginally from my website here: https://rigtorp.se/notes/clang-format/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I view the Git history in Visual Studio Code?\nI can execute various Git commands from Visual Studio Code, however I couldn't find a way to visualize the history."}, {"role": "assistant", "content": "You won't need a plugin to see commit history with Visual Studio Code 1.44 or more.\n\nTimeline view\nThis is a unified view for visualizing time-series events (for example, Git commits, file saves, test runs, etc.) for a file. The Timeline view automatically updates showing the timeline for the currently active editor, by default. You can control this default behavior by toggling the eye icon in the view toolbar. Also, similar to other views, the Timeline view supports find or filter as you type.\nThe Timeline view is collapsed by default at the bottom of the File Explorer. Selecting the Timeline sash will expand the Timeline view.\n\n[...]\nHere is the Timeline view in action:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to undo git stash clear\nI executed git stash save \"ABC\".\nThen by mistake I did git stash clear .\nHow can I retrieve the data that was in stash ABC?"}, {"role": "assistant", "content": "As it may be found in the documentation of git stash, you may be lucky if this works:\n\nRecovering stashes that were cleared/dropped erroneously\nIf you mistakenly drop or clear stashes, they cannot be recovered through the  normal safety mechanisms. However, you can try the following incantation to get a list of stashes that are still in your repository, but not reachable any more:\ngit fsck --unreachable |\n  grep commit | cut -d\\  -f3 |\n  xargs git log --merges --no-walk --grep=WIP\n\nIf you find the stash you cleared by mistake, then you can do:\ngit stash apply <stash>\n\nEDIT:\u00a0Use this command instead git fsck --unreachable | grep commit | cut -d ' ' -f3 | xargs git log --merges --no-walk --grep=WIP"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Suddenly getting \"No supported authentication methods available\" when pushing to github\nI started a github project a few weeks ago. I was able to push changes without any problems (I'm using TortoiseGIT).\nSuddenly today when I tried to push my changes, I got \"PuTTY Fatal Error\" \"Disconnected: No supported authentication methods availble\" error window.\nAnything you can recommend to remedy the problem?"}, {"role": "assistant", "content": "For me there was a problem to perform actions against the remote repository only when using TortoiseGit, through CMD / GitBash there have been no issue at all.\nSo what I did was Very simple:\nI opened TortoiseGit-->Settings --> Network and in SSH Client I changed to \"C:\\Program Files\\Git\\usr\\bin\\ssh.exe\" instead of \"TortoiseGitPlink.exe\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to revert Master branch to upstream\nI have forked a git repository and setup upstream. I've made some changes in Master branch and committed and pushed to github.\nNow what should I do to abandon all my changes in Master branch and make it identical to the upstream's master branch?"}, {"role": "assistant", "content": "(I'm assuming that the changes that you now want to ignore are at your origin remote, you're on your master branch, and you want to revert to the contents of the upstream remote)\nFirstly, reset your working copy to the upstream master:\ngit remote update\n# the double hyphen ensures that upstream/master is\n# considered as a revision and not confused as a path\ngit reset --hard upstream/master --\n\nThen push this new branch-head to your origin repository, ignoring the fact that it won't be a fast-forward:\ngit push origin +master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  $GIT_DIR/config"}, {"role": "assistant", "content": "Repository specific configuration file."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Github Pull Requests template not showing\nI wanted to create custom Pull Requests template for my Github repo (internal version in my company and not on Github.com), so I followed instructions on this link. I followed below steps:\n\nCreated the new template file in the location: [my-repo]/.github/PULL_REQUEST_TEMPLATE/pull_request_template.md.\nMerged this new file into master.\nCreated a new branch from master, commited some changes into new branch.\nCreated a new Pull Request to master, but the template did not show up.\n\nCreating the new PR did not show up the template I had created. Similar steps for creating new issue templates work fine, but PR templates arent working. I would like to add different templates inside PULL_REQUEST_TEMPLATE folder in order to create multiple pull request templates like feature template, bug-fix template etc. My PR template markdown has the following in it:\n---\nname: Design Review\nabout: Design Review issue template\n\n---\n\n# PR Change Description\nThis PR is to add a new vendor type."}, {"role": "assistant", "content": "You must create templates on the repository's default branch. Templates created in other branches are not available for collaborators to use.\nNOTE: If your PullRequest Template is not applied on every new PR you create it could mostly be due to the following reasons\n\nEither PR template doesn't exist at all in any of the branches.\nOr it is present in non-default branch\n\nYou can store your pull request template in the repository's visible root directory, the docs folder, or the hidden .github directory. Pull request template filenames are not case sensitive, and can have an extension such as .md or .txt."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  git diff --no-index a b"}, {"role": "assistant", "content": "compares two non-git things (1) and (2)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  color.blame.repeatedLines"}, {"role": "assistant", "content": "Use the specified color to colorize line annotations for git blame --color-lines , if they come from the same commit as the\npreceding line. Defaults to cyan."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --header"}, {"role": "assistant", "content": "Print the contents of the commit in raw-format; each record is\nseparated with a NUL character."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  --import-marks=<file>"}, {"role": "assistant", "content": "Before processing any input, load the marks specified in\n<file>.  The input file must exist, must be readable, and\nmust use the same format as produced by --export-marks.\nMultiple options may be supplied to import more than one\nset of marks.  If a mark is defined to different values,\nthe last file wins."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Move (or \"Undo\") last git commit to unstaged area [duplicate]\nThis question already has answers here:\n                                \n                            \n\n\n\n\nHow do I undo the most recent local commits in Git?\n\n                                (109 answers)\n                            \n\nClosed 9 years ago.\n\n\n\nWhat's the best way to move your last git commit back into the \"Changes not staged\" + \"Untracked files\" areas (with the commit in question being not-pushed / only in your local repo, effectively removing it from HEAD)?\nIn other words, how do you roll back a commit, but automatically apply that diff to your unstaged area?"}, {"role": "assistant", "content": "You can use git reset to set the current branch to the preceding commit, i.e. HEAD^\ngit reset HEAD^\n\nAdding --soft will keep those files in the index: (ready to be committed)\ngit reset --soft HEAD^\n\n\n--soft\n(\u2026) This leaves all your changed files \"Changes to be committed\", as git status would put it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories"}, {"role": "assistant", "content": "DESCRIPTION A really simple TCP Git daemon that normally listens on port \"DEFAULT_GIT_PORT\"\naka 9418.  It waits for a connection asking for a service, and will serve\nthat service if it is enabled. It verifies that the directory has the magic file \"git-daemon-export-ok\", and\nit will refuse to export any Git directory that hasn\u2019t explicitly been marked\nfor export this way (unless the --export-all parameter is specified). If you\npass some directory paths as git daemon arguments, the offers are limited to\nrepositories within those directories. By default, only upload-pack service is enabled, which serves git fetch-pack and git ls-remote clients, which are invoked\nfrom git fetch , git pull , and git clone . This is ideally suited for read-only updates, i.e., pulling from\nGit repositories. An upload-archive also exists to serve git archive ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What do you do with your branch after a pull request on GitHub?\n\nMy team is experimenting with using GitHub pull requests for code reviews. My only question is what do you do with the branch after you're done? I would think you'd want to delete the branch, but since GitHub hides branches that have been merged into your current branch, it seemed like maybe I should keep it.\nJust curious on what your thoughts on best practices for this are."}, {"role": "assistant", "content": "The rule of thumb that we use (which is here some where on Stack Overflow) is \"branches are for work, tags are for history\".\nWhenever a branch is merged (most likely into master) we tag the merge point using the name of the branch with the prefix \"branch\" (e.g. branch-topic). Then delete the branch. If we need to resurrect work at the branch point we have the tag to be able to do that.\nThere are of course exceptions. We have long running branches that we use for various kinds of continuing work. But in general, topic branches are deleted after merging.\nOn that note, those merges are always done with\nmerge --no-ff <branch>\n\nThis ensures that there is a merge point and a record of the merge occurring."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Move .git repo to parent directory [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nMy Git repository is in the wrong root directory. Can I move it? (../ instead of ./)\n\n                                (10 answers)\n                            \n\nClosed 7 years ago.\n\n\n\nI have a subdirectory named \"www\" that is a repo:\nsite\n|-- www/\n|    |-- .git/\n|    |-- index.html\n|-- design/\n|    |-- images.jpg\n\nI'd like to change the repo to the parent directory so that the repo structure mirrors the original file structure as follows:\nsite\n|-- .git/\n|-- www/\n|    |-- index.html\n|-- design/\n|    |-- images.jpg\n\nCan this be done? Are there implications with then pushing the changes up to Gitlab?"}, {"role": "assistant", "content": "Create a www directory in your repo.\ngit mv the HTML files to that directory. Optionally commit this step.\nmv the design directory into your repo, and git add .\nCommit.\nRename/move your whole repo."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: How to diff two different files in different branches?\nI have two different files in different branches.\nHow can I diff them in one command?\nSomething like\n# git diff branch1/foo.txt branch2/foo-another.txt\n\nI could check out the other file, diff it and restore, but that's quite dirty solution."}, {"role": "assistant", "content": "git diff branch1:full/path/to/foo.txt branch2:full/path/to/foo-another.txt\n\nYou can also use relative paths:\ngit diff branch1:./relative/path/to/foo.txt branch2:./relative/path/to/foo-another.txt"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  save [-p|--patch] [-S|--staged] [-k|--[no-]keep-index] [-u|--include-untracked] [-a|--all] [-q|--quiet] [<message>]"}, {"role": "assistant", "content": "This option is deprecated in favour of git stash push .  It\ndiffers from \"stash push\" in that it cannot take pathspec.\nInstead, all non-option arguments are concatenated to form the stash\nmessage."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_INDEX_FILE"}, {"role": "assistant", "content": "This environment variable specifies an alternate\nindex file. If not specified, the default of $GIT_DIR/index is used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "go get results in 'terminal prompts disabled' error for github private repo\nI created the private repo examplesite/myprivaterepo using the Github UI from my browser.\nThen I went to my go directory (on the desktop) and cloned it:\n$ cd $GOPATH\n$ go get github.com/examplesite/myprivaterepo\n\nSo far so good. Created the file scheduler.go, added to repo, and pushed.\n$ vim scheduler.go\n$ git add scheduler.go\n$ git commit\n$ git push\n\nEverythng's OK. But when I went to a clean laptop  and tried to clone the repo, I got an error:\n# Now on laptop, which doesn't yet know about the repo\n$ cd $GOPATH\n$ go get github.com/examplesite/myprivaterepo\n# At this point it should ask for my user ID and password ,right? But it doesn't.\n# Instead, this error occurs:\ncd .; git clone https://github.com/examplesite/myprivaterepo /Users/tom/go/src/github.com/examplesite/myprivaterepo\nCloning into '/Users/tom/go/src/github.com/examplesite/myprivaterepo'...\nfatal: could not read Username for 'https://github.com': terminal prompts disabled\npackage github.com/examplesite/myprivaterepo: exit status 128\n\nWhy is my laptop hating on my own repo and how can I get it to accept its fate? Thanks."}, {"role": "assistant", "content": "I found this extremely helpful, and it solved my problem. This command will allow your 2FA to do its thing (and save you the trouble of entering your username and password):\nFor Github:\ngit config --global --add url.\"[email\u00a0protected]:\".insteadOf \"https://github.com/\"\n\nFor Gitlab:\ngit config --global --add url.\"[email\u00a0protected]:\".insteadOf \"https://gitlab.com/\"\n\nSource: http://albertech.blogspot.com/2016/11/fix-git-error-could-not-read-username.html\nIf you're not using 2FA, you can still use SSH and this will work.\nResulting .gitconfig will be like:\n[url \"[email\u00a0protected]:\"]\n    insteadOf = https://github.com/"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  -P  --perl-regexp"}, {"role": "assistant", "content": "Consider the limiting patterns to be Perl-compatible regular\nexpressions. Support for these types of regular expressions is an optional\ncompile-time dependency. If Git wasn\u2019t compiled with support for them\nproviding this option will cause it to die."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can't update: no tracked branch\n\nI am on Android Studio (Preview) 0.6.0 on Windows and was trying to share my project on GitHub. I used Git Shell to initialize, add, commit and push the project to GitHub. But when I tried to update my project from within Android Studio , I got this error:\nCan't update: no tracked branch\nNo tracked branch configured for branch master.\nTo make your branch track a remote branch call, for example,\ngit branch --set-upstream master origin/master\n\nIt does provide this suggestion but I am not sure what to do at this point. Is there a way to fix this from within Android Studio?"}, {"role": "assistant", "content": "If I'm not mislead, you just need to set your local branches to track their pairs in the origin server.\nUsing your command line, you can try \ngit checkout mybranch\ngit branch --set-upstream-to=origin/mybranch\n\nThat will configure something as an equivalent of your local branch in the server. I'll bet that Android Studio is complaining about the lack of that.\nIf someone knows how to do this using the GUI of that IDE, that would be interesting to read. :)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.alternateRefsCommand"}, {"role": "assistant", "content": "When advertising tips of available history from an alternate, use the shell to\nexecute the specified command instead of git-for-each-ref . The\nfirst argument is the absolute path of the alternate. Output must contain one\nhex object id per line (i.e., the same as produced by git for-each-ref\n--format='%(objectname)' ). Note that you cannot generally put git for-each-ref directly into the config\nvalue, as it does not take a repository path as an argument (but you can wrap\nthe command above in a shell script)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fsck - Verifies the connectivity and validity of the objects in the database  zeroPaddedFilemode"}, {"role": "assistant", "content": "(WARN) Found a zero padded filemode in a tree."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  -r  --remotes"}, {"role": "assistant", "content": "List or delete (if used with -d) the remote-tracking branches.\nCombine with --list to match the optional pattern(s)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git cannot apply binary patch *** without full index line\nWhen I try to apply a patch from a file, I see\n\nerror: cannot apply binary patch to 'my/resource.png' without full index line\nerror: my/resource.png: patch does not apply\n\nI added my/resource.png in the commit from which I made the patch. How can I enabled full-index support?"}, {"role": "assistant", "content": "Checkout the branch from which you want to create the patch. Run this command:\ngit diff-index 79fd4d7 --binary > ~/Desktop/my-patch\n\nWhere 79fd4d7 is a placeholder for the commit that came right before the range of commits you want to diff. (e.g. I want a patch that contains the first three commits below: \naaa02b0 third commit mine\naabbbcc second commit mine\nbb82aed first commit mine\n79fd4d7 old commit\n\nThen checkout your new branch and run git apply ~/Desktop/my-patch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  --reply-to=<address>"}, {"role": "assistant", "content": "Specify the address where replies from recipients should go to.\nUse this if replies to messages should go to another address than what\nis specified with the --from parameter."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Push different branch to Heroku\nJust finised work on my other branch. Now I need to test that this works on Heroku before I merge with the master branch.\nIs it possible to push the other branch to Heroku and it replace the contents of my last push which was from the master branch?"}, {"role": "assistant", "content": "Yes, pushing to a branch named differently that your current one is possible using the syntax:\ngit push heroku other:master\n\nThis tells Git to push the contents of your other branch to the master branch on the heroku remote. Keep in mind that you may have to force push if there are commits on heroku/master that don't appear in your other branch.\nFor more information have a look at the documentation of the <refspec> option to git push."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Setting up Git on EC2 to pull from GitHub repo\n\nI'm kind of new to both EC2 and Git, and I have just set up my first instance of EC2, using a clean Amazon Linux AMI. I also installed MySQL, Apache and PHP and opened some ports to make it work as a normal web server, responding to an elastic IP as well.\nNow, my code is on a private repo on GitHub, and I would like to perform simple deployments by doing git pull or something like that. Git is also installed on the server already. I know I could set up my git repo on the server using my personal ssh key, but it seems odd. I guess another solution would be to create a new GitHub user and use it on the server, but it doesn't seem right either.\nHow do I achieve this in an elegant, safe way?"}, {"role": "assistant", "content": "To avoid having to keep an SSH private key on your EC2 instance, people often use a workflow that involves pushing to that remote server in order to deploy.  Essentially, you set up a bare git repository there with a pre-receive hook that deploys to another directory.  There is a simple example of doing this in this tutorial.  Then you only need to have your SSH public key in ~/.ssh/authorized_keys on the server.  However, with this workflow, you couldn't deploy directly from your GitHub repository - you would need to pull it locally and then push to the EC2 machine.\nAn alternative is to use GitHub's deploy keys mechanism.  This would involve creating a new SSH key-pair on your EC2 instance, and adding the public key as a deploy key into your private repository on GitHub.  Then you can pull directly from your private GitHub repository to your EC2 instance."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why git keeps showing my changes when I switch branches (modified,added, deleted files) no matter if I run git add or not?\nI'm really new to git and I've been trying to understand why git keeps showing whatever I changed in one branch in another branch when I run git checkout to switch between branches First I tried not using git add and didn't work. However, I tried then using git add, but didn't fix the problem. I'm not using git commit yet.\nThis is basically what I'm doing:\n$ git clone <a_repository>  \n$ git branch  \n* master  \n$ git branch testing  \n$ git checkout testing  \n...edit a file, add a new one, delete...  \n$ git status  \n    # On branch testing  \n    # Changed but not updated:  \n    #   (use \"git add/rm <file>...\" to update what will be committed)  \n    #   (use \"git checkout -- <file>...\" to discard changes in working directory)  \n    #  \n    #       deleted:    file1.txt  \n    #  \n    # Untracked files:  \n    #   (use \"git add <file>...\" to include in what will be committed)  \n    #  \n    #       file2.txt  \nno changes added to commit (use \"git add\" and/or \"git commit -a\")  \n$ git branch  \n  master  \n* testing  \n$ git checkout master  \nD       file1.txt  \nSwitched to branch 'master'  \n$ git status  \n    # On branch master  \n    # Changed but not updated:  \n    #   (use \"git add/rm <file>...\" to update what will be committed)  \n    #   (use \"git checkout -- <file>...\" to discard changes in working directory)  \n    #  \n    #       deleted:    file1.txt  \n    #  \n    # Untracked files:  \n    #   (use \"git add <file>...\" to include in what will be committed)  \n    #  \n    #       file2.txt  \nno changes added to commit (use \"git add\" and/or \"git commit -a\")  \n\nI thought that, while using branches, whatever you do in one branch, it's invisible to all the other branches. Is not that the reason of creating branches?\nI tried using \"git add\" but the changes are visible in both branches. \nDo I need to run \"git commit\" before switching between branches to avoid this?"}, {"role": "assistant", "content": "Switching branches carries uncommitted changes with you. Either commit first, run git checkout . to undo them, or run git stash before switching. (You can get your changes back with git stash apply)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "ssh : Permission denied (publickey,gssapi-with-mic)\n\ni'm use centos 5.9.\nafter installing gitlab by this link ssh not working.\nbefore install gitlab ssh correctly working.\ni'm using this server localy and other services such as elastix and apache,mysql installed on server.\nappeare this error :\nOpenSSH_6.9p1 Ubuntu-2ubuntu0.1, OpenSSL 1.0.2d 9 Jul 2015\ndebug1: Reading configuration data /etc/ssh/ssh_config\ndebug1: /etc/ssh/ssh_config line 19: Applying options for *\ndebug2: ssh_connect: needpriv 0\ndebug1: Connecting to 192.168.88.23 [192.168.88.23] port 22.\ndebug1: Connection established.\ndebug1: permanently_set_uid: 0/0\ndebug1: key_load_public: No such file or directory\ndebug1: identity file /root/.ssh/id_rsa type -1\ndebug1: key_load_public: No such file or directory\ndebug1: identity file /root/.ssh/id_rsa-cert type -1\ndebug1: key_load_public: No such file or directory\ndebug1: identity file /root/.ssh/id_dsa type -1\ndebug1: key_load_public: No such file or directory\ndebug1: identity file /root/.ssh/id_dsa-cert type -1\ndebug1: key_load_public: No such file or directory\ndebug1: identity file /root/.ssh/id_ecdsa type -1\ndebug1: key_load_public: No such file or directory\ndebug1: identity file /root/.ssh/id_ecdsa-cert type -1\ndebug1: key_load_public: No such file or directory\ndebug1: identity file /root/.ssh/id_ed25519 type -1\ndebug1: key_load_public: No such file or directory\ndebug1: identity file /root/.ssh/id_ed25519-cert type -1\ndebug1: Enabling compatibility mode for protocol 2.0\n                                        debug1: Local version string SSH-2.0-OpenSSH_6.9p1 Ubuntu-2ubuntu0.1\ndebug1: Remote protocol version 2.0, remote software version OpenSSH_4.3\ndebug1: match: OpenSSH_4.3 pat OpenSSH_4* compat 0x00000000\ndebug2: fd 3 setting O_NONBLOCK\ndebug1: Authenticating to 192.168.88.23:22 as 'root'\ndebug1: SSH2_MSG_KEXINIT sent\ndebug1: SSH2_MSG_KEXINIT received\ndebug2: kex_parse_kexinit: [email\u00a0protected],ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1\ndebug2: kex_parse_kexinit: [email\u00a0protected],[email\u00a0protected],ssh-rsa,[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519,ssh-dss\ndebug2: kex_parse_kexinit: [email\u00a0protected],aes128-ctr,aes192-ctr,aes256-ctr,[email\u00a0protected],[email\u00a0protected],arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,[email\u00a0protected]\ndebug2: kex_parse_kexinit: [email\u00a0protected],aes128-ctr,aes192-ctr,aes256-ctr,[email\u00a0protected],[email\u00a0protected],arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,[email\u00a0protected]\ndebug2: kex_parse_kexinit: [email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],hmac-sha2-256,hmac-sha2-512,hmac-sha1,[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],hmac-md5,hmac-ripemd160,[email\u00a0protected],hmac-sha1-96,hmac-md5-96\ndebug2: kex_parse_kexinit: [email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],hmac-sha2-256,hmac-sha2-512,hmac-sha1,[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],[email\u00a0protected],hmac-md5,hmac-ripemd160,[email\u00a0protected],hmac-sha1-96,hmac-md5-96\ndebug2: kex_parse_kexinit: none,[email\u00a0protected],zlib\ndebug2: kex_parse_kexinit: none,[email\u00a0protected],zlib\ndebug2: kex_parse_kexinit: \ndebug2: kex_parse_kexinit: \ndebug2: kex_parse_kexinit: first_kex_follows 0 \ndebug2: kex_parse_kexinit: reserved 0 \ndebug2: kex_parse_kexinit: diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1\ndebug2: kex_parse_kexinit: ssh-rsa,ssh-dss\ndebug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,[email\u00a0protected]\ndebug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,[email\u00a0protected]\ndebug2: kex_parse_kexinit: hmac-md5,hmac-sha1,hmac-ripemd160,[email\u00a0protected],hmac-sha1-96,hmac-md5-96\ndebug2: kex_parse_kexinit: hmac-md5,hmac-sha1,hmac-ripemd160,[email\u00a0protected],hmac-sha1-96,hmac-md5-96\ndebug2: kex_parse_kexinit: none,[email\u00a0protected]\ndebug2: kex_parse_kexinit: none,[email\u00a0protected]\ndebug2: kex_parse_kexinit: \ndebug2: kex_parse_kexinit: \ndebug2: kex_parse_kexinit: first_kex_follows 0 \ndebug2: kex_parse_kexinit: reserved 0 \ndebug1: kex: server->client aes128-ctr hmac-sha1 none\ndebug1: kex: client->server aes128-ctr hmac-sha1 none\ndebug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024<7680<8192) sent\ndebug1: got SSH2_MSG_KEX_DH_GEX_GROUP\ndebug2: bits set: 3111/6144\ndebug1: SSH2_MSG_KEX_DH_GEX_INIT sent\ndebug1: got SSH2_MSG_KEX_DH_GEX_REPLY\ndebug1: Server host key: ssh-rsa SHA256:7J6JOe94H9PedNKlx6yG/wMy6ZYC8iB74WdOVGDgY7A\ndebug1: Host '192.168.88.23' is known and matches the RSA host key.\n    debug1: Found key in /root/.ssh/known_hosts:1\ndebug2: bits set: 3102/6144\ndebug2: set_newkeys: mode 1\ndebug1: SSH2_MSG_NEWKEYS sent\ndebug1: expecting SSH2_MSG_NEWKEYS\ndebug2: set_newkeys: mode 0\ndebug1: SSH2_MSG_NEWKEYS received\ndebug1: SSH2_MSG_SERVICE_REQUEST sent\ndebug2: service_accept: ssh-userauth\ndebug1: SSH2_MSG_SERVICE_ACCEPT received\ndebug2: key: /root/.ssh/id_rsa ((nil)),\ndebug2: key: /root/.ssh/id_dsa ((nil)),\ndebug2: key: /root/.ssh/id_ecdsa ((nil)),\ndebug2: key: /root/.ssh/id_ed25519 ((nil)),\ndebug1: Authentications that can continue: publickey,gssapi-with-mic\ndebug1: Next authentication method: gssapi-with-mic\ndebug1: Unspecified GSS failure.  Minor code may provide more information\nNo Kerberos credentials available\n\ndebug1: Unspecified GSS failure.  Minor code may provide more information\nNo Kerberos credentials available\n\ndebug1: Unspecified GSS failure.  Minor code may provide more information\n\n\ndebug1: Unspecified GSS failure.  Minor code may provide more information\nNo Kerberos credentials available\n\ndebug2: we did not send a packet, disable method\ndebug1: Next authentication method: publickey\ndebug1: Trying private key: /root/.ssh/id_rsa\ndebug1: Trying private key: /root/.ssh/id_dsa\ndebug1: Trying private key: /root/.ssh/id_ecdsa\ndebug1: Trying private key: /root/.ssh/id_ed25519\ndebug2: we did not send a packet, disable method\ndebug1: No more authentication methods to try.\nPermission denied (publickey,gssapi-with-mic)."}, {"role": "assistant", "content": "Setting 700 to .ssh and 600 to authorized_keys solved the issue.\nchmod 700 /root/.ssh\nchmod 600 /root/.ssh/authorized_keys"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git vs Mercurial vs SVN [duplicate]\nThis question already has answers here:\n                                \n                            \n\n\n\nClosed 13 years ago.\n\n\n\n\nPossible Duplicates:\nFor home projects, can Mercurial or Git (or other DVCS) provide more advantages over Subversion?\nWhat are the relative strengths and weaknesses of Git, Mercurial, and Bazaar? \n\nWhat are some of the differences between these source control system? Which one is the best for a small 2 people project?"}, {"role": "assistant", "content": "SVN is different from Git and Mercurial, in that it is a single repository that all users have to pull and commit to.\nGit and Mercurial have a distributed model. This means that there is a repository on every computer and there is usually an \"Official\" repository that people will choose to commit their changes to and pull from. \nGit and Mercurial are extremely similar. I prefer Mercurial because I found it much easier to use. For a 2 person team I would recommend Mercurial, but that is just my opinion. If you are not familiar with version control then you are still gonna have to spend your time learning to use any of the options, but Mercurial seemed the easiest for me.\nTo start a Mercurial repository all you have to do is open a shell and cd to the directory you want to have version control in, and type hg init. That creates the repository. To add everything in the folder to the repository, type hg add .. Here are some other various commands:\n\nTo commit the local changes: hg commit -m \"Descriptions of changes\"\nTo pull to the latest version from the server: hg pull\nTo push the local changes: hg push"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  lsrefs.unborn"}, {"role": "assistant", "content": "May be \"advertise\" (the default), \"allow\", or \"ignore\". If \"advertise\",\nthe server will respond to the client sending \"unborn\" (as described in gitprotocol-v2 ) and will advertise support for this feature during the\nprotocol v2 capability advertisement. \"allow\" is the same as\n\"advertise\" except that the server will not advertise support for this\nfeature; this is useful for load-balanced servers that cannot be\nupdated atomically (for example), since the administrator could\nconfigure \"allow\", then after a delay, configure \"advertise\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --progress"}, {"role": "assistant", "content": "Progress status is reported on the standard error stream\nby default when it is attached to a terminal, unless -q\nis specified. This flag forces progress status even if the\nstandard error stream is not directed to a terminal."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --show-object-format[=(storage|input|output)]"}, {"role": "assistant", "content": "Show the object format (hash algorithm) used for the repository\nfor storage inside the .git directory, input, or output. For\ninput, multiple algorithms may be printed, space-separated.\nIf not specified, the default is \"storage\"."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git rebase --continue no changes\nI have two branches with two features: banch_1 and branch_2.\nbranch_2 uses feature from branch_1.\nI've made changes in the branch_1 and want to rebase branch_2 on branch_1 to get changes from branch_1 into branch_2.\nSo, I'm checking out on branch_2:\ngit checkout branch_2\n\nAnd trying to rebase on branch_1:\ngit rebase branch_1\n\nAfter that I get 'Merge conflict' for two files. So I run\ngit mergetool -t meld\n\nand resolving that conflicts, choosing changes from branch_1. \nI'm saving files and going to terminal, typing \ngit status and see that there is no changes in git index. Next I run git rebase --continue and getting \nNo changes - did you forget to use 'git add'? \n\nerror. But there is nothing to add!\nI type git log and see commit from branch_1 but there is no commit from branch_2.\nWhat I'm doing wrong?"}, {"role": "assistant", "content": "If I understand correctly, when you're getting the merge conflict, you're accepting all the changes from branch_1, meaning that that particular commit from branch_2 is irrelevant - any changes in that commit are identical to the incoming changes from branch_1.\nWhen git is saying\n\nNo changes - did you forget to use 'git add'?\n\nit's telling you that the commit you're trying to apply doesn't make any changes to the repo, and therefore there's no reason for it to exist.\nThe simple solution to that is git rebase --skip, which just says \"ignore this commit and move on\" as suggested in @C-Otto's comment. This will skip the commit you're currently dealing with, and move on to subsequent ones.\nYou might also find it easier to use interactive rebasing (git rebase -i), which first presents you with a list of the commits it will apply, and gives you various options for what to do with each individual commit. In this case, if you identify a commit that is no longer relevant, you can skip it up-front, so you'll never see the conflict in the first place."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-write-tree - Create a tree object from the current index"}, {"role": "assistant", "content": "DESCRIPTION Creates a tree object using the current index. The name of the new\ntree object is printed to standard output. The index must be in a fully merged state. Conceptually, git write-tree sync()s the current index contents\ninto a set of tree files.\nIn order to have that match what is actually in your directory right\nnow, you need to have done a git update-index phase before you did the git write-tree ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to make GitLab Runner in Docker see a custom CA Root certificate\n\nI have installed and configured: \n\nan on-premises GitLab Omnibus on ServerA running on HTTPS\nan on-premises GitLab-Runner installed as Docker Service in ServerB\n\nServerA certificate is generated by a custom CA Root\nThe Configuration\nI've have put the CA Root Certificate on ServerB:\n/srv/gitlab-runner/config/certs/ca.crt\n\nInstalled the Runner on ServerB as described in Run GitLab Runner in a container - Docker image installation and configuration:\ndocker run -d --name gitlab-runner --restart always \\\n           -v /srv/gitlab-runner/config:/etc/gitlab-runner \\\n           -v /var/run/docker.sock:/var/run/docker.sock \\\n           gitlab/gitlab-runner:latest\n\nRegistered the Runner as described in Registering Runners - One-line registration command:\ndocker run --rm -t -i \n            -v /srv/gitlab-runner/config:/etc/gitlab-runner \n           --name gitlab-docker-runner gitlab/gitlab-runner register \\\n           --non-interactive \\\n           --executor \"docker\" \\\n           --docker-image alpine:latest \\\n           --url \"https://MY_PRIVATE_REPO_URL_HERE/\" \\\n           --registration-token \"MY_PRIVATE_TOKEN_HERE\" \\\n           --description \"MyDockerServer-Runner\" \\\n           --tag-list \"TAG_1,TAG_2,TAG_3\" \\\n           --run-untagged \\\n           --locked=\"false\"\n\nThis command gave the following output:\n\nUpdating CA certificates...\nRuntime platform                                    arch=amd64 os=linux pid=5 revision=cf91d5e1 version=11.4.2\n  Running in system-mode.\nRegistering runner... succeeded                     runner=8UtcUXCY\n  Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded!\n\nI checked with\n$ docker exec -it gitlab-runner bash \n\nand once in the container with\n$ awk -v cmd='openssl x509 -noout -subject' '\n/BEGIN/{close(cmd)};{print | cmd}' < /etc/ssl/certs/ca-certificates.crt\n\nand the custom CA root is correctly there.\nThe Problem\nWhen running Gitlab-Runner from GitLab-CI, the pipeline fails miserably telling me that:\n\n$ git clone https://gitlab-ci-token:${CI_BUILD_TOKEN}@ServerA/foo/bar/My-Project.wiki.git\n    Cloning into 'My-Project.wiki'...\n    fatal: unable to access 'https://gitlab-ci-token:xxxxxxxxxxxxxxxxxxxx@ServerA/foo/bar/My-Project.wiki.git/': server certificate verification failed. CAfile: /etc/ssl/certs/ca-certificates.crt CRLfile: none\n   ERROR: Job failed: exit code 1\n\nIt does not recognize the Issuer (my custom CA Root), but according to The self-signed certificates or custom Certification Authorities, point n.1, it should out-of-the-box:\n\nDefault: GitLab Runner reads system certificate store and verifies the GitLab server against the CA\u2019s stored in system.\n\nI've then tried the solution from point n.3, editing \n/srv/gitlab-runner/config/config.toml:\n\nand adding: \n[[runners]]\ntls-ca-file = \"/srv/gitlab-runner/config/certs/ca.crt\"\n\nBut it still doesn't work.\nHow can I make Gitlab Runner read the CA Root certificate?"}, {"role": "assistant", "content": "You have two options:\nIgnore SSL verification\nPut this at the top of your .gitlab-ci.yml:\nvariables:\n  GIT_SSL_NO_VERIFY: \"1\"\n\nPoint GitLab-Runner to the proper certificate\nAs outlined in the official documentation, you can use the tls-*-file options to setup your certificate, e.g.:\n[[runners]]\n  ...\n  tls-ca-file = \"/etc/gitlab-runner/ssl/ca-bundle.crt\"\n  [runners.docker]\n  ...\n\nAs the documentation states, \"this file will be read every time when runner tries to access the GitLab server.\"\nOther options include tls-cert-file to define the certificate to be used if needed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to enable code coverage output in job list for PHP project on gitlab.com\n\nFor a project hosted at https://www.gitlab.com I would like to setup code coverage in the CI setup, so it can be displayed in the job list\n\nMy configuration looks like this: \n.gitlab-ci.yml\nimage: php:7.1.1\n\ncache:\n  paths:\n  - vendor/\n\nbefore_script:\n# Install git, the php image doesn't have installed\n- apt-get update -yqq\n- apt-get install git -yqq\n\n# Install composer\n- curl -sS https://getcomposer.org/installer | php\n\n# Install all project dependencies\n- php composer.phar install\n\n# Run our tests\ntest:\n    only:\n        - master\n        - develop\n    script:\n        - vendor/bin/phpunit --configuration phpunit.xml --coverage-text --colors=never\n\nThe job succeeds, but shows the error message \nError:         No code coverage driver is available\n\nI have updated the setting for Test coverage parsing and set the regex to \n^\\s*Lines:\\s*\\d+.\\d+\\%\n\nthe example for PHP/PHPUnit.\nWhen I run the command \nvendor/bin/phpunit --coverage-text --colors=never\n\nlocally, I get the following output:\nCode Coverage Report:     \n  2017-06-21 14:52:55     \n\n Summary:                 \n  Classes: 100.00% (4/4)  \n  Methods: 100.00% (14/14)\n  Lines:   100.00% (43/43)\n\n\\Rodacker\\CartExample::Article\n  Methods: 100.00% ( 6/ 6)   Lines: 100.00% ( 11/ 11)\n\\Rodacker\\CartExample::ArticleLoader\n  Methods: 100.00% ( 2/ 2)   Lines: 100.00% ( 21/ 21)\n\\Rodacker\\CartExample::ArticleRepository\n  Methods: 100.00% ( 3/ 3)   Lines: 100.00% (  6/  6)\n\\Rodacker\\CartExample::Image\n  Methods: 100.00% ( 3/ 3)   Lines: 100.00% (  5/  5)"}, {"role": "assistant", "content": "The problem was the missing Xdebug installation in the docker image. I could not install a proper version using apt-get, so I had to add a pecl install xdebug call in the before_script section:\nimage: php:7.1.1\n\ncache:\n  paths:\n  - vendor/\n\nbefore_script:\n# Install git, the php image doesn't have installed\n- apt-get update -yqq\n- apt-get install git -yqq\n\n# Install Xdebug\n- pecl install xdebug\n- docker-php-ext-enable xdebug\n\n# Install composer\n- curl -sS https://getcomposer.org/installer | php\n\n# Install all project dependencies\n- php composer.phar install\n\n# Run our tests\ntest:\n    only:\n        - master\n    script:\n        - vendor/bin/phpunit --configuration phpunit.xml --coverage-text --colors=never"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git for Perforce users\nI've been using Perforce for a number of years. I'd like to switch to using git for my personal code, but all of the git tutorials that I've seen either assume that you'e a complete source control n00b (which makes them incredibly tedious) or that you're used to svn (which I'm not).\nI know p4, and I also understand the idea behind a distributed source control system (so I don't need a sales pitch, thanks). What I'd like is a translation table from p4 command to equivalent git commands, as well as the \"can't live without\" commands that have no p4 equivalent.\nSince I suspect every p4 user uses a different subset of p4, here are some of the things I regularly do in p4 that I'd like to be able to do in git that aren't immediately obvious from the docs I've looked at:\n\ncreate multiple pending changelists in a single client. (p4 change)\nedit a pending changelist. (also p4 change)\nsee a list of all of my pending changelists (p4 changes -s pending)\nlist of all of the changed files in my client (p4 opened) or in a pending changelist (p4 describe)\nsee a diff of a pending changelist (I use a wrapper script for this which uses p4 diff and p4 describe)\nfor a given file, see which submitted changelists affected which lines (p4 annotate)\nfor a given file, see a list of the descriptions of the changelists that affected the file (p4 log)\nsubmit a pending changelist (p4 submit -c)\nabort a pending changelist (p4 revert)\n\nA lot of these revolve around \"changelists\". \"changelist\" is p4 terminology. What's the git equivalent term?\nIt sounds like branches might be what git users use in place of what p4 calls changelists. A bit confusing, since p4 also has something called a branch though they seem to be only vaguely related concepts. (Though I always thought p4's concept of a branch was pretty weird it is different yet again from the classic RCS concept of a branch.)\nAnyway... I'm not sure how to accomplish what I normally do in p4 changelists with git's branches. In p4 I can do something like this:\n$ p4 edit a.txt\n$ p4 change a.txt\nChange 12345 created.\n\nAt this point I have a changlist that contains a.txt. I can edit the description and continue working without submitting the changelist. Also, if it turns out that I need to make some changes to some other files, like say a bugfix in some other layer of the code, I can do that in the same client:\n$ p4 edit z.txt\n$ p4 change z.txt\nChange 12346 created.\n\nNow I have two separate changelists in the same client. I can work on these concurrently, and I don't need to do anything to \"switch between\" them. When it comes time to commit, I can submit them separately:\n$ p4 submit -c 12346  # this will submit the changes to z.txt\n$ p4 submit -c 12345  # this will submit the changes to a.txt\n\nI can't figure out how to replicate this in git. From my experiments, it doesn't appear that git add is associated with the current branch. As far as I can tell, when I git commit it's going to commit all files that I git add-ed no matter what branch I was in at the time:\n$ git init\nInitialized empty Git repository in /home/laurence/git-playground/.git/\n$ ls\na.txt  w.txt  z.txt\n$ git add -A .\n$ git commit\n Initial commit.\n 3 files changed, 3 insertions(+), 0 deletions(-)\n create mode 100644 a.txt\n create mode 100644 w.txt\n create mode 100644 z.txt\n$ vi a.txt z.txt \n2 files to edit\n$ git status\n# On branch master\n# Changed but not updated:\n#   (use \"git add <file>...\" to update what will be committed)\n#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n#\n#   modified:   a.txt\n#   modified:   z.txt\n#\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n$ git branch aardvark\n$ git checkout aardvark\nM   a.txt\nM   z.txt\nSwitched to branch 'aardvark'\n$ git add a.txt \n$ git checkout master\nM   a.txt\nM   z.txt\nSwitched to branch 'master'\n$ git branch zebra\n$ git checkout zebra\nM   a.txt\nM   z.txt\nSwitched to branch 'zebra'\n$ git add z.txt \n$ git status\n# On branch zebra\n# Changes to be committed:\n#   (use \"git reset HEAD <file>...\" to unstage)\n#\n#   modified:   a.txt\n#   modified:   z.txt\n#\n$ git checkout aardvark\nM   a.txt\nM   z.txt\nSwitched to branch 'aardvark'\n$ git status\n# On branch aardvark\n# Changes to be committed:\n#   (use \"git reset HEAD <file>...\" to unstage)\n#\n#   modified:   a.txt\n#   modified:   z.txt\n\nIn this example, the aardvark and zebra branches seem to contain exactly the same set of changes, and based on the output of git status it appears that doing a commit in either will have the same effect. Am I doing something wrong?"}, {"role": "assistant", "content": "I haven't used perforce much so this may not be exactly be a 1:1 translation. Then again distributed source control systems like git and mercurial have a different workflow anyway so there really isn't (and there shouldn't) be a 1:1 translation. Anyway, here goes:\n\nCreate multiple pending changelists -> Use branches instead. In git branches are light and quick, takes less than a second to create and typically less than two seconds to merge. Don't be afraid of branching and rebase often.\ngit branch new-branch-name\ngit checkout new-branch-name\n\nOr do it all in one line:\ngit checkout -b new-branch-name\n\nSee a list of all pending changelists -> Since the equivalent of multiple pending changelist is multiple branches just view the branches:\ngit branch\n\nIf you want to view remote branches as well:\ngit branch -a\n\nIt is considered good practice to immediately delete a branch after a successful merge so you don't have to keep track of which branch are pending to be merged and which have already been merged.\nList all changed files -> For a single pending \"changelist\" in a specific branch git has a concept of the index or cache. In order to commit a change you must first add files to this index. This allows you to manually select which group of files represent a single change or to ignore irrelevant files. To see the status of which files are added, or not to this index just do:\ngit status\n\nSee a diff of a pending changelist -> There are two parts to this. First to see a diff between the working directory and the index:\ngit diff\n\nBut if you want to know the diff between what you're typing now and the last commit then you are really asking for a diff between the working directory+index and the HEAD:\ngit diff HEAD\n\nFor a given file, see which submitted changelists affected which lines -> This is easy:\ngit blame filename\n\nor even better, if you are in a windowing environment:\ngit gui blame filename\n\nGit gui takes longer to parse the file (it was written in tcl instead of C) but it has lots of neat features including the ability to \"time travel\" back into the past by clicking on a commit ID. I only wish they'd implement a feature to \"time travel\" to the future so I can find out how a given bug will finally be resolved ;-)\nFor a given file, see a list of the descriptions of the changelists that affected the file -> also easy:\ngit log filename\n\nBut git log is a much more powerful tool than just this. In fact most of my personal scripts piggyback off-of git log to read the repository. Read the man page.\nSubmit a pending changelist -> Also easy:\ngit commit\n\n\nSee my answer to a previous question to see my typical git workflow: Learning Git. Need to know if I am on the right track\nIf you follow the workflow I outlined then you'll find tools like gitk to be much more valuable since it allows you to clearly see groups of changes.\n\nAdditional answer:\nGit is very flexible and there are several ways to do what you describe. The thing to remember is to always start a new branch for each feature you're working on. This means the master branch isn't touched so you can always go back to it to do bug fixes. Working in git one should almost always start with:\ngit checkout -b new-feature-a\n\nNow you can edit file a.txt. To work concurrently on another feature do:\ngit checkout master\ngit checkout -b new-feature-z\n\nNow you can edit file z.txt. To switch back to a.txt:\ngit checkout new-feature-a\n\nBut wait, there are changes to new-feature-z and git won't let you switch branches. At this point you have two choices. The first is the simplest, commit all changes to the current branch:\ngit add .\ngit commit\ngit checkout new-feature-a\n\nThis is what I'd recommend. But if you are really not ready to commit the code, you can temporarily stash it:\ngit stash\n\nNow you can switch to branch new-feature-a. To go back to the code you were working on just pop the stash:\ngit checkout new-feature-z\ngit stash pop\n\nWhen all is done merge back all changes to master:\ngit merge --no-ff new-feature-a\ngit merge --no-ff new-feature-z\n\nBecause merges are so quick and easy (easy because conflicts are so rare and conflict resolution, when one does happen, not too hard) we use branches in git for everything.\nHere's another example of a common use of branches in git that you don't see in other source control tools (except perhaps mercurial):\nNeed to keep changing your config files to reflect your dev environment? Then use a branch:\ngit checkout -b dev-config\n\nNow edit your config files in your favourite editor then commit changes:\ngit add .\ngit commit\n\nNow every new branch can start from the dev-config branch instead of master:\ngit checkout dev-config\ngit checkout -b new-feature-branch\n\nOnce you're done remove the edits in dev-config from new-feature-branch using interactive rebase:\ngit rebase -i master\n\nDelete the commits you don't want then save. Now you have a clean branch without custom config edits. Time to merge back to master:\ngit checkout master\ngit merge --no-ff new-feature-branch\n# because master have changed, it's a good idea to rebase dev-config:\ngit checkout dev-config\ngit rebase master\n\nIt should be noted that removing edits with git rebase -i even works when all changes happen in the same file. Git remembers changes, not file content*.\n*note: actually, technically not entirely true but as a user that's what it feels like\n\nMore additional answer:\nSo, from you comments it looks like you want to have two branches to exist simultaneously so you can test how the combined code works. Well, this is a good way to illustrate the power and flexibility of branches.\nFirst, a word on the implication of cheap branching and modifiable history on your workflow. When I was using CVS and SVN I was always a bit reluctant to commit. That's because committing unstable code would inevitably f**k up other people's working code. But with git I lost that fear. That's because in git other people won't get my changes until I merge them to master. So now I find myself committing code every 5 lines I write. You don't need perfect foresight to commit. You just need to change your mindset: commit-to-branch==add-to-changeset, merge-to-master==commit-changeset.\nSo, back to examples. Here's how I would do it. Say you have a branch new-feature-z and you want to test it with new-feature-a. I would just create a new branch to test it:\n# assume we are currently in branch new-feature-z\n# branch off this branch for testing\ngit checkout -b feature-z-and-feature-a\n# now temporarily merge new-feature-a\ngit merge --no-ff new-feature-a\n\nNow you can test. If you need to modify something to make feature-z work with feature-a then do so. If so you can merge back the changes to the relevant branch. Use git rebase -i to remove irrelevant changes from the merge.\nAlternatively, you can also use git rebase to temporarily change the base of new-feature-z to point to new-feature-a:\n# assume we are currently in branch new-feature-z\ngit rebase new-feature-a\n\nNow the branch history is modified so that new-feature-z will be based off new-feature-a instead of master. Now you can test. Any changes committed in this branch will belong to the branch new-feature-z. If you need to modify new-feature-a just switch back to it and the rebase to get the new changes:\ngit checkout new-feature-a\n# edit code, add, commit etc..\ngit checkout new-feature-z\ngit rebase new-feature-a\n# now new-feature-z will contain new changes from new-feature-a\n\nWhen you're done, simply rebase back to master to remove changes from new-feature-a:\n# assume we are currently in branch new-feature-z\ngit rebase master\n\nDon't be afraid to start a new branch. Don't be afraid to start a throwaway branch. Don't be afraid to throw away branches. And since merge==submit and commit==add-to-changeset don't be afraid to commit often. Remember, commit is a developer's ultimate undo tool.\nOh, and another thing, in git deleted branches still exist in your repository. So if you've accidentally deleted something that you later realise is useful after all you can always get it back by searching the history. So don't be afraid to throw away branches."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitHub access token with read-only access to private repositories\nI have a project with a Node dependency on a private Git repository. I need to be able to run npm install without being prompted to enter a password or allow an SSH connection, so I'm using an access token that I created on GitHub in my package.json:\n  \"dependencies\": {\n    \"sass-theme\": \"git+https://[token]:[email\u00a0protected]/MyOrg/sass-theme.git#v1.0.2\",\n    \"node-sass\": \"^4.5.0\"\n  }\n\nThis project is shared with dozens of other people, so obviously I don't want to keep my token in source control. I know I can create a read-only deployment key on GitHub, but I believe that would require other developers to import the SSH key to build the project locally.\nIs it possible to create an access token that can be shared but that has read-only access to clone the repository?"}, {"role": "assistant", "content": "The most straightforward way I can think of to create a token that provides read-only access to a private repo is to:\n\nHave a user who has read-only access to the given private repo\n(and ideally, not much else)\nAs that user create a Personal Access Token with the \"repo\" scope\n\nIt would be best if they didn't have access to other orgs/repos, since the \"repo\" scope grants the user total control over any repos that user has write access to.\nI know in an Enterprise solution we would do that with a System ID, but on GitHub you can instead create a Machine User."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Track all remote Git branches as local branches\nTracking a single remote branch as a local branch is straightforward enough.\ngit checkout --track -b ${branch_name} origin/${branch_name}\n\nPushing all local branches up to the remote, creating new remote branches as needed is also easy.\ngit push --all origin\n\nI want to do the reverse. If I have X number of remote branches at a single source:\ngit branch -r\n\nOutput:\nbranch1\nbranch2\nbranch3\n.\n.\n.\n\nCan I create local tracking branches for all those remote branches without needed to manually create each one? Say something like:\ngit checkout --track -b --all origin\n\nI've googled and read the manuals, but have come up bunk thus far."}, {"role": "assistant", "content": "The answer given by Otto is good, but all the created branches will have \"origin/\" as the start of the name.  If you just want the last part (after the last /) to be your resulting branch names, use this:\nfor remote in `git branch -r | grep -v /HEAD`; do git checkout --track $remote ; done\n\nIt also has the benefit of not giving you any warnings about ambiguous refs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --shortstat"}, {"role": "assistant", "content": "Output only the last line of the --stat format containing total\nnumber of modified files, as well as number of added and deleted\nlines."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker"}, {"role": "assistant", "content": "Configuration Mechanism Git uses a simple text format to store customizations that are per\nrepository and are per user.  Such a configuration file may look\nlike this: #\n# A '#' or ';' character indicates a comment.\n#\n\n; core variables\n[core]\n\t; Don't trust file modes\n\tfilemode = false\n\n; user identity\n[user]\n\tname = \"Junio C Hamano\"\n\temail = \"gitster@pobox.com\" Various commands read from the configuration file and adjust\ntheir operation accordingly.  See git-config for a\nlist and more details about the configuration mechanism."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --output-object-format=(sha1|sha256|storage)"}, {"role": "assistant", "content": "Allow oids to be input from any object format that the current\nrepository supports. Specifying \"sha1\" translates if necessary and returns a sha1 oid. Specifying \"sha256\" translates if necessary and returns a sha256 oid. Specifying \"storage\" translates if necessary and returns an oid in\nencoded in the storage hash algorithm."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to cherry pick only changes for only one file, not the whole commit\nI need to apply changes introduced in one branch to another branch.\nI can use cherry pick to do that. However, in my case I want to apply changes which are relevant only for one file, I don't need to cherry pick whole commit.\nHow to do that?"}, {"role": "assistant", "content": "You have different options based on what you want to achieve:\nIf you want the contents of the file to be the same as on the target branch, you can use git checkout <branch> -- <filename>. This will however not \u201ccherry-pick\u201d the changes that happened in a single commit, but just take the resulting state of said file. So if you added a line in a commit, but previous commits changed more, and you only want to add that line without those other changes, then a checkout is not what you want.\nOtherwise if you want to apply the patch introduced in a commit to only a single file, you have multiple options. You could run git cherry-pick -n, i.e. without committing it, edit the commit (for example reset all files using git reset -- . and only add the file you actually want to change using git add <filename>). Or you could create the diff for the file and apply the diff then:\ngit diff <branch>^..<branch> -- <filename> | git apply"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects"}, {"role": "assistant", "content": "GIT URLS In general, URLs contain information about the transport protocol, the\naddress of the remote server, and the path to the repository.\nDepending on the transport protocol, some of this information may be\nabsent. Git supports ssh, git, http, and https protocols (in addition, ftp\nand ftps can be used for fetching, but this is inefficient and\ndeprecated; do not use them). The native transport (i.e. git:// URL) does no authentication and\nshould be used with caution on unsecured networks. The following syntaxes may be used with them: ssh:// [ <user> @ ] <host> [ : <port> ] / <path-to-git-repo> git:// <host> [: <port> ] / <path-to-git-repo> http [ s ] :// <host> [ : <port> ] / <path-to-git-repo> ftp [ s ] :// <host> [ : <port> ] / <path-to-git-repo> An alternative scp-like syntax may also be used with the ssh protocol: [ <user> @ ] <host> :/ <path-to-git-repo> This syntax is only recognized if there are no slashes before the\nfirst colon. This helps differentiate a local path that contains a\ncolon. For example the local path foo:bar could be specified as an\nabsolute path or ./foo:bar to avoid being misinterpreted as an ssh\nurl. The ssh and git protocols additionally support ~ <username> expansion: ssh:// [ <user> @ ] <host> [ : <port> ] /~ <user> / <path-to-git-repo> git:// <host> [ : <port> ] /~ <user> / <path-to-git-repo> [ <user> @ ] <host> :~ <user> / <path-to-git-repo> For local repositories, also supported by Git natively, the following\nsyntaxes may be used: /path/to/repo.git/ file:///path/to/repo.git/ These two syntaxes are mostly equivalent, except when cloning, when\nthe former implies --local option. See git-clone for\ndetails. git clone , git fetch and git pull , but not git push , will also\naccept a suitable bundle file. See git-bundle . When Git doesn\u2019t know how to handle a certain transport protocol, it\nattempts to use the remote- <transport> remote helper, if one\nexists. To explicitly request a remote helper, the following syntax\nmay be used: <transport> :: <address> where <address> may be a path, a server and path, or an arbitrary\nURL-like string recognized by the specific remote helper being\ninvoked. See gitremote-helpers for details. If there are a large number of similarly-named remote repositories and\nyou want to use a different format for them (such that the URLs you\nuse will be rewritten into URLs that work), you can create a\nconfiguration section of the form: [url \" <actual-url-base> \"]\n\t\tinsteadOf = <other-url-base> For example, with this: [url \"git://git.host.xz/\"]\n\t\tinsteadOf = host.xz:/path/to/\n\t\tinsteadOf = work: a URL like \"work:repo.git\" or like \"host.xz:/path/to/repo.git\" will be\nrewritten in any context that takes a URL to be \"git://git.host.xz/repo.git\". If you want to rewrite URLs for push only, you can create a\nconfiguration section of the form: [url \" <actual-url-base> \"]\n\t\tpushInsteadOf = <other-url-base> For example, with this: [url \"ssh://example.org/\"]\n\t\tpushInsteadOf = git://example.org/ a URL like \"git://example.org/path/to/repo.git\" will be rewritten to\n\"ssh://example.org/path/to/repo.git\" for pushes, but pulls will still\nuse the original URL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  core.excludesFile"}, {"role": "assistant", "content": "Specifies the pathname to the file that contains patterns to\ndescribe paths that are not meant to be tracked, in addition\nto .gitignore (per-directory) and .git/info/exclude .\nDefaults to $XDG_CONFIG_HOME/git/ignore .\nIf $XDG_CONFIG_HOME is either not set or empty, $HOME/.config/git/ignore is used instead. See gitignore ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git Push ERROR: Repository not found\nI am having a very strange problem with git and github. When I try and push, I am getting:\ngit push -u origin master\nERROR: Repository not found.\nfatal: The remote end hung up unexpectedly\n\nI added the remote:\ngit remote add origin [email\u00a0protected]:account-name/repo-name.git\n\nAny ideas?"}, {"role": "assistant", "content": "Check to see if you have read-write access.\nThe Git error message is misleading. I had a similar issue. I had been added to an existing project. I cloned it and committed a local change. I went to push and got the ERROR: Repository not found. error message.\nThe person who added me to the project gave me read-only access to the repository. A change by them and I was able to push."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-am - Apply a series of patches from a mailbox  --ignore-space-change  --ignore-whitespace  --whitespace=<action>  -C<n>  -p<n>  --directory=<dir>  --exclude=<path>  --include=<path>  --reject"}, {"role": "assistant", "content": "These flags are passed to the git apply (see git-apply )\nprogram that applies\nthe patch. Valid <action> for the --whitespace option are: nowarn , warn , fix , error , and error-all ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to export revision history from mercurial or git to cvs?\nI'm going to be working with other people on code from a project that uses cvs. We want to use a distributed vcs to make our work and when we finish or maybe every once in a while we want to commit our code and all of our revision history to cvs. We don't have write access to the project's cvs repo so we can't commit very frequently. What tool can we use to export our revision history to cvs? Currently we were thinking of using git or mercurial but we could use another distributed vcs if it could make the export easier."}, {"role": "assistant", "content": "Fortunately for those of us who are still forced to use CVS, git provides pretty good tools to do exactly what you're wanting to do.  My suggestions (and what we do here at $work):\nCreating the Initial Clone\nUse git cvsimport to clone the CVS revision history into a git repository.  I use the following invocation:\n% git cvsimport -d $CVSROOT -C dir_to_create -r cvs -k \\\n  -A /path/to/authors/file cvs_module_to_checkout\n\nThe -A option is optional but it helps to make your revision history that's imported from CVS look more git-like (see man git-cvsimport for more info on how this is set up).\nDepending on the size and history of the CVS repository, this first import will take a VERY long time.  You can add a -v to the above command if you want the peace of mind that something is in fact happening.\nOnce this process is completed, you will have a master branch that should reflect CVS's HEAD (with the exception that git cvsimport by default ignores the last 10 minutes worth of commits to avoid catching a commit that is half-finished).  You can then use git log and friends to examine the entire history of the repository just as if it had been using git from the beginning.\nConfiguration Tweaks\nThere are a few configuration tweaks that will make incremental imports from CVS (as well as exports) easier in the future.  These are not documented on the git cvsimport man page so I suppose they could change without notice but, FWIW:\n% git config cvsimport.module cvs_module_to_checkout\n% git config cvsimport.r cvs\n% git config cvsimport.d $CVSROOT\n\nAll of these options can be specified on the command line so you could safely skip this step.\nIncremental Imports\nSubsequent git cvsimport should be much faster than the first invocation.  It does, however, do an cvs rlog on every directory (even those that have only files in Attic) so it can still take a few minutes.  If you've specified the suggested configs above, all you need to do is execute:\n% git cvsimport\n\nIf you haven't set up your configs to specify the defaults, you'll need to specify them on the command line:\n% git cvsimport -r cvs -d $CVSROOT cvs_module_to_checkout\n\nEither way, two things to keep in mind:\n\nMake sure you're in the root directory of your git repository.  If you're anyplace else, it will try to do a fresh cvsimport that will again take forever.\nMake sure you're on your master branch so that the changes can be merged (or rebased) into your local/topic branches.\n\nMaking Local Changes\nIn practice, I recommend always making changes on branches and only merging to master when you're ready to export those changes back to the CVS repository.  You can use whatever workflow you like on your branches (merging, rebasing, squashing, etc) but of course the standard rebasing rules apply: don't rebase if anyone else has been basing their changes on your branch.\nExporting Changes to CVS\nThe git cvsexportcommit command allows you to export a single commit out to the CVS server.  You can specify a single commit ID (or anything that describes a specific commit as defined in man git-rev-parse).  A diff is then generated, applied to a CVS checkout and then (optionally) committed to CVS using the actual cvs client.  You could export each micro commit on your topic branches but generally I like to create a merge commit on an up-to-date master and export that single merge commit to CVS.  When you export a merge commit, you have to tell git which commit parent to use to generate the diff.  Also, this won't work if your merge was a fast-forward (see the \"HOW MERGE WORKS\" section of man git-merge for a description of a fast-forward merge) so you have to use the --no-ff option when performing the merge.  Here's an example:\n# on master\n% git merge --no-ff --log -m \"Optional commit message here\" topic/branch/name\n% git cvsexportcommit -w /path/to/cvs/checkout -u -p -c ORIG_HEAD HEAD\n\nYou can see what each of those options mean on the man page for git-cvsexportcommit.  You do have the option of setting the -w option in your git config:\n% git config cvsexportcommit.cvsdir /path/to/cvs/checkout\n\nIf the patch fails for whatever reason, my experience is that you'll (unfortunately) probably be better off copying the changed files over manually and committing using the cvs client.  This shouldn't happen, however, if you make sure master is up-to-date with CVS before merging your topic branch in.\nIf the commit fails for whatever reason (network/permissions issues, etc), you can take the command printed to your terminal at the end of the error output and execute it in your CVS working directory.  It usually looks something like this:\n% cvs commit -F .msg file1 file2 file3 etc\n\nThe next time you do a git cvsimport (waiting at least 10 minutes) you should see the patch of your exported commit re-imported into your local repository.  They will have different commit IDs since the CVS commit will have a different timestamp and possibly a different committer name (depending on whether you set up an authors file in your initial cvsimport above).\nCloning your CVS clone\nIf you have more than one person needing to do the cvsimport, it would be more efficient to have a single git repository that performs the cvsimport and have all the other repositories created as a clone.  This works perfectly and the cloned repository can perform cvsexportcommits just as described above.  There is one caveat, however.  Due to the way CVS commits come back through with different commit IDs (as described above), you don't want your cloned branch to track the central git repository.  By default, this is how git clone configures your repository but this is easily remedied:\n% git clone [CENTRAL_REPO_HERE]\n% cd [NEW_GIT_REPO_DIR_HERE]\n% git config --unset branch.master.remote\n% git config --unset branch.master.merge\n\nAfter you've removed these configs, you will have to explicitly say where and what to pull from when you want to pull in new commits from the central repository:\n% git pull origin master\n\n\nOverall, I've found this work-flow to be quite manageable and the \"next best thing\" when migrating completely to git isn't practical."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-symbolic-ref"}, {"role": "assistant", "content": "Read, modify and delete symbolic refs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I replace a git submodule with another repo?\nHow do I replace a git submodule with a different git repo?\nSpecifically, I have a submodule:\n\nlocated at ./ExternalFrameworks/TestFramework that points to a git repo [email\u00a0protected]:userA/TestFramework.git \nI'd like it to now point to [email\u00a0protected]:userB/TestFramework.git.\n\nThe problem is that when I delete the submodule with the method described here, then re-add it using the command     \ngit submodule add [email\u00a0protected]:userB/TestFramework.git\n\nI get this error:\nA git directory for 'ExternalFrameworks/TestFramework' is found locally with remote(s):\n  origin    [email\u00a0protected]:userA/TestFramework.git\nIf you want to reuse this local git directory instead of cloning again from\n  [email\u00a0protected]:userB/TestFramework.git\nuse the '--force' option. If the local git directory is not the correct repo\nor you are unsure what this means choose another name with the '--name' option."}, {"role": "assistant", "content": "If the location (URL) of the submodule has changed, then you can simply:\n\nModify the .gitmodules file in the repo root to use the new URL.\nDelete the submodule folder in the repo rm -rf .git/modules/<submodule>.\nDelete the submodule folder in the working directory rm -rf <submodule>.\nRun git submodule sync.\nRun git submodule update.\n\nMore complete info can be found elsewhere:\n\nChanging remote repository for a git submodule"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Relative Link to Repo's Root from Markdown file\n\nI need to have a relative link to root of my repo from markdown file\n(I need it working for any forks)\nSo it looks like the only way it's to provide a link to some file in the root:\nthe [Root](/README.md)\nor\nthe [Root](../README.md)\n(if it's located at /doc/README.md for instance)\nAt the same time I can refer to any folder without referring to a file\nthe [Doc](/doc)\nBut if I try to put a link to the root folder:\nthe [real root](/)\nthe [real root](../)\nI'll have a link such\nhttps://github.com/UserName/RepoName/blob/master\nwhich unlike the \nhttps://github.com/UserName/RepoName/blob/master/doc\nrefers to 404\nSo if I don't want to refer to README.md in the root (I could havn't it at all)\nIs there any way to have such a link?"}, {"role": "assistant", "content": "After some research I've found this solution:\n[the real relative root of any fork](/../../)\nIt always points to the default branch. For me it's Ok, so it's up to you\nPS\nWith such a trick you can also access the following abilities:\n[test](/../../tree/test) - link to another branch\n[doc/readme.md](/../../edit/master/doc/readme.md) - open in editor\n[doc/readme.md](/../../delete/master/doc/readme.md) - ask to delete file\n[doc/readme.md](/../../commits/master/doc/readme.md) - history\n[doc/readme.md](/../../blame/master/doc/readme.md) - blame mode\n[doc/readme.md](/../../raw/master/doc/readme.md) - raw mode (will redirect)\n[doc/](/../../new/master/doc/) - ask to create new file\n[doc/](/../../upload/master/doc/) - ask to upload file\n[find](/../../find/test) - find file"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitignore doesn't ignore .suo Visual studio file\n\nI want to do simple thing, ignore .suo file and bin and obj folders from committing to git repo. I've created .gitignore file and it's working for bin and obj folders, but it keeps allowing .suo file committing. \nThe content of gitignore is simple:\n/build/\n*.suo\n*.user\n_ReSharper.*/\n*.sdf\nbin/\nobj/\nDebug/\nRelease/\n*.opensdf\n*.tlog\n*.log\nTestResult.xml\n*.VisualState.xml\nVersion.cs\nVersion.h\nVersion.cpp\n\nFirstly I've thought that the problem is that .suo file is already on the repo, so I've used set of git commands to remove it from repo:\ngit rm \"file.suo\"\ngit commit -m \"suo removed\"\ngit pull origin master\ngit push origin master\n\nAnd everything goes well, .suo is removed locally, it is removed from repo, and on the next commit it gets pushed again to repo.\nOn the picture is committed .suo file.\n\nDid anyone had a problem like this? How to solve this kind of problem?"}, {"role": "assistant", "content": "This is probably a duplicate of GIT - Can't ignore .suo file\nAnd to be honest, you can try that suggestion. What you are missing here is to remove the already added *.suo file from the git repository.\nThe other answer has a nice set of commands to run: \ngit rm --cached *.suo\ngit commit -m \"Delete suo file from repository\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is \"git remote add ...\" and \"git push origin master\"?\nQuite often, Git and Ruby on Rails looks like magic... such as in the first chapter of Ruby on Rails 3 Tutorial book, it talks about Git:\ngit remote add origin [email\u00a0protected]:peter/first_app.git\ngit push origin master\n\nAnd it pretty much says \"it just works\" without saying too much about what they are and start talking about branching.  Searching on the Internet shows that git remote add is to add a \"short name\", such as origin, and it can be any name as well, which is like an alias to a URL.\nAnd origin is the usual path of where the remote repository points to (in http://git-scm.com/book/en/Git-Basics-Working-with-Remotes under \"Adding Remote Repositories\").\nSo why is the URL not git://[email\u00a0protected]/peter/first_app.git, but in the other syntax -- what syntax is it?  Why must it end with .git?   I tried not using .git at the end and it works too.  If not .git, what else can it be?  The git in [email\u00a0protected] seems to be a user account on the Git server?\nAlso, why does it need to be so verbose to use git push origin master?  Can't the default be origin and master?  I found that the first time, the origin master is needed, but after a small edit and commit, then git push is all it needs (no need origin master).  Can somebody who knows what is going on give some details?\nSometimes it feels like a lot of magic without explanation... and sometimes the person using it is so confident and when asked why, can't explain it, and respond with something like \"that's the way it is\".  Sometimes very practical and pragmatic.  It is not bad to be practical, but probably not practical to the point to not know what is going on."}, {"role": "assistant", "content": "Git is like Unix. It is user-friendly, but it is picky about its friends. It's about as powerful and as user-friendly as a shell pipeline.\nThat being said, once you understand its paradigms and concepts, it has the same Zenlike clarity that I've come to expect from Unix command-line tools. You should consider taking some time off to read one of the many good Git tutorials available online. The Pro Git book is a good place to start.\nTo answer your first question.\n\nWhat is git remote add ...?\nAs you probably know, Git is a distributed version control system. Most operations are done locally. To communicate with the outside world, Git uses what are called \"remotes\". These are repositories other than the one on your local disk which you can push your changes into (so that other people can see them) or pull from (so that you can get others changes). The command git remote add origin [email\u00a0protected]:peter/first_app.git creates a new remote called origin located at [email\u00a0protected]:peter/first_app.git. Once you do this, in your push commands, you can push to origin instead of typing out the whole URL.\n\nWhat is git push origin master?\nThis is a command that says \"push the commits in the local branch named master to the remote named origin\". Once this is executed, all the stuff that you last synchronised with origin will be sent to the remote repository and other people will be able to see them there.\n\n\nNow about transports (i.e., what git://) means. Remote repository URLs can be of many types (file://, https://, etc.). Git simply relies on the authentication mechanism provided by the transport to take care of permissions and stuff. This means that for file:// URLs, it will be Unix file permissions, etc. The git:// scheme is asking Git to use its own internal transport protocol, which is optimised for sending Git changesets around. As for the exact URL, it's the way it is because of the way GitHub has set up its Git server.\nNow the verbosity. The command you've typed is the general one. It's possible to tell Git something like \"the branch called master over here is local mirror of the branch called foo on the remote called bar\". In Git speak, this means that master tracks bar/foo. When you clone for the first time, you will get a branch called master and a remote called origin (where you cloned from) with the local master set to track the master on origin.\nOnce this is set up, you can simply say git push and it'll do it. The longer command is available in case you need it (e.g., git push might push to the official public repository and git push review master can be used to push to a separate remote which your team uses to review code). You can set your branch to be a tracking branch using the --set-upstream option of the git branch command.\nI've felt that Git (unlike most other applications I've used) is better understood from the inside out. Once you understand how data is stored and maintained inside the repository, the commands and what they do become crystal clear. I do agree with you that there's some elitism amongst many Git users, but I also found that with Unix users once upon a time, and it was worth ploughing past them to learn the system. Good luck!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  log.showRoot"}, {"role": "assistant", "content": "If true, the initial commit will be shown as a big creation event.\nThis is equivalent to a diff against an empty tree.\nTools like git-log or git-whatchanged , which\nnormally hide the root commit will now show it. True by default."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-difftool - Show changes using common diff tools  difftool.prompt"}, {"role": "assistant", "content": "Prompt before each invocation of the diff tool."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file"}, {"role": "assistant", "content": "NAME git-blame - Show what revision and author last modified each line of a file"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git says local branch is behind remote branch, but it's not\nScenario:  \n\nI make a new branch\nhack on it\ncommit it\npush it\nhack on it some more\ncommit again\ntry to push again\n\nGit responds:\n\nUpdates were rejected because the tip of your current branch is behind\n  its remote counterpart. etc.\n\nI'm the only one hacking on this branch - no one else is touching it.  The remote branch is actually behind the local branch.  I shouldn't have to pull at all.\n(And if I do pull, Git reports conflicts between the two, and forces me to merge the branch into itself)\nWhy is this (likely) happening?  And how can I diagnose/fix it?\nTo be clear, I'm not branching anywhere, and no one else is working on it:\nRemote: Commit A -------- Commit B  \n\nLocal:  Commit A -------- Commit B -------- Commit C  \n\nC is a straight continuation of B, no branching involved.  But git thinks C is a branch of A:  \nRemote: Commit A -------- Commit B  \n\n                  ------- Commit C  \n                /  \nLocal:  Commit A -------- Commit B  \n\nIt's not; it's a straight continuation of B."}, {"role": "assistant", "content": "You probably did some history rewriting? Your local branch diverged from the one on the server. Run this command to get a better understanding of what happened:\ngitk HEAD @{u}\n\nI would strongly recommend you try to understand where this error is coming from. To fix it, simply run:\ngit push -f\n\nThe -f makes this a \u201cforced push\u201d and overwrites the branch on the server. That is very dangerous when you are working in team. But\nsince you are on your own and sure that your local state is correct\nthis should be fine. You risk losing commit history if that is not the case."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Branch from a previous commit using Git\nIf I have an n number of commits, how can I create a branch from the n-3 commit?"}, {"role": "assistant", "content": "Create the branch using a commit hash:\ngit branch branch_name <commit-hash>\n\nOr by using a symbolic reference:\ngit branch branch_name HEAD~3\n\nTo checkout the branch while creating it, use:\ngit checkout -b branch_name <commit-hash or HEAD~3>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git: error: RPC failed; result=22, HTTP code = 411\n\nSymptoms:\nGit suddenly refused to push a repository (to github in my case):\n$ git push\nCounting objects: 9292, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (2136/2136), done.\nerror: RPC failed; result=22, HTTP code = 411\nfatal: The remote end hung up unexpectedly\nWriting objects: 100% (8222/8222), 1.27 MiB | 837 KiB/s, done.\nTotal 8222 (delta 6060), reused 8181 (delta 6033)\nfatal: The remote end hung up unexpectedly\nEverything up-to-date"}, {"role": "assistant", "content": "Here is what helped, the following command increases git buffer to 500mb:\ngit config http.postBuffer 524288000"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What are your pros and cons of git after having used it? [closed]\nClosed. This question is opinion-based. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\nWant to improve this question? Update the question so it can be answered with facts and citations by editing this post.\n\n\nClosed 10 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI'm using SVN right now, and I've used CVS and VSS in the past. SVN is the current favourite in my books, but I've been hearing a lot about git. Of the people that have used git, what are the pros and cons from your experience?"}, {"role": "assistant", "content": "I don't have a lot of experience with git, but:\nPros:\n\nIt's really quick\nLocal commits rock\nQuick to start a new repository (no configuration etc)\ngithub is easy to use\n\n(I haven't really \"needed\" the distributed side of things yet, beyond being able to have a local repository and push to a public one.)\nCons:\n\nWindows support is still lagging behind, I believe - and you can't just use it from a normal command prompt\nLack of IDE and Explorer integration\nIt took me a while to find a good introductory text along the lines of the redbean book.\nThe fact that \"adding\" a changed file only adds the contents at that point of time (so it can show up as staged for commit and still have modifications which require another git add) took a while to grasp"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I hold git credentials in environment variables?\nI'd like to create a very simple shell script, which will ultimately be called by another application, that updates a local git repository:\n#!/bin/bash\n\ncd $1\nsudo git pull\n\nWhen executing this I'm asked for credentials (I'm pulling from a private BitBucket repository).\nCan I ( briefly) store credentials in environment variables?\n#!/bin/bash\n\nexport  GIT_USERNAME=<user>\nexport  GIT_PASSWORD=<pass>\n\ncd $1\nsudo git pull\n\nThe above doesn't work. Would anything? I could programmatically modify the origin url but that seems a bit execessive."}, {"role": "assistant", "content": "I know that it's very old question but if you really need to pass username and password for HTTP basic authentication you can just set helper like this:\ngit config credential.helper '!f() { sleep 1; echo \"username=${GIT_USER}\"; echo \"password=${GIT_PASSWORD}\"; }; f'\n\nUPDATE: I've added sleep 1 to the function. In some environments it may be probably needed due to race condition. I've got 2 virtual machines running Debian Jessie. They had the same architecture but different CPU and different number of cores. On one of these machines the helper was working fine without sleep. On the other one it wasn't. After few hours of debugging I run strace to see what's happening. And it magically started to work. strace just made git a little bit slower."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Using git commit -a with vim\nI'm new with git, so I decided to learn git using the tutorials of github. The third chapter said: \n\n\"For this first example we\u2019ll modify the README file to add ourselves as an author on the project. So we simply edit the file. Now we want to commit that change, so we run the git commit -a command.\"\n\nWhen I use the git commit -a command, the console opens a vim and I wrote my message, but I don't know how to close this vim editor from the console. How do I save the message and close vim?"}, {"role": "assistant", "content": "In vim, you save a file with :wEnter while in the normal mode (you get to the normal mode by pressing Esc).\nYou close your file with :q while in the normal mode.\n\nYou can combine both these actions and do Esc:wqEnter to save the commit and quit vim.\nAs an alternate to the above, you can also press ZZ while in the normal mode, which will save the file and exit vim. This is also easier for some people as it's the same key pressed twice."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is it possible to fork a public GitHub repo into an enterprise repository?\nThere exist a public repo for Quick framework here. I'd like to be able to fork this into a private enterprise GitHub repository.  Forking would allow all the branches to remain. \nthe alternative would be to clone the repo and push up only a single branch to the enterprise but then I lose on not having all the branches from the source/original. \nupdate:\nI ended up pushing all my branches into the enterprise git. \nif you just do a git push yourRemoteName myNewBranch then it will push the code into that branch on the enterprise git while creating that branch in enterprise GitHub."}, {"role": "assistant", "content": "It's not possible, because your GitHub Enterprise (GHE) installation is separate from the public one, so there's no way for the two systems to track each other's branch relationships.\nThe best you can do is exactly as you describe:  Clone the repo, then push it to your GHE installation, and yes, you will then lose the branching relationships across repos.\nThe other option would be to keep a fork on the public GitHub (GH) repo--possibly keeping it in sync (manually, or with a cronjob) with your GHE repo.  Then you'll have two instances of your repo, and the public one would retain branch relationships with the original repo.\nDepending on why you need to put this on GHE, it may or may not work.  If you're making private contributions, it clearly won't work--as your private contributions would no longer be private.  If you want it on GHE due to some corporate policy that all open source projects used internally are kept on the GHE, or something similar, then it would work, with the added administrative overhead of keeping the repo in sync two places."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-send-email - Send a collection of patches as emails  sendemail.smtpBatchSize"}, {"role": "assistant", "content": "Number of messages to be sent per connection, after that a relogin\nwill happen.  If the value is 0 or undefined, send all messages in\none connection.\nSee also the --batch-size option of git-send-email ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rebase - Reapply commits on top of another base tip  --no-keep-empty  --keep-empty"}, {"role": "assistant", "content": "Do not keep commits that start empty before the rebase\n(i.e. that do not change anything from its parent) in the\nresult.  The default is to keep commits which start empty,\nsince creating such commits requires passing the --allow-empty override flag to git commit , signifying that a user is very\nintentionally creating such a commit and thus wants to keep\nit. Usage of this flag will probably be rare, since you can get rid of\ncommits that start empty by just firing up an interactive rebase and\nremoving the lines corresponding to the commits you don\u2019t want.  This\nflag exists as a convenient shortcut, such as for cases where external\ntools generate many empty commits and you want them all removed. For commits which do not start empty but become empty after rebasing,\nsee the --empty flag. See also INCOMPATIBLE OPTIONS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  -"}, {"role": "assistant", "content": "for a successfully deleted ref;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "LF will be replaced by CRLF in git - What is that and is it important? [duplicate]\nThis question already has answers here:\n                                \n                            \n\n\n\n\nGit replacing LF with CRLF\n\n                                (27 answers)\n                            \n\nClosed 4 years ago.\n\n\n\ngit init\ngit add .\n\nGives the following warnings for many files:\n\nThe file will have its original line endings in your working directory.\nwarning: LF will be replaced by CRLF in <filename>.\n\nWhat's the difference between LF and CRLF? What should I do about the warnings?"}, {"role": "assistant", "content": "In Unix systems the end of a line is represented with a line feed (LF). In windows a line is represented with a carriage return (CR) and a line feed (LF) thus (CRLF). when you get code from git that was uploaded from a unix system they will only have an LF.\nIf you are a single developer working on a windows machine, and you don't care that git automatically replaces LFs to CRLFs, you can turn this warning off by typing the following in the git command line\ngit config core.autocrlf true\n\nIf you want to make an intelligent decision how git should handle this, read the documentation \nHere is a snippet\n\nFormatting and Whitespace\nFormatting and whitespace issues are some of the more frustrating and\n  subtle problems that many developers encounter when collaborating,\n  especially cross-platform. It\u2019s very easy for patches or other\n  collaborated work to introduce subtle whitespace changes because\n  editors silently introduce them, and if your files ever touch a\n  Windows system, their line endings might be replaced. Git has a few\n  configuration options to help with these issues.\ncore.autocrlf\n\nIf you\u2019re programming on Windows and working with people who are not\n  (or vice-versa), you\u2019ll probably run into line-ending issues at some\n  point. This is because Windows uses both a carriage-return character\n  and a linefeed character for newlines in its files, whereas Mac and\n  Linux systems use only the linefeed character. This is a subtle but\n  incredibly annoying fact of cross-platform work; many editors on\n  Windows silently replace existing LF-style line endings with CRLF, or\n  insert both line-ending characters when the user hits the enter key.\nGit can handle this by auto-converting CRLF line endings into LF when\n  you add a file to the index, and vice versa when it checks out code\n  onto your filesystem. You can turn on this functionality with the\n  core.autocrlf setting. If you\u2019re on a Windows machine, set it to true\n  \u2013 this converts LF endings into CRLF when you check out code:\n$ git config --global core.autocrlf true\n\nIf you\u2019re on a Linux or Mac system that uses LF line endings, then you\n  don\u2019t want Git to automatically convert them when you check out files;\n  however, if a file with CRLF endings accidentally gets introduced,\n  then you may want Git to fix it. You can tell Git to convert CRLF to\n  LF on commit but not the other way around by setting core.autocrlf to\n  input:\n$ git config --global core.autocrlf input\n\nThis setup should leave you with CRLF endings in Windows checkouts,\n  but LF endings on Mac and Linux systems and in the repository.\nIf you\u2019re a Windows programmer doing a Windows-only project, then you\n  can turn off this functionality, recording the carriage returns in the\n  repository by setting the config value to false:\n$ git config --global core.autocrlf false"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to change the base branch of a pull request?\n\nI created a pull request on project on GitHub to a specific remote branch. After some time, the remote branch was deleted.\nHow can I change the pull request to point to another branch (specifically master)?"}, {"role": "assistant", "content": "Updated: as Michael notes below, this is now possible:\n\nYou can now change the base branch of an open pull request. After you\u2019ve created a pull request, you can modify the base branch so that the changes in the pull request are compared against a different branch. By changing the base branch of your original pull request rather than opening a new one with the correct base branch, you\u2019ll be able to keep valuable work and discussion.\n\nClick the Edit button by the title of the pull request to reveal the base branch selector.\n\n\nOld answer\nYou can't. Just make a new pull request."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %at"}, {"role": "assistant", "content": "author date, UNIX timestamp"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  -R<remote-name>  --svn-remote <remote-name>"}, {"role": "assistant", "content": "Specify the [svn-remote \"<remote-name>\"] section to use,\nthis allows SVN multiple repositories to be tracked.\nDefault: \"svn\""}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-ls-files - Show information about files in the index and the working tree  -o  --others"}, {"role": "assistant", "content": "Show other (i.e. untracked) files in the output"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  --filters"}, {"role": "assistant", "content": "Show the content as converted by the filters configured in\nthe current working tree for the given <path> (i.e. smudge filters,\nend-of-line conversion, etc). In this case, <object> has to be of\nthe form <tree-ish>:<path> , or :<path> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I pull from another computer's repository in Git?\nFor example, I have cloned the origin repository on two computers. Then, I go ahead and make some changes and commit to the local repository of computer A. How do I now pull these changes to computer B? Both computer A and B are connected to a network. \nWhat I am looking for will be the equivalent of someone manually creating a patch and sending it to me, which I can apply to my working copy/local repo."}, {"role": "assistant", "content": "If the machine you want to pull from is accessible via ssh, you can add the repository on it as a remote via ssh, and then pull from it like you would any remote:\n$ git remote add repo_b username@host:path/to/repository.git\n$ git pull repo_b master\n\n(You can skip the step of adding a remote and just specify the full URL in the git pull command instead of a remote name, but if you're going to be pulling from the repository on a regular basis, adding it as a remote will save you lots of typing.)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-branch - List, create, or delete branches  -d  --delete"}, {"role": "assistant", "content": "Delete a branch. The branch must be fully merged in its\nupstream branch, or in HEAD if no upstream was set with --track or --set-upstream-to ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Getting docker-compose TypeError: kwargs_from_env() got an unexpected keyword argument 'ssl_version' in GitLab\n\nI'm using GitLab CICD, in docker-test stage as defined\ndocker_test: image: docker:stable services: - docker:stable-dind stage: docker-test\n...\nyesterday worked fine, but today - GitLab pipeline 'docker_test' fails with:\nTypeError: kwargs_from_env() got an unexpected keyword argument 'ssl_version'\nI've found on the internet that it could be an upgrade to 7.0.0\nhttps://docker-py.readthedocs.io/en/stable/change-log.html\nSomeone here suggested (for a different setup) downgrading to prev 6.3.1\nAfter searching - have no idea how to do that.\nMaybe there are other solutions to this?"}, {"role": "assistant", "content": "Summarising the discussion at docker-py:\nDocker1 has made a change in v7.0.0 that breaks Docker Compose v1 written in Python (pip install docker-compose available as docker-compose). It has been deprecated and replaced by Docker Compose v2 implemented in Go which comes OOB as docker compose (sub-command).\nPermanent fix: Switch to Docker Compose v2 (no extra installation required, read the migration docs to fix compatibility issues).  Docker Compose v2 switch is totally worth, btw; it is a near implementation.\nTemporary fix: Downgrade Docker1 using pip install docker==6.1.3 to the version that works with Docker Compose (v1).\n\nNote: There is a request to provide backward compatibility \u2014 not sure if it will be accepted.\nCredit: Tim Panohos's answer for the issue link.\n1. Docker's python wrapper docker-py; not the real executable docker which is written in Go."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rm - Remove files from the working tree and from the index"}, {"role": "assistant", "content": "SUBMODULES Only submodules using a gitfile (which means they were cloned\nwith a Git version 1.7.8 or newer) will be removed from the work\ntree, as their repository lives inside the .git directory of the\nsuperproject. If a submodule (or one of those nested inside it)\nstill uses a .git directory, git rm will move the submodules\ngit directory into the superprojects git directory to protect\nthe submodule\u2019s history. If it exists the submodule.<name> section\nin the gitmodules file will also be removed and that file\nwill be staged (unless --cached or -n are used). A submodule is considered up to date when the HEAD is the same as\nrecorded in the index, no tracked files are modified and no untracked\nfiles that aren\u2019t ignored are present in the submodule\u2019s work tree.\nIgnored files are deemed expendable and won\u2019t stop a submodule\u2019s work\ntree from being removed. If you only want to remove the local checkout of a submodule from your\nwork tree without committing the removal, use git-submodule deinit instead. Also see gitsubmodules for details on submodule removal."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  --exec-path[=<path>]"}, {"role": "assistant", "content": "Path to wherever your core Git programs are installed.\nThis can also be controlled by setting the GIT_EXEC_PATH\nenvironment variable. If no path is given, git will print\nthe current setting and then exit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Package management in Git for Windows (Git Bash)?\nI'm reading the github wiki for git-for-windows and it says that msys2 bundles pacman: https://github.com/git-for-windows/git/wiki/Package-management\nBut when I invoke it I get:\n$ pacman\nbash: pacman: command not found\n\nDoes anyone have an idea what is going on?\nWhich git version does this wiki refer to?\nIs there a way to install additional packages to msys2 inside Git for windows?"}, {"role": "assistant", "content": "As mentioned in issue 397:\n\nThis is intended. We do not ship pacman with Git for Windows.\nIf you are interested in a fully fledged package manager maintained environment you have to give the Git for Windows SDK a try.\n\nThe bash that you see in the latest git for Windows (2.5.3), which is a more recent bash than the old msysgit one, is only there to execute git commands.\nIt is not a full-fledged linux environment to install any third-party package.\n\nWarning: dhj reports in the comments\n\nDo not link your existing git for windows with the msys2 main system by using a directory junction.\nIf you uninstall it will decide that linked directory belongs to it and DELETE YOUR ENTIRE HOME DIRECTORY including sub-directories like \"Downloads\".\nBeware dealing with msys2.\nI don't know if the same is true for the git for windows SDK, but BE CAREFUL trying to get pacman from other systems integrated with git for windows."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Should \"node_modules\" folder be included in the git repository\nI'm wondering if we should be tracking node_modules in our repo or doing an npm install when checking out the code?"}, {"role": "assistant", "content": "The answer is not as easy as Alberto Zaccagni suggests. If you develop applications (especially enterprise applications), including node_modules in your git repo is a viable choice and which alternative you choose depends on your project.\nBecause he argued very well against node_modules I will concentrate on arguments for them.\nImagine that you have just finished enterprise app and you will have to support it for 3-5 years. You definitely don't want to depend on someone's npm module which can tomorrow disappear and you can't update your app anymore.\nOr you have your private modules which are not accessible from the internet and you can't build your app on the internet. Or maybe you don't want to depend on your final build on npm service for some reason.\nYou can find pros and cons in this Addy Osmani article (although it is about Bower, it is almost the same situation). And I will end with a quote from Bower homepage and Addy's article:\n\n\u201cIf you aren\u2019t authoring a package that is intended to be consumed by others (e.g., you\u2019re building a web app), you should always check installed packages into source control.\u201d"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitlab.com SSH connection timed out\n\ni try to get Gitlab with SSH working, but it won't.\nI have done following steps:\n1 ) generate ssh-key\nssh-keygen -t rsa -C \"[email\u00a0protected]\" -b 4096\n\n2 ) named the key \"id_rsa\" in folder /Users/myUserName/.ssh/\n3) copied the key via\npbcopy < ~/.ssh/id_rsa.pub\n\n4) insert the key into gitlab\nWhen i now try to clone a repository i receive the following error:\n$ git clone [email\u00a0protected]:myName/repositoryName/ repoName\nCloning into 'repoName'...\nssh: connect to host gitlab.com port 22: Operation timed out\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n\nWhat is going wrong?"}, {"role": "assistant", "content": "I found myself with the same problem.\nAs Adrian Dymorz describe you can check if you have access to Gitlab through SSH with the following command:\nssh [email\u00a0protected]\n\nYou should receive a response like this:\n...\nWelcome to GitLab, <Gitlab ID Account>!\nShared connection to altssh.gitlab.com closed.\n\nIf not, then betarrabara should solve your issues BUT you should not provide your id_rsa but your id_rsa.pub instead:\nHost gitlab.com\nHostname altssh.gitlab.com\nUser git\nPort 443\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/id_rsa.pub"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "GitLab 7.2.1 with Apache Server instead of Nginx\n\nI have installed GitLab 7.2.1 with the .deb package from GitLab.org for Debian 7 on a virtual server where I have root access.\nOn this virtual server I have already installed Apache, version 2.2.22 and I don't want to use Ngnix for GitLab.\nNow I have no idea where the public folders of GitLab are or what I have to do or on what I have to pay attention. \nSo my question is: How do I have to configure my vhost for apache or what do I have to do also that I can use a subdomain like \"gitlab.example.com\" on my apache web server?"}, {"role": "assistant", "content": "With two things in mind:\n\nUnicorn is listening on 8080 (you can check this with sudo netstat -pant | grep unicorn)\nYour document root is /opt/gitlab/embedded/service/gitlab-rails/public\n\nYou can create a new vhost for gitlab in apache with the following configuration:\n<VirtualHost *:80>\n  ServerName gitlab.example.com\n  ServerSignature Off\n\n  ProxyPreserveHost On\n\n  <Location />\n    Order deny,allow\n    Allow from all\n\n    ProxyPassReverse http://127.0.0.1:8080\n    ProxyPassReverse http://gitlab.example.com/\n  </Location>\n\n  RewriteEngine on\n  RewriteCond %{DOCUMENT_ROOT}/%{REQUEST_FILENAME} !-f\n  RewriteRule .* http://127.0.0.1:8080%{REQUEST_URI} [P,QSA]\n\n  # needed for downloading attachments\n  DocumentRoot /opt/gitlab/embedded/service/gitlab-rails/public\n\n</VirtualHost>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Delete branches in Bitbucket\nI've created lots of branches in one of our repositories. Those branches are for testing before it will be pulled to the master. Now I see lots of them on the list and they we will never use it again. How to delete those branches directly to Bitbucket?"}, {"role": "assistant", "content": "If the branches are only local, you can use -d if the branch has been merged, like\ngit branch -d branch-name\n\nIf the branch contains code you never plan on merging, use -D instead.\nIf the branch is in the upstream repo (on Bitbucket) you can remove the remote reference by \ngit push origin :branch-name\n\nAlso, if you're on the Bitbucket website, you can remove branches you've pushed by going to the Feature branches tab under Commits on the site. There you'll find an ellipsis icon. Click that, then choose Delete branch. Just be sure you want to drop all the changes there!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --reflog"}, {"role": "assistant", "content": "Pretend as if all objects mentioned by reflogs are listed on the\ncommand line as <commit> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-hash-object"}, {"role": "assistant", "content": "Compute object ID and optionally create an object from a file"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitlab-reconfigure blocked on redis after reinstalling gitlab on ubuntu 18.04.4LTS\n\nThis is the third time I install gitlab on server and never had issues before. \nI decide to reinstall gitlab-ce ( 12.10.0 ) after dealing with issues on 12.9.0. \nBefore installing the new version, I had ensured that all gitlab files where removed and reboot the server.\nStep1: Uninstall gitlab 12.9.0\n# gitlab-ctl stop\n# gitlab-ctl uninstall\n# apt-get remove --purge gitlab-ce\n# find / -iname \"gitlab\" then try to remove all outputed files\n# init 6\n\nStep 2: Fresh install gitlab 12.10.0\n# apt-get update\n# apt-get install gitlab-ce=12.10.0-ce.0\n\nThen I updated my /etc/gitlab/gitlab.rb file according to my server config.\nFinally, I executed:\ngitlab-ctl reconfigure\n\nThe processes was blocked on : \nruby_block[wait for redis service socket] action run\nAny solutions ?"}, {"role": "assistant", "content": "The link provided by Manuel Richarz indicated there might be different lines upon which the installation may hang, one of them being the ruby_block[wait for redis service socket] action run line your question is about.\nTheir proposed solution is to open a new terminal and run:\nsystemctl restart gitlab-runsvdir.service\n\nThis worked for me for the ruby_block[wait for logrotate service socket] action run line."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What does the warning \"redirecting to\" actually mean?\nI have noticed that sometimes when I git pull a project, there is a message saying: \n\"warning: redirecting to <url>\"\n\nI tried searching what it means but I find nothing useful. What is it?"}, {"role": "assistant", "content": "Check you remote:\ngit remote -v\n\nProbably, your remote is  https://server/../project and  does not end with .git (https://server/../project.git)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Add Github remote to GitKraken\nI'm using GitKraken (v. 1.4.1) as my Git managing tool. And now I want to use Github as a remote to back up my repos. But when I click on add remote and try to add a Github repo, it just says 'no match'\n\nDoes anybody know why this happens? (BTW: I'm using Windows 10, just in case that's relevant)"}, {"role": "assistant", "content": "Here's how it seems to work. If you have a local repo and want to connect it to github, you would use the \"URL\" option and put in the github address to set that as the remote repo for your local repo. The first time you do a pull or push on a local branch, it will ask which remote branch you want to use and that becomes the remote location to which you will pushing and pulling changes.\nThe GitHub.com option only comes into play after you have set the remote repo using the \"URL\" option. If there are multiple collaborators on a project and someone has created one or more forks of the project, then instead of \"No Match\" under the GitHub.com, you would see a list of all the forks of the project on which you are a collaborator.\nYou could then add the forked repos as the 2nd, 3rd, etc. remotes, and any activity on those forks would be displayed to you on the commit graph. This allows people to see what's going on in the forks, and you can drag and drop from the forked parts of the graph to create pull requests to the repo you first set up using \"URL\".\nIt's a nice feature, but the remote dialog could be labelled more clearly so that people would know the GitHub.com option was for adding forked repos to the commit graph display.\nYou must always use the \"URL\" option to add the 1st remote, and then the GitHub.com option only becomes available after that if there are forks to which you have access."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Push local Git repo to new remote including all branches and tags\nI have a local Git repo that I would like to push to a new remote repo (brand new repo set up on Beanstalk, if that matters).\nMy local repo has a few branches and tags, and I would like to keep all of my history.  \nIt looks like I basically just need to do a git push, but that only uploads the master branch.  \nHow do I push everything so I get a full replica of my local repo on the remote?"}, {"role": "assistant", "content": "To push all your branches, use either (replace REMOTE with the name of the remote, for example \"origin\"):\ngit push REMOTE '*:*'\ngit push REMOTE --all\n\nTo push all your tags:\ngit push REMOTE --tags\n\nFinally, I think you can do this all in one command with:\ngit push REMOTE --mirror\n\nHowever, in addition --mirror, will also push your remotes, so this might not be exactly what you want."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitglossary - A Git Glossary  symref"}, {"role": "assistant", "content": "Symbolic reference: instead of containing the SHA-1 id\nitself, it is of the format ref: refs/some/thing and when referenced,\nit recursively dereferences to this reference. HEAD is a prime example of a symref. Symbolic references\nare manipulated with the git-symbolic-ref command."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is the difference between \"git init\" and \"git init --bare\"?\nWhat is the different between git init and git init --bare? I found that a lot of blog post requires --bare for their Git server?\nFrom the man page, it said:\n\n--bare\n\nCreate a bare repository. If GIT_DIR environment is not set, it is set to the current working directory\n\nBut what does it actually mean? Is it required to have --bare for the Git server setup?"}, {"role": "assistant", "content": "Non-Bare Git Repo\nThis variant creates a repository with a working directory so you can actually work (git clone). After creating it you will see that the directory contains a .git folder where the history and all the git plumbing goes. You work at the level where the .git folder is.\nBare Git Repo\nThe other variant creates a repository without a working directory (git clone --bare). You don't get a directory where you can work. Everything in the directory is now what was contained in the .git folder in the above case.\nWhy You Would Use One vs. the Other\nThe need for git repos without a working directory is the fact that you can push branches to it and it doesn't manage what someone is working on. You still can push to a repository that's not bare, but you will get rejected as you can potentially move a branch that someone is working on in that working directory.\nSo in a project with no working folder, you can only see the objects as git stores them. They are compressed and serialized and stored under the SHA1 (a hash) of their contents. In order to get an object in a bare repository, you need to git show and then specify the sha1 of the object you want to see. You won't see a structure like what your project looks like.\nBare repositories are usually central repositories where everyone moves their work to. There is no need to manipulate the actual work. It's a way to synchronize efforts between multiple people. You will not be able to directly see your project files.\nYou may not have the need for any bare repositories if you are the only one working on the project or you don't want/need a \"logically central\" repository. One would prefer git pull from the other repositories in that case. This avoids the objections that git has when pushing to non-bare repositories."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --no-color-moved-ws"}, {"role": "assistant", "content": "Do not ignore whitespace when performing move detection. This can be\nused to override configuration settings. It is the same as --color-moved-ws=no ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Search code inside a Github project\nIs there a way to grep for something inside a Github project's code?\nI could pull the source and grep it locally, but I was wondering if it's possible through the web interface or a 3rd-party alternative.\nIdeas?"}, {"role": "assistant", "content": "Update May 2023:\n\nThe new code search and code view is now generally available (May. 2023)\n\n(As noted by holydragon in the comments, that does require to sign in to GitHub first)\n\nAt GitHub Universe last year, we announced a total redesign of GitHub's code search and navigation experience, powered by our all-new code search engine that we built from scratch.\nAnd in February, we announced our public beta.\nToday, we are rolling out this feature to all GitHub users.\n\nCheck out our blog post to learn more about how GitHub's new code search and code view can help you search, navigate, and understand your code.\nAnd if you have feedback, please share it with us in our feedback discussion.\n\n\nUpdate Dec. 2021: search has been improved again, with Search for an exact string, with support for substring matches and special characters, or regexps.\n\nBut only on cs.github.com, and still in beta (waitlist applies)\n\nUpdate January 2013: a brand new search has arrived!, based on elasticsearch.org:\nA search for stat within the ruby repo will be expressed as stat repo:ruby/ruby, and will now just workTM.\n(the repo name is not case sensitive: test repo:wordpress/wordpress returns the same as test repo:Wordpress/Wordpress)\n\nWill give:\n\nAnd you have many other examples of search, based on followers, or on forks, or...\n\nUpdate July 2012 (old days of Lucene search and poor code indexing, combined with broken GUI, kept here for archive):\nThe search (based on SolrQuerySyntax) is now more permissive and the dreaded \"Invalid search query. Try quoting it.\" is gone when using the default search selector \"Everything\":)\n(I suppose we can all than Tim Pease, which had in one of his objectives \"hacking on improved search experiences for all GitHub properties\", and I did mention this Stack Overflow question at the time ;) )\nHere is an illustration of a grep within the ruby code: it will looks for repos and users, but also for what I wanted to search in the first place: the code!\n\n\nInitial answer and illustration of the former issue (Sept. 2012 => March 2012)\nYou can use the advanced search GitHub form:\n\nChoose Code, Repositories or Users from the drop-down and\nuse the corresponding prefixes listed for that search type.\n\nFor instance, Use the repo:username/repo-name directive to limit the search to a code repository.\nThe initial \"Advanced Search\" page includes the section:\n\nCode Search:\nThe Code search will look through all of the code publicly hosted on GitHub. You can also filter by :\n\nthe language language:\nthe repository name (including the username) repo:\nthe file path    path:\n\n\nSo if you select the \"Code\" search selector, then your query grepping for a text within a repo will work:\n\n\nWhat is incredibly unhelpful from GitHub is that:\n\nif you forget to put the right search selector (here \"Code\"), you will get an error message:\n\"Invalid search query. Try quoting it.\"\n\n\n\nthe error message doesn't help you at all.\nNo amount of \"quoting it\" will get you out of this error.\n\nonce you get that error message, you don't get the sections reminding you of the right association between the search selectors (\"Repositories\", \"Users\" or \"Language\") and the (right) search filters (here \"repo:\").\nAny further attempt you do won't display those associations (selectors-filters) back. Only the error message you see above...\nThe only way to get back those arrays is by clicking the \"Advance Search\" icon:\n\n\n\n\nthe \"Everything\" search selector, which is the default, is actually the wrong one for all of the search filters! Except \"language:\"...\n(You could imagine/assume that \"Everything\" would help you to pick whatever search selector actually works with the search filter \"repo:\", but nope. That would be too easy)\n\nyou cannot specify the search selector you want through the \"Advance Search\" field alone!\n(but you can for \"language:\", even though \"Search Language\" is another combo box just below the \"Search for\" 'type' one...)\n\n\n\n\nSo, the user's experience usually is as follows:\n\nyou click \"Advanced Search\", glance over those sections of filters, and notice one you want to use: \"repo:\"\nyou make a first advanced search \"repo:jruby/jruby stat\", but with the default Search selector \"Everything\"\n=> FAIL! (and the arrays displaying the association \"Selectors-Filters\" is gone)\nyou notice that \"Search for\" selector thingy, select the first choice \"Repositories\" (\"Dah! I want to search within repositories...\")\n=> FAIL!\ndejected, you select the next choice of selectors (here, \"Users\"), without even looking at said selector, just to give it one more try...\n=> FAIL!\n\"Screw this, GitHub search is broken! I'm outta here!\"\n...\n(GitHub advanced search is actually not broken. Only their GUI is...)\n\n\nSo, to recap, if you want to \"grep for something inside a Github project's code\", as the OP Ben Humphreys, don't forget to select the \"Code\" search selector..."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "ToC or Sidebar in GitHub Wiki\n\nHow do I create a ToC or a sidebar menu in a GitHub Wiki?\nI saw some mentions of it and gollum the backend seems to support it, but how do I do it in a current GitHub project?\nIt should best be based on the headers I have in the page automatically.\nThese links all mention it, but do not show how to do it:\n\nhttps://gist.github.com/379469 - some JavaScript hack\nhttps://github.com/blog/774-git-powered-wikis-improved - GitHub mentioning it:\n\"GitHub Wikis have a little-documented ability for footers and sidebars, something which some of\nour git-based Wiki authors are familiar with. The new Wiki editor gives you limited web-based\nediting of the footers and sidebars you have on your site. \""}, {"role": "assistant", "content": "While your solution works, there's an easier way to do it using GitHub's web interface. You can simply create a page named _Sidebar and/or _Footer.\nSee detailed instructions in Github Wiki sidebar menu builder with multi-level.\nEdit The original article is gone and I can't find it in the cache so I've updated the link."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-blame"}, {"role": "assistant", "content": "Show what revision and author last modified each line of a file"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to connect local folder to Git repository and start making changes on branches?\nI'm new to source control; in the past, I've manually backed up copies of files and made changes on clones then transferred changes manually to master files once debugged. I realize this is similar to how branches work with Git repositories, however I've never used one.\nI downloaded Git and made an account on GitLab, and started a new project. My site is hosted on a local server and my files are saved locally. How do I connect these files to a Git repository and continue developing with branches?"}, {"role": "assistant", "content": "To register a project as a local Git repository the first thing you need to do is perform the following command at your project root:\ngit init\n\nThis will create a .git folder at your project root and will allow you to start using Git in that repository.\n\nIf you want to \"push\" your local Git repository to a remote Git server (in your case, to GitLab), you'll need to perform the following command first:\ngit remote add origin <Repository_Location>\n\nYou can call origin whatever you like, really, but origin is the standard name for Git remote repositories. <Repository_Location> is the URL to your remote repository. For example, if I had a new project called MyNewProject that I wanted to push to GitLab, I'd perform:\ngit remote add origin https://gitlab.com/Harmelodic/MyNewProject.git\n\nYou can then \"push\" your changes from your local machine to your remote repo using the following command:\ngit push origin <branch_name>\n\nwhere branch name is the name of the branch you want to push, e.g. master.\n\nYou can find a good beginners guide to Git here."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cherry-pick - Apply the changes introduced by some existing commits  stop"}, {"role": "assistant", "content": "The cherry-pick will stop when the commit is applied, allowing\nyou to examine the commit. This is the default behavior."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitlab issue types and how to create new ones\n\nOk, i'm using Giltab  and noticed this\n\nthen found and read this docs about issue types.\nWhat it looks like is that i can use real issue types instead labels to identify an issue as a (e.g.) bug, a proposal, a enhancement, a new feature request, etc, but i connot understand if i can create new issue types.\nIs there anyone who managed to used this feature?"}, {"role": "assistant", "content": "Good question, I too was interested in taking this approach.\nFrom doing some digging, it appears that the Type was just introduced so that Incidents can also be tracked alongside Issues. So it is not currently possible to create a Type such as \"Bug\", \"Feature\", etc like you might do in other tools like Jira. You still need to use labels for categorizing your issues."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-merge - Join two or more development histories together  rename-threshold=<n>"}, {"role": "assistant", "content": "Deprecated synonym for find-renames=<n> ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  none"}, {"role": "assistant", "content": "Disable all logging."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "ssh: Could not resolve hostname git: Name or service not known fatal: Could not read from remote repository\nAfter I switched from HTTPS to SSH for my repo then I received this error when pushing to origin master:\nssh: Could not resolve hostname git: Name or service not known\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n\nI also add my ssh in the gitlab. What should I do?"}, {"role": "assistant", "content": "I was getting the same error.\n\nThis error typically occurs when there is an issue with the SSH configuration or the Git remote repository's hostname cannot be resolved.\n\nHere, you can check your remote by running:\ngit remote -v\n\nThere are few reasons why this error occurs:\n\nIncorrect Hostname\nSSH Configuration\nNetwork Connection\nDNS Resolution\nFirewall or Proxy\n\nTypically, you can solve this by Change the [remote \"origin\"] URL value in .gitconfig or .config/git/config file\nPreviously:\nhttps://[email\u00a0protected]:userName/repo.git\n\nOR\nssh://[email\u00a0protected]:userName/repo.git\n\nNew:\n[email\u00a0protected]:userName/repo.git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_OBJECT_DIRECTORY"}, {"role": "assistant", "content": "If the object storage directory is specified via this\nenvironment variable then the sha1 directories are created\nunderneath - otherwise the default $GIT_DIR/objects directory is used."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  --name-only"}, {"role": "assistant", "content": "Show only names of changed files. The file names are often encoded in UTF-8.\nFor more information see the discussion about encoding in the git-log manual page."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "In Xcode 4 how do I add a remote GitHub repository to an existing local project?\nThe Git integration in Xcode 4 is very welcome however it seems to be a bit flaky when it comes to dealing with remote repositories.\nFor clarity I'm using OS X version 10.6.7 and Xcode 4.0.2 (4A2002a). \nIf I create a new Xcode 4 Project and accept the option to create a local Git repository, all is well. I can commit locally and that's great.\nWhen I want to push the new project to GitHub I want to add a remote repository and push my local changes up to GitHub. I can add a GitHub repository to Xcode 4 as a new Repository in the Organizer window but there's no method of setting it as a remote repository for my existing project. \nSo I switch to using git commands in Terminal.\ngit remote add origin https://<username>@github.com/<organization>/<repository>.git\n\nIf I then go back to Xcode 4 and try to use \n\nFile -> Source Control -> Push...  \n\nthen the Choose the repository to which to push changes. dialog appears listing the origin remote repository. There's a yellow indicator saying that Authentication is required, which is fine as I've not been able to enter my credentials yet for HTTPS. \nHowever when I click 'Push'  and it tries to push the changes it says \"The operation could not be performed because access to the repository 'origin' is denied.\"\nA dialog prompting me for my username and password then appears with my  pre-filled out so it must be reading this correctly from the local repository's config.\nWhen I enter my password Xcode 4 then crashes with the following error\nASSERTION FAILURE in /SourceCache/IDEKit/IDEKit-303/Framework/Classes/SourceControl/IDESourceControlOperationInfo.m:59\nDetails:  Message sent to invalidated object: <IDESourceControlPushOperationInfo, 0x200bd2a80>. Backtrace for invalidation:\n (null)\nObject:   <IDESourceControlPushOperationInfo: 0x200bd2a80>\nMethod:   -invalidate\nThread:   <NSThread: 0x200020700>{name = (null), num = 1}\nHints:   None\n\nIf I restart Xcode an origin repository has been added to the Repositories browser in Organizer and I can see the master branch on GitHub so I know the credentials are right without me changing anything.\nHas anyone found a reliable way of using Xcode 4 with GitHub starting with a local project first?\nIf I clone an existing GitHub repository with an Xcode project in it, open it with Xcode 4 then even though the first Push seems to fail, the 2nd push did then work. So maybe starting from absolute scratch with Xcode 4 creating the repository for me isn't the best pattern (until they improve the Git tooling in a later version of Xcode 4).\nEDIT WITH FURTHER DETAILS OF ONE WORKAROUND\nThis example only really applies to the first project you're adding to a GitHub repository. As such I think you're better off with the following steps, bearing in mind there still seem to be some Xcode 'gotchas' in this solution.\n\nList item\n'Connect to a repository' from Welcome to Xcode dialog.\nUse GitHub SSH URL for Location\nGive it a name (RepositoryName)and Clone to a directory\n1st attempt appears to fail even though contents are downloaded\nTry Again and it works.\nThere is now a new Repository defined in the Organizer window with its origin set to the GitHub remote SSH URL.\nCreate a New Project within the directory you just cloned into but DO NOT tick the 'Create local git repository for this project' option.\nDo initial commit to local Git repository.\nTry Source Control -> Push and Xcode 4 fails with 'The operation could not be performed because access to the repository RepositoryName was denied. Check username and password'\nTry Source Control -> Push and Xcode 4 pops up the remote Repository dialog again but this time has detected a remote Repository called origin. Next to it there's a yellow ball and 'Authentication required'.\nClicking 'Push' again caused the remote Push to work.\n\nOne thing I've spotted and not managed to work out yet is that the response messages back from GitHub with the checkin hash value and any messages seem to get reported in Xcode Log navigator as Push failures, even though the Push is successful as far as GitHub is concerned.\nAnyone else have a better solution?"}, {"role": "assistant", "content": "I think I found the Xcode way to push a existing project to GitHub or any other remote repository! \nPreconditions\n\nI assume that you have a project created by Xcode 4 with a local git repository.\nYou created an empty remote git repository (I call it RemoteRepository in in the following example)\n\nPush it to remote\n\nOpen the Organizer in Xcode an go to the Repositories tab\nAt first click on Remotes and then on \"Add Remote\" \n\nEnter a Remote Name and the Location of your remote repository and click on create \n\nThen select your project and open File -> Source Control -> Push ... \n\nSelect your remote repository and wait until it is connectable! Look for the Create in the brackets.\n\nNow your old project is published to GitHub\n\n\nI hope it will works for you also! In my case it works with every remote git repository.\nPlease contact me on twitter if something unclear or wrote in bad English!"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --name-status"}, {"role": "assistant", "content": "Show only names and status of changed files. See the description\nof the --diff-filter option on what the status letters mean.\nJust like --name-only the file names are often encoded in UTF-8."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitformat-commit-graph"}, {"role": "assistant", "content": "Git commit-graph format"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index"}, {"role": "assistant", "content": "NAME git-apply - Apply a patch to files and/or to the index"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  --index"}, {"role": "assistant", "content": "Apply the patch to both the index and the working tree (or\nmerely check that it would apply cleanly to both if --check is\nin effect). Note that --index expects index entries and\nworking tree copies for relevant paths to be identical (their\ncontents and metadata such as file mode must match), and will\nraise an error if they are not, even if the patch would apply\ncleanly to both the index and the working tree in isolation."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  --submodule[=<format>]"}, {"role": "assistant", "content": "Specify how differences in submodules are shown.  When specifying --submodule=short the short format is used.  This format just\nshows the names of the commits at the beginning and end of the range.\nWhen --submodule or --submodule=log is specified, the log format is used.  This format lists the commits in the range like git-submodule summary does.  When --submodule=diff is specified, the diff format is used.  This format shows an\ninline diff of the changes in the submodule contents between the\ncommit range.  Defaults to diff.submodule or the short format\nif the config option is unset."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can we commit on branch that's already been merged with master?\nI have a branch, say \"XYZ\", I worked and did a few commits on that branch and later merged it with my master branch. Now, I want to do some more changes in my code and want to use that same branch. I have not deleted the branch.\nCan I use the same branch again? Can I then merge the new commits with master again? Or is the only solution to create another branch?"}, {"role": "assistant", "content": "You can still work on that branch as it still exists. \nThe git-merge documentation says:\n\nIncorporates changes from the named commits (since the time their\n  histories diverged from the current branch) into the current branch.\n\nYou can continue working on your branch and then when you merge with master again, it will bring the commits that are missing on master."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Pull in changes from a Github fork\nSomeone forked a Github project of mine and made some changes. How can I merge the changes back in to my upstream version? \nAlso, is it possible to pull in just a specific commit?\nWhat I'm looking is if there is a way to pull a specific commit instead of the entire branch."}, {"role": "assistant", "content": "Pulling in a single commit would be a cherry-pick and would rewrite the commit ID (and mark you as the committer while retaining the author).  The process is pretty straightforward, though:\ngit fetch git://github.com/user/project.git\ngit cherry-pick <SHA-COMMIT-ID>\n\nYou get the SHA from the repository log, for example:\ngit log --oneline\n\nb019cc0 Check whether we have <linux/compiler.h>.\n0920898 Include <linux/compiler.h> before including <linux/usbdevice_fs.h>.\ncbf0ba1 Add DLT_DBUS, for raw D-Bus messages.\n77ed5cd Libnl 2.x returns its own error codes, not errnos; handle that.\n\nWith git cherry-pick 0920898 you bring the respective commit to your current branch."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to reject merge request in GitLab?\n\nIs there any way in GitLab UI to reject a merge request because code has issue?\nIf not what is the right way to track this?"}, {"role": "assistant", "content": "I agree with Phil Lucks. In my opinion gitlab is missing functionality. A merge request is a request and as such should be able to be rejected/denied.\nThe following thread gives insight into the thought process that was going on with Closing a request versus denying one. https://gitlab.com/gitlab-org/gitlab-foss/-/issues/23355"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PROGRESS_DELAY"}, {"role": "assistant", "content": "A number controlling how many seconds to delay before showing\noptional progress indicators. Defaults to 2."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-stash - Stash the changes in a dirty working directory away  -p  --patch"}, {"role": "assistant", "content": "This option is only valid for push and save commands. Interactively select hunks from the diff between HEAD and the\nworking tree to be stashed.  The stash entry is constructed such\nthat its index state is the same as the index state of your\nrepository, and its worktree contains only the changes you selected\ninteractively.  The selected changes are then rolled back from your\nworktree. See the \u201cInteractive Mode\u201d section of git-add to learn how to operate the --patch mode. The --patch option implies --keep-index .  You can use --no-keep-index to override this."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-pull - Fetch from and integrate with another repository or a local branch  -S[<keyid>]  --gpg-sign[=<keyid>]  --no-gpg-sign"}, {"role": "assistant", "content": "GPG-sign the resulting merge commit. The keyid argument is\noptional and defaults to the committer identity; if specified,\nit must be stuck to the option without a space. --no-gpg-sign is useful to countermand both commit.gpgSign configuration variable,\nand earlier --gpg-sign ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Remove git integrations from VSCode\nI downloaded Visual Studio Code to try out at work and I'm in love with almost everything about it. One part I am not in love with though: Git integration.\nI imported my entire working folder (~14000 source files + git items), and the layout and everything within Visual Studio Code is awesome. I moved from our traditional code editor to this, because it seemed to work a lot better for me.\nMy main issue though, is if I am working in a file and save it, Visual Studio Code freezes up for roughly 30-60 seconds. At first I was confused, but then I noticed that the Git tab was \"working.\" From my best guess, after I save a file it is traversing all ~14000 files and doing something - I'm not sure what.\nDoes anyone know if there is a way to remove Git integration from VSC, or at least have it ignore doing whatever it thinks it is doing?"}, {"role": "assistant", "content": "Add this to settings.json:\n// Whether git is enabled.\n\"git.enabled\": false,\n\nSome other commands related to Git execution:\n// Path and filename of the git executable, e.g. `C:\\Program Files\\Git\\bin\\git.exe` (Windows).\n\"git.path\": null,\n\n// When enabled, commits will automatically be fetched from the default remote of the current Git repository.\n\"git.autofetch\": false,"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-for-each-ref - Output information on each ref  HEAD"}, {"role": "assistant", "content": "* if HEAD matches current ref (the checked out branch), ' '\notherwise."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I set up autocompletion for Git commands?\nI have Git (version 1.7.2.5) bash compeletion working on my Debian squeeze (6.0). Git was installed with aptitude and I am using standard debian's bash, which supports command line autocompletion.\nNow, I just installed Git (1.5.6.5) on an other machine (Lenny/Debian 5.0) and the there is no autocompletion. \n\nWhy is Git autocomplete not working on the second machine? How do I diagnose this?\nWhat is making completion work on my machine? I have looked for the file git-completion.bash but it doesn't seem to be on my machine. How does Git complete ever work?\nHow can I bring git complete to the other machine?"}, {"role": "assistant", "content": "You need to source /etc/bash_completion.d/git to enable git auto-completion.\nIn my .bashrc it's done with:\nfor file in /etc/bash_completion.d/* ; do\n    source \"$file\"\ndone"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why does Git treat this text file as a binary file?\nI wonder why git tells me this?\n$ git diff MyFile.txt\ndiff --git a/MyFile.txt b/MyFile.txt\nindex d41a4f3..15dcfa2 100644\nBinary files a/MyFile.txt and b/MyFile.txt differ\n\nAren't they text files?\nI have checked the .gitattributes and it is empty. Why I am getting this message ?, I cannot get diffs as I use to anymore\nADDED :\nI've noticed there is an @ in the file permissions, what is this ?, Could this be the reason ?\n$ls -all\ndrwxr-xr-x   5 nacho4d  staff    170 28 Jul 17:07 .\ndrwxr-xr-x  16 nacho4d  staff    544 28 Jul 16:39 ..\n-rw-r--r--@  1 nacho4d  staff   6148 28 Jul 16:15 .DS_Store\n-rw-r--r--@  1 nacho4d  staff    746 28 Jul 17:07 MyFile.txt\n-rw-r--r--   1 nacho4d  staff  22538  5 Apr 16:18 OtherFile.txt"}, {"role": "assistant", "content": "It simply means that when git inspects the actual content of the file (it doesn't know that any given extension is not a binary file - you can use the attributes file if you want to tell it explicitly - see the man pages).\nHaving inspected the file's contents it has seen stuff that isn't in basic ascii characters. Being UTF16 I expect that it will have 'funny' characters so it thinks it's binary.\nThere are ways of telling git if you have internationalisation (i18n) or extended character formats for the file. I'm not sufficiently up on the exact method for setting that - you may need to RT[Full]M ;-) \nEdit: a quick search of SO found can-i-make-git-recognize-a-utf-16-file-as-text which should give you a few clues."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Mounting a volume for a gitlab service\n\nI'm trying to run a gitlab service running wiremock on my gitlab ci.\nI want to take my json files for configure wiremock from the repository and mount as a volume to the wiremock image that run as an service on gitlab ci\n.gitlab-ci.yml\nvariables:\n  SHARED_PATH: $CI_PROJECT_PATH/src/main/resources\n\nservices:\n    - name: wiremock/wiremock\n      alias: wiremock\n      \nimage: openjdk:11\n\ndeploy:jdk11:\n  stage: deploy\n  script:\n    - 'curl -X POST http://wiremock:8080/'\n\nI want to mount the SHARED_PATH as a volume for the wiremock service"}, {"role": "assistant", "content": "Currently there is no possibility to mount a volume.\nSee this in the Gitlab issue tracker: https://gitlab.com/gitlab-org/gitlab-runner/-/issues/28121"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to use the GitHub Actions `workflow_run` event?\n\nAnother frequently-requested feature for Actions is a way to trigger one workflow based on the completion of another workflow. For example, you may want to take the results of a CI workflow and run some further analysis.\nThe new workflow_run event enables you to trigger a new workflow when one or more workflows are requested or completed. Runs triggered by the workflow_run event always use the default branch for the repository, and have access to a read/write token as well as secrets. As an example, as a maintainer you could set up a workflow that takes the artifacts generated by the pull request workflow, do some analysis, and post comments back to the pull request.  This event is also available as a webhook and works all repos.\n\nThis is quoted from Github's blog.\nCould anybody tell me how to implement the example proposed using the new event workflow_run? The documentation only provide a very simple example:\non:\n  workflow_run:\n    workflows: [\"Run Tests\"]\n    branches: [main]\n    types: \n      - completed\n      - requested\n\nI would be very glad if someone can teach me how to achieve the example."}, {"role": "assistant", "content": "To get the example to work (i.e. to have one workflow wait for another to complete) you need two files. Both files live in the .github/workflows folder of a repository.\nThe first file would be set up as usual. This file will be triggered by whatever event(s) are set in the on section:\n---\nname: Preflight\n\non:\n  - pull_request\n  - push\n\njobs:\n  preflight-job:\n    name: Preflight Step\n    runs-on: ubuntu-latest\n    steps:\n      - run: env\n\nThe second file states that it should only trigger on the workflow_run event for any workflows with the name Preflight:\n---\nname: Test\n\non:\n  workflow_run:\n    workflows:\n      - Preflight\n    types:\n      - completed\n\njobs:\n  test-job:\n    name: Test Step\n    runs-on: ubuntu-latest\n    steps:\n      - run: env\n\nThis more-or-less the same as the example from the GitHub Actions manual.\nAs you can see on the actions page\nof my example repo, the Preflight workflow will run first. After it has completed, the Test workflow will be triggered:\n\nAs you can also see, the branch does not appear for the \"Test\" workflow.\nThis is because, (quoting from the manual):\n\n\nThis event will only trigger a workflow run if the workflow file is on the default branch.\n\nThis means that the \"Test\" workflow will run on/with the code from the default branch (usually main or master).\nThere is a workaround for this...\nEvery actions is run with a set of contexts. The github context holds information about the event that triggered the workflow. This includes the branch that the event was originally triggered from/for: github.event.workflow_run.head_branch.\nThis can be used to check out the origination branch in the action, using the actions/checkout action provided by GitHub.\nTo do this, the Yaml would be:\n---\nname: Test\n\non:\n  workflow_run:\n    workflows:\n      - Preflight\n    types:\n      - completed\n\njobs:\n  test-job:\n    name: Test Step\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n        with:\n          ref: ${{ github.event.workflow_run.head_branch }}\n      - run: git branch\n      - run: env"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs"}, {"role": "assistant", "content": "SYNOPSIS git log [<options>] [<revision-range>] [[--] <path>\u2026\u200b]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  Undo a merge or pull"}, {"role": "assistant", "content": "$ git pull (1) Auto-merging nitfol\nCONFLICT (content): Merge conflict in nitfol\nAutomatic merge failed; fix conflicts and then commit the result.\n$ git reset --hard (2) $ git pull . topic/branch (3) Updating from 41223... to 13134...\nFast-forward\n$ git reset --hard ORIG_HEAD (4) Try to update from the upstream resulted in a lot of\nconflicts; you were not ready to spend a lot of time merging\nright now, so you decide to do that later. \"pull\" has not made merge commit, so git reset --hard which is a synonym for git reset --hard HEAD clears the mess\nfrom the index file and the working tree. Merge a topic branch into the current branch, which resulted\nin a fast-forward. But you decided that the topic branch is not ready for public\nconsumption yet.  \"pull\" or \"merge\" always leaves the original\ntip of the current branch in ORIG_HEAD , so resetting hard to it\nbrings your index file and the working tree back to that state,\nand resets the tip of the branch to that commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-shortlog - Summarize git log output  --boundary"}, {"role": "assistant", "content": "Output excluded boundary commits. Boundary commits are\nprefixed with - ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  mergetool.<tool>.trustExitCode"}, {"role": "assistant", "content": "For a custom merge command, specify whether the exit code of\nthe merge command can be used to determine whether the merge was\nsuccessful.  If this is not set to true then the merge target file\ntimestamp is checked, and the merge is assumed to have been successful\nif the file has been updated; otherwise, the user is prompted to\nindicate the success of the merge."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is libintl.h and where can I get it?\nTrying to do a make install of git from source, and it keep kicking up the error:\n make install\n* new build flags or prefix\nCC credential-store.o\nIn file included from credential-store.c:1:\nIn file included from ./cache.h:8:\n./gettext.h:17:11: fatal error: 'libintl.h' file not found\n#       include <libintl.h>\n            ^\n1 error generated.\nmake: *** [credential-store.o] Error 1\n\nNo amount of Googling has turned up anything on lib.intl.h. What is this elusive library, and how can I get it so I can finally install git?"}, {"role": "assistant", "content": "FWIW on OSX with El Capitan and homebrew, I did a:\n1) I wasn't sure if the El Capitan upgrade had broken something, so first I made sure I had the latest gettext:\n$ brew reinstall gettext\n\nThen I had to re-link by doing:\n$ brew unlink gettext && brew link gettext --force\n\nAfter that, other tools were able to find it, and life went back to normal."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I pull/push from multiple remote locations?\nThe short: is there a way to have a git repo push to and pull from a list of remote repos (rather than a single \"origin\")?\nThe long: I often have a situation when I'm developing an app in multiple computers, with different connectivity \u2013 say a laptop while on transit, a computer \"A\" while I'm in a certain location, and another computer \"B\" while on another. Also, the laptop might have connectivity with only either \"A\" or \"B\", and sometimes both.\nWhat I would like to is for git to always \"pull\" from and \"push\" to all the computers it can currently connect to, so it's easier to jump from one machine to the other and continue working seamlessly."}, {"role": "assistant", "content": "Doing this manually is no longer necessary, with modern versions of git! See Malvineous's solution, below.\nReproduced here:\ngit remote set-url origin --push --add <a remote>\ngit remote set-url origin --push --add <another remote>\n\n\nOriginal answer:\nThis something I\u2019ve been using for quite a while without bad consequences and suggested by Linus Torvalds on the git mailing list.\naraqnid\u2019s solution is the proper one for bringing code into your repository\u2026 but when you, like me, have multiple equivalent authoritative upstreams (I keep some of my more critical projects cloned to both a private upstream, GitHub, and Codaset), it can be a pain to push changes to each one, every day.\nLong story short, git remote add all of your remotes individually\u2026 and then git config -e and add a merged\u2010remote. Assuming you have this repository config:\n[remote \"GitHub\"]\n    url = [email\u00a0protected]:elliottcable/Paws.o.git\n    fetch = +refs/heads/*:refs/remotes/GitHub/*\n[branch \"Master\"]\n    remote = GitHub\n    merge = refs/heads/Master\n[remote \"Codaset\"]\n    url = [email\u00a0protected]:elliottcable/paws-o.git\n    fetch = +refs/heads/*:refs/remotes/Codaset/*\n[remote \"Paws\"]\n    url = [email\u00a0protected]:Paws/Paws.o.git\n    fetch = +refs/heads/*:refs/remotes/Paws/*\n\n\u2026 to create a merged\u2010remote for \"Paws\" and \"Codaset\", I can add the following after all of those:\n[remote \"Origin\"]\n    url = [email\u00a0protected]:Paws/Paws.o.git\n    url = [email\u00a0protected]:elliottcable/paws-o.git\n\nOnce I\u2019ve done this, when I git push Origin Master, it will push to both Paws/Master and Codaset/Master sequentially, making life a little easier."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Shortcuts for git commands\nI would like to use shortcuts or aliases for git commands. \ngit diff\ngit status\ngit push \ngit pull\ngit stash\ngit branch -a\n\nHow do I create shortcuts or aliases, is there a predefined list?"}, {"role": "assistant", "content": "Put this into your .gitconfig\n[alias]\n  st = status\n  ci = commit\n  br = branch\n  co = checkout\n\nYou can add as much as you want"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Multiple ssh keys are not working\n\nOS Description: Ubuntu 14.04.3 LTS\nssh: OpenSSH_6.6.1p1 Ubuntu-2ubuntu2.3, OpenSSL 1.0.1f 6 Jan 2014\n\nI am unable to use multiple ssh key for gitlab. The error I am getting is\nGitLab: The project you were looking for could not be found.\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists. \n\nI am pretty much sure that I did everything right \nThis is my config file \nHost work gitlab.com\n    Hostname gitlab.com\n    IdentityFile ~/.ssh/ida_rsa\n    User git\n\nHost integrate gitlab.com\n    Hostname gitlab.com\n    IdentityFile ~/.ssh/ida_rsa_personal\n    User git\n\nThe keys are added automatically in ssh-agent, but to make sure I also added the key manually\n$ ssh-add -l\n2048 e7:08:d6:8c:00:28:31:f9:3f:21:4a:0f:4e:1e:ee:20 id_rsa (RSA)\n2048 ff:22:f6:90:2b:7c:9f:ed:45:41:df:79:06:de:fe:81 id_rsa_personal (RSA)\n\nMy ssh-agent is also running\n$ ssh-agent\nSSH_AUTH_SOCK=/tmp/ssh-uTC6tA5HMt1x/agent.4899; export SSH_AUTH_SOCK;\nSSH_AGENT_PID=4900; export SSH_AGENT_PID;\necho Agent pid 4900;\n\nPermissions of ssh key\n-rw-------  1 yogi yogi  1679 jun 25 15:38 id_rsa\n-rw-------  1 yogi yogi  1679 ago 25 10:53 id_rsa_personal\n-rw-r--r--  1 yogi yogi   404 ago 25 10:53 id_rsa_personal.pub\n-rw-r--r--  1 yogi yogi   391 jun 25 15:41 id_rsa.pub\n\nI added my ssh public key on gitlab.\nCould any one please tell me what I am missing ?\nNote :- \nI noticed that out of my two ssh keys, the ssh key which is on top( id_rsa - e7:08....) works fine.  \n$ ssh-add -l\n**2048 e7:08:d6:8c:00:28:31:f9:3f:21:4a:0f:4e:1e:ee:20 id_rsa (RSA)**\n2048 ff:22:f6:90:2b:7c:9f:ed:45:41:df:79:06:de:fe:81 id_rsa_personal (RSA)\n\nIf I add id_rsa_personal(ff:22..) after id_rsa, than id_rsa_personal starts working fine and id_rsa stops working.\n$ ssh-add -l\n**2048 ff:22:f6:90:2b:7c:9f:ed:45:41:df:79:06:de:fe:81 id_rsa_personal (RSA)**\n2048 e7:08:d6:8c:00:28:31:f9:3f:21:4a:0f:4e:1e:ee:20 id_rsa (RSA)\n\nI think , ssh-agent is unable to iterate through keys. It only reads first key and stops. \nIs this a bug in openssh ? If yes, any workaround ? \nThanks"}, {"role": "assistant", "content": "You need to have ~/.ssh/config file \nInside file \n# Default GitHub user\nHost github.com\n    HostName github.com\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/personalid\n\n# Work user account\nHost bitbucket.org\n    HostName bitbucket.org\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/workid\n\nDetails can be found in the link below \nhttps://confluence.atlassian.com/bitbucket/configure-multiple-ssh-identities-for-gitbash-mac-osx-linux-271943168.html\nIf the domain is same, use different Host \nHost work.gitlab.com\n    HostName gitlab.com\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/id_rsa.work\n\nHost home.gitlab.com\n    HostName gitlab.com\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/id_rsa.home\n\nClear the cache\nssh-add -D\n\nAdd all ssh keys\nssh-add ~/.ssh/id_rsa.work\nssh-add ~/.ssh/id_rsa.home\n\nAlso set your repos' url in (.git/config) accordingly as given:\nurl = [email\u00a0protected]:xxxxxxxxxx.git\nurl = [email\u00a0protected]:yyyyyyyyy.git \n\nIf your ssh config file is as what I suggested."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --tags[=<pattern>]"}, {"role": "assistant", "content": "Pretend as if all the refs in refs/tags are listed\non the command line as <commit> . If <pattern> is given, limit\ntags to ones matching given shell glob. If pattern lacks ? , * ,\nor [ , /* at the end is implied."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_PRINT_SHA1_ELLIPSIS (deprecated)"}, {"role": "assistant", "content": "If set to yes , print an ellipsis following an\n(abbreviated) SHA-1 value.  This affects indications of\ndetached HEADs ( git-checkout ) and the raw\ndiff output ( git-diff ).  Printing an\nellipsis in the cases mentioned is no longer considered\nadequate and support for it is likely to be removed in the\nforeseeable future (along with the variable)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I backport a commit in git?\nSo, I have a maintenance branch and a master branch in my project. If I make a commit in the maintenance branch and want to merge it forward to the master branch, that's easy:\ngit checkout master; git merge maintenance\n\nBut if I want to go the other way around, i.e. apply a commit made to master back to my maintenance branch, how do I do that? Is this considered cherry-picking? Will it cause problems or conflicts if I merge the maintenance branch forward again?"}, {"role": "assistant", "content": "This is exactly the use case for git-cherry-pick\ngit checkout maintenance\ngit cherry-pick <commit from master>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I specify multiple users for myself in .gitconfig?\nIn my ~/.gitconfig, I list my personal email address under [user], since that's what I want to use for Github repos.\nBut, I've recently started using git for work, too. My company's git repo allows me to commit, but when it sends out announcements of new changesets, it says they are from Anonymous because it doesn't recognize the email address in my .gitconfig - at least, that's my theory.\nIs it possible to specify multiple [user] definitions in .gitconfig? Or is there some other way to override the default .gitconfig for a certain directory? In my case, I check out all work code in ~/worksrc/ - is there a way to specify a .gitconfig for only that directory (and its subdirectories)?"}, {"role": "assistant", "content": "You can configure an individual repo to use a specific user / email address which overrides the global configuration.  From the root of the repo, run\ngit config user.name \"Your Name Here\"\ngit config user.email [email\u00a0protected]\n\nwhereas the default user / email is configured in your ~/.gitconfig\ngit config --global user.name \"Your Name Here\"\ngit config --global user.email [email\u00a0protected]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I embed a YouTube video on GitHub wiki pages?\n\nI am fairly new to markup (though it's extremely easy to pickup). I am working on a package and am trying to get the wiki pages looking nice as a help manual. I can insert a YouTube video link into the wiki page pretty easily but how do I embed a YouTube video. I know this may not be possible.\nI have read you can use HTML tags so I tried embedding with HTML per this link as follows:\n<object width=\"425\" height=\"350\">\n  <param name=\"movie\" value=\"http://www.youtube.com/user/wwwLoveWatercom?v=BTRN1YETpyg\" />\n  <param name=\"wmode\" value=\"transparent\" />\n  <embed src=\"http://www.youtube.com/user/wwwLoveWatercom?v=BTRN1YETpyg\"\n         type=\"application/x-shockwave-flash\"\n         wmode=\"transparent\" width=\"425\" height=\"350\" />\n</object>\n\nAnd saved the page but nothing happened.\n\nIs it possible to embed a YouTube video on GitHub wiki pages?\nIf so how?"}, {"role": "assistant", "content": "It's not possible to embed videos directly, but you can put an image which links to a YouTube video:\n[![IMAGE ALT TEXT HERE](https://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg)](https://www.youtube.com/watch?v=YOUTUBE_VIDEO_ID_HERE)\n\n\nFor more information about Markdown look at this Markdown cheatsheet on GitHub.\nFor more information about Youtube image links look this question."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Checkout part of a branch in Azure DevOps Pipelines (GetSources)\nMy repository in my organisation's devops project contains a lot of .net solutions and some unity projects as well. When I run my build pipeline, it fails due to several of these:\n\nError MSB3491: Could not write lines to file \"obj\\Release\\path\\to\\file\". There is not enough space on the disk.\n\nI would like the pipeline to only checkout and fetch parts of the repository that are required for a successful build. This might also help with execution time of the pipeline since it currently also fetches the whole of my unity projects with gigabytes of resources which takes forever.\nI would like to spread my projects across multiple repositories but the admin won't give me more than the one I already have. It got a lot better when I configured git fetch as shallow (--depth=1) but I still get the error every now and then.\nThis is how I configured the checkout:\nsteps:\n- checkout: self\n  clean: true\n  # shallow fetch\n  fetchDepth: 1\n  lfs: false\n  submodules: false\n\nThe build is done using VSBuild@1 task.\nI can't find a valid solution to my problem except for using multiple repositories, which is not an option right now.\nEdit: Shayki Abramczyk's solution #1 works perfectly. Here is my full implementation.\nGitSparseCheckout.yml:\nparameters:\n  access: ''\n  repository: ''\n  sourcePath: ''\n\nsteps:\n- checkout: none\n\n- task: CmdLine@2\n  inputs:\n    script: |\n      ECHO ##[command] git init\n      git init\n      ECHO ##[command] git sparse-checkout: ${{ parameters.sourcePath }}\n      git config core.sparsecheckout true\n      echo ${{ parameters.sourcePath }} >> .git/info/sparse-checkout\n      ECHO ##[command] git remote add origin https://${{ parameters.repository }}\n      git remote add origin https://${{ parameters.access }}@${{ parameters.repository }}\n      ECHO ##[command] git fetch --progress --verbose --depth=1 origin master\n      git fetch --progress --verbose --depth=1 origin master\n      ECHO ##[command] git pull --progress --verbose origin master\n      git pull --progress --verbose origin master\n\nCheckout is called like this (where template path has to be adjusted):\n- template: ../steps/GitSparseCheckout.yml\n  parameters:\n    access: anything:<YOUR_PERSONAL_ACCESS_TOKEN>\n    repository: dev.azure.com/organisation/project/_git/repository\n    sourcePath: path/to/files/"}, {"role": "assistant", "content": "In Azure DevOps you don't have option to get only part of the repository, but there is a workaround:\nDisable the \"Get sources\" step and get only the source  you want by manually executing the according git commands in a script.\nTo disable the default \"Get Sources\" just specify none in the checkout statement:\n- checkout: none\n\nIn the pipeline add a CMD/PowerShell task to get the sources manually with one of the following 2 options:\n1. Get only part of the repo with git sparse-checkout.\nFor example, get only the directories src_1 and src_2 within the test folder (lines starting with REM ### are just the usual batch comments):\n- script: |\n    REM ### this will create a 'root' directory for your repo and cd into it\n    mkdir myRepo\n    cd myRepo\n    REM ### initialize Git in the current directory\n    git init\n    REM ### set Git sparsecheckout to TRUE\n    git config core.sparsecheckout true\n    REM ### write the directories that you want to pull to the .git/info/sparse-checkout file (without the root directory)\n    REM ### you can add multiple directories with multiple lines\n    echo test/src_1/ >> .git/info/sparse-checkout\n    echo test/src_2/ >> .git/info/sparse-checkout\n    REM ### fetch the remote repo using your access token\n    git remote add -f origin https://[email\u00a0protected]/repo\n    REM ### pull the files from the source branch of this build, using the build-in Azure DevOps variable for the branch name\n    git pull origin $(Build.SourceBranch)\n  displayName: 'Get only test/src_1 & test/src_2 directories instead of entire repository'\n\nNow in the builds task make myRepo the working directory.\nFetching the remote repo using an access token is necessary, since using checkout: none will prevent your login credentials from being used.\nIn the end of the pipeline you may want to add step to clean the myRepo directory.\n2. Get parts of the repo with Azure DevOps Rest API (Git - Items - Get Items Batch)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to abort 'git commit --amend'?\nI accidentally used git commit --amend. My text editor is open and waiting for input. I know, that when I close it now (not changing the existing commit message) the commit will be amended. What can I do to abort the process? \nThis blog article says that I can simply delete the commit message and the commit will then not be valid and ignored. Is that correct? Are there alternatives?"}, {"role": "assistant", "content": "That is correct. Saving the file with no contents will abort the amend."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  Reading from a named tree"}, {"role": "assistant", "content": "The <dataref> can be a mark reference ( :<idnum> ) or the\nfull 40-byte SHA-1 of a Git tag, commit, or tree object,\npreexisting or waiting to be written.\nThe path is relative to the top level of the tree\nnamed by <dataref> . 'ls' SP <dataref> SP <path> LF"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can you create GitHub gists that live under an organization account instead of a personal account?\n\nI manage an organization https://github.com/marklogic.  I see we actually have one gist under https://gist.github.com/marklogic/ ; I can't figure out how to get any more gists there though.  Is there a way?"}, {"role": "assistant", "content": "I don't think you can currently create gists as an organization account, but in my experience, if your account was a personal account and you created a gist under that account and then upgraded the account to an organization account, the gist stays but no new gists can be created.\nAlso, seems like this answer on WebApps confirms my experience."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitlab docker registry with external nginx and omnibus\n\nI already run a gitlab server inside a docker container with an external nginx server inside an other docker container, so the gitlab nginx server is deactivated. Now I want to use the docker registry included in the gitlab server. \nI try to get the information from the administration manual: https://docs.gitlab.com/ee/administration/container_registry.html\nand use a fitted nginx config from linked file:\nhttps://gitlab.com/gitlab-org/gitlab-ce/blob/master/lib/support/nginx/registry-ssl\nto the gitlab.rb I added:\n... \nregistry_external_url 'url'\nregistry_nginx['enable'] = false\nregistry['enable'] = true\n...\n\nBut if I try to login (docker login url), I only get an 502 Bad Gateway error. I also tried some other configuration with ombinations, but gotting always the same error. Do anybody get it work? Need I to add more settings to the omnibus file or is it still not possible to use the gitlab internal docker registry with omnibus and external nginx?"}, {"role": "assistant", "content": "ok i got it work. \n## Lines starting with two hashes (##) are comments with information.\n## Lines starting with one hash (#) are configuration parameters that can be uncommented.\n##\n###################################\n##         configuration         ##\n###################################\n\nupstream docker-registry {\n server <ip_of_gitlab_docker_container>:<port_of_gitlab_container>;\n}\n\n## Redirects all HTTP traffic to the HTTPS host\nserver {\n  listen *:80;\n  server_name  sub.domain.tld;\n  server_tokens off; ## Don't show the nginx version number, a security best practice\n  return 301 https://$http_host:$request_uri;\n  access_log  /var/log/nginx/gitlab_registry_access.log;\n  error_log   /var/log/nginx/gitlab_registry_error.log;\n}\n\n\nserver {\n  # If a different port is specified in https://gitlab.com/gitlab-org/gitlab-ce/blob/8-8-stable/config/gitlab.yml.example#L182,\n  # it should be declared here as well\n  listen *:443 ssl http2;\n  server_name  sub.domain.tld;\n  server_tokens off; ## Don't show the nginx version number, a security best practice\n\n  client_max_body_size 0;\n  chunked_transfer_encoding on;\n\n  ## Strong SSL Security\n  ## https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html & https://cipherli.st/\n   ssl on;\n   ssl_certificate /etc/letsencrypt/live/sub.domain.tld/fullchain.pem;\n   ssl_certificate_key /etc/letsencrypt/live/sub.domain.tld/privkey.pem;\n\n  ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';\n  ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;\n  ssl_prefer_server_ciphers on;\n  ssl_session_cache  builtin:1000  shared:SSL:10m;\n  ssl_session_timeout  5m;\n\n  access_log  /var/log/nginx/gitlab_registry_access.log;\n  error_log   /var/log/nginx/gitlab_registry_error.log;\n\n\n    location /\n{\n     # let Nginx know about our auth file\n     proxy_pass http://docker-registry;\n     proxy_set_header Host $host; # required for docker client's sake\n     proxy_set_header X-Real-IP $remote_addr; # pass on real client's IP\n     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n     proxy_set_header X-Forwarded-Proto $scheme;\n }\n\n location /v2/ {\n     # To add basic authentication to v2 use auth_basic setting plus\n     # add_header\n     add_header 'Docker-Distribution-Api-Version' 'registry/2.0' always;\n     proxy_pass http://docker-registry;\n     proxy_set_header Host $http_host; # required for docker client's sake\n     proxy_set_header X-Real-IP $remote_addr; # pass on real client's IP\n     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n     proxy_set_header X-Forwarded-Proto $scheme;\n     proxy_read_timeout 900;\n }\n\n}\n\nMaybe the nginx configuration of Andrioshe also work, but I did some change and mix up with other configurations while trying. I think a configuration file for normal docker-regsitry will also work... will try it in future.\nBut the more important thing is the gitlab omnibus configuration.\nregistry_external_url 'https://sub.domain.tld'\nregistry['registry_http_addr'] = \"<ip_of_gitlab_docker_container>:<port_of_gitlab_container>\"\nregistry_nginx['enable'] = false\nregistry['enable'] = true\n\n\nIt is important to set the 'regsitry_http_addr' to the gitlab docker registry ip and port instead of localhost."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What happens if you force push to a branch with an existing pull request?\nI am working on a git branch that is currently part of a closed pull request on github. Subsequently to the initial pull request, I made some additional commits, pushed those commits to github, and then reverted those commits and recommitted them because I need to revise the commits. \nNow if I want to push those commits to github, I'll need to issue a force push: git push --force. But I have the strong feeling that this might cause mayhem with the existing pull request, even though the changed commits occurred after the commits that existed prior to me making the pull request.\nCan anyone describe to me how best to handle this situation? I think I may need to just create an entirely new branch and then issue a pull request on that branch instead. But if there's a way to link this to the existing pull request that would be preferable."}, {"role": "assistant", "content": "If my memory serves me correctly, then if you force push or update the branch in question in any way, GitHub will automatically update the pull request.  If doing the force push would result in the pull request not being possible, then GitHub will tell you this.\nYou do not need to worry about updating the pull request as GitHub will take care of this for you.\nThis being said, doing a git push --force on any remote branch can cause mayhem for your coworkers who are also currently working on this branch.  So you are correct to be shying away from doing a force push, but fortunately a GitHub pull request is not your biggest problem."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Where does a Git branch start and what is its length?\nEvery now and then I'm asked, on what commit a certain branch on git starts or if a certain commit has been created on a specific branch. The end point of a branch is pretty clear: that's where the branch label sits. But - where did it start? The trivial answer would be: on that commit where we created that branch. But that information is, as far as I know now, and that's why I'm asking the question, lost after the first commits. \nAs long as we know the commit where we branched off, we can draw the graph to make it clear:\nA - B - C - - - - J     [master]\n     \\\n      D - E - F - G     [branch-A]\n           \\\n            H - - I     [branch-B]\n\nI've created branch-B at commit E so that's the \"start\". I know that, because I did it. But can others recognize it the same way? We could draw the same graph like that:\nA - B - C - - - - J     [master]\n     \\\n      \\       F - G     [branch-A]\n       \\     /\n        D - E\n             \\\n              H - I     [branch-B]\n\nSo, looking at the graph now, which branch started at E, which one at B? Is commit D a member of both branches or can we clearly decide whether it belongs to branch-A or branch-B?\nThis sounds somewhat philosophical but it really isn't. Supervisors sometimes like to know, when a branch has been started (it usually marks the start of a task) and to which branch some changes belong to (to get the purpose of some change - was it required for the work) and I'd like to know if git offers infos (tools, commands) or definitions to answer those questions correctly."}, {"role": "assistant", "content": "In Git, you could say that every branch starts at the root commit, and that would be quite literally true.  But I guess that's not very helpful for you.  What you could do instead is to define \"the start of a branch\" in relation to other branches.  One way you can do this is to use\ngit show-branch branch1 branch2 ... branchN\n\nand that will show you the common commit between all specified branches at the bottom of the output (if there is, in fact, a common commit).\nHere's an example from the Linux Kernel Git documentation for show-branch\n$ git show-branch master fixes mhf\n* [master] Add 'git show-branch'.\n ! [fixes] Introduce \"reset type\" flag to \"git reset\"\n  ! [mhf] Allow \"+remote:local\" refspec to cause --force when fetching.\n---\n  + [mhf] Allow \"+remote:local\" refspec to cause --force when fetching.\n  + [mhf~1] Use git-octopus when pulling more than one heads.\n +  [fixes] Introduce \"reset type\" flag to \"git reset\"\n  + [mhf~2] \"git fetch --force\".\n  + [mhf~3] Use .git/remote/origin, not .git/branches/origin.\n  + [mhf~4] Make \"git pull\" and \"git fetch\" default to origin\n  + [mhf~5] Infamous 'octopus merge'\n  + [mhf~6] Retire git-parse-remote.\n  + [mhf~7] Multi-head fetch.\n  + [mhf~8] Start adding the $GIT_DIR/remotes/ support.\n*++ [master] Add 'git show-branch'.\n\nIn that example, master is being compared with the fixes and mhf branches. Think of this output as a table, with each branch represented by its own column, and each commit getting its own row. Branches that contain a commit will have a + or - show up in their column in the row for that commit.\nAt the very bottom of the output, you'll see that all 3 branches share a common ancestor commit, and that it is in fact the head commit of master:\n*++ [master] Add 'git show-branch'.\n\nThis means that both fixes and mhf were branched off of that commit in master.\nAlternative solutions\nOf course that's only 1 possible way to determine a common base commit in Git.  Other ways include git merge-base to find common ancestors, and git log --all --decorate --graph --oneline or gitk --all to visualize the branches and see where they diverge (though if there are a lot of commits that becomes difficult very quickly).\nOther questions from original poster\nAs for these questions you had:\n\nIs commit D a member of both branches or can we clearly decide whether it belongs to branch-A or branch-B?\n\nD is a member of both branches, it's an ancestor commit for both of them.\n\nSupervisors sometimes like to know, when a branch has been started (it usually marks the start of a task)...\n\nIn Git, you can rewrite the history of the entire commit tree(s) and their branches, so when a branch \"starts\" is not as set in stone as in something like TFS or SVN.  You can rebase branches onto any point in time in a Git tree, even putting it before the root commit!  Therefore, you can use it to \"start\" a task at any point in time in the tree that you want.\nThis is a common use case for git rebase, to sync branches up with the latest changes from an upstream branch, to push them \"forward\" in time along the commit graph, as if you had \"just started\" working on the branch, even though you've actually been working on it for a while.  You could even push branches back in time along the commit graph, if you wanted to (though you might have to resolve a lot of conflicts, depending on the branch contents...or maybe you won't).  You could even insert or delete a branch from right in the middle of your development history (though doing so would probably change the commit shas of a lot of commits).  Rewriting history is one of the primary features of Git that makes it so powerful and flexible.\nThis is why commits come with both an authored date (when the commit was originally authored), and a committed date (when the commit was last committed to the commit tree).  You can think of them as analogous to create time-date and last-modified time-date.\n\nSupervisors sometimes like to know...to which branch some changes belong to (to get the purpose of some change - was it required for the work).\n\nAgain, because Git allows you to rewrite history, you can (re)base a set of changes on pretty much any branch/commit in the commit graph that you want.  git rebase literally allows you to move your entire branch around freely (though you might need to resolve conflicts as you go, depending on where you move the branch to and what it contains).\nThat being said, one of the tools you can use in Git to determine which branches or tags contains a set of changes is the --contains:\n# Which branches contains commit X?\ngit branch --all --contains X\n\n# Which tags contains commit X?\ngit tag --contains X"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  gitworkflows"}, {"role": "assistant", "content": "An overview of recommended workflows with Git"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I reset or revert a file to a specific revision?\nHow can I revert a modified file to its previous revision at a specific commit hash (which I determined via git log and git diff)?"}, {"role": "assistant", "content": "Assuming the hash of the commit you want is c5f567:\ngit checkout c5f567 -- file1/to/restore file2/to/restore\n\nThe git checkout man page gives more information.\nIf you want to revert to the commit before c5f567, append ~1 (where 1 is the number of commits you want to go back, it can be anything):\ngit checkout c5f567~1 -- file1/to/restore file2/to/restore\n\nAs a side note, I've always been uncomfortable with this command because it's used for both ordinary things (changing between branches) and unusual, destructive things (discarding changes in the working directory).\nFor the meaning of -- in the command, refer to In Git, what does -- (dash dash) mean?\n\nThere is also a new git restore command that is specifically designed for restoring working copy files that have been modified. If your git is new enough you can use this command, but the documentation comes with a warning:\n\nTHIS COMMAND IS EXPERIMENTAL. THE BEHAVIOR MAY CHANGE.\n\nBecause git restore is experimental, it should not yet be promoted as the primary answer to this question. When the command is no longer marked as \"experimental\", then this answer can be amended to promote the use of git restore. [At the time of writing, the git restore command has been marked as \"experimental\" for at least four years.]"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Fatal: could not read username for 'https //github.com' device not configured\nI am trying to push code to github with SublimeGit plugin, but something weird occurs to me.\n\nPushing to https://github.com/username/username.github.io.git\nfatal: could not read Username for 'https://github.com': Device not configured\n\nHave been taken a lot of search before asking, like fatal: could not read Username for 'https://github.com': No such file or directory, Fatal: could not read Username for 'https://github.com': No such device or address.\nBut problem still remains, any effort will be appreciated."}, {"role": "assistant", "content": "Mac OS:\nAndroid Studio Preferences -> Git -> at bottom, Use Credentials helper (make sure it is checked)\nWindows:\nAndroid Studio File -> Settings -> Git -> Check Credentials Helper at bottom"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  %gD"}, {"role": "assistant", "content": "reflog selector, e.g., refs/stash@{1} or refs/stash@{2\nminutes ago} ; the format follows the rules described for the -g option. The portion before the @ is the refname as\ngiven on the command line (so git log -g refs/heads/master would yield refs/heads/master@{0} )."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What's the difference between working directory and local repository?\nI've created a new GitHub repository.\nI'm quite confused by working directory and local repository.\nWhen working on my own, my stuff all resides on working directory.\nBut when work with repo, I should check my stuff there.\nBut are they the same thing? or should they be separate.\nThen how to commit my stuff in working directory to my local repo.\nHow to commit my local repo to remote repo.\nHow to do this by Git Bash?\nThanks!"}, {"role": "assistant", "content": "Working directory is the directory with your source files under git control (in the root of all dirs under control .git file is present).\nGit is tracking the difference between your working directory and local repository, and between your local repository and (one of) remote repositories.\nTo see what was changed, use  $ git status.\nTo commit your changes (edits and/or new files) to the local repository, use $ git add and then $ git commit.\nTo see what was committed use $ git log.\nThen, if you want to commit your changed to the remote repository, use $ git push.\nPay attention to what git commands are printing, it often contain advice what to do. \nIf you are working with GitHub, their help is also useful: pushing to a remote.\nGood basic information is also in atlassian site.\n\nFOR EXAMPLE:\nSuppose, you initiated your git repository with $ git init in JavaRepo dir and checkouted there the project with $ git pull or $ git clone. Then JavaRepo should contain .git file (among others git dotted files) - you can check it with $ ls -a. These files itself are the local git repository, and there is no need to distinguish 'working directory' and 'local repository' directory.\nSo, start working with files in JavaRepo: say you changed file example.java and created new file example2.java. Execute  $ git status in JavaRepo (or in any its subdirs). It should show: 'modified: example.java', 'Untracked files: example2.java'. \nAdd your files to the staging area with $ git add example.java and $ git add example2.java commands from the directory with these files. (Notice that $ git add is both for changed and new files.)\nAnd finally commit your files by $ git commit -m \"example changes\" (-m stays for message - comments to the commit).\n$ git log should show this commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git status shows modifications even with autocrlf=false\nI'm experiencing the same issues as in this question: git status shows modifications, git checkout -- <file> doesn't remove them\nGit continues to show working directory modifications, even with git config --global core.autocrlf false:\nE:\\_dev\\github\\Core [master +0 ~93 -0]> git config --get-all core.autocrlf\nfalse\nfalse\n\n(Note that I've even set the --system setting to be false)\nWhy does it appear that Git is still modifying my end of lines?\nAttempts to get rid of modifications\nBaseline\nE:\\_dev\\github\\Core [master +0 ~93 -0]> git status\n# On branch master\n# Changes not staged for commit:\n#   (use \"git add <file>...\" to update what will be committed)\n#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n#\n#       modified:   tools/StatLight/StatLight.EULA.txt\n... more changes ...\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\ngit checkout -- .\nE:\\_dev\\github\\Core [master +0 ~93 -0]> git checkout -- .\nE:\\_dev\\github\\Core [master +0 ~93 -0]> git status\n# On branch master\n# Changes not staged for commit:\n#   (use \"git add <file>...\" to update what will be committed) \n#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n#\n#       modified:   tools/StatLight/StatLight.EULA.txt\n... more changes ...\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\nOccasionally this will have an effect in an odd way:\nE:\\_dev\\github\\Core [master +0 ~628 -0]> git checkout -- .\nE:\\_dev\\github\\Core [master +0 ~361 -0]> git checkout -- .\nE:\\_dev\\github\\Core [master +0 ~93 -0]> git checkout -- .\nE:\\_dev\\github\\Core [master +0 ~93 -0]> git checkout -- .\nE:\\_dev\\github\\Core [master +0 ~93 -0]> git checkout -- .\n\ngit reset --hard\nE:\\_dev\\github\\Core [master +0 ~93 -0]> git reset --hard\nHEAD is now at 11a7f9a Merge pull request #8 from RemiBou/master\nE:\\_dev\\github\\Core [master +0 ~93 -0]>\n\ngit add .; git stash; git stash drop\nE:\\_dev\\github\\Core [master +0 ~93 -0]> git add .\n... warnings ....\nwarning: CRLF will be replaced by LF in tools/StatLight/StatLight.EULA.txt.\nThe file will have its original line endings in your working directory.\n\nE:\\_dev\\github\\Core [master +0 ~93 -0]> git stash\nSaved working directory and index state WIP on master: 11a7f9a Merge pull request #8 from \nRemiBou/master\nHEAD is now at 11a7f9a Merge pull request #8 from RemiBou/master\n\nE:\\_dev\\github\\Core [master +0 ~93 -0]> git stash drop\nDropped refs/stash@{0} (de4c3c863dbad789aeaf563b4826b3aa41bf11b7)\n\nE:\\_dev\\github\\Core [master +0 ~93 -0]> git status .\\tools\\StatLight\\StatLight.EULA.txt\n# On branch master\n# Changes not staged for commit:\n#   (use \"git add <file>...\" to update what will be committed)\n#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n#\n#       modified:   tools/StatLight/StatLight.EULA.txt\n#\nno changes added to commit (use \"git add\" and/or \"git commit -a\")"}, {"role": "assistant", "content": "This seems like a bug in msysgit indeed. As a workaround, try creating a .gitattributes file containing\n* -text\n\nThis will tell git not to perform EOL conversions on any files."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "svn to git conversion: Correct remote ref must start with 'refs/' error\n\n(I'm posting this question with the intention of answering it myself as I could not find the answer elsewhere. Hopefully it will help others who run into the same issue and it will help me next time I'm trying to do it.)\nThe Challenge\nI want to convert an SVN repository to a locally hosted gitlab GIT repository and maintain history.\nThe Setup\nGitlab 8.5, Ubuntu 14.04 LTS, subversion 1.8.8\nThe Problem\nInitial attempts to convert from svn to git using git-svn or svn2git resulted in the following error.\nError\nsvn-remote.svn: remote ref '//example.com:81/svn/myrepository/trunk:refs/remotes/trunk' must start with 'refs/'\nWhat I've tried\nI've followed both guides in the external references below.\nExternal References used\n\nhttp://doc.gitlab.com/ce/workflow/importing/migrating_from_svn.html\nhttp://john.albin.net/git/convert-subversion-to-git"}, {"role": "assistant", "content": "Generate an authors.txt file. This will contain a mapping between your SVN users and your Gitlab users:\n\nFrom an existing svn repository: svn log -q | awk -F '|' '/^r/ {sub(\"^ \", \"\", $2); sub(\" $\", \"\", $2); print $2\" = \"$2\" <\"$2\">\"}' | sort -u > authors.txt\nOtherwise, manually create it following this format:\noldSVNusername = newGitlabUsername <[email\u00a0protected]>\n\nCreate a temporary directory init SVN repo\n\nmkdir temp\ncd temp\ngit svn init --no-metadata  http://username:[email\u00a0protected]:81/svn/myrepository\n\nConfigure git\n\ngit config svn.authorsfile ~/authors.txt\ngit config --global user.name myusername\ngit config --global user.email [email\u00a0protected]\n\nGrab the files and clone them into a new git repo\n\ngit svn fetch\ngit clone . ../myrepository\ncd ../myrepository\n\nSetup new repository in gitlab, make sure your user has access to it.\nAdd a remote gitlab repository\n\ngit remote add gitlab gitlab.example.com:gitlab-group/myrepository.git\n\nDouble check your configuration in myrepository/.git/config (especially the URL line)\n[core]\n   repositoryformatversion = 0\n    filemode = true\n    bare = false\n    logallrefupdates = true\n[remote \"origin\"]\n    url = /root/temp/.\n    fetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\n    remote = gitlab\n    merge = refs/heads/master\n[remote \"gitlab\"]\n    url = http://gitlab.example.com/gitlab-group/myrepository.git\n    fetch = +refs/heads/*:refs/remotes/gitlab/*\n[user]\n    name = myusername\nPush it all upstream\n\ngit push --set-upstream gitlab master\n\n\nNow you should have all the files and history converted to git and displaying in gitlab."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-parse - Pick out and massage parameters  --no-revs"}, {"role": "assistant", "content": "Do not output flags and parameters meant for git rev-list command."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to apply a patch generated with git format-patch?\nI have two local git repositories, both pointing to the same remote repository.\nIn one git repository, if I do git format-patch 1, how can I apply that patch to the other repository?"}, {"role": "assistant", "content": "Note: You can first preview what your patch will do:\nFirst the stats:\ngit apply --stat a_file.patch\n\nThen a dry run to detect errors:\ngit apply --check a_file.patch\n\nFinally, you can use git am to apply your patch as a commit. This also allows you to sign off an applied patch.\nThis can be useful for later reference.\ngit am --keep-cr --signoff < a_file.patch \n\nAs noted by riverofwind in the comments:\n\nDon't forget if you have autocrlf=false for Windows only development you'll need to pass --keep-cr to am to keep those CRLFs\n\nSee an example in this article:\n\nIn your git log, you\u2019ll find that the commit messages contain a \u201cSigned-off-by\u201d tag. This tag will be read by Github and others to provide useful info about how the commit ended up in the code."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why is git capitalizing my branch name prefix?\nI have a really straightforward set of git commands that is resulting in some curious behavior:\nShow my current local branches, and see that I'm on release/beta1:\n$ git branch\n  develop\n  master\n* release/beta1\n\nCreate a bugfix/somefeature branch from release/beta1:\n$ git checkout -b bugfix/somefeature\nSwitched to a new branch 'bugfix/somefeature'\n\nSo far so good, right? Well, show me local branches again:\n$ git branch\n  BUGFIX/somefeature\n\nThe questions:\n\nWhy did the bugfix prefix of my branch get capitalized as BUGFIX?\nRelated, why is that not marked with an asterisk as my current branch?\n\nI'm using git version 1.8.1.5 via Homebrew on OS X 10.8.2, and this happens with or without my pretty tame ~/.gitconfig in place. This happens for seemingly every bugfix/... branch."}, {"role": "assistant", "content": "Branches are stored as files within the .git directory. A single branch is a single file containing the hash to the commit object the branch points to.\nSo, as you maybe guess, when creating a branch foo/bar this will correspond to a directory with a file. So Git will create a folder foo with a file bar which then points to the commit.\nThis means when you add another branch foo/baz it will create a file baz and add that to the folder.\nNow branch names are case insensitive for case insensitive file systems. This means that FOO/bar and foo/bar are the same. But the actual internal name is taken from the original folder and file name. So when the folder for your bugfix branch category is written in upper case, then the branches are recognized with an upper case BUGFIX.\nTo fix this, just go into .git/refs/heads and change the folder name to the way you like."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-show - Show various types of objects  --cumulative"}, {"role": "assistant", "content": "Synonym for --dirstat=cumulative"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs"}, {"role": "assistant", "content": "NAME git-log - Show commit logs"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git update-index --assume-unchanged returns \"fatal unable to mark file\"\nI am having the same problem as the OP on this post, but I don't understand the answer marked as correct (I don't see that it explains how to fix the situation)\nI do this and get this error:\n$ git update-index --assume-unchanged web.config\nfatal: Unable to mark file web.config\n\n\nThe file IS added to the repository\n\nIt is NOT in .git/info/exclude\n\nIt is NOT in .gitignore (it was, but I took it out, then forced\nweb.config to be added using git add -f web.config, committed, and\npushed those changes to the repo)\n\nWhen I do git ls-files -o it is NOT there\n\n\nSo what can I do to fix?"}, {"role": "assistant", "content": "I was having the same problem as you, and had followed the same four steps that you indicated above, and had the same results. This included the fact that my file was listed when executing git ls-files -o.  However in my case, I also tried executing git update-index --assume-unchanged against a file that was not listed when executing ls-files -o, and I still received the same error \"fatal: Unable to mark file\".\nI thought that perhaps it was a bug, and downloaded the latest version of git, but this did not help.\nWhat I finally realized is that this command is case sensitive!  This includes the full path and file name.  After updating path to the directory so that the full path was specified with proper casing, the command executed properly.\nNote that this was with Git for Windows, so you're results may vary with other platforms."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I rollback a git repository to a specific commit?\nMy repo has 100 commits in it right now. I need to rollback the repository to commit 80, and remove all the subsequent ones.\nWhy?\nThis repo is supposed to be for merging from miscellaneous users. A bunch of merges went in as commits from me, due to excessive editing. That was due to a mislabeling of my remote branches, where 3 developers were labeled as each other. I need to reset to that point, and then pull forwards.\nI wanted to rebase, as in this example: How can I remove a commit on GitHub?\nHowever, git wants me to do a lot of conflict management. Is there a simpler way?"}, {"role": "assistant", "content": "git reset --hard <old-commit-id>\ngit push -f <remote-name> <branch-name>\n\nNote: As written in comments below, Using this is dangerous in a collaborative environment: you're rewriting history"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mv - Move or rename a file, a directory, or a symlink"}, {"role": "assistant", "content": "NAME git-mv - Move or rename a file, a directory, or a symlink"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gitlab - Push to a repository using access_token\n\nI implemented the oauth2 web flow in order to get access_token from users of my app. With the access_token, I would like to do the following actions:  \n\nGet user informations  \nCreate a repo for this user  \nPush code to this repo (using git push  )\n\nI already successfully get the user information(1) and create a repo(2)\nThe problem is I can't push code (3), I got \"Unauthorized\" error.  \nThe command I run:\ngit remote add origin https://gitlab-ci-token<mytoken>@gitlab.com/myuser/myrepo.git  \ngit push origin master"}, {"role": "assistant", "content": "You should do\ngit remote add origin https://<access-token-name>:<access-token>@gitlab.com/myuser/myrepo.git\n\nNote that this stores the access token as plain text in the .git\\config file.  To avoid this you can use the git credential system, providing the access token name for \"username\" and the access token for \"password\".  This should store the credentials in the git credential system in a more secure way."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository"}, {"role": "assistant", "content": "GIT URLS In general, URLs contain information about the transport protocol, the\naddress of the remote server, and the path to the repository.\nDepending on the transport protocol, some of this information may be\nabsent. Git supports ssh, git, http, and https protocols (in addition, ftp\nand ftps can be used for fetching, but this is inefficient and\ndeprecated; do not use them). The native transport (i.e. git:// URL) does no authentication and\nshould be used with caution on unsecured networks. The following syntaxes may be used with them: ssh:// [ <user> @ ] <host> [ : <port> ] / <path-to-git-repo> git:// <host> [: <port> ] / <path-to-git-repo> http [ s ] :// <host> [ : <port> ] / <path-to-git-repo> ftp [ s ] :// <host> [ : <port> ] / <path-to-git-repo> An alternative scp-like syntax may also be used with the ssh protocol: [ <user> @ ] <host> :/ <path-to-git-repo> This syntax is only recognized if there are no slashes before the\nfirst colon. This helps differentiate a local path that contains a\ncolon. For example the local path foo:bar could be specified as an\nabsolute path or ./foo:bar to avoid being misinterpreted as an ssh\nurl. The ssh and git protocols additionally support ~ <username> expansion: ssh:// [ <user> @ ] <host> [ : <port> ] /~ <user> / <path-to-git-repo> git:// <host> [ : <port> ] /~ <user> / <path-to-git-repo> [ <user> @ ] <host> :~ <user> / <path-to-git-repo> For local repositories, also supported by Git natively, the following\nsyntaxes may be used: /path/to/repo.git/ file:///path/to/repo.git/ These two syntaxes are mostly equivalent, except when cloning, when\nthe former implies --local option. See git-clone for\ndetails. git clone , git fetch and git pull , but not git push , will also\naccept a suitable bundle file. See git-bundle . When Git doesn\u2019t know how to handle a certain transport protocol, it\nattempts to use the remote- <transport> remote helper, if one\nexists. To explicitly request a remote helper, the following syntax\nmay be used: <transport> :: <address> where <address> may be a path, a server and path, or an arbitrary\nURL-like string recognized by the specific remote helper being\ninvoked. See gitremote-helpers for details. If there are a large number of similarly-named remote repositories and\nyou want to use a different format for them (such that the URLs you\nuse will be rewritten into URLs that work), you can create a\nconfiguration section of the form: [url \" <actual-url-base> \"]\n\t\tinsteadOf = <other-url-base> For example, with this: [url \"git://git.host.xz/\"]\n\t\tinsteadOf = host.xz:/path/to/\n\t\tinsteadOf = work: a URL like \"work:repo.git\" or like \"host.xz:/path/to/repo.git\" will be\nrewritten in any context that takes a URL to be \"git://git.host.xz/repo.git\". If you want to rewrite URLs for push only, you can create a\nconfiguration section of the form: [url \" <actual-url-base> \"]\n\t\tpushInsteadOf = <other-url-base> For example, with this: [url \"ssh://example.org/\"]\n\t\tpushInsteadOf = git://example.org/ a URL like \"git://example.org/path/to/repo.git\" will be rewritten to\n\"ssh://example.org/path/to/repo.git\" for pushes, but pulls will still\nuse the original URL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git shallow clone to specific tag\nI want to clone the Linux kernel repo, but only from version 3.0 onwards, since the kernel repo is so huge it makes my versioning tools run faster if I can do a shallow clone. The core of my question is: how can I tell git what the \"n\" value is for the --depth parameter? I was hoping this would work:\n\ngit clone http://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git --depth v3.0\n\nthanks."}, {"role": "assistant", "content": "How about cloning the tag to a depth of 1?\n\ngit clone --branch mytag0.1 --depth 1 https://example.com/my/repo.git\n\nNotes:\n\n--depth 1 implies --single-branch, so no info from other branches is brought to the cloned repository\nif you want to clone a local repository, use file:// instead of only the repository path"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Gitosis alternative?\nAre there alternatives to gitosis that are easier to use? \nI currently run gitosis  on a Ubuntu server for my lab.  We regularly  add new users and repos. I find the gitosis.conf syntax non-intuitive, and if I make even a minor mistake the whole gitosis system fails, see for example this question on SO.  When gitosis fails it also kills access to the git repository that contains gitosis.conf...  go figure... There must be a better way.\nI've thought about private GitHub accounts, but is there anything else that I could host locally?"}, {"role": "assistant", "content": "Gitolite might be a solution."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-blame - Show what revision and author last modified each line of a file  -t"}, {"role": "assistant", "content": "Show raw timestamp (Default: off)."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Jenkins linking to my local git repository\n\nI'm new to Jenkins and git too. I created a remote repository at github.com and made a local copy of it.\nThen I want to link it through Jenkins. I installed needed plugins for git integration, but I don't know what my local Repository URL is to set it when configuring the new project. Could someone help me where to find it?"}, {"role": "assistant", "content": "In this case, the URL should start with the file protocol followed by the path to the repository. E.g., file:///home/rbkcbeqc/dev/git/gitsandbox."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  grep.extendedRegexp"}, {"role": "assistant", "content": "If set to true, enable --extended-regexp option by default. This\noption is ignored when the grep.patternType option is set to a value\nother than default ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Merge pull request to a different branch than default, in Github\n\nA pull request comes into my repo hosted on Github. By default it is merged into the master branch.\nIs there any way for me to change which branch the changes would be merged into?"}, {"role": "assistant", "content": "As of 15.08.2016 GitHub allows changing the target branch of a pull request via the GUI. Click Edit next to the title, then select the branch from the dropdown.\n\n\nYou can now change the base branch of an open pull request. After you\u2019ve created a pull request, you can modify the base branch so that the changes in the pull request are compared against a different branch. By changing the base branch of your original pull request rather than opening a new one with the correct base branch, you\u2019ll be able to keep valuable work and discussion."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do you change the capitalization of filenames in Git?\nI am trying to rename a file to have different capitalization from what it had before:\ngit mv src/collision/b2AABB.js src/collision/B2AABB.js\nfatal: destination exists, source=src/collision/b2AABB.js, destination=src/collision/B2AABB.js\n\nAs you can see, Git throws a fit over this. I tried renaming using just the plain old mv command as well, but Git doesn't pick up the rename (as a rename or as a new untracked file).\nHow can I change a file to have a different capitalization of the same name? I am on Mac OS X v10.7.3 (Lion) with Git 1.7.9.1 using Z shell (zsh) 4.3.15."}, {"role": "assistant", "content": "Starting Git 2.0.1 (June 25th, 2014), a git mv will just work on a case-insensitive OS.\nSee commit baa37bf by David Turner (dturner-tw).\nmv: allow renaming to fix case on case-insensitive filesystems\n\"git mv hello.txt Hello.txt\" on a case-insensitive filesystem always triggers \"destination already exists\" error, because these two names refer to the same path from the filesystem's point of view and requires the user to give \"--force\" when correcting the case of the path recorded in the index and in the next commit.\n\nDetect this case and allow it without requiring \"--force\".\n\ngit mv hello.txt Hello.txt just works (no --force required anymore).\n\nThe other alternative is:\ngit config --global core.ignorecase false\n\nAnd rename the file directly; git add and commit.\nIt does work in a CMD. It might fail in a git bash (on Windows) session (see Louis-Caron's answer)\nAs noted by jaquinocode in the comments, if your local repository itself has that setting:\ngit config --local core.ignorecase false"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_INDEX_VERSION"}, {"role": "assistant", "content": "This environment variable specifies what index version is used\nwhen writing the index file out.  It won\u2019t affect existing index\nfiles.  By default index file version 2 or 3 is used. See git-update-index for more information."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is the Git equivalent for revision number?\nWe use SVN at work, but for my personal projects I decided to use Git. So I installed Git yesterday, and I wonder what is the revision number equivalent in Git.\nLet's say we work on version 3.0.8 and every bug fix has its own revision number we can use when we talk about this bug fix. So if I tag the code in Git to 3.0.8 what then I can use as a revision number or some other more detailed kind of identification? I find the hash not so user friendly for humans."}, {"role": "assistant", "content": "With modern Git (1.8.3.4 in my case) and not using branches you can do:\n$ git rev-list --count HEAD\n68\n\nBut this has all kinds of issues and might not be easy to reproduce or easy to get back to the commit hash in case you need to. So try to avoid it or use it only as a hint."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Azure DevOps - Pull Request Git \"Next steps: Manually resolve these conflicts and push new changes to the source branch.\"\nI have created a branch named dev.\nI have done a pull request to send dev code to master, when I do this pull request it tell me:\n\n50+ conflicts prevent automatic merging\n\"Next steps: Manually resolve these conflicts and push new changes to the source branch.\"\nWhere do I go from here? I just want all the dev branch to replace whatever is in master. I see no options to resolve these conflicts."}, {"role": "assistant", "content": "You will have to do the following on your PC\nOn branch dev\n$ git pull --no-rebase origin master - This will create a merge commit and you will have to resolve the conflicts in the files which are changed both on dev and master. git status will show the list of files with conflicting changes.\nAfter resolving conflicts, commit all the changes and push your branch. After that you should be able to complete the PR.\nFYI: --no-rebase makes sure that a merge is done even if the pull behavior is overwritten to default to rebase.\nHelp link for more details"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-format-patch - Prepare patches for e-mail submission  -M[<n>]  --find-renames[=<n>]"}, {"role": "assistant", "content": "Detect renames.\nIf n is specified, it is a threshold on the similarity\nindex (i.e. amount of addition/deletions compared to the\nfile\u2019s size). For example, -M90% means Git should consider a\ndelete/add pair to be a rename if more than 90% of the file\nhasn\u2019t changed.  Without a % sign, the number is to be read as\na fraction, with a decimal point before it.  I.e., -M5 becomes\n0.5, and is thus the same as -M50% .  Similarly, -M05 is\nthe same as -M5% .  To limit detection to exact renames, use -M100% .  The default similarity index is 50%."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Should I git ignore xcodeproject/project.pbxproj file?\nin a XCode project, I offen got xcodeproject/project.pbxproj file changed, but useless info for me, it for compile.\nShould I git ignore this file and xcodeproject/projectxworkspace/username.xcuserdata/UserInterfaceState.xcuserstate file?"}, {"role": "assistant", "content": "Update in the light of Swift Package Manager: If you're building a project as a Swift package - you should definitely ignore this file as it can be generated using file system as source of truth. You can do that by using the following command:\n$ cd ~/Projects/MyProjectFolder/\n$ swift package generate-xcodeproj\n\nFor non-SwiftPM answer - see below.\nThis file holds the list of all the files in the project, settings of targets and which files belong to which targets. It's probably the meatiest file in project bundle. You should not ignore this file. There are few points for this:\n\nYou may not want to work on this project alone or;\nYou're planning on working on project from different machines;\nYou'll want to share your code base with others;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can GitHub automatically merge branches?\nWe want to automatically merge out from master to another long-lived branch whenever any changes are committed to master (at the moment, this is a manual process and people forget)\nI appreciate that it may not always be possible, owing to merge conflicts, but if it is possible, we'd like it to happen automatically.\nIs this possible?"}, {"role": "assistant", "content": "You can use GitHub Actions since Aug 13, 2019\nThis method will merge your branch with the master without the requirement to create pull requests manually.\nJust create .github/workflows/automerge.yml file in your repo with this content:\nname: Automerge\n\non:\n  workflow_dispatch:\n  schedule:\n    # You can setup schedule here\n    - cron: '0 0 * * *'\n\nenv:\n  # replace \"github_username\" with your GitHub username\n  # replace \"github.com/username/repo.git\" with your GitHub repo path\n  # do NOT replace ${{secrets.GITHUB_TOKEN}}, GitHub will take care of it\n  MY_REPO: https://github_username:${{secrets.GITHUB_TOKEN}}@github.com/username/repo.git\n\n  # replace \"long-lived_branch_name\" with your branch name\n  MY_BRANCH: long-lived_branch_name\n\n  # replace it with the path to master repo\n  MASTER_REPO: https://github.com/username/master_repo.git\n\n  # replace \"master\" with your master branch name\n  MASTER_BRANCH: master\n\njobs:\n  merge:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Merge with master\n      run: |\n        git clone ${{env.MY_REPO}} -b ${{env.MY_BRANCH}} tmp\n        cd tmp\n        git config user.name \"Automerge Bot\"\n        git config user.email \"[email\u00a0protected]\"\n        git config pull.rebase false\n        git pull ${{env.MASTER_REPO}} ${{env.MASTER_BRANCH}}\n        git push\n\n\n\nreplace \"github_username\" with your GitHub username\nreplace \"github.com/username/repo.git\" with your GitHub repo path\nreplace \"long-lived_branch_name\" with your branch name\nreplace \"master\" with your master branch name\nedit \"cron\" line to adjust the schedule\n\nAlso, don't forget to enable this workflow on the \"Actions\" page of your repo. You can run it manually too. You'll receive an e-mail from GitHub if merge was failed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is it possible to set a git commit to have a timestamp prior to 1970?\nUnix timestamps are signed 32 bit integers (64 bit on some systems today, or so I understand). On some software products this allows you to use dates going back as far as 1903 or so. \nHowever, when I try the following:\ngit commit -m \"this is a test commit\" --date=\"1960-04-07 18:00:00\"\n\nI receive an \"fatal: invalid date format\" error.\nThis isn't very practical (I'm not a time-traveler), but I've been wondering about using git for historical purposes. Can this be forced with a git plumbing command? On a related note: does git always use a 32 bit timestamp, or does this depend on the environment it's built on?"}, {"role": "assistant", "content": "As far back as commit c64b9b8 (git 0.99, May 2005), time has always been referred as \n<date>\n\n\nDate in 'seconds since epoch'\n\ncommit 6eb8ae0  defines date as an unsigned long since April 2005.\nTLDR;\ndate before unix epoch can be stored, but cannot be sure to be correctly represented.\nBut that has evolved since 2014 (see at the end)\n\nTrying to represent a date before has been attempted before: see this thread\n\nThe date I'm trying to set is October 4, 1958, that is around timestamp -354808800.\nFirst technique, using the commit --date flags with ISO 8601: it says\n  \"invalid date\".\nSecond technique, described in the git ml archive, not using the porcelain:\n\ngit commit\ngit cat-file -p HEAD > tmp.txt\n# at this point, edit the file to replace the timestamp\n\ngit hash-object -t commit -w tmp.txt\n#=> 2ee8fcc02658e23219143f5bcfe6f9a4615745f9\ngit update-ref -m 'commit: foo' refs/heads/master \\\n    2ee8fcc02658e23219143f5bcfe6f9a4615745f9\n\n\nCommit date is effectively updated, but git show clamps the date to zero (Jan 1 1970). tig(1) displays 55 years ago so the actual commit date is properly stored.\nLast issue: when trying to push this commit to a remote repository:\n\n#=> remote: error: object 2ee8fcc02658e23219143f5bcfe6f9a4615745f9:invalid\n#       author/committer line - bad date\n#=> remote: fatal: Error in object\n#=> error: unpack failed: index-pack abnormal exit\n\n\nFinally, when running test-date from git sources:\n\n./test-date show -354808800\n#=> -354808800 -> in the future\n\n\nThe discussion at the time mentioned:\n\nI am not sure there isn't some unportability at the lowest level.\n  We freely interchange between time_t and unsigned long in the low-level date code. It probably happens to work because casting the bits back and forth between signed and unsigned types generally works, as long as you end up with the type that you want.\n  But it isn't necessarily portable, and there can be subtle bugs. See, for example, my recent 9ba0f033.\nThe good news that this is purely a code problem. The data format is fine. It would just take somebody going through the code and switching all \"unsigned long\" to \"long long\" (or time_t, or even \"gittime_t\" if we want to abstract it).\nand fixing the parser algorithm at least in tm_to_time_t()\nIt is not just \"sed s/unsigned long/long long\", but rather checking every change to make sure that you aren't introducing new bugs, and that the code correctly handles signed\n  types.\n  Which is why nobody has done it. ;)\n\n\nAs I mentioned in 2017, in \"Use future date while making git commits\", Git has started to adopt a different and dedicated timestamp_t type.\nAs illustrated in Legilibre/Archeo-Lex issue 47:\n\nDates are now using the timestamp_t type, defined as typedef uintmax_t timestamp_t;, in place of unsigned long type, in order to fix some issues on 32bits platforms... and Windows 64 bits ^^.\n\nThe project archeo-lex.fr (which depends on older dates) is using git hash-object, combined with the Git repo viewer Legilibre/Archeo-Lex-web.\nThis is now (Feb. 2019) done, as commented by Seb35"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to set patience as default git diff algorithm\nIn .git/config I tried:\n[diff]\n    patience = true\n\nBut no luck\nDo I have to do:\ngit diff --patience\ngit show --patience HEAD\n\netc., every time?"}, {"role": "assistant", "content": "Since Git 1.8.2, Git will use diff.algorithm:\ngit config --global diff.algorithm patience\n\nIt took a few iterations:\n\n[PATCH v3 0/3] Rework git-diff algorithm selection\n[PATCH v2 0/3] Rework git-diff algorithm selection\n[PATCH 0/3] Rework git-diff algorithm selection\n[PATCH] diff: Introduce diff.algorithm variable.\n[PATCH] config: Introduce --patience config variable"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  transfer.hideRefs"}, {"role": "assistant", "content": "String(s) receive-pack and upload-pack use to decide which\nrefs to omit from their initial advertisements.  Use more than\none definition to specify multiple prefix strings. A ref that is\nunder the hierarchies listed in the value of this variable is\nexcluded, and is hidden when responding to git push or git\nfetch .  See receive.hideRefs and uploadpack.hideRefs for\nprogram-specific versions of this config. You may also include a ! in front of the ref name to negate the entry,\nexplicitly exposing it, even if an earlier entry marked it as hidden.\nIf you have multiple hideRefs values, later entries override earlier ones\n(and entries in more-specific config files override less-specific ones). If a namespace is in use, the namespace prefix is stripped from each\nreference before it is matched against transfer.hiderefs patterns. In\norder to match refs before stripping, add a ^ in front of the ref name. If\nyou combine ! and ^ , ! must be specified first. For example, if refs/heads/master is specified in transfer.hideRefs and\nthe current namespace is foo , then refs/namespaces/foo/refs/heads/master is omitted from the advertisements. If uploadpack.allowRefInWant is set, upload-pack will treat want-ref refs/heads/master in a protocol v2 fetch command as if refs/namespaces/foo/refs/heads/master did not exist. receive-pack , on the other hand, will still advertise the object id the\nref is pointing to without mentioning its name (a so-called \".have\" line). Even if you hide refs, a client may still be able to steal the target\nobjects via the techniques described in the \"SECURITY\" section of the gitnamespaces man page; it\u2019s best to keep private data in a\nseparate repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-remote - Manage set of tracked repositories  get-url"}, {"role": "assistant", "content": "Retrieves the URLs for a remote. Configurations for insteadOf and pushInsteadOf are expanded here. By default, only the first URL is listed. With --push , push URLs are queried rather than fetch URLs. With --all , all URLs for the remote will be listed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "'git diff' doesn't give any output\nIf I run git diff I would expect to see a list of changes of my working directory relative to whatever had been committed before (or a list of the working directory contents if it's a new repository with no commits). Try this example:\n$ mkdir temp\n$ cd temp\n$ git init\n$ echo \"first line\" > test.txt\n$ git status\n# On branch master\n# Untracked files:\n#   (use \"git add <file>...\" to include in what will be committed)\n#\n#       test.txt\nnothing added to commit but untracked files present (use \"git add\" to track)\n\nLet's see a diff of test.txt:\n$ git diff\n\nThis doesn't give any output!\nI would expect to see a diff like + first line, but instead I get nothing. It doesn't tell me what's going on. People on Stack\u00a0Overflow tell me to git add some files so I do:\n$ git add .\n$ git diff\n\nStill nothing!\nGit GUI shows the changes.\ngit status -v shows the changes.\nBut for some reason git diff doesn't show anything.\nSo my questions are:\n\nHow, in plain English, does git diff work?\nHow can I show a diff of all the changes I've made (unstaged and staged)?\n\nSome people at my company are using Git, but the SVN crowd are going to point at this as a case of where Git is too confusing to be usable."}, {"role": "assistant", "content": "Why do you get no git diff output before adding?\nGit does not treat files in the filesystem as automatically included in the version control system. You have to add things explicitly into the Git repository (as you are doing by adding the current directory with git add .).\nThere is no output to git diff because Git doesn't see any changes inside your repository, only files outside the repository, which it considers 'untracked' and so ignores when generating a diff.\nI found this one of the key differences to version control systems like SVN (along with staging and ignoring directories).\nIf you want the untracked files to be included, git add them.\nIf you don't want them in your repository, add them to your .gitignore (see git ignore --help). This is good for C object files or Python .pyc files.\nWhy don't I get git diff output after adding?!\nSo this is slightly different. If you do git status you will see the file is now in the staging area. This is the area for files that you are about to commit.\nWhen you git add a new file into the Git repository, it skips the working copy and goes straight into the staging area. This make sense in a way, and git add always moves files into staging area whether it is tracked or untracked.\nTo see the differences between the last check in and the staging area do git diff --cached.\nTo see the differences between the staging area and your working copy, do git diff. If there is nothing in the staging area then this is the same as doing a diff between the last check in and your working copy."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-upload-archive"}, {"role": "assistant", "content": "Send archive back to git-archive"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  Comparing branches"}, {"role": "assistant", "content": "$ git diff topic master (1) $ git diff topic..master (2) $ git diff topic...master (3) Changes between the tips of the topic and the master branches. Same as above. Changes that occurred on the master branch since when the topic\nbranch was started off it."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  GIT_COMMITTER_EMAIL"}, {"role": "assistant", "content": "The email address used in the author identity when creating commit or\ntag objects, or when writing reflogs. Overrides the user.email and committer.email configuration settings."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git command to checkout any branch and overwrite local changes\nIs there a Git command (or a short sequence of commands) that will safely and surely do the following?\n\nGet rid of any local changes.\nFetch the given branch from origin if necessary\nCheckout the given branch?\n\nCurrently I'm stuck with:\ngit fetch -p\ngit stash\ngit stash drop\ngit checkout $branch\ngit pull\n\nbut it's bothering me because I'm asked for password two times (by fetch and pull). Generally I would be happy with any solution as long as the password is needed only once.\nA couple of notes:\n\nIt's a part of homebrewed deployment script for an application (the code is hosted on GitHub).\nThere should be no difference if the branch was already fetched from origin or not (i.e. the first deployment of a new branch shouldn't ideally require any additional steps).\nThe script is located on a remote machine that can be accessed by several people, hence no credentials are stored and user/password must be entered (but only once if possible).\nI don't care about any local changes; I always want a pristine copy of the given branch (the further part of deployment script produces local changes).\nI can't clone or export a fresh repository each time; it takes too much time."}, {"role": "assistant", "content": "You could follow a solution similar to \"How do I force \u201cgit pull\u201d to overwrite local files?\":\ngit fetch --all\ngit reset --hard origin/abranch\ngit checkout abranch \n\nThat would involve only one fetch.\nWith Git 2.23+, git checkout is replaced here with git switch (presented here) (still experimental).\ngit switch -f $branch\n\n(with -f being an alias for --discard-changes, as noted in Jan's answer)\n\nProceed even if the index or the working tree differs from HEAD.\nBoth the index and working tree are restored to match the switching target.\n\n\nIf you do not want to switch branch, but only restore a folder from another branch, then git restore is the other command which replaces the old obsolete and confusing git checkout.\nI presented git restore here.\ngit restore --source=anotherBranch --staged] [--worktree -- aFolder\n# or, shorter:\ngit restore -s anotherBranch -SW -- aFolder"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "A pretty and feature rich Git GUI for Linux [closed]\nClosed. This question is seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. It does not meet Stack Overflow guidelines. It is not currently accepting answers.\n                                \n                            \n\n\n\n\n\n\n\n\n\n\n\n We don\u2019t allow questions seeking recommendations for software libraries, tutorials, tools, books, or other off-site resources. You can edit the question so it can be answered with facts and citations.\n\n\nClosed 7 years ago.\n\n\n\n\n\n\n\n                        Improve this question\n                    \n\n\n\nI was checking out for a rich GUI for Git on Linux. As of late, I have started using it a lot and find that even though command-line is very useful, I would still want a GUI at my disposal since I am not still very much aware with the advanced features.\nI came across this question on Stack\u00a0Overflow before, but I still have to ask this question again, as that question doesn't have my answer\n\nI have used git-cola and gitk, but they look half-baked and gitk looks like I am working on some other desktop environment. All the features I require in gitGUI is not in either of them.\n\nI tried giggle, but it is more useful for watching diffs\n\nI tried QGit, but it is not fully complete.\n\n\nNow let me tell how I want a foo-Git-GUI to look like:\n\nYou can have a look at Bzr Explorer. It is highly usable and has many more features than many of the above mentioned GUIs\n\nIs there any Git GUI which looks like the above example I posted above?"}, {"role": "assistant", "content": "I find myself using mainly gitg in combination with the command line for more complicated tasks.\nSource repository: http://git.gnome.org/browse/gitg.\nRecently, a new version 0.3.2 has been released, which is a rewrite using Vala. It's not yet feature-complete compared to the old 0.2 series, but the refactor is expected to speed up future development.\nAlso, there are normally PPAS on Launchpad which contain a more up-to-date version than the standard repository."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git reset to previous commit\nI have three commits I made which I attempted to clean up some code. Anyways I managed to completely destroy what I was working on. And I want to delete the past three commits and return to a specific commit SHA1.\nHow can I restore to that previous commit and delete the history of those 3 commits? (The history deleting part is not a big deal). These commits are pushed already, so I am a little lost.\nThanks!"}, {"role": "assistant", "content": "Find the commit you want to reset to:    \ngit log\n\nOnce you have the hash:\ngit reset --hard <hash>\n\nAnd to push onto the remote:\ngit push -f <remote> <branch>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a way to tell git-status to ignore the effects of .gitignore files?\nI have configured numerous .gitignore files to filter out many different unwanted files from a set of about 6,000 untracked files. I want to do git add . when I've got my filtered list looking the way I want it.\nBut, then I want to disable the .gitignore filters temporarily to see what got left behind, and make sure there was nothing important accidentally filtered.\nI know that git-clean includes an option to ignore .gitignore files. Is there a similar option for git-status?\nI could go through and delete all the .gitignore files, do the check, then restore them, but it seems there should be an easier way?"}, {"role": "assistant", "content": "This option --ignored does the trick:\ngit status --ignored\n\n\n(Update 1) I found the --ignored option alone doesn't work in certain git installations, perhaps it's a git bug. In those cases, an additional -s works for me:\ngit status -s --ignored\n\n(Update 2)\nOne user reported --ignored option is not supported in git version 1.7.0.4. My git version is 1.7.6. Another version 1.7.5.1 is the one that requires -s. You may try \ngit status -h\n\nto see if --ignored is supported."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-verify-pack - Validate packed Git archive files"}, {"role": "assistant", "content": "SYNOPSIS git verify-pack [-v | --verbose] [-s | --stat-only] [--] <pack>.idx\u2026\u200b"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "'ssh-keygen' is not recognized as an internal or external command\n\nI run git push -u origin master\nIt tells me that \"Permission denied (public key) fatal: The remote end hung up unexpectedly\"\nThen I looked up on the internet and found that I had to generate an ssh key for my account on GitHub. However, upon doing so, when I tried to do ssh-keygen -t rsa \"[email\u00a0protected]\" it simply said ssh-keygen is not recognized. I tried doing mkdir C:\\ssh but that didn't work. If it helps I'm using Ruby Rails and I'm on a Windows computer. Could anyone help me?"}, {"role": "assistant", "content": "2012:\nssh-keygen.exe is part of msysgit:\n C:\\path\\to\\msysgit1.7.11\\bin\\ssh-keygen.exe\n\nif your %PATH% includes C:\\path\\to\\msysgit1.7.11\\bin\\, you will have ssh-keygen. \n\nUpdate 2015:\nssh-keygen.exe is part of Git For Windows, whose releases include PortableGit-2.4.3.1-2nd-release-candidate-64-bit.7z\nc:\\path\\to\\PortableGit-2.4.3.1-2nd-release-candidate-64-bit\\usr\\bin\\ssh-keygen.exe\n\nThat means the %PATH% must include c:\\path\\to\\PortableGit-2.4.3.1-2nd-release-candidate-64-bit\\usr\\bin (without the ssh-keygen.exe)\nAs I explained before, Git for Windows will soon phase out msysgit.\nI detailed in \"Why is it that if you download Git 2.0 from the net, you always get a 1.9.4 installer package?\" how this new version is based on the more recent msys2 project."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to integrate UML diagrams into GitLab or GitHub\nI want to publish some programming documentation I have in a public available repository. This documentation has formatted text, some UML diagrams, and a lot of code examples. I think that GitHub or GitLab are good places to publish this.\nTo publish the UML diagrams, I would like to have some easy way to keep them updated into the repository and visible as images in the wiki. I don't want to keep the diagrams in my computer (or on the cloud), edit them, generate an image, and then publish it every time.\nIs there a way to put the diagrams in the repository (in PlantUML syntax would be ideal), link them in the markdown text, and make the images auto-update every time the diagram is updated?"}, {"role": "assistant", "content": "Edit: Alternative with Proxy service\nThis way is significantly different and simpler than the answer below; it uses the PlantUML proxy service:\nhttp://www.plantuml.com/plantuml/proxy?cache=no&src=https://raw.github.com/plantuml/plantuml-server/master/src/main/webapp/resource/test2diagrams.txt\n\nThe GitHub markdown for this would be:\n![alternative text](http://www.plantuml.com/plantuml/proxy?cache=no&src=https://raw.github.com/plantuml/plantuml-server/master/src/main/webapp/resource/test2diagrams.txt)\n\nThis method suffers from not being able to specify the SVG format (it defaults to PNG), and it is perhaps not possible to work-around the caching bug mentioned in the comments.\n\nAfter trying the other answer, I discovered the service to be slow and seemingly not up to the latest version of PlantUML.\nI've found a different way that's not quite as straightforward, but it works via  PlantUML.com's server (in the cloud). As such, it should work anywhere you can hotlink to an image.\nIt exploits the !includeurl function and is essentially an indirection. The markdown file links to a PlantUML source that includes the diagram's source. This method allows modifying the source in GitHub, and any images in the GitHub markdown files will automatically update. But it requires a tricky step to create the URL to the indirection.\n\n\nGet the URL to the raw PlantUML source, e.g., https://raw.githubusercontent.com/linux-china/plantuml-gist/master/src/main/uml/plantuml_gist.puml (using the example in the joanq's answer)\n\nGo to http://plantuml.com/plantuml/form (or PlantText.com) and create a one-line PlantUML source that uses the !includeurl URL-TO-RAW-PLANTUML-SOURCE-ON-GITHUB operation. Continuing with the example URL, the PlantUML (meta)source is:\n!includeurl https://raw.githubusercontent.com/linux-china/plantuml-gist/master/src/main/uml/plantuml_gist.puml\n\n\nCopy the image URL from PlantUML.com's image, e.g., http://plantuml.com:80/plantuml/png/FSfB2e0m303Hg-W1RFPUHceiDf36aWzwVEl6tOEPcGGvZXBAKtNljW9eljD9NcCFAugNU15FU3LWadWMh2GPEcVnQBoSP0ujcnS5KnmaWH7-O_kEr8TU and paste it into your GitHub markdown file. This URL won't change.\n![PlantUML model](http://plantuml.com:80/plantuml/png/3SNB4K8n2030LhI0XBlTy0YQpF394D2nUztBtfUHrE0AkStCVHu0WP_-MZdhgiD1RicMdLpXMJCK3TC3o2iEDwHSxvNVjWNDE43nv3zt731SSLbJ7onzbyeF)\n\n\n\nBonus: You can even get access to the SVG format by modifying the plantuml/png/ part of the URL to be plantuml/svg/ as follows\n![PlantUML model](http://plantuml.com:80/plantuml/svg/3SNB4K8n2030LhI0XBlTy0YQpF394D2nUztBtfUHrE0AkStCVHu0WP_-MZdhgiD1RicMdLpXMJCK3TC3o2iEDwHSxvNVjWNDE43nv3zt731SSLbJ7onzbyeF)\n\nExample on GitHub\nhttps://github.com/fuhrmanator/course-activity-planner/blob/master/ooad/overview.md\nCaveat with private repos\nAs davidbak pointed out in a comment, the raw file in a private repo will have a URL with token=<LONGSTRINGHERE> in it, and this token changes as the source file updates. Unfortunately, the markdown breaks when this happens, so you have to update the Readme file after you commit the file to GitHub, which is not a great solution."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to create repository badges in gitlab?\n\nHow do I create badges for my project in gitlab?\nI know there is a webpage for it here https://docs.gitlab.com/ee/user/project/badges.html\nbut I have no idea what they are saying.\nsuppose my project is here\nhttps://gitlab.com/username/userproject\nwhat should be the link and the badge image link?"}, {"role": "assistant", "content": "There are two default badges: Pipeline and Coverage.\nThe example URLs would be:\nhttps://gitlab.com/username/userproject/badges/master/pipeline.svg\nhttps://gitlab.com/username/userproject/badges/master/coverage.svg\n\n\nFor pipeline you have to set up a buildserver pipeline (.gitlab-ci.yml).\nFor coverage you have to enter a regex parsing expression in the settings for CI.\n\nBut you can also set up custom badges. But you have to create them on your own.\nFor public repos you can use an service like Shields.io or private repos you can use AnyBadge (needs an python interpreter in build chain.\nHere is an example how to set up a custom badge: Adding Custom badges to Gitlab\nWhen you look at bigger repositories (for example this), you can have a look at the path of the images and see where they are created."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  dimmed-zebra"}, {"role": "assistant", "content": "Similar to zebra , but additional dimming of uninteresting parts\nof moved code is performed. The bordering lines of two adjacent\nblocks are considered interesting, the rest is uninteresting. dimmed_zebra is a deprecated synonym."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-svn - Bidirectional operation between a Subversion repository and Git  --add-author-from"}, {"role": "assistant", "content": "When committing to svn from Git (as part of set-tree or dcommit operations), if the existing log message doesn\u2019t already have a From: or Signed-off-by trailer, append a From: line based on the\nGit commit\u2019s author string.  If you use this, then --use-log-author will retrieve a valid author string for all commits. config key: svn.addAuthorFrom"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What's the difference between git reset --mixed, --soft, and --hard?\nI'm looking to split a commit up and not sure which reset option to use.\nI was looking at the page In plain English, what does \"git reset\" do?, but I realized I don't really understand what the git index or staging area is and thus the explanations didn't help.\nAlso, the use cases for --mixed and --soft look the same to me in that answer (when you want to fix and recommit). Can someone break it down even more?  I realize --mixed is probably the option to go with, but I want to know why. Lastly, what about --hard?\nCan someone give me a workflow example of how selecting the 3 options would happen?"}, {"role": "assistant", "content": "When you modify a file in your repository, the change is initially unstaged. In order to commit it, you must stage it\u2014that is, add it to the index\u2014using git add. When you make a commit, the changes that are committed are those that have been added to the index.1\ngit reset changes, at minimum, where the current branch2 is pointing. The difference between --mixed and --soft is whether or not your index is also modified. So, if we're on branch master with this series of commits:\n- A - B - C (master)\n\nHEAD (the current commit) is C3 and the index matches C (assuming we haven't staged any changes with git add).\nWhen we run git reset --soft B, master (and thus HEAD, indirectly) now points to B, but the index still has the changes from C; git status will show them as staged. So if we run git commit at this point, we'll get a new commit with the same changes as C.\n(If we did have staged changes before the reset, those will still be in the index and git commit would commit those changes in addition to the changes from C.)\n\nOkay, so starting from here again:\n- A - B - C (master)\n\nNow let's do git reset --mixed B. (--mixed is the default option, so this is equivalent to git reset B). Once again, master and HEAD point to B, but this time the index is also modified to match B. If we run git commit at this point, nothing will happen since the index matches HEAD. We still have the changes in the working directory, but since they're not in the index, git status shows them as unstaged. To commit them, you would git add and then commit as usual.\n(This time, if we had staged changes before the reset, those changes will be removed from the index, but the files themselves will still contain any changes that were made.)\n\nAnd finally, --hard is the same as --mixed (it changes your HEAD and index), except that --hard also modifies your working directory. If we're at C and run git reset --hard B, then the changes added in C, as well as any uncommitted changes you've made, will be removed, and the files in your working copy will match commit B. Since you can permanently lose changes this way, you should always run git status before doing a hard reset to make sure your working directory is clean or that you're okay with losing your uncommitted changes.\n\nIn each of the above cases, we specified a commit (B) to reset to. If you don't provide one, it uses HEAD as the default. git reset --soft with no commit specified doesn't do anything (it makes the current branch point to where it was already pointing), but it can be useful for the other two modes. git reset --mixed (or just git reset) updates the index to match the current commit, which has the effect of unstaging any changes that have been added but not committed; git reset --hard does the same, plus it removes any changes in your working directory so that all your files match the latest commit on your current branch. (Again, since those changes are permanently lost, you should be careful when doing a hard reset.)\n\n1 The index is also referred to as the \"staging area\". You can think of it as another copy of all the files in the repository. When a branch is checked out, the index is updated so that all its files match the contents of that branch. When you git add a file, any changes you made to that file are copied to the index, and when you git commit, the contents of the index are turned into a commit and added to the current branch.\n2 HEAD is how Git refers to the commit that is currently checked out. HEAD (in most cases) points to a specific branch, called the current branch, and that branch points to a specific commit.\n3 Because HEAD points to master and master points to C. Whenever we add or remove a commit on the current branch, the commit that HEAD refers to changes not because HEAD itself changed, but because the branch that HEAD points to was updated to point to that commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "fatal: The upstream branch of your current branch does not match the name of your current branch\nAfter doing a checkout of the remote branch releases/rel_5.4.1 using the Git GUI, I'm seeing this unexpected error message when I try to push:\nfatal: The upstream branch of your current branch does not match\nthe name of your current branch.  To push to the upstream branch\non the remote, use\n\n    git push origin HEAD:releases/rel_5.4.1\n\nTo push to the branch of the same name on the remote, use\n\n    git push origin rel_5.4.1\n\nI don't know what Git is talking about. I probably want to push to origin releases/rel_5.4.1 since that's the branch which I checked out. So neither option seems correct to me.\ngit status says I'm on branch rel_5.4.1.\nHere is the branch as it appears in my .git/config:\n[branch \"rel_5.4.1\"]\n    remote = origin\n    merge = refs/heads/releases/rel_5.4.1\n\nWhat is going on?"}, {"role": "assistant", "content": "This happens if the name of the upstream branch and local branch do not match, which sometimes happens, and usually is unwanted:\n> git status\nOn branch release-1.2.3\nYour branch is up to date with 'origin/master'.\n\nTo solve this, run:\ngit branch --unset-upstream\n\nThen, once you run git push again, you will be asked to use the --set-upstream option to set the upstream branch correctly."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Prevent git from asking for the GnuPG password during signing a commit\nGit always asks me to enter a passphrase to unlock my secret key while signing a commit using.\ngit commit -S -m 'message'\n\nHow can I store in cache the password so that I don't have to enter it each and every time while signing the commit"}, {"role": "assistant", "content": "Git never gets hold of the GnuPG passphrase. You must rely on GnuPG's capabilities of caching passphrases, which happens through gpg-agent which are easily set up by editing ~/.gnupg/gpg-agent.conf (hidden somewhere in your AppData folder in Windows).\nSet default-cache-ttl to the number of seconds the passphrase is cached after each invocation of GnuPG. maximum-cache-ttl sets the time after the passphrase was initially entered at which the cache is wiped. Make sure ignore-cache-for-signing is not set -- otherwise GnuPG will ignore the cache for signing operations.\nIf you want to sign commits without any user interaction, you can prefill the cache through gpg-preset-passphrase, often hidden somewhere in a location like /usr/lib/gnupg2/gpg-preset-passphrase; or by running an arbitrary decryption or signing operation. You might also configure git to use an option like --passphrase [your passphrase] to be passed to gpg, but read up on the restrictions and security implications of this approach (it involves your passphrase being stored in plaintext somewhere).\nFull list of options is here."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-reset - Reset current HEAD to the specified state  git reset [<mode>] [<commit>]"}, {"role": "assistant", "content": "This form resets the current branch head to <commit> and\npossibly updates the index (resetting it to the tree of <commit> ) and\nthe working tree depending on <mode> . Before the operation, ORIG_HEAD is set to the tip of the current branch. If <mode> is omitted,\ndefaults to --mixed . The <mode> must be one of the following: --soft Does not touch the index file or the working tree at all (but\nresets the head to <commit> , just like all modes do). This leaves\nall your changed files \"Changes to be committed\", as git status would put it. --mixed Resets the index but not the working tree (i.e., the changed files\nare preserved but not marked for commit) and reports what has not\nbeen updated. This is the default action. If -N is specified, removed paths are marked as intent-to-add (see git-add ). --hard Resets the index and working tree. Any changes to tracked files in the\nworking tree since <commit> are discarded.  Any untracked files or\ndirectories in the way of writing any tracked files are simply deleted. --merge Resets the index and updates the files in the working tree that are\ndifferent between <commit> and HEAD , but keeps those which are\ndifferent between the index and working tree (i.e. which have changes\nwhich have not been added).\nIf a file that is different between <commit> and the index has\nunstaged changes, reset is aborted. In other words, --merge does something like a git read-tree -u -m <commit> ,\nbut carries forward unmerged index entries. --keep Resets index entries and updates files in the working tree that are\ndifferent between <commit> and HEAD .\nIf a file that is different between <commit> and HEAD has local\nchanges, reset is aborted. --[no-]recurse-submodules When the working tree is updated, using --recurse-submodules will\nalso recursively reset the working tree of all active submodules\naccording to the commit recorded in the superproject, also setting\nthe submodules' HEAD to be detached at that commit."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  --ignore-space-at-eol"}, {"role": "assistant", "content": "Ignore changes in whitespace at EOL."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff HEAD"}, {"role": "assistant", "content": "compares a (c)ommit and the (w)ork tree;"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "ORIG_HEAD, FETCH_HEAD, MERGE_HEAD etc\nThere's a lot of useful git references (what is the exact name for this?), e.g. HEAD, ORIG_HEAD, FETCH_HEAD, MERGE_HEAD, @{upstream} etc.\nIs there any reference for this? A complete list with explanations?"}, {"role": "assistant", "content": "git help revisions brings up http://git-scm.com/docs/gitrevisions, which describes all the the most common ways to reference commits:\n\nHEAD names the commit on which you based the changes in the working tree.\nFETCH_HEAD records the branch which you fetched from a remote repository with your last git fetch invocation.\nORIG_HEAD is created by commands that move your HEAD in a drastic way, to record the position of the HEAD before their operation, so that you can easily change the tip of the branch back to the state before you ran them.\nMERGE_HEAD records the commit(s) which you are merging into your branch when you run git merge.\nCHERRY_PICK_HEAD records the commit which you are cherry-picking when you run git cherry-pick.\n\nFrom the git source, you can also find out about BISECT_HEAD, REVERT_HEAD, REJECT_NON_FF_HEAD and several others that you will almost certainly never need.\nThat reference also explains suffixes (^N, ~N, @{...}), ranges (.. vs ...), and more."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Undoing a 'git push'\nHere's what I did on my supposed-to-be-stable branch...\n% git rebase master\nFirst, rewinding head to replay your work on top of it...\nFast-forwarded alpha-0.3.0 to master.\n% git status\n# On branch alpha-0.3.0\n# Your branch is ahead of 'origin/alpha-0.3.0' by 53 commits.\n#\nnothing to commit (working directory clean)\n% git push\nFetching remote heads...\n  refs/\n  refs/heads/\n  refs/tags/\n  refs/remotes/\n'refs/heads/master': up-to-date\nupdating 'refs/heads/alpha-0.3.0'\n  from cc4b63bebb6e6dd04407f8788938244b78c50285\n  to   83c9191dea88d146400853af5eb7555f252001b0\n    done\n'refs/heads/unstable': up-to-date\nUpdating remote server info\n\nThat was all a mistake as I later realized. I'd like to undo this entire process, and revert the alpha-0.3.0 branch back to what it was.\nWhat should I do?"}, {"role": "assistant", "content": "You need to make sure that no other users of this repository are fetching the incorrect changes or trying to build on top of the commits that you want removed because you are about to rewind history.\nThen you need to 'force' push the old reference.\ngit push -f origin last_known_good_commit:branch_name\n\nor in your case\ngit push -f origin cc4b63bebb6:alpha-0.3.0\n\nYou may have receive.denyNonFastForwards set on the remote repository. If this is the case, then you will get an error which includes the phrase [remote rejected].\nIn this scenario, you will have to delete and recreate the branch.\ngit push origin :alpha-0.3.0\ngit push origin cc4b63bebb6:refs/heads/alpha-0.3.0\n\nIf this doesn't work - perhaps because you have receive.denyDeletes set, then you have to have direct access to the repository. In the remote repository, you then have to do something like the following plumbing command.\ngit update-ref refs/heads/alpha-0.3.0 cc4b63bebb6 83c9191dea8"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  --left-right"}, {"role": "assistant", "content": "Mark which side of a symmetric difference a commit is reachable from.\nCommits from the left side are prefixed with < and those from\nthe right with > .  If combined with --boundary , those\ncommits are prefixed with - . For example, if you have this topology: y---b---b  branch B\n\t    / \\ /\n\t   /   .\n\t  /   / \\\n\t o---x---a---a  branch A you would get an output like this: $ git rev-list --left-right --boundary --pretty=oneline A...B\n\n\t>bbbbbbb... 3rd on b\n\t>bbbbbbb... 2nd on b\n\t<aaaaaaa... 3rd on a\n\t<aaaaaaa... 2nd on a\n\t-yyyyyyy... 1st on b\n\t-xxxxxxx... 1st on a"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %e"}, {"role": "assistant", "content": "encoding"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fast-import - Backend for fast Git data importers  --cat-blob-fd=<fd>"}, {"role": "assistant", "content": "Write responses to get-mark , cat-blob , and ls queries to the\nfile descriptor <fd> instead of stdout .  Allows progress output intended for the end-user to be separated from other\noutput."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Why is .gitignore not ignoring my files?\nSee the image below. My .gitignore file should be ignoring all files in src/dist, but isn't."}, {"role": "assistant", "content": ".gitignore only ignores files that are not part of the repository yet.  If you already git added some files, their changes will still be tracked.\nTo remove those files from your repository (but not from your file system) use git rm --cached on them."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-read-tree - Reads tree information into the index"}, {"role": "assistant", "content": "DESCRIPTION Reads the tree information given by <tree-ish> into the index,\nbut does not actually update any of the files it \"caches\". (see: git-checkout-index ) Optionally, it can merge a tree into the index, perform a\nfast-forward (i.e. 2-way) merge, or a 3-way merge, with the -m flag.  When used with -m , the -u flag causes it to also update\nthe files in the work tree with the result of the merge. Only trivial merges are done by git read-tree itself.  Only conflicting paths\nwill be in an unmerged state when git read-tree returns."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-clone - Clone a repository into a new directory  -v  --verbose"}, {"role": "assistant", "content": "Run verbosely. Does not affect the reporting of progress status\nto the standard error stream."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Gitlab 'fatal: repository '...' not found' - unable to push to a newly created project\n\nCan anyone spot what  I could possibly be doing wrong? You can browser zoom in to see image details. \nThis is a fresh account, new project, owner of group and I am simply unable to push (HTTPS) following instructions provided."}, {"role": "assistant", "content": "When adding the remote URL to the initial configuration, instead of using the URL that Gitlab gives you, try adding the following URL instead and replace the details below as mentioned, to reflect your info & your project info:\nREMOTE URL FORMAT:\nhttps://YOUR_USER_NAME:[email\u00a0protected]/YOUR_USER_NAME/YOUR_PROJECT_NAME.git/\n\nREPLACEMENTS IN THE ABOVE URL:\nYOUR_USER_NAME - Replace this with your gitlab username\nPASSWORD - Replace this with your gitlab password\nYOUR_PROJECT_NAME - Replace this with your gitlab project name (whatever is generated for you)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  We assume the following in /etc/services"}, {"role": "assistant", "content": "$ grep 9418 /etc/services\ngit\t\t9418/tcp\t\t# Git Version Control System"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git log --full-diff, what does it do?\nThe git-log documentation explains the parameter --full-diff.\nIn detail:\n\nWithout this flag, git log -p ... shows commits that touch the specified paths, and diffs about the same specified paths. With this, the full diff is shown for commits that touch the specified paths; this means that \"\u2026\u200b\" limits only commits, and doesn\u2019t limit diff for those commits.\nNote that this affects all diff-based output types, e.g. those produced by --stat, etc.\n\nI've no idea what it tries to explain, can someone give me an example maybe."}, {"role": "assistant", "content": "Sure. Let's say you have a commit C that makes changes to file A and file B.\nRegular git log -p -- A will show all commits that touch file A, and for those commits, it'll show the diffs to A.\nWith --full-diff, it'll show the same commits, but for each commit it'll show the  diff of all files changed in that commit. In this case, commit C's diff will show diffs for files A and B."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Want to change my master to an older commit, how can I do this?\nI want to rollback to a previous commit, and then publish that code, then go back to the latest commit.\ni.e. so my master is pointing to an older commit version just so I can pulish that version, then I want to go back to the latest commit I was one initially.\nHow can I do this?"}, {"role": "assistant", "content": "If you want to do this and revert the master to the previous commit:\ngit checkout master~1            # Checkout previous commit on master\ngit checkout -b new_master       # Create branch for new master\ngit branch -D master             # Delete old master\ngit branch -mv new_master master # Make new_master master\n\nAlternatively:\ngit reset --hard master~1        # Reset current branch to one commit ago on master"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a URL query string for searching own GitHub Gists?\n\nIs there a URL query string for searching only own GitHub Gists? I wouldn't care if it only worked with public Gists.\nThe only thing I could find is the URL for searching all public Gists, but that's not very helpful for finding own Gists\nhttps://gist.github.com/search?q=hello+world\n\nUltimate goal: quickly searching for own Gists via launcher tools (in my case Alfred) or Chrome search engine shortcuts."}, {"role": "assistant", "content": "Try searching with user:<username> hello world. E.g.\nhttps://gist.github.com/search?q=user%3Adefunkt+hello+world"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "\"git pull --rebase\" leads to \"Cannot rebase onto multiple branches\"\n\nSo, my work environment has precisely one branch with a remote companion on Github.  I'm trying to do git pull --rebase in order to prevent git push from creating merge commit messages that don't provide new information to others working on this project and just gum up the works.  But when I try that, it gives me this:\nFrom https://github.com/our_profile/our_repository\n * branch            HEAD        -> FETCH_HEAD\nCannot rebase onto multiple branches\n\nAnd the pull aborts. Calling git branch informs me that I have only one branch on my local machine, so what's going on?"}, {"role": "assistant", "content": "Try specifying exactly what remote branch you want to pull:\ngit pull --rebase origin branch\n\nAlternatively you can also git fetch all changes from the remote repository first, and then rebase manually:\ngit rebase origin/branch"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Where are git-lfs files stored?\nI am trying to figure out how to use git-lfs. I use a gitlab EE server.\nMaybe I missed something, but I failed to find any documentation on git-lfs beyond very short tutorial introducing the \"track\" command and cute 1 minute videos.\nFor example, I add and track a 3.7GB tar file in a repo, and push it:\ngit lfs track \"*.tar\"\ncp <a folder>/a.tar .\ngit add a.tar \ngit commit -m \"add a.tar\"\ngit push origin master\n\nQuestion 1: at the end of this process, has a.tar been uploaded on the gitlab server ? It is unclear as the \"add\" and the \"commit\" commands took some time (maybe not long enough to let me wonder if the 3.7GB were uploaded during that time) but the push did not take any time at all (a fraction of second).\nQuestion 2: if the file was uploaded on the server, where ? Obviously not in the same place as the repo (that is the point). I asked because my server is being backed-up, and I need to know if the use of git-lfs requires me to update this in any way.\nQuestion 3: if the file was not uploaded, does this mean other users of the repo will get the link to the file on the original machine on which the file was added ? Is there a way to change this to a location on the server ? (back to question 2)\nQuestion 4: after cloning the repo, indeed the full 3.4G file is not there, \"just\" a text file with the content:\nversion https://git-lfs.github.com/spec/v1\noid sha256:4bd049d85f06029d28bd94eae6da2b6eb69c0b2d25bac8c30ac1b156672c4082\nsize 3771098624\n\nThis is of course awesome and the whole point. But what if access to the full file is required ? how to download it ?\nI would be happy with either direct answer to this question or a link toward a proper documentation."}, {"role": "assistant", "content": "Answer 1\nAs explained in this video (at 1:27), when you push a file tracked by git lfs it is intercepted and placed on a different server, leaving a pointer in your git repository. As you see in the reference you provide in Question 4, this worked for you.\nAnswer 2\nThis is a bit more tricky. Reading the documentation for git lfs smudge, we have:\n\nRead a Git LFS pointer file from standard input and write the contents\n  of the corresponding large file to standard output.  If needed,\n  download the file's contents from the Git LFS endpoint.  The \n  argument, if provided, is only used for a progress bar.\n\nThe git lfs endpoint can be found from the output of git lfs env. My \"endpoint\" is a folder under (but not in) my repository, which makes me think that GitLab creates a git repository on the server in our account space to store binary files.\nThat said, I don't know how you'd go about backing this up. GitHub provides a git lfs server that's \"not in a production ready state,\" so it'd require some work on your part to set it up such that your binary files are uploaded to a server you administer. If backing up these files is a priority and you don't want to use one of the implementations (Amazon S3, etc), you might try another binary file storage system that works with git, such as git-media, git-annex, git-fat, git-bigstore.... I haven't looked into these options in depth, so couldn't make a recommendation.\nAnswer 3\nIf the file was not uploaded using git lfs it would have been pushed using git and you'd have a binary file in your git repository. But, yours was uploaded using git lfs as you say in Question 4.\nAnswer 4\nOther users of your repository, after having installed git lfs on their local machines, can simply type git lfs pull to bring in the binary file(s) that you pushed using git lfs."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a way to create a folder-specific readme file in github?\n\nGithub parses and displays a readme.txt or readme.md file at the root of the repository.\nI would like to create a similar readme file for a particular folder. Is there a way to accomplish this?\nOne ugly hack I thought of was to name the file _readmeme.md causing it to appear as the first file in the folder, and making it easy for users to find and click it. - it doesn't work, _README appears last and not first."}, {"role": "assistant", "content": "GitHub already has this feature.  Just put your README file in a subdirectory, and it will be displayed just like one in the root directory.\nFor example, see README.md for this subdirectory:\nhttp://github.com/larsbrinkhoff/lbForth/tree/master/targets"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Syntax for Git aliases with multiple commands [duplicate]\nThis question already has answers here:\n                                \n                            \n\n\n\n\nGit Alias - Multiple Commands and Parameters\n\n                                (13 answers)\n                            \n\nClosed 2 years ago.\n\n\n\nI want to create a Git alias to perform multiple commands, but I cant find documentation on how this is done.\n\nWhat is the syntax for Git aliases with multiple commands? \nWhere is this documented?\n\nFrom 'man git-config'\n\n   alias.*\n\nCommand aliases for the git(1) command wrapper - e.g. after defining \"alias.last = cat-file commit HEAD\", the invocation \"git\n  last\" is equivalent to \"git cat-file commit HEAD\". To avoid confusion\n  and\n             troubles with script usage, aliases that hide existing Git commands are ignored. Arguments are split by spaces, the usual shell\n  quoting and escaping is supported. quote pair and a backslash can be\n  used\n             to quote them.\nIf the alias expansion is prefixed with an exclamation point, it will be treated as a shell command. For example, defining\n  \"alias.new = !gitk --all --not ORIG_HEAD\", the invocation \"git new\" is\n             equivalent to running the shell command \"gitk --all --not ORIG_HEAD\". Note that shell commands will be executed from the\n  top-level directory of a repository, which may not necessarily be the\n  current\n             directory.  GIT_PREFIX is set as returned by running git rev-parse --show-prefix from the original current directory. See\n  git-rev-parse(1)."}, {"role": "assistant", "content": "$ git config alias.q '!echo a; echo b'\n\n$ git q\n\nOutput:\na\nb\n\nI think this is (rudimentarily) documented in man git-config under alias.*\nNote that git commands should include git, unlike in normal aliases. It is caused by fact that it is treated as a shell command, not as a git command (see manpage quoted in the question). For example to chain\ngit init\n\nand\ngit commit --allow-empty -m \"empty initial commit\"\n\nit is necessary to create \n\"!git init; git commit --allow-empty -m \\\"empty initial commit\\\"\"\n\nalias."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to show uncommitted changes in Git and some Git diffs in detail\nHow do I show uncommitted changes in Git?\nI STFW'ed, and these commands are not working:\nteyan@TEYAN-THINK MINGW64 /d/nano/repos/PSTools/psservice (teyan/psservice)\n$ git status\nOn branch teyan/psservice\nYour branch is up-to-date with 'origin/teyan/psservice'.\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        modified:   psservice.c\n        modified:   psservice.vcxproj.filters\n\n\nteyan@TEYAN-THINK MINGW64 /d/nano/repos/PSTools/psservice (teyan/psservice)\n$ git diff\n\nteyan@TEYAN-THINK MINGW64 /d/nano/repos/PSTools/psservice (teyan/psservice)\n$ git diff master\nfatal: ambiguous argument 'master': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]'"}, {"role": "assistant", "content": "How to show uncommitted changes in Git\n\nThe command you are looking for is git diff.\n\ngit diff - Show changes between commits, commit and working tree, etc\n\n\nHere are some of the options it expose which you can use\ngit diff (no parameters)\nPrint out differences between your working directory and the index.\ngit diff --cached:\nPrint out differences between the index and HEAD (current commit).\ngit diff HEAD:\nPrint out differences between your working directory and the HEAD.\ngit diff --name-only\nShow only names of changed files.\ngit diff --name-status\nShow only names and status of changed files.\ngit diff --color-words\nWord by word diff instead of line by line.\nHere is a sample of the output for git diff --color-words:"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git blame committed line\nIs it possible somehow for GIT to find which commit introduced a specific line of code in a specific file? This is assuming that there have been many commits since that line was added. Or is this something that must be done in a script while looking at the git blame of all the commits for the file in which the line is present?\nTo clarify\nOriginal file->Line Added to file and committed -> Many other commits adding other lines and changing the code"}, {"role": "assistant", "content": "You can use git blame -l filename to get the SHA1 hash from when the line was changed.\nYou also can use --reverse:\n\n--reverse\nWalk history forward instead of backward. Instead of showing the revision in which a line appeared, this shows the last revision in which a line has existed. This requires a range of revision like START..END where the path to blame exists in START.\n\nSee: http://www.kernel.org/pub/software/scm/git/docs/git-blame.html"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What is the difference between push.default \"matching\" and \"simple\"\nI have been using Git for a while now, but I have never had to set up a new remote repo myself, and I have been curious to do so. I have been reading tutorials and I am confused on how to get git push to work.\nIf I simply use git push, it asks me to see up a \"default branch\" to point to. What is the difference between these two options it supplies me with?\ngit config --global push.default matching\ngit config --global push.default simple\n\nThe matching option just pushes whatever branches I have on my local repo, and if they don't match I have to then manually tell it to push whatever new local branches I have, correct? Is this best practice to use or is simple best?"}, {"role": "assistant", "content": "git push can push all branches or a single one dependent on this configuration:\nPush all branches\ngit config --global push.default matching\n\nIt will push all the branches to the remote branch and would merge them.\nIf you don't want to push all branches, you can push the current branch if you fully specify its name, but this is much is not different from default.\nPush only the current branch if its named upstream is identical\ngit config --global push.default simple\n\nSo, it's better, in my opinion, to use this option and push your code branch by branch. It's better to push branches manually and individually."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What happens if you force push to a branch with an existing pull request?\n\nI am working on a git branch that is currently part of a closed pull request on github. Subsequently to the initial pull request, I made some additional commits, pushed those commits to github, and then reverted those commits and recommitted them because I need to revise the commits. \nNow if I want to push those commits to github, I'll need to issue a force push: git push --force. But I have the strong feeling that this might cause mayhem with the existing pull request, even though the changed commits occurred after the commits that existed prior to me making the pull request.\nCan anyone describe to me how best to handle this situation? I think I may need to just create an entirely new branch and then issue a pull request on that branch instead. But if there's a way to link this to the existing pull request that would be preferable."}, {"role": "assistant", "content": "If my memory serves me correctly, then if you force push or update the branch in question in any way, GitHub will automatically update the pull request.  If doing the force push would result in the pull request not being possible, then GitHub will tell you this.\nYou do not need to worry about updating the pull request as GitHub will take care of this for you.\nThis being said, doing a git push --force on any remote branch can cause mayhem for your coworkers who are also currently working on this branch.  So you are correct to be shying away from doing a force push, but fortunately a GitHub pull request is not your biggest problem."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-push - Update remote refs along with associated objects  push.negotiate"}, {"role": "assistant", "content": "If set to \"true\", attempt to reduce the size of the packfile\nsent by rounds of negotiation in which the client and the\nserver attempt to find commits in common. If \"false\", Git will\nrely solely on the server\u2019s ref advertisement to find commits\nin common."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Commit a file to a Different Branch Without Checkout\nIs it possible to commit a file in a git branch without checking out that branch? If so how?\nEssentially I want to be able to save a file in my github pages branch without switching branches all the time. Any thoughts?\nI needed to do this atomically without changing the current directory, so multiple commands won't work, even if they can be used as a one liner. Otherwise, you can end up with race conditions.\nUpdate: It's impossible to do what I want (see comments below for use case). I ended up programmatically cloning my current directory to a tmp directory, then checking out my branch in that tmp directory (doesn't affect my working directory) and committing my files to the tmp directory clone. When I'm done, I push back to my working directory and delete the tmp directory. Sucks, but it's the only way to commit files to another branch without changing the current working branch of the working directory. If anyone has a better solution, please feel free to add it below. I'll accept yours if it's better than 'it cannot be done'.\nUpdate update: For full details of why I asked to be able to do this 11 years ago and why I wanted it to be atomic see this repo https://github.com/schneems/git_test. Back in the day we didn't have CI services. Developers at the company I worked for were expected to run tests locally, but not everyone did it. The idea behind that project was to track test run history. This would allow you to see which commit tests (or if they weren't run at all).\nCI now handles this functionality but since I asked an \"impossible question\", I'm always curious if there is an answer."}, {"role": "assistant", "content": "It's not possible.\nThe changes you commit are related to the current working copy. If you want to commit to another branch it means that you could commit changes from your working copy, but base them from another copy state. \nThis is not a natural way of versioning your work, and this is why you need to make different steps (stash changes, checkout the branch, pop stash and commit) to accomplish it.\nAs for your specific use case, a simple way is to keep two copies of your work, one checked out at master branch, and the other at pages branch. \nIn the pages working copy, add the master copy as a remote repo.\n\nYou commit pages on master\nPull from master on the pages copy\npush to GitHub\nreset the master branch at its previous state."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-fetch - Download objects and refs from another repository  --[no-]write-fetch-head"}, {"role": "assistant", "content": "Write the list of remote refs fetched in the FETCH_HEAD file directly under $GIT_DIR .  This is the default.\nPassing --no-write-fetch-head from the command line tells\nGit not to write the file.  Under --dry-run option, the\nfile is never written."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git - the stupid content tracker  git-clone"}, {"role": "assistant", "content": "Clone a repository into a new directory"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-add - Add file contents to the index  revert"}, {"role": "assistant", "content": "This has a very similar UI to update , and the staged\ninformation for selected paths are reverted to that of the\nHEAD version.  Reverting new paths makes them untracked."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to Run Terminal as Administrator on Mac Pro\nI am using a Mac for the first time and need to run Terminal as an admin. I have installed NodeJs and Git and want to download Phone Gap/Corova but when I try to install Cordova, it comes back with an error saying I should be an admin when running the terminal. How do I open a command prompt in terminal as an admin to the Mac Pro?"}, {"role": "assistant", "content": "This is not Windows, you do not \"run the Terminal as admin\". What you do is you run commands in the terminal as admin, typically using sudo:\n$ sudo some command here"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Gitlab CI - How to trigger a build only if changes happen on particular set of files\n\nIn Gitlab CI, how do you trigger a build only if changes happen on particular set of files?\nIs there a way to either include or exclude certain files from triggering a build? For eg: updating README.md, .gitignore files should not cause a build to trigger."}, {"role": "assistant", "content": "UPDATE 2\nOnly/except seem to be an unstable feature. The doc recommends using rules:changes instead:\njob:\n  script:\n    - build # replace with your build command\n  rules:\n    - changes:\n      - /*.{java, py} # ... or whatever your file extension is\n      - dockerfiles/**/* # all files under folder 'dockerfiles'\n\nUPDATE 1:\nLike Gajus mentioned in the comments, it is now possible!\nMerge Request: https://gitlab.com/gitlab-org/gitlab-ce/merge_requests/21981\nDocumentation: https://docs.gitlab.com/ee/ci/yaml/#onlyexcept-basic (Thanks to Connor Shea for the tip in the comments)\nOriginal post:\nNo, it is not possible \u2013 not now!\nI think this is the issue you are looking for: https://gitlab.com/gitlab-org/gitlab-ce/issues/19232 \u2013 It is a very high rated issue (over 100 thumps-up).\nThe milestone has changed to Next 3-6 months, 4 months ago. (https://gitlab.com/gitlab-org/gitlab-ce/issues/19232#note_31943850)\nI hope we will see this function soon."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-mergetool - Run merge conflict resolution tools to resolve merge conflicts  --prompt"}, {"role": "assistant", "content": "Prompt before each invocation of the merge resolution program\nto give the user a chance to skip the path."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-commit - Record changes to the repository  -c <commit>  --reedit-message=<commit>"}, {"role": "assistant", "content": "Like -C , but with -c the editor is invoked, so that\nthe user can further edit the commit message."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "What algorithm does git use to detect changes on your working tree?\nThis is about the internals of git.\nI've been reading the great 'Pro Git' book and learning a little about how git is working internally (all about the SHA1, blobs, references, trees, commits, etc, etc). Pretty clever architecture, by the way.\nSo, to put into context, git references the content of a file as a SHA1 value, so it's able to know if a specific content has changed just comparing the hash values. But my question is specifically about how git checks that the content in the working tree has changed or not.\nThe naive approach will be thinking that each time you run a command as git status or similar command, it will search through all the files on the working directory, calculating the SHA1 and comparing it with the one that has the last commit. But that seems very inefficient for big projects, as the Linux kernel.\nAnother idea could be to check last modification date on the file, but I think git is not storing that information (when you clone a repository, all the files have a new time)\nI'm sure it's doing it in an efficient way (git is really fast), does anyone know how that is achieved?\nPD: Just to add an interesting link about the git index, specifically stating that the index keeps information about files timestamps, even when the tree objects do not."}, {"role": "assistant", "content": "Git\u2019s index maintains timestamps of when git last wrote each file into the working tree (and updates these whenever files are cached from the working tree or from a commit). You can see the metadata with git ls-files --debug. In addition to the timestamp, it records the size, inode, and other information from lstat to reduce the chance of a false positive.\nWhen you perform git-status, it simply calls lstat on every file in the working tree and compares the metadata in order to quickly determine which files are unchanged. This is described in the documentation under racy-git and update-index."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-rev-list - Lists commit objects in reverse chronological order  %cd"}, {"role": "assistant", "content": "committer date (format respects --date= option)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "gittutorial - A tutorial introduction to Git"}, {"role": "assistant", "content": "Importing a new project Assume you have a tarball project.tar.gz with your initial work.  You\ncan place it under Git revision control as follows. $ tar xzf project.tar.gz\n$ cd project\n$ git init Git will reply Initialized empty Git repository in .git/ You\u2019ve now initialized the working directory\u2014\u200byou may notice a new\ndirectory created, named .git . Next, tell Git to take a snapshot of the contents of all files under the\ncurrent directory (note the . ), with git add : $ git add . This snapshot is now stored in a temporary staging area which Git calls\nthe \"index\".  You can permanently store the contents of the index in the\nrepository with git commit : $ git commit This will prompt you for a commit message.  You\u2019ve now stored the first\nversion of your project in Git."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  log.graphColors"}, {"role": "assistant", "content": "A list of colors, separated by commas, that can be used to draw\nhistory lines in git log --graph ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  maintenance.incremental-repack.auto"}, {"role": "assistant", "content": "This integer config option controls how often the incremental-repack task should be run as part of git maintenance run --auto . If zero,\nthen the incremental-repack task will not run with the --auto option. A negative value will force the task to run every time.\nOtherwise, a positive value implies the command should run when the\nnumber of pack-files not in the multi-pack-index is at least the value\nof maintenance.incremental-repack.auto . The default value is 10."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  git diff [<options>] [--] [<path>\u2026\u200b]"}, {"role": "assistant", "content": "This form is to view the changes you made relative to\nthe index (staging area for the next commit).  In other\nwords, the differences are what you could tell Git to\nfurther add to the index but you still haven\u2019t.  You can\nstage these changes by using git-add ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a way to lock individual files or directories on fork when using git?\nWe are a team of 60+ developers working on the same product and are moving from SVN to Git and GitHub. We have a process in SVN where in individual files are locked and whenever a developer wants to commit code, he needs to get it unlocked by the owner of the file. Three of us are the owners of the total 150+ files. The unlocking is preceded by a code review. \nIn Github, we are planning to use the Fork-Clone model - each project a group of dev is working on will do a fork, each developer will do a clone of the fork, write the code & commit to origin, the lead of the feature will do a pull request to upstream.\nThough this seems fine, the problem is when a big project gets delivered, it brings in lots of changes for review and hence, increases the load for the file owners. Also, this might happen in the later cycles of development and hence the project might be jeopardized.\nOne method we thought might work is to have hooks when the git push is done to the origin (fork). There can be one final review git pull to upstream. \nHowever, we could not find any github extensions or push hooks for the same. Is there a quick way (read, existing extension) to do this with Github or should we use the same hooks that we would use with git?"}, {"role": "assistant", "content": "No chance, if file is not mergeable and you need to lock it, use a centralized solution instead of GIT, i.e. SVN or ClearCase."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Dealing with SVN keyword expansion with git-svn\nI recently asked about keyword expansion in Git and I'm willing to accept the design not to really support this idea in Git. \nFor better or worse, the project I'm working on at the moment requires SVN keyword expansion like this:\nsvn propset svn:keywords \"Id\" expl3.dtx\n\nto keep this string up-to-date:\n$Id: expl3.dtx 803 2008-09-11 14:01:58Z will $\n\nBut I would quite like to use Git to do my version control. Unfortunately, git-svn doesn't support this, according to the docs:\n\n\"We ignore all SVN properties except svn:executable\"\n\nBut it doesn't seem too tricky to have this keyword stuff emulated by a couple of pre/post commit hooks. Am I the first person to want this? Does anyone have some code to do this?"}, {"role": "assistant", "content": "What's going on here: Git is optimized to switch between branches as quickly as possible. In particular, git checkout is designed to not touch any files that are identical in both branches.\nUnfortunately, RCS keyword substitution breaks this. For example, using $Date$ would  require git checkout to touch every file in the tree when switching branches. For a repository the size of the Linux kernel, this would bring everything to a screeching halt.\nIn general, your best bet is to tag at least one version:\n$ git tag v0.5.whatever\n\n...and then call the following command from your Makefile:\n$ git describe --tags\nv0.5.15.1-6-g61cde1d\n\nHere, git is telling me that I'm working on an anonymous version 6 commits past v0.5.15.1, with an SHA1 hash beginning with g61cde1d. If you stick the output of this command into a *.h file somewhere, you're in business, and will have no problem linking the released software back to the source code. This is the preferred way of doing things.\nIf you can't possibly avoid using RCS keywords, you may want to start with this explanation by Lars Hjemli. Basically, $Id$ is pretty easy, and you if you're using git archive, you can also use $Format$.\nBut, if you absolutely cannot avoid RCS keywords, the following should get you started:\ngit config filter.rcs-keyword.clean 'perl -pe \"s/\\\\\\$Date[^\\\\\\$]*\\\\\\$/\\\\\\$Date\\\\\\$/\"'\ngit config filter.rcs-keyword.smudge 'perl -pe \"s/\\\\\\$Date[^\\\\\\$]*\\\\\\$/\\\\\\$Date: `date`\\\\\\$/\"'\n\necho '$Date$' > test.html\necho 'test.html filter=rcs-keyword' >> .gitattributes\ngit add test.html .gitattributes\ngit commit -m \"Experimental RCS keyword support for git\"\n\nrm test.html\ngit checkout test.html\ncat test.html\n\nOn my system, I get:\n$Date: Tue Sep 16 10:15:02 EDT 2008$\n\nIf you have trouble getting the shell escapes in the smudge and clean commands to work, just write your own Perl scripts for expanding and removing RCS keywords, respectively, and use those scripts as your filter.\nNote that you really don't want to do this for more files than absolutely necessary, or git will lose most of its speed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is it okay to use GitHub Secrets with a public repo?\n\nI have a private repo with a GitHub Action that pushes the code to an AWS S3 bucket when there's a new push to the master branch. I need a pair of access keys to be able to push the contents and I'm storing them as GitHub Secrets and referencing them as environment variables in the build script. Now I would like to make this repo public in the near future, and I was wondering if it's a safe thing to do. The workflow (.github/workflows/main.yml) itself for the action is indeed publicly visible and what it does, but it only has the single command aws s3 cp myfile s3://my-bucket and absolutely no access keys in the code itself. \nIs it safe to use GitHub Secrets for the Actions in a public repo? I am the sole owner and only contributor, this will not change in the future. I might switch to CodePipeline with a webhook later but wanted to try GitHub Actions first. Thanks."}, {"role": "assistant", "content": "Yes, secrets are safe to use in public repositories but there are some things you should be careful about.\n\nAll secrets are automatically masked in build logs and show as ***. However, if during your workflow you create a sensitive credential from a secret (e.g. base64 an API key) then you should mask the new value so it doesn't leak in the build log.\necho \"::add-mask::My sensitive value\"\n\n\nIf you are very concerned about the security of your secrets, I would also suggest not using third party GitHub actions directly by following the action's tags or branches. Fork the action and use your fork in workflows. This will prevent the possibility of someone modifying an action you are using to capture secrets being used by the action, and send them to some external server under their control.\nAlternatively, use the action directly and reference the commit hash for the version you want to target.\n- uses: thirdparty/foo-action@172ec762f2ac8e050062398456fccd30444f8f30\n\n\nUse two-factor authentication (2FA) on your account. If your account is compromised, it's trivial for an attacker to create a workflow and export your secrets.\n\nRepository collaborators or any organization users with write access are able to create a workflow to export secrets. So manage access to your repository carefully.\n\n\nPoints related to pull requests:\n\nPublic repository pull_request events triggered by forks do not have access to secrets, except for the default GITHUB_TOKEN. Additionally, The GITHUB_TOKEN has read-only access when an event is triggered by a forked repository. These are intentional restrictions enforced by GitHub Actions to prevent an attacker creating a pull request containing a workflow that captures secrets, or uses secrets to perform operations.\nThe pull_request_target event does not have secret restrictions for events triggered by forks. By default it checks out the last commit on the base branch, but it is possible to checkout the pull request HEAD. Choosing to do this requires extreme caution. Passing secrets to any code that could be modified in a pull request could allow an attacker to write code to export secrets."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Gitlab CI - find the pipeline variables used\n\nWhen you run a pipeline from the Gitlab UI, you are open to add variables to the run:\n\n\n\nFrom the overview of finished pipelines, is there a way to find the set variables and values of specific runs?"}, {"role": "assistant", "content": "As far as I know, these are one time variables you set by running a pipeline manually. You cannot view the the variables in the UI. Instead, like @Origin said you can echo the variable in the job.\nexample:\nscript:\n    - '& echo \"$MY_VARIABLE\"'\n\nI would recommend you to save your variables in the default CI/CD Settings. (Settings -> CI/CD -> Variables). There you can set, save, protect (from other user roles) and view them for sure. These variables will be used in any pipeline run you do."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How can I change the remote/target repository URL on Windows? [duplicate]\n\nThis question already has answers here:\n                                \n                            \n\n\n\n\nHow do I change the URI (URL) for a remote Git repository?\n\n                                (34 answers)\n                            \n\nClosed 10 years ago.\n\n\n\nI created a local GIT repository on Windows. Let's call it AAA. I staged, committed, and pushed the contents to GitHub. [email\u00a0protected]:username/AAA.git \nI realized I made a mistake with the name.\nOn GitHub, I renamed it to [email\u00a0protected]:username/BBB.git \nNow, on my Windows machine, I need to change [email\u00a0protected]:username/AAA.git to [email\u00a0protected]:username/BBB.git because the settings are still trying to \"push\" to [email\u00a0protected]:username/AAA.git but I need to push to [email\u00a0protected]:username/BBB.git now.\nHow could I do that?"}, {"role": "assistant", "content": "git remote set-url origin <URL>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git : fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists\n\nI am getting this error - \nD:\\Projects\\wamp\\www\\REPO [master]> git pull origin master\nWarning: Permanently added 'github.com,192.30.252.128' (RSA) to the list of known hosts.\nERROR: Repository not found.\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n\nThe output of git remote -v\nD:\\Projects\\wamp\\www\\REPO [master]> git remote -v\norigin  [email\u00a0protected]:username/repo.git (fetch)\norigin  [email\u00a0protected]:username/repo.git (push)\n\nFinal message of ssh -Tv [email\u00a0protected] command - \nHi [My Username]! You've successfully authenticated, but GitHub does not provide shell access.\n\nHow can I solve it?"}, {"role": "assistant", "content": "change your ssh url by an http url for your remote 'origin', use:\n> git remote set-url origin https://github.com/<user_name>/<repo_name>.git\n\nIt will ask for your GitHub password on the git push."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "'git diff' between a remote and local repository\nI am trying to diff my local file with a GitHub repository before I submit a pull request, so I can see what will show up. Is there an accurate way of doing this?\nI assume GitHub's compare tool manipulates Git's diff."}, {"role": "assistant", "content": "To compare a local working directory against a remote branch, for example origin/master:\n\ngit fetch origin master\nThis tells git to fetch the branch named 'master' from the remote named 'origin'.   git fetch will not affect the files in your working directory; it does not try to merge changes like git pull does. \ngit diff --summary FETCH_HEAD\nWhen the remote branch is fetched, it can be referenced locally via FETCH_HEAD.  The command above tells git to diff the working directory files against  FETCHed branch's HEAD and report the results in summary format. Summary format gives an overview of the changes, usually a good way to start. If you want a bit more info, use --stat instead of --summary. \ngit diff FETCH_HEAD -- mydir/myfile.js\nIf you want to see changes to a specific file, for example myfile.js, skip the --summary option and reference the file you want (or tree).\n\nAs noted, origin references the remote repository and master references the branch within that repo.  By default, git uses the name origin for a remote, so if you do git clone <url> it will by default call that remote origin.  Use git remote -v to see what origin points to.\nYou may have more than one remote.  For example, if you \"fork\" a project on GitHub, you typically need a remote referencing the original project as well as your own fork.  Say you create https://github.com/yourusername/someproject as a fork of https://github.com/theoriginal/someproject.  By convention, you would name the remote to the original repo upstream, while your own fork would be origin.  If you make changes to your fork on GitHub and want to fetch those changes locally, you would use git fetch origin master. If the upstream has made changes that you need to sync locally before making more changes, you would use git fetch upstream master."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Adding Tags to a Pull Request\n\nI have a repo iontech/Anagen forked from agiliq/Anagen\nI made a few commits to my fork and added a tag. Then I opened a Pull Request. This Pull Request includes only my commits.\nHow do I include the tag I've created into the Pull Request?"}, {"role": "assistant", "content": "How do I include the tag I've created into the Pull Request?\n\nYou can't. A pull request does not include tags. A pull request is only a pointer to a thread of commits (a branch) in your repository that you're proposing another repository to merge.\nIf you want to notify the upstream repository that a tag should be created, maybe should you add a comment to the pull request explaining this."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Git log output log file\nI am doing an assignment in a university course and I am using Git as version control for this assignment. The game I have been working on is complete. However, along with the hand in I would like to submit the Git log, effectively showing my progress during the time I have been working on it.\nI have tried this:\ngit log --stat > log.log\n\nBut it more or less just gives me very unreadable stuff. What is a command so that I can get a nice formatting on this?"}, {"role": "assistant", "content": "I would recommend using a different format than the default. My usual choice is a summary with the graph, but a one-line summary alone usually does the trick.\nOption 1: One-line summary with a graph\ngit log --pretty=format:'%h : %s' --graph > log.log\n\nResults in:\n* 2d3acf9 : ignore errors from SIGCHLD on trap\n*   5e3ee11 : Merge branch 'master' of git://github.com/dustin/grit\n|\\\n| * 420eac9 : Added a method for getting the current branch.\n* | 30e367c : timeout code and tests\n* | 5a09431 : add timeout protection to grit\n* | e1193f8 : support for heads with slashes in them\n|/\n* d6016bc : require time for xmlschema\n\nOption 2: One-line summary without a graph\ngit log --pretty=format:'%h was %an, %ar, message: %s' > log.log\n\nResults in:\na6b444f was Scott Chacon, 5 days ago, message: dammit, this is the second time this has re\n49d77f7 was Scott Chacon, 8 days ago, message: modified index to create refs/heads if it i\n9764edd was Hans Engel, 11 days ago, message: Add diff-lcs dependency\ne1ba1e3 was Hans Engel, 11 days ago, message: Add dependency for Open4\n0f87b4d was Scott Chacon, 12 days ago, message: merged recent changes\n\nYou can find more formatting options in the documentation here."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Can I create a github repository named the same as one that existed but was deleted?\n\nThrough the github web interface I created a new repository. I forgot to chose some options at creation time and thought I'd delete the new, empty repository and start again.\nI deleted the repository but now cannot create a new repository with the same name as one that was deleted. I get a 'Name already exists on this account' error when I try.\nI don't know if this is a permanent matter (i.e. I can never create a new repository named the same as one that has been deleted) or just a temporary matter perhaps due to some information being cached which will later be cleared.\nCan I create a github repository named the same as one that existed but was deleted?"}, {"role": "assistant", "content": "You certainly should be able to create a new one with the same name. I'm fairly sure I've done this before.\nI'd leave it for 5/10 minutes and try again if I were you."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  versionsort.prereleaseSuffix (deprecated)"}, {"role": "assistant", "content": "Deprecated alias for versionsort.suffix .  Ignored if versionsort.suffix is set."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index"}, {"role": "assistant", "content": "other diff formats The --summary option describes newly added, deleted, renamed and\ncopied files.  The --stat option adds diffstat(1) graph to the\noutput.  These options can be combined with other options, such as -p , and are meant for human consumption. When showing a change that involves a rename or a copy, --stat output\nformats the pathnames compactly by combining common prefix and suffix of\nthe pathnames.  For example, a change that moves arch/i386/Makefile to arch/x86/Makefile while modifying 4 lines will be shown like this: arch/{i386 => x86}/Makefile    |   4 +-- The --numstat option gives the diffstat(1) information but is designed\nfor easier machine consumption.  An entry in --numstat output looks\nlike this: 1\t2\tREADME\n3\t1\tarch/{i386 => x86}/Makefile That is, from left to right: the number of added lines; a tab; the number of deleted lines; a tab; pathname (possibly with rename/copy information); a newline. When -z output option is in effect, the output is formatted this way: 1\t2\tREADME NUL\n3\t1\tNUL arch/i386/Makefile NUL arch/x86/Makefile NUL That is: the number of added lines; a tab; the number of deleted lines; a tab; a NUL (only exists if renamed/copied); pathname in preimage; a NUL (only exists if renamed/copied); pathname in postimage (only exists if renamed/copied); a NUL. The extra NUL before the preimage path in renamed case is to allow\nscripts that read the output to tell if the current record being read is\na single-path record or a rename/copy record without reading ahead.\nAfter reading added and deleted lines, reading up to NUL would yield\nthe pathname, but if that is NUL , the record will show two paths."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I execute several git commands in a batch file without terminating after the first command?\nI tried to put a series of GIT commands that I always use continuously togeter as batch files so that I don't repeat myself too much. For example, I have this batch file called update_repo_branch.bat to update a local repo and synch a branch with the remote branch:  \n\n@echo off\n  if(%1) == () goto end\n  if(%2) == () goto end\n  cd %1\n  git checkout %2\n  git fetch origin\n  git merge oring/%2\n  :end\n\nGood to be lazy, but what I found is that when a GIT command is finished, it seems to send an exit flag back to terminate whatever is running. Therefore, using a batch file to exectute them all in one go simply doesn't work. Any idea how to work around it?"}, {"role": "assistant", "content": "I'm not sure if this is true for all Windows git packages, but at least some use a git.cmd script as a wrapper around the actual git executables (for example git.exe). So when you're batch file uses a git command, Windows is actually running another batch file.\nUnfortunately, when one batch file invokes another, by default it 'jumps' to the invoked batch file, never to return (this is for compatibility with ancient MS-DOS command processors or something).\nYou can solve this problem in a couple ways:\n\ninvoke git in your batch files using the call command to run the git.cmd batch file and return back to yours:\ncall git checkout %2\ncall git fetch origin\nrem etc...\n\ninvoke git in your batch file using the .exe extension explicitly to avoid the git.cmd batch file altogether. For this to work, you might need to make sure that you have your path and other environment variables set the way git.exe expects (that seems to be what git.cmd does in msysgit):\ngit.exe checkout %2\nrem etc..."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-log - Show commit logs  -I<regex>  --ignore-matching-lines=<regex>"}, {"role": "assistant", "content": "Ignore changes whose all lines match <regex>.  This option may\nbe specified more than once."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff - Show changes between commits, commit and working tree, etc  diff.interHunkContext"}, {"role": "assistant", "content": "Show the context between diff hunks, up to the specified number\nof lines, thereby fusing the hunks that are close to each other.\nThis value serves as the default for the --inter-hunk-context command line option."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-bisect - Use binary search to find the commit that introduced a bug"}, {"role": "assistant", "content": "SYNOPSIS git bisect <subcommand> <options>"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "On GitHub, can I fork just a wiki?\n\nIf I fork repository joe/foo, and it has a Wiki, I won't get the wiki. Right now I'm just interested in forking the wiki to add pages to it.\n\nIs that possible without forking the repository?\nIf not, is it possible at all?"}, {"role": "assistant", "content": "In June 2019, here's how I did that:\n\nFork a repo. The wiki is not forked automatically. So your fork will have empty wiki.\nCreate a wiki in the forked repo. Just create an empty Home page or whatever.\nClone the git repo of original wiki: git clone https://github.com/org-a/project-x.wiki.git\nAssuming your forked repo now sits in https://github.com/org-b/project-x, add the new remote to the wiki repo: git remote add fork https://github.com/org-b/project-x.wiki.git\nDo the force push to overwrite your wiki with the original git push -f fork master\n\nGreat. Now you have forked a repo and its wiki.\n(By the way, Github should do this automatically, right?)"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  log.initialDecorationSet"}, {"role": "assistant", "content": "By default, git log only shows decorations for certain known ref\nnamespaces. If all is specified, then show all refs as\ndecorations."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Is there a way to \"autosign\" commits in Git with a GPG key?\nIs there an easy way to make Git always signs each commit or tag that is created?\nI tried it with something like:\nalias commit = commit -S\nBut that didn't do the trick.\nI don't want to install a different program to make this happen. Is it doable with ease?\nJust a side question, maybe commits shouldn't be signed, only tags, which I never create, as I submit single commits for a project like Homebrew, etc."}, {"role": "assistant", "content": "Note: if you don't want to add -S all the time to make sure your commits are signed, there is a proposal (branch 'pu' for now, December 2013, so no guarantee it will make it to a git release) to add a config which will take care of that option for you.\nUpdate May 2014: it is in Git 2.0 (after being resend in this patch series)\nSee commit 2af2ef3 by Nicolas Vigier (boklm):\nAdd the commit.gpgsign option to sign all commits\n\nIf you want to GPG sign all your commits, you have to add the -S option all the time.\nThe commit.gpgsign config option allows to sign all commits automatically.\n\ncommit.gpgsign\n\n\nA boolean to specify whether all commits should be GPG signed.\nUse of this option when doing operations such as rebase can result in a large number of commits being signed. It may be convenient to use an agent to avoid typing your GPG passphrase several times.\n\n\nThat config is usually set per repo (you don't need to sign your private experimental local repos):\ncd /path/to/repo/needing/gpg/signature\ngit config commit.gpgsign true\n\nYou would combine that with user.signingKey used as a global setting (unique key used for all repo where you want to sign commit)\ngit config --global user.signingkey F2C7AB29!\n                                           ^^^\n\nAs ubombi suggests in the comments (and explain in \"GPG Hardware Key and Git Signing\", based on \"How to Specify a User Id\")\n\nWhen using gpg an exclamation mark (!) may be appended to force using the specified primary or secondary key, and not to try and calculate which primary or secondary key to use.\n\nNote that Rik adds in the comments:\n\nIf you're using something like a YubiKey (as recommended) you don't need to worry about the exclamation point because the only signing key(s) you should have available for a primary key-pair are:\n\nthe primary key itself, which should have a # after it indicating it's not available,\nand the secret subkey with a > after it indicating it's a stub that points to the YubiKey as the only available signing key in its applet.\n\nOnly if you keep all your private keys available on your system (bad practice), then probably it would be a good idea to prevent auto-selection between available signing keys\n\n\nuser.signingKey was introduced in git 1.5.0 (Jan. 2007) with commit d67778e:\n\nThere shouldn't be a requirement that I use the same form of my name in\nmy git repository and my gpg key.\nFurther I might have multiple keys in my keyring, and might want to use one that doesn't match up with the address I use in commit messages.\n\n\nThis patch adds a configuration entry \"user.signingKey\" which, if present, will be passed to the \"-u\" switch for gpg, allowing the tag signing key to be overridden.\n\nThis is enforced with commit aba9119 (git 1.5.3.2) in order to catch the case where If the user has misconfigured user.signingKey in their .git/config or just doesn't have any secret keys on their keyring.\nNotes:\n\nBy convention, since git 2.4.0 March 2015, it is signingKey, not signingkey, even though the git config keys are case insensitive. That would matter only if you do git config --get-regexp, which is case sensitive, otherwise, it is only a readability convention;\nIf you want the git server to check the signature for each push, you will need git 2.2+ (Oct. 2014) at least (commit b945901), as git push --signed failed to consider the user.signingKey config value;\ngit 2.9 (June 2016) will use user.signingKey to force signing annotated tags as well as commits: commit 61c2fe0."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-cat-file - Provide contents or details of repository objects  deltabase"}, {"role": "assistant", "content": "If the object is stored as a delta on-disk, this expands to the\nfull hex representation of the delta base object name.\nOtherwise, expands to the null OID (all zeroes). See CAVEATS below."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How to push changes to github after jenkins build completes?\n\nI have a jenkins job that clones the repository from github, then runs the powershell script that increments the version number in the file. I'm now trying to publish that update file back to the original repository on github, so when developer pulls the changes he gets the latest version number.\nI tried using Git Publisher in the post build events, and I can publish tags with no issues, but it doesn't seem to publish any files."}, {"role": "assistant", "content": "The git checkout master of the answer by Woland isn't needed. Instead use the \"Checkout to specific local branch\" in the \"Additional Behaviors\" section to set the \"Branch name\" to master.\nThe git commit -am \"blah\" is still needed.\nNow you can use the \"Git Publisher\" under \"Post-build Actions\" to push the changes.  Be sure to specify the \"Branches\" to push (\"Branch to push\" = master, \"Target remote name\" = origin).\n\"Merge Results\" isn't needed."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-daemon - A really simple server for Git repositories  --user-path  --user-path=<path>"}, {"role": "assistant", "content": "Allow ~user notation to be used in requests.  When\nspecified with no parameter, a request to\ngit://host/~alice/foo is taken as a request to access foo repository in the home directory of user alice .\nIf --user-path=<path> is specified, the same request is\ntaken as a request to access <path>/foo repository in\nthe home directory of user alice ."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Which files in .idea folder should be tracked by Git?\nUnlike Netbeans, in Jetbrains IDEs, the setting files related to user and team are mixed in the same folder that makes it tricky when you need to push them to git.\nThere is a number of sample git ignore files for these IDEs and https://intellij-support.jetbrains.com/hc/articles/206544839 page on git site.\nHowever, after using them for a months we figure out that it is safer and actually more convenient to do the reverse. I mean ignoring all .idea files and adding only team-related settings explicitly. (instead of adding all and ignoring some).\nThe main thing that can be shared among developers is code style configs. So, by using IDE auto-reformatting option all the team will follow a consistent style.\nBesides that, the question is which other files are recommended to be included and not ignored? Why?\nAnswer: I came across with this: https://github.com/salarmehr/idea-gitignore"}, {"role": "assistant", "content": "Jetbrains has some official guidance on which files should not be checked in, and which files should probably not be checked in, depending on your usage. According to that page, you should check in all files in the .idea directory except:\n\nworkspace.xml\ntasks.xml\n\nAnd probably also:\n\nthe xml files in the dictionary subdirectory\n\nWhile the particular answer may depend on your team's particular practices, in my experience, following that guidance generally results in correct separation of user settings and shared project configuration.\nSome examples of files that should be shared, according to this guidance:\n\nant.xml, which, if you use Ant to build your project, points IDEA to your build files and configures properties that should be used to build.\nvcs.xml, which specifies the Version Control configuration for your project\nencodings.xml, which specifies how IDEA should treat the text files in your project\nmodules.xml, which points IDEA to each of your project's module configuration files, which should also be shared in your VCS.\nall files under the runConfigurations subdirectory, which tells IDEA what it needs to do to run your application\ncodeStyleSettings.xml, which, as you have alluded to, puts your whole team on the same page in terms of automatic code formatting\n\nDepending on your team's usage, there may be more or less, but those are some of the biggest examples."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-diff-index - Compare a tree to the working tree or index  no"}, {"role": "assistant", "content": "Moved lines are not highlighted."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git ignore all files except one extension and folder structure\nWhat I want is to ignore all kind of files except the .php ones, but with this .gitignore I'm also ignoring folders...\n#ignore all kind of files\n*\n#except php files\n!*.php\n\nIs there a way to tell git to accept my project folder structure while keeping the track only of the .php files?\nIt seems like now I can't add folders to my repo:\nvivo@vivoPC:~/workspace/motor$ git add my_folder/\nThe following paths are ignored by one of your .gitignore files:\nmy_folder\nUse -f if you really want to add them.\nfatal: no files added"}, {"role": "assistant", "content": "This is simple, just add another entry !my_folder in your .gitignore\n#ignore all kind of files\n*\n#except php files\n!*.php\n!my_folder\n\nThe last line will take special care of my_folder, and will not ignore any php files within it; but files within other folders will still be ignored because of the first pattern of *.\nEDIT\nI think I misread your question. If you want to ignore all files except .php files, you can use\n#ignore all kind of files\n*.*\n#except php files\n!*.php\n\nThis will not ignore any file which doesn't have an extension (example: if you have README and not README.txt ), and will ignore any folder with a . in its name (example: directory named module.1).\nFWIW, git doesn't track directories, and hence there is no way to specify ignore rules for directory vs file"}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-config - Get and set repository or global options  diff.noPrefix"}, {"role": "assistant", "content": "If set, git diff does not show any source or destination prefix."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "git-apply - Apply a patch to files and/or to the index  -v  --verbose"}, {"role": "assistant", "content": "Report progress to stderr. By default, only a message about the\ncurrent patch being applied will be printed. This option will cause\nadditional information to be reported."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "github: server certificate verification failed\n\nI just created a github account and a repository therein, but when trying to create a local working copy using the recommende url via\ngit clone https://github.com/<user>/<project>.git\n\nI get an error like\n\nfatal: unable to access 'https://github.com/<user>/<project>.git': server certificate verification failed. CAfile: /home/<user>/.ssl/trusted.pem CRLfile: none\n\nI'm on Debian Jessie, and I would have expected both Debian and GitHub to provide / rely on a selection of commonly accepted CAs, but apparently my system doesn't trust GibHub's certificate.\nAny simple way to fix this (without the frequently recommended \"GIT_SSL_NO_VERIFY=true\" hack and similar work-arounds)?\nEDIT:\nAdditional information:\n\nThe ca-certificate package is installed.\n\nInstalling cacert.org's certificates as\nsuggested by @VonC didn't change anything.\n\nMy personal ~/.ssl/trusted.pem file does contain a couple of entries, but to be\nhonest, I don't remember where the added certificates came from...\n\nWhen removing ~/.ssl/trusted.pem, the git error message changes to\n fatal: unable to access 'https://github.com/tcrass/scans2jpg.git/': Problem with the SSL CA cert (path? access rights?)"}, {"role": "assistant", "content": "2016: Make sure first that you have certificates installed on your Debian in /etc/ssl/certs.\nIf not, reinstall them:\nsudo apt-get install --reinstall ca-certificates\n\nSince that package does not include root certificates, add:\nsudo mkdir /usr/local/share/ca-certificates/cacert.org\nsudo wget -P /usr/local/share/ca-certificates/cacert.org http://www.cacert.org/certs/root.crt http://www.cacert.org/certs/class3.crt\nsudo update-ca-certificates\n\nMake sure your git does reference those CA:\ngit config --global http.sslCAinfo /etc/ssl/certs/ca-certificates.crt\n\n\nJason C mentions another potential cause (in the comments):\n\nIt was the clock. The NTP server was down, the system clock wasn't set properly, I didn't notice or think to check initially, and the incorrect time was causing verification to fail.\n\nCertificates are time-sensitive.\ndopamane confirms in the comments:\n\nThis was the issue for me on WSL.\nRan sudo hwclock -s, and I could successfully clone the submodule.\n\n\n2022: Auspex adds in the comments:\n\nca-certificates does indeed contain root certificates.\nIt doesn't contain the CAcert root certificates.\nThis might have been a good answer 6 1/2 years ago, but those certificates were suspect way back then and haven't improved.\nThere's a reason they're not in the ca-certificates package.\nThese days we have LetsEncrypt, so everyone has certificates with reliable auditing and nobody needs to rely on CAcert."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "How do I ignore an error on 'git pull' about my local changes would be overwritten by merge?\nHow do I ignore the following error message on Git pull?\n\nYour local changes to the following files would be overwritten by merge\n\nWhat if I want to overwrite them?\nI've tried things like git pull -f, but nothing works.\nTo be clear, I only want to overwrite specific changes, not everything."}, {"role": "assistant", "content": "If you want remove all local changes - including files that are untracked by git - from your working copy, simply stash them:\ngit stash push --include-untracked\n\nIf you don't need them anymore, you now can drop that stash:\ngit stash drop\n\nIf you don't want to stash changes that you already staged - e.g. with git add - then add the option --keep-index. Note however, that this will still prevent merging if those staged changes collide with the ones from upstream.\n\nIf you want to overwrite only specific parts of your local changes, there are two possibilities:\n\nCommit everything you don't want to overwrite and use the method above for the rest.\nUse git checkout path/to/file/to/revert for the changes you wish to overwrite. Make sure that file is not staged via git reset HEAD path/to/file/to/revert."}]}
{"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Invoke GitHub Actions workflow manually and pass parameters\n\nI want to pass some dynamic parameters and invoke my GitHub Actions workflow manually (ideally via some API). Is this possible?"}, {"role": "assistant", "content": "With the workflow_dispatch event trigger, you can do the manual triggers easily.\nFlow:\non: \n  workflow_dispatch:\n    inputs:\n      logLevel:\n        description: 'Log level'     \n        required: true\n        default: 'warning'\n      tags:\n        description: 'Test scenario tags'  \n\nManual trigger screenshot:\n\nBlog post announcement reference, https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/"}]}
